@model HIS_MCRS.Areas.ManagementReports.ViewModels.ARSummaryOfAccounts

@using HIS_MCRS.Enumerations
@{
    ViewBag.Title = "AR Reports";
    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    //options.Confirm = "Do you wish to submit this form?";
    options.OnBegin = "_indicator.Body()";
    options.OnComplete = "_indicator.Stop()";
    //options.OnFailure = "OnFailure";
    //options.OnSuccess = "OnSuccess";
    //options.LoadingElementId = "loading";
    options.LoadingElementDuration = 1000;
    options.UpdateTargetId = "reportWrapper";
    options.InsertionMode = InsertionMode.Replace;
}

@using (Ajax.BeginForm(options)){
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="row">
                <div class="col-xs-5">
                    <h4><span class="navbar-header">Monthly Credit Report (SubCategory-Wise) </span></h4>
                </div>
                <div class="navbar-collapse navbar-right">
                    <button id="RunReport" type="submit" class="btn btn-success col" value="RunReport">
                        <span class="glyphicon glyphicon-tasks"></span>Run Report
                    </button>
                    <a id="Close"  href="@Url.Action("Index", "ARReports")" class="btn btn-danger" style="margin-right:15px;">
                        <span class="glyphicon glyphicon-off"></span>Close
                    </a>
                </div>
            </div>
        </div>
        <div class="panel-body" style="height: auto;">
            <div class="form-group">
                <div class="row col-xs-6 border-right push-right5">
                    @Html.LabelFor(m => m.StartDate, new { @class = "col-xs-2 top5" })
                    <div class="col-xs-4">
                        <div class="col-xs-12 input-group">
                            @Html.TextBoxFor(m => m.StartDate, Model.StartDate.ToString("MMM-yyyy"), new
                       {
                           @readonly = true,
                           @class = "datepicker form-control",
                           style = "z-index:0 !important;",
                           data_bind = "datepicker:$root.StartDate, datepickerOptions:{format: 'M-yyyy',startView:'months',minViewMode:'months',autoclose: true}"
                       })
                            <span class="input-group-btn ">
                                <button data-bind="glyphfor:'@Html.IdFor(m => m.StartDate)'" class="btn btn-default glyphicon glyphicon-calendar" type="button" style="margin-top: -1px;"></button>
                            </span>
                        </div>
                    </div>

                    @Html.LabelFor(m => m.EndDate, new { @class = "col-xs-2 top5" })
                    <div class="col-xs-4">
                        <div class="col-xs-12 input-group">
                            @Html.TextBoxFor(m => m.EndDate, Model.EndDate.ToString("MMM-yyyy"), new
                       {
                           @readonly = true,
                           @class = "datepicker form-control endcls",
                           style = "z-index:0 !important;",
                           data_bind = "datepicker:$root.EndDate, datepickerOptions:{format: 'M-yyyy',startView:'months',minViewMode:'months',autoclose: true}"
                       })
                            <span class="input-group-btn ">
                                <button data-bind="glyphfor:'@Html.IdFor(m => m.EndDate)'" class=" endcls btn btn-default glyphicon glyphicon-calendar" type="button" style="margin-top: -1px;"></button>
                            </span>
                        </div>
                    </div>

                    @Html.LabelFor(model=>model.CategoryId, new{@class="col-xs-2 top10"})
                    <div class="col-xs-10 top5">
                        <select class="form-control select2"id="@Html.IdFor(model=>model.CategoryId)" name="@Html.NameFor(model=>model.CategoryId)"
                        data-bind="options: $root.CategoryList, optionsValue:'Id', optionsText:'Name', value: $root.SelectedCategory, select2:{}">
                        </select>

                        @Html.HiddenFor(model => model.Category, new { data_bind = "value:$root.SelectedCategoryText" })
                    </div>
                    @Html.LabelFor(model=>model.CompanyId, new{@class="col-xs-2 top10"})
                    <div class="col-xs-10 top5">
                        <select class="form-control select2"id="@Html.IdFor(model=>model.CompanyId)" name="@Html.NameFor(model=>model.CompanyId)"
                        data-bind="options: $root.CompanyList, 
                                   optionsAfterRender: function(option, item){option.value = item.Id,
                                   option.text = item.Code + '  ' + item.Name} , 
                                   value: $root.SelectedCompany,
                                   select2:{}
                                   ">
                        </select>
                    </div>
                   
                </div>

                <div class="col-xs-6">
                    <div class="col-xs-9 border10">
                        <br />

                        <input class="push-left20" data-val="true" id="yearly" name="reportdetails" type="radio" value="yearly">
                        <label class="push-left10" for="reportdetails">Yearly Report</label>

                        <input checked="checked" class="push-left20" id="monthly" name="reportdetails" type="radio" value="monthly">
                        <label class="push-left10" for="reportdetails">Monthly Report</label>
                    </div>
                </div>
                



                <div id="reportWrapper" class="col-xs-12 top10 container-fluid" style="min-height: 330px; background-color: #6C7A89;"></div>
            </div>
        </div>
    </div>
}

<input id="urlActions" class="hidden"
    data-getcompanybycategory="getCompanyByCategory"
    data-getgradebycompanyid="getGradeByCompanyId" />

@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/Scripts/knockoutjs")
@section Scripts{
    @*<script type="text/javascript" src="~/Scripts/ManagementReports/ARReports/SummaryOfAccounts.js"></script>*@
    <script type="text/javascript">
        $(document).ready(function () {
            var data = '@Html.Raw(Json.Encode(this.Model))';
            var viewModel = new ViewModel(JSON.parse(data), $("#urlActions"));
            ko.applyBindings(viewModel);

            
            $('input[type="radio"]').on('click change', function (e) {

                if ($('#monthly').is(':checked')) {
                    console.log('month');
                    $('.endcls').prop('disabled', false);
                }
                if ($('#yearly').is(':checked')) {
                    console.log('year');
                    $('.endcls').prop('disabled', true);
                }
            });


            $("#EndDate").datepicker()
                .on('changeDate', function (selected) {
                    console.log(selected);
                    var minDate = new Date(selected.date.valueOf());
                    $('#startdate').datepicker('setEndDate', minDate);
                });
            $("#StartDate").datepicker({
                todayBtn: 1,
                autoclose: true,
                onClose: function () { $(this).focus(); }
            }).on('changeDate', function (selected) {
                var minDate = new Date(selected.date.valueOf());
                minDate.setFullYear(minDate.getFullYear() + 1);
                $('#EndDate').datepicker('setStartDate', new Date(selected.date.valueOf()));
                $('#EndDate').datepicker('setEndDate', minDate);
            });



        });
        function ViewModel(SummaryOfAccounts, elem) {
            model = SummaryOfAccounts
            self = this;
            self.inputUrlActions = elem;
            self.StartDate = ko.observable(new Date(moment(model.StartDate)));
            self.EndDate = ko.observable(new Date(moment(model.EndDate)));

            self.CategoryList = ko.observableArray(model.CategoryList);
            self.SubCategoryList = ko.observableArray(model.SubCategoryList);
            self.CompanyList = ko.observableArray([]);
            self.GradeList = ko.observableArray([]);

            self.Type = ko.observable(model.Type)
            self.BankDetails = ko.observable(model.BankDetails)

            self.SelectedCategory = ko.observable(self.CategoryList()[0].Id);
            self.SelectedCategoryText = ko.observable(self.CategoryList()[0].Name);
            self.SelectedSubCategory = ko.observable(0);
            self.SelectedSubCategoryText = ko.observable('ALL');
            self.SelectedCompany = ko.observable();
            self.SelectedGrade = ko.observable();

            self.init = function () {
                self.SubCategoryList().unshift({ Id: 0, Name: 'ALL' });
                self.getCompanyByCategory();
                self.GradeList.push({ Id: 0, Name: "ALL" });
            }

            self.getCompanyByCategory = function () {
                self.CompanyList([]);

                url = self.inputUrlActions.data("getcompanybycategory");

                param = { categoryId: self.SelectedCategory() };

                ajaxWrapper.GetWithLoading(url, param, $("#s2id_CompanyId"), function (data, e) {
                    var defaultValue = { Id: 0, Code: "", Name: "ALL" };
                    self.CompanyList.push(defaultValue);
                    for (i = 0; i < data.length; i++) {
                        self.CompanyList.push({ Id: data[i].Id, Code: data[i].Code, Name: data[i].Name });
                    };
                });
            }

            self.getGradeByCompanyId = function () {

                var testt = self.SelectedCompany();
                if (self.SelectedCompany() != undefined) {
                    self.GradeList.removeAll();
                    url = self.inputUrlActions.data("getgradebycompanyid");
                    var id = self.SelectedCompany().Id;
                    param = { companyId: id };

                    ajaxWrapper.GetWithLoading(url, param, $("#s2id_GradeId"), function (data, e) {

                        var defaultValue = { Id: 0, Name: "ALL" };

                        ko.utils.arrayPushAll(self.GradeList, data);
                        self.GradeList.unshift(defaultValue);
                        self.SelectedGrade(0);
                    });
                }
            }
            self.init();

            self.SelectedCategory.subscribe(function (newValue) {
                self.getCompanyByCategory();
                if (newValue) {
                    $.each(self.CategoryList(), function (i, item) {
                        if (item.Id == newValue) {
                            self.SelectedCategoryText(item.Name);
                        }
                    });
                }
            });

            self.SelectedCompany.subscribe(function () {
                self.getGradeByCompanyId();
            });

            self.SelectedSubCategory.subscribe(function (newValue) {

                if (newValue) {
                    $.each(self.SubCategoryList(), function (i, item) {
                        if (item.Id === newValue) {
                            self.SelectedSubCategoryText(item.Name);
                        }
                    });
                } else {
                    self.SelectedSubCategoryText("ALL");
                }

            });

            self.EnableType = function () {

                if (self.SelectedCategory() == 23 || self.SelectedCategory() == 24 || self.SelectedCategory() == 70) {
                    return true;
                } else {
                    return false;
                }
            };
        }

    </script>
}
