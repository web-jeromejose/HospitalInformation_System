@model HIS_MCRS.Areas.ManagementReports.ViewModels.ARCancelledServices

@{
    ViewBag.Title = "AR Reports";
   AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    //options.Confirm = "Do you wish to submit this form?";
    options.OnBegin = "_indicator.Body()";
    options.OnComplete = "_indicator.Stop()";
    //options.OnFailure = "OnFailure";
    //options.OnSuccess = "OnSuccess";
    //options.LoadingElementId = "loading";
    options.LoadingElementDuration = 1000;
    options.UpdateTargetId = "reportWrapper";
    options.InsertionMode = InsertionMode.Replace;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="row">
            <div class="col-xs-5">
                <h4><span class="navbar-header">OP Bill (PIN Wise)</span></h4>
            </div>
            <div class="navbar-collapse navbar-right">
            </div>
        </div>
    </div>

    @using(Ajax.BeginForm(options)){
        <div class="panel-body">

            <div class=" col-xs-12">
                <div class="col-xs-6 ">
                    <div class="col-xs-12 border10">

                        @Html.LabelFor(m => m.CategoryId, new { @class = "col-xs-3 top5" })
                        <div class="col-xs-9">
                            <select id="@Html.IdFor(m=>m.CategoryId)" name="@Html.NameFor(m=>m.CategoryId)" class="form-control"
                                data-bind="options:$root.CategoryList ,optionsAfterRender: function(option, item){option.value = item.Id, option.text = item.Code + (item.Id > 0?' - ':'') + item.Name} , 
                                           value: $root.SelectedCategoryId, select2:{}">
                            </select>
                            @Html.HiddenFor(m=>m.CategoryText, new {data_bind="value:$root.SelectedCategoryText"})
                        </div>
                        @Html.LabelFor(m => m.CompanyId, new { @class = "col-xs-3 top10" })
                        <div class="col-xs-9 top5">
                            <select id="@Html.IdFor(m=>m.CompanyId)" name="@Html.NameFor(m=>m.CompanyId)" class="form-control"
                                data-bind="options:$root.CompanyList ,optionsText:'Name',optionsValue:'Id', 
                                           value: $root.SelectedCompanyId, select2:{maximumSelectionLength: 3}">
                            </select>
                        </div>

                        <label class="col-xs-3 top10">PIN</label>
                      
                        <div class="col-xs-9 top5">
                           @Html.TextBox("PIN", null, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-4">
                    <div class="col-xs-12 border10">
                        @Html.Label("Report Date Range (Bill Date)", new { @class = "col-xs-12" })
                        @Html.LabelFor(m => m.StartDate, new { @class = "col-xs-2" })

                        <div class="col-xs-10">

                            <div class="input-group">
                                @Html.TextBoxFor(m => m.StartDate,Model.StartDate.ToString("dd-MMM-yyyy"), new { @readonly=true, @class = "datepicker form-control", style = "z-index:0 !important;", 
                                                                    data_bind="datepicker:$root.StartDate, datepickerOptions:{format: 'dd-M-yyyy', autoclose: true}" })
                                <span class="input-group-btn ">
                                    <button data-bind="glyphfor:'StartDate'" class="btn btn-default glyphicon glyphicon-calendar" type="button" style="margin-top: -1px;"></button>
                                </span>
                            </div>

                        </div>
                        @Html.LabelFor(m => m.EndDate, new { @class = "col-xs-2 top10" })
                        <div class="col-xs-10 top5">
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.EndDate,Model.StartDate.ToString("dd-MMM-yyyy"), new {@readonly=true, @class = "datepicker form-control ", style = "z-index:0 !important;",
                                                                  data_bind="datepicker:$root.EndDate, datepickerOptions:{format: 'dd-M-yyyy', autoclose: true}"})
                                <span class="input-group-btn">
                                    <button data-bind="glyphfor:'EndDate'" class="btn btn-default glyphicon glyphicon-calendar" type="button" style="margin-top: -1px;"></button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-2 top10">
                    <div class="pull-right col-xs-10 top10">
                        <button id="RunReport" type="submit" class="btn btn-success col-xs-12" value="RunReport">
                            <span class="glyphicon glyphicon-tasks"></span>Run Report
                        </button>
                        <a id="Close"  href="@Url.Action("Index", "ARReports")" class="top5 btn btn-danger col-xs-12">
                            <span class="glyphicon glyphicon-off"></span>Close
                        </a>

                    </div>
                </div>
            </div>

            <div id="reportWrapper" class="container-fluid" style="margin-top: 11%;" />


        </div>
    }
</div>

<input id="urlInput" class="hidden" data-getcompanybycategory="@Url.Action("getCompanyByCategory")" />

@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/Scripts/knockoutjs")
@section Scripts{
    <script type="text/javascript" src="~/Scripts/MCRS/global/dialogwrapper.js"></script>
    @*<script type="text/javascript" src="~/Scripts/ManagementReports/ARReports/CancelledServices.js"></script>*@
    <script type="text/javascript">
        var viewModel = ""
        $(document).ready(function () {
            var data = '@Html.Raw(Json.Encode(this.Model))';
            viewModel = new ViewModel(JSON.parse(data),$("#urlInput"));
            ko.applyBindings(viewModel);


            $("#PIN").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A, Command+A
                    (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                    (e.keyCode >= 35 && e.keyCode <= 40)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

        });

        function ViewModel(model, urlActions) {

            self = this;
            self.URIs = urlActions;
            self.StartDate = ko.observable(new Date(moment(model.StartDate)));
            self.EndDate = ko.observable(new Date(moment(model.EndDate)));

            self.CategoryList = ko.observableArray(model.CategoryList);
            self.CompanyList = ko.observableArray();
           // self.PatientTypeList = ko.observableArray(model.PatientTypeList);

            self.SelectedCategoryId = ko.observable(self.CategoryList()[0].Id);
           // self.SelectedPatientTypeValue = ko.observable(self.PatientTypeList()[0].Key);
            self.SelectedCompanyId = ko.observable();

            self.SelectedCategoryText = ko.observable(self.CategoryList()[0].Name)
            //self.SelectedPatientTypeText = ko.observable(self.PatientTypeList()[0].Value)

            self.SelectedCategoryId.subscribe(function (value) {

                if (value) {

                    $.each(self.CategoryList(), function (index, item) {

                        if (item.Id == value.Id) {
                            self.SelectedCategoryText(item.Name);
                        }
                    });

                    self.GetCompanies();
                }

            });

            //self.SelectedPatientTypeValue.subscribe(function (value) {

            //    if (value) {

            //        $.each(self.PatientTypeList(), function (index, item) {

            //            if (item.Key == value) {
            //                self.SelectedPatientTypeText(item.Value);
            //            }
            //        });
            //    }

            //});

            self.GetCompanies = function () {
                self.CompanyList([]);

                url = self.URIs.data("getcompanybycategory");

                param = {
                    categoryId: self.SelectedCategoryId().Id
                }

                ajaxWrapper.PostWithLoading(url, param, $("#CompanyId"), function (data, e) {

                    self.CompanyList.push({ Id: 0, Name: "ALL" });
                    ko.utils.arrayPushAll(self.CompanyList, data);

                });

            };

            self.init = function () {
                self.CategoryList().unshift({ Id: 0, Code: '', Name: "ALL" });
            }
            self.init();
        }
    </script>
}


