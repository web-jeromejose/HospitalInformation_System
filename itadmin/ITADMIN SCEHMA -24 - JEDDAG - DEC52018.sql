USE [HIS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AccessCancelApproval_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AccessCancelApproval_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AccessOPRevisitApproval_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AccessOPRevisitApproval_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[Anesthesia_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[Anesthesia_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[Anesthesia_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AnesthesiaCharges_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_SCS_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AnesthesiaCharges_SCS_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AnesthesiaCharges_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaView_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AnesthesiaView_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AsstSurgeon_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AsstSurgeon_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AsstSurgeon_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeonCharge_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[AsstSurgeonCharge_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[BedType]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BedType]
GO

/****** Object:  StoredProcedure [ITADMIN].[BEdType_DashBoard]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BEdType_DashBoard]
GO

/****** Object:  StoredProcedure [ITADMIN].[BedType_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BedType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[BedType_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BedType_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BillPrefix_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BillPrefix_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[BillPrefix_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillMapping_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CancelBillMapping_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CancelBillReason_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CancelBillReason_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CancelBillReason_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelDepositSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CancelDepositSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDepartment_DashBoardDept_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CashDiscountDepartment_DashBoardDept_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDeptWise_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CashDiscountDeptWise_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDeptWiseItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CashDiscountDeptWiseItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDisplayTable_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CashDiscountDisplayTable_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountServices_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CashDiscountServices_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[CategoryStation_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CategoryStation_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CathLab_DashBoardSCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CathLab_DashBoardSCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CathProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CathProcedure_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CathProcedure_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CathProcedure_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CatProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CatProcedure_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeCSTPrice_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ChangeCSTPrice_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeItemCST_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ChangeItemCST_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeTransferDepositTypeSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ChangeTransferDepositTypeSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[City_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[City_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[City_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[City_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[City_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[City_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CompanyLevelMarkupSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CompanyLevelMarkupSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ComputeItemPrice]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ComputeItemPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice_SCSNEW]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[ComputeItemPrice_SCSNEW]
GO

/****** Object:  StoredProcedure [ITADMIN].[CopyIPTariffSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CopyIPTariffSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CopyOPTariffSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CopyOPTariffSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CreateTransOrder_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CreateTransOrder_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSSItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSSItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSSItemZeroPrice_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSSItemZeroPrice_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTBedTypeMarkUP_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSTBedTypeMarkUP_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTMarkUP_RangeMarkup]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSTMarkUP_RangeMarkup]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTZeroPrice_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSTZeroPrice_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTZeroPrice_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CSTZeroPrice_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimePharmacySave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CutOffTimePharmacySave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimePharmcyView_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CutOffTimePharmcyView_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimeRoomView_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[CutOffTimeRoomView_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DeptLvlMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DeptLvlMarkup_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DiscountTypeList_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DiscountTypeList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DiscounType_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DiscounType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Doctor_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[Doctor_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorMappingSelectedList_View_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorMappingSelectedList_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionistMappingSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorReceptionistMappingSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionMapping_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorReceptionMapping_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionMappingView_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorReceptionMappingView_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpecializationMapping_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorSpecializationMapping_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpecializationMappingSave_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorSpecializationMappingSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpeMapping_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorSpeMapping_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DUMP_DiscounType_Save_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[DUMP_DiscounType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[EmpAuthorityDiscount_Save]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[EmpAuthorityDiscount_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[EmployeeDiscountAutho_DashBoard_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[EmployeeDiscountAutho_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[EmployeeDiscountAutho_EmpAuthority_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[EmployeeDiscountAutho_EmpAuthority_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureList_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[FeatureList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureListNew_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[FeatureListNew_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureListSelected_SCS]    Script Date: 12/5/2018 1:39:23 PM ******/
DROP PROCEDURE [ITADMIN].[FeatureListSelected_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchCancelDepositInformation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchCancelDepositInformation_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchCancelPatientInformation_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchCancelPatientInformation_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientInformation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchPatientInformation_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientInformation_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchPatientInformation_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientOrder_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchPatientOrder_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchUserInfor_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FetchUserInfor_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FunctionList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListNew_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FunctionListNew_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListSelected_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FunctionListSelected_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListTest_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FunctionListTest_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GenCashierTransType_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GenCashierTransType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GenCashierTransType_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[get_cacellation_type_details]
GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[get_cacellation_type_details_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[get_cacellation_type_details_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetDefaultCashMarkUp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetDefaultCashMarkUp_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetDoctorList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetDoctorList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetMaxRangeMarkUp_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUpNewParam_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetMaxRangeMarkUpNewParam_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUpParam_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetMaxRangeMarkUpParam_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetPatientAdmission_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetPatientAdmission_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetUserInfo_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HC_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HC_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HCListItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HCListItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Holding_Store_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Holding_Store_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HoldingStoreSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HoldingStoreSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HoldingSubStoreSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HoldingSubStoreSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HomeCareProcess_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HomeCareProcess_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[INP_WIFI_GETCODES]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[INP_WIFI_GETCODES]
GO

/****** Object:  StoredProcedure [ITADMIN].[INP_WIFI_UPLOADCODES]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[INP_WIFI_UPLOADCODES]
GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItem_MarkUp_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[InvetoryItem_MarkUp_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkup_SAVE_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[InvetoryItemMarkup_SAVE_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkup_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[InvetoryItemMarkup_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkUp_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[InvetoryItemMarkUp_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IORCharge_SAVE_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IORCharge_SAVE_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPCashMarkUpConfig_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPCashMarkUpConfig_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPCashMarkUpConfigDashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPCashMarkUpConfigDashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUP_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPOPMarkUP_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUp_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPOPMarkUp_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUp_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPOPMarkUp_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPPharmacyService_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPPharmacyService_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPPharmacyServices_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPPharmacyServices_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPService_Get_All_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPService_Get_All_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariffSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariffSave_SCS_Test]
GO

/****** Object:  StoredProcedure [ITADMIN].[ITEMCODE_AsstSurgeon_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ITEMCODE_AsstSurgeon_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ITEMCODE_PatientPreparationFee_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ITEMCODE_PatientPreparationFee_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ItemCode_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ItemCode_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ItemMapping_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ItemMapping_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[LaubdryItem_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[LaubdryItem_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[LaundryItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[LaundryItem_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[LaundryItem_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Location_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Location_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Location_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Location_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Location_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Location_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MachineList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MachineList]
GO

/****** Object:  StoredProcedure [ITADMIN].[MachineListSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MachineListSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[MachineProcedureModalityList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MachineProcedureModalityList]
GO

/****** Object:  StoredProcedure [ITADMIN].[MapOtherProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MapOtherProcedure_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MapOtherProcedure_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MapOtherProcedure_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedDoctor_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MappingCombinedDoctor_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedDoctorSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MappingCombinedDoctorSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedSelectedDoctor_DetailsView_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MappingCombinedSelectedDoctor_DetailsView_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedSelectedDoctor_HeaderView_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MappingCombinedSelectedDoctor_HeaderView_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MarckupBedType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MarckupBedType_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Marital_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Marital_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Marital_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MenuSync]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MenuSync]
GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Nationality_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Nationality_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Nationality_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NonDiscountableItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NonDiscountableItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NonDiscountItemSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NonDiscountItemSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminisProced_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NursingAdminisProced_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdministration_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NursingAdministration_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminProced_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NursingAdminProced_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Occupation_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Occupation_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Occupation_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPDiscountApprovals_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPDiscountApprovals_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPDoctorClinic_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPDoctorClinic_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPIPView_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPIPView_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPModifyPackageSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPModifyPackageSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OpPackage_DashBoardTest_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OpPackage_DashBoardTest_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OpPackage_DashBoardTProcedure_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OpPackage_DashBoardTProcedure_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_DashBoardSCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPRevisitDays_DashBoardSCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPRevisitDays_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPRevisitDays_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPService_Get_All_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPService_Get_All_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPServiceTariff_Get_All_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPServiceTariff_Get_All_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPTariffSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ORCharges_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ORCharges_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OREmployeeType_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OREmployeeType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OREmployeeType_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Organisation_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Organisation_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Organisation_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Organisation_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ORSurgery_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ORSurgery_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherPackageProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OtherPackageProcedure_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProced_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OtherProced_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProced_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OtherProced_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OtherProcedure_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OTNurseAdministration_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OTNurseAdministration_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OTNurseAdministration_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OTNurseAdministration_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OTNursingAdministration_SAVE_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OTNursingAdministration_SAVE_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PackageVisit_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_DashBoard_SCS_New]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PackageVisit_DashBoard_SCS_New]
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_FetchDetails]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PackageVisit_FetchDetails]
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PackageVisit_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PackageVisit_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PatientCancelOrder_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PatientCancelOrder_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PatientOrder_Dashboard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PatientOrder_Dashboard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelDaysSetup_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PharmacyCancelDaysSetup_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelDaysSetup_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PharmacyCancelDaysSetup_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelSetUp_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PharmacyCancelSetUp_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PTProcedure_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PTProcedure_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PTProcedure_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[RangeMarkup_AddItem]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[RangeMarkup_AddItem]
GO

/****** Object:  StoredProcedure [ITADMIN].[RangeMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[RangeMarkup_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[RecoveryRoomDetails_SAVE_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[RecoveryRoomDetails_SAVE_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Relataionship_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Relataionship_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Relationship_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Relationship_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Relationship_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Relationship_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[RelationshipSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[RelationshipSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseOrderDrug_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseOrderDrug_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Religion_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Religion_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Religion_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReRouteOrder_SAVE_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReRouteOrder_SAVE_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReRoutingOrders_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReRoutingOrders_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_CancelBillReason_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_CancelBillReason_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Category_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_Category_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_ChangeType_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_ChangeType_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_CompanyLevel_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_CompanyLevel_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_PinReleaseDrugOrder_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_PinReleaseDrugOrder_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Sample_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_Sample_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2AneschargeServices_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2AneschargeServices_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2CashDiscountDeptWise_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2CashDiscountDeptWise_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2CashDiscountPrice_Class_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2CashDiscountPrice_Class_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2DoctorCode_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2DoctorCode_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2DumpDiscountPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2DumpDiscountPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2EmployeeAuthoDiscount_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2EmployeeAuthoDiscount_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2ForcePatient_BedTransfer]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2ForcePatient_BedTransfer]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2List_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2List_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2RecoveryRoomCharges_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2RecoveryRoomCharges_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2RecoveryRoomOtId_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2RecoveryRoomOtId_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2Service_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2Service_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2StationList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2StationList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SelectedNonDiscountableItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SelectedNonDiscountableItem_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Station]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Station]
GO

/****** Object:  StoredProcedure [ITADMIN].[Station_View]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Station_View]
GO

/****** Object:  StoredProcedure [ITADMIN].[StationDetails_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[StationDetails_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[StationType_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[StationType_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[StationType_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SubStore_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SubStore_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryDetailsView_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgeryDetailsView_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryHeader_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgeryHeader_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryListed_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgeryListed_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgerySave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySelected_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgerySelected_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_All]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Get_All]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_All_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Get_All_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_IPServices_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Get_IPServices_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_Services_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Get_Services_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_GetAllServices]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_GetAllServices]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_CheckIfTableExists]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_CheckIfTableExists]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_NewItemPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_NewItemPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_RevisedByPercent]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_RevisedByPercent]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SaveItemPrice]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_SaveItemPrice]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_SearchItem]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCSNEW]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCSNEW]
GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TARIFF_OP_GetItemList]
GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TARIFF_OP_GetItemList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListNoPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListNoPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_OP_GetServiceDepartments]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_OP_GetServiceDepartments]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_OP_GetServiceDepartments_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_OP_GetServiceDepartments_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCSNew]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Save_SCSNew]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCSOriginal]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Save_SCSOriginal]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Title_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Title_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Title_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInv_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInv_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS_New]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInv_View_SCS_New]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInventorySave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInventorySave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRegistrationSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[UserRegistrationSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRolesSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[UserRolesSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[WardPhar_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WardPhar_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[WardPharmacy_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WardPharmacy_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_DashBoard]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Bed_DashBoard]
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Bed_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_View]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Bed_View]
GO

/****** Object:  StoredProcedure [ITADMIN].[Room_Save_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Room_Save_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Rooms_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Rooms_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Rooms_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Rooms_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CancelOPReceipts_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CancelOPReceipts_View_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_ReceiptMapping_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CancelOPReceipts_ReceiptMapping_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceiptMappingSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CancelOPReceiptMappingSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseEmployeeVacationSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseEmployeeVacationSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseHISEmployeeVacation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseHISEmployeeVacation_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBed_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseBed_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBedClearanceSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseBedClearanceSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AuditTrailAttendance_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[AuditTrailAttendance_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DepartmentAll]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_DepartmentAll]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_EmployeeAll_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_EmployeeAll_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DepartmentAll_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_DepartmentAll_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DailyTimeRecordsInDetails]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[DailyTimeRecordsInDetails]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DoctorMapping_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_DoctorMapping_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorClinicSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[DoctorClinicSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Employee_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_Employee_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[SP_GET_StraightDutyEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SP_GET_StraightDutyEmployee]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Department_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_Department_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AttendanceMonitoring_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[AttendanceMonitoring_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MONTHLYPUNCHINREPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MONTHLYPUNCHINREPORTS_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[AttendanceMonitoring_Descripancy_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[AttendanceMonitoring_Descripancy_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[FinalAttenaftermgrcd_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FinalAttenaftermgrcd_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OrganizationDetails]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OrganizationDetails]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Employee_SCSV2]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2_Employee_SCSV2]
GO

/****** Object:  StoredProcedure [ITADMIN].[OrganizationDetailsV2]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OrganizationDetailsV2]
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminUtilities_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NursingAdminUtilities_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminUtilities_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[NursingAdminUtilities_REPORTS_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTriffPrice_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTriffPrice_REPORTS_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTriffPrice_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPTriffPrice_REPORTS_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[MenuSync_DynamicCreationTable]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MenuSync_DynamicCreationTable]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Backup_nov14-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariffSave_SCS_Backup_nov14-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS_backup_nov14-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPTariffSave_SCS_backup_nov14-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Nov152016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariffSave_SCS_Nov152016]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDeptList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Security_GetDeptList]
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDept]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Security_GetDept]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInventorySave_SCS_nov21-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInventorySave_SCS_nov21-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS_nov21-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TransactionInv_View_SCS_nov21-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDeptListBYROLE]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Security_GetDeptListBYROLE]
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetRoleList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Security_GetRoleList]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_SaveForceInpatientTransferBed]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_SaveForceInpatientTransferBed]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_GetAllInPatient]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_GetAllInPatient]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCSNEW_Dec04-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCSNEW_Dec04-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS-Dec04-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS-Dec04-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS_testJerome]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS_testJerome]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_RoomAndBoard]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_RoomAndBoard]
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_Save_SCS_Dec7-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Bed_Save_SCS_Dec7-2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_MedicalSuperVision]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_MedicalSuperVision]
GO

/****** Object:  StoredProcedure [ITADMIN].[Sync_MMS_ROLES]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Sync_MMS_ROLES]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Dec12_2016_last]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariffSave_SCS_Dec12_2016_last]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_ArDataEod]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_ArDataEod]
GO

/****** Object:  StoredProcedure [ITADMIN].[SecurityAdmin_CopyStationToStation]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SecurityAdmin_CopyStationToStation]
GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS_dec_31_2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS_dec_31_2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS_dec31_2016]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetUserInfo_SCS_dec31_2016]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRegistrationSave_User_Authentication]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[UserRegistrationSave_User_Authentication]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListOPTariff]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListOPTariff]
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordExpiryDate]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CheckUserPasswordExpiryDate]
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckInUserAuthentication]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CheckInUserAuthentication]
GO

/****** Object:  StoredProcedure [ITADMIN].[Login_UserFormSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Login_UserFormSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[Login_ChangePasswordSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Login_ChangePasswordSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS_NoUserAuth]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[GetUserInfo_SCS_NoUserAuth]
GO

/****** Object:  StoredProcedure [ITADMIN].[Login_SaveEmpinUserAuthTable]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Login_SaveEmpinUserAuthTable]
GO

/****** Object:  StoredProcedure [ITADMIN].[PasswordChange_ExceptionEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PasswordChange_ExceptionEmployee]
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordDaysRemaining]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CheckUserPasswordDaysRemaining]
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OPTariffSave_SCS_2017]
GO

/****** Object:  StoredProcedure [ITADMIN].[MMS_ReportsMapping]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MMS_ReportsMapping]
GO

/****** Object:  StoredProcedure [ITADMIN].[MMSReportsMapping_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[MMSReportsMapping_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_CategorySave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FoodItem_CategorySave]
GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FoodItem_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_ShowAll]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[FoodItem_ShowAll]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_BloodCrossMatch]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_BloodCrossMatch]
GO

/****** Object:  StoredProcedure [ITADMIN].[CopyOPTariffSave_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CopyOPTariffSave_2017]
GO

/****** Object:  StoredProcedure [ITADMIN].[CathLabEmployeeMaster_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CathLabEmployeeMaster_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[CathLabEmployeeMaster_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CathLabEmployeeMaster_Dashboard]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_NewItemCodeWithEffectDate]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_IP_NewItemCodeWithEffectDate]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariff_GetItemCodePriceNotDynamicTable]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariff_GetItemCodePriceNotDynamicTable]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariff_GetServiceListWithDynamicTable]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTariff_GetServiceListWithDynamicTable]
GO

/****** Object:  StoredProcedure [ITADMIN].[RamadanCutOff_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[RamadanCutOff_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[PHACanceDateReceipt_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PHACanceDateReceipt_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[PHACanceDateReceipt_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PHACanceDateReceipt_Dashboard]
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCS_OLD2017]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Tariff_Save_SCS_OLD2017]
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordDaysRemaining_TEST]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CheckUserPasswordDaysRemaining_TEST]
GO

/****** Object:  StoredProcedure [ITADMIN].[CST_CheckZeroPriceListSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CST_CheckZeroPriceListSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[CST_CheckZeroPriceList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[CST_CheckZeroPriceList]
GO

/****** Object:  StoredProcedure [ITADMIN].[OLDRangeMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[OLDRangeMarkup_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPriceTemp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPriceTemp_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_DashBoard_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoardTest_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_DashBoardTest_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoardTProcedure_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_DashBoardTProcedure_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_FetchDetails_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_FetchDetails_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_Investigation_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_Investigation_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationList_SCSNew]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationList_SCSNew]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSNew]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSNew]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTEST2]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTEST2]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPriceTempDisplay_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPriceTempDisplay_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureWithPrice_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureWithPriceTemp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureWithPriceTemp_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUpSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUpSave_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_AssignRoleSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_AssignRoleSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetRoleByUserID]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_GetRoleByUserID]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowRoles]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_ShowRoles]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowRolesByDept]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_ShowRolesByDept]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowUsers]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_ShowUsers]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_UpdateRoleSave]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_UpdateRoleSave]
GO

/****** Object:  StoredProcedure [ITADMIN].[Create_ModuleID]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Create_ModuleID]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetAllEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_GetAllEmployee]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetModuleAccessFeature]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_GetModuleAccessFeature]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetUser]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_GetUser]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_SaveAddModuleEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_SaveAddModuleEmployee]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_UpdateUserFeatureDAL]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_UpdateUserFeatureDAL]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_UpdateUserFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_UpdateUserFunction]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleRolesList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleRolesList_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2Module_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Select2Module_SCS]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_AddModuleByRoleId]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_AddModuleByRoleId]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetFeatureListByRoleModule]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_GetFeatureListByRoleModule]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetModuleByRole]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_GetModuleByRole]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RemoveModuleRoleStation]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_RemoveModuleRoleStation]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigAccessRolePerFeatures]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigAccessRolePerFeatures]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigFunctionPerStationModule]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigFunctionPerStationModule]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureList]
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureListPerFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureListPerFunction]
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySelected_ViewReport]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SurgerySelected_ViewReport]
GO

/****** Object:  StoredProcedure [ITADMIN].[EMPLOYEE_FEATURE_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[EMPLOYEE_FEATURE_2017]
GO

/****** Object:  StoredProcedure [ITADMIN].[DosageForm_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[DosageForm_Dashboard]
GO

/****** Object:  StoredProcedure [ITADMIN].[DosageForm_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[DosageForm_Save]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBed_DashBoard_ForVacant]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseBed_DashBoard_ForVacant]
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBedClearanceSave_ForVacant]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ReleaseBedClearanceSave_ForVacant]
GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave_SCS_OLDOCT82017]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[HealthCheckUpSave_SCS_OLDOCT82017]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_SaveDepartmentTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveItemTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_SaveItemTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveNewVat]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_SaveNewVat]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_SaveServiceTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatItemTabList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_VatItemTabList]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatNewPrice]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_VatNewPrice]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatProfile_ViewDeptListByService]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_VatProfile_ViewDeptListByService]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewDepartmentTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewDeptListByService]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewDeptListByService]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewServiceListByType]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewServiceListByType]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewServiceTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewTaxServices]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewTaxServices]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewVat]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_ViewVat]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ItemTabList]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_ItemTabList]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListDept]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListDept]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListItems]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListItems]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListServices]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListServices]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_SaveDepartmentTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveItemTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_SaveItemTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_SaveServiceTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ViewDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_ViewDepartmentTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ViewServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ComissionProfile_ViewServiceTab]
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_CopyEmployeeAccess]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[ModuleAccess_CopyEmployeeAccess]
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff_fooditem]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff_fooditem]
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatItemTabList_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[VatProfile_VatItemTabList_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[PatientCancelOrder_Save_SCS_july_9_2018]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[PatientCancelOrder_Save_SCS_july_9_2018]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETBILL_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPBILL_GETBILL_IN_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETSERV_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPBILL_GETSERV_IN_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETSERV_CAN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPBILL_GETSERV_CAN_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETBED_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPBILL_GETBED_IN_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[Load_IPPrice_tariff_Aug182018]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[Load_IPPrice_tariff_Aug182018]
GO

/****** Object:  StoredProcedure [ITADMIN].[WARDS_EXTRA_FOOD_SV_test]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[WARDS_EXTRA_FOOD_SV_test]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate_FORCASHTARIFF]    Script Date: 12/5/2018 1:39:24 PM ******/
DROP PROCEDURE [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate_FORCASHTARIFF]
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate_FORCASHTARIFF]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<jerome>
-- Create date: <aug 25 2018>
-- Description:	<Description,,this is for deletion of duplicate itemid in the ip tariff table based on update on logs >
-- =============================================
CREATE PROCEDURE [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate_FORCASHTARIFF]
 
AS
BEGIN
	 
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
  select  distinct NAme,IDENTITY(INT, 1,1)  as rowID into #tmptablelogs from sys.tables where Name like 'P_1_%' and SUBSTRING(Name,1,4) = 'P_1_'  order by NAme desc

 
declare @rowId int, @tablename varchar(max),@SQL nvarchar(max),@SQLNew1 nvarchar(max),@SQLNew2 nvarchar(max),@exist int,@TEST_tablename  varchar(max)
declare @NewTable as table (rowid INT IDENTITY(1, 1) ,ID int, StartDateTime DateTime )
 WHILE EXISTS(select top 1 *  from #tmptablelogs)  
        BEGIN
            select @rowId = rowID, @tablename = NAme  from #tmptablelogs
  
			set @TEST_tablename = 'Tariff_Backup_Aug252018_'+@tablename
			set @SQL = N' if exists(  Select id  from    '+@tablename+'      where deleted = 0  group by id having count(id) > 1   )
			BEGIN
			select  '''+@tablename+''' ;
			select * into  '+@TEST_tablename+'  from '+@tablename+' ;
					 with duplicates 
					as (select ID ,ROW_NUMBER() over (partition by ID order by (select 0 ) ) as Duplicate from  '+@tablename+' where deleted = 0    )
					delete from duplicates where Duplicate > 1 
			END '
			print @SQL	
		 	EXEC sp_executesql @SQL
 
			delete from #tmptablelogs where rowID = @rowId
        END

	 

		drop table #tmptablelogs
 
 




 



END
GO

/****** Object:  StoredProcedure [ITADMIN].[WARDS_EXTRA_FOOD_SV_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO













/*
exec [WARDS_BLOOD_REQUEST_SAVE] 29502
*/

create proc [ITADMIN].[WARDS_EXTRA_FOOD_SV_test]
@OPERATORID int,
@ipid int,
@XML xml,
@OrderID int,
@ReturnMessage VARCHAR(100) OUT,
@ReturnFlag int OUT

as
		
declare
@id int,
@stationslno int,
@status int,
@bedid int,
@stationid int

select @stationid = StationID,@bedid = ID from his.dbo.Bed where IPID = @ipid



if (isnull(@OrderID,0) = 0)
begin
if not exists(select * from his.dbo.OrderMaxID Where TableID=33 and StationID=@stationid)
begin
	insert into his.dbo.OrderMaxID select 0,33,@stationid
end
update his.dbo.ordermaxid Set MaxID = MaxID + 1 where TableID=33 and StationID=0

Select @OrderID = MaxID from his.dbo.OrderMaxID Where TableID=33 and Stationid =0

update his.dbo.ordermaxid Set MaxID=MaxID + 1 Where TableID=33 and StationID=@stationid

Select @stationslno = MaxID from his.dbo.OrderMaxID Where TableID=33 and StationID=@stationid

if @stationslno is null
begin
	insert into his.dbo.OrderMaxID 
	select 1,33,@stationid	
	set @stationslno = 1					
end
	

Insert into his.dbo.FoodOrder (id,BedId,IPID,StationID,DateTime,OperatorId,stationslno) 
values(@OrderID,@bedid,@ipid,@stationid,GetDate(),@OPERATORID,@stationslno)				

Insert into his.dbo.FoodOrderDetail (OrderID,ServiceID,Quantity)
select @OrderID	,
id = doc.col.value('id[1]', 'INT'),	
attr1 = doc.col.value('attr1[1]', 'INT')
FROM @XML.nodes('/DocumentElement/Data') doc(col)

end
--else
--begin			
--	insert into 
--	his.dbo.CancelFoodOrder(id,ipid,stationid,Bedid,Operatorid,Datetime,CancelDatetime,CancelledBy,Modified,dispatched,PrintStatus,Amount,fboperatorid,DispatchedDatetime,StationSlno,Type)  
--	select id,ipid,stationid,Bedid,Operatorid,Datetime,GetDate(),139,1,dispatched,PrintStatus,Amount,fboperatorid,DispatchedDatetime,StationSlno,Type 
--	from his.dbo.FoodOrder where id=@OrderID	

--	if @XMLCAN is not null 
--	begin
--		DECLARE @FoodOrderCAN TABLE (ServiceID int)
--		INSERT @FoodOrderCAN (ServiceID)
--		SELECT 		
--			ServiceID = doc.col.value('ServiceID[1]', 'INT')
--		FROM @XMLCAN.nodes('/DocumentElement/Data') doc(col)	
				
--		insert into his.dbo.CancelFoodOrderdetail(Orderid,Serviceid,Quantity,DispatchedQuantity)  
--		select Orderid,Serviceid,Quantity,DispatchedQuantity from his.dbo.foodOrderdetail 
--		where orderid=@OrderID and serviceid  in (select ServiceId from @FoodOrderCAN)
	
--		Delete from his.dbo.foodOrderdetail where orderid=@OrderID and serviceid  in (select ServiceId from @FoodOrderCAN)			
--	end

	--update his.dbo.foodorderdetail 
	--set foodorderdetail.quantity= b.Quantity
	--from his.dbo.foodOrderdetail a
	--left join @FoodOrder b on a.ServiceId = b.ServiceID
	--where a.orderid=@OrderID
	
SET @ReturnMessage = 'Extra Food Order Saved!'
SET @ReturnFlag = 1
return
--end













GO

/****** Object:  StoredProcedure [ITADMIN].[Load_IPPrice_tariff_Aug182018]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[Load_IPPrice_tariff_Aug182018]
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
declare  @maintable_servicename as TABLE ( id int identity (1,1),SErviceId int,TariffId int,ServiceName varchar(max))
declare  @maintable_tariff as TABLE ( id int identity (1,1),BedTypeId int,TariffId int,ServiceName varchar(max))
declare  @maintable_bedType as TABLE ( id int identity (1,1),BedTypeId int,TariffId int,ServiceName varchar(max))
declare  @maintable as TABLE ( id int identity (1,1), TableName varchar(max),TariffId int,BedTypeId int,IPBService int )
		
/********************** GET SERVICE NAME**/
declare @loopID int,@tablename varchar(max),@pricetablename varchar(max),@tableTariffname varchar(max),@tableBEdTypename varchar(max),@tableServicename varchar(max)
declare @IPTablename nvarchar(max),@loopIDBedtype int,@loopIDService int
			
/********************** GET tariff ID**/
insert into @maintable_tariff(TariffId) (select ID from dbo.tariff where deleted = 0  )

/********************** GET bedtype ID**/
insert into @maintable_bedType(BedTypeId) (select ID from dbo.bedtype where deleted = 0)


/********************** GET SERVICE ID**/
insert into @maintable_servicename(ServiceName,SErviceId) (select PriceTable,ID from dbo.IPBService where pricetype = 2)
		

	WHILE exists(select  top 1  * from @maintable_tariff)
			BEGIN

					SELECT top 1 @loopID = ID,@tableTariffname =TariffId  from @maintable_tariff	 		 
					insert into @maintable(TariffId,BedTypeId,IPBService,TableName)(
							select  @tableTariffname,a.BedTypeId,b.SErviceId,'P_'+ cast(@tableTariffname as varchar)  +'_'+ cast(a.BedTypeId as varchar)+'_'+cast(b.ServiceName as varchar)    from @maintable_bedType a, @maintable_servicename b
					 )
				delete @maintable_tariff where Id = @loopID
			END

		IF  EXISTS(SELECT * FROM sys.tables where name  = 'NewTariffProcess')
		BEGIN
		drop table NewTariffProcess
		END

		 select * into NewTariffProcess from @maintable
		 
  
/**********************insert to tariff ip price **/	 
	 declare @FileId int , @SQL NVARCHAR(max),@NewTariffId int,@NewBedTypeId int, @NewIPBService int

	 	WHILE exists(select top 1 * from NewTariffProcess)
						BEGIN
	 
				SELECT top 1 @FileId = id, @tablename = TableName,@NewTariffId = TariffId,@NewBedTypeId = BedTypeId,@NewIPBService = IPBService  from NewTariffProcess
						set @SQL = N'   IF EXISTS(SELECT * FROM sys.tables where name  = ''' + cast(@tablename as varchar)  +  ''' )' +	
								+ ' BEGIN '+		
								+ ' INSERT INTO Tariff_ipprice(Tariffid,BedTypeId,IPBServiceId,ItemId,Price,StartDateTime,EndDateTime,OperatorID,CreatedDate,Deleted)'+
								+ ' ( SELECT  ' + cast(@NewTariffId as varchar)  +  ' ,' + cast(@NewBedTypeId as varchar)  +  ' ,' + cast(@NewIPBService as varchar)  +  ',ID,Price,StartDateTime,EndDateTime,OperatorID,GETDATE(),Deleted from ' + cast(@tablename as varchar)  +  ' where deleted = 0 )' +				
								+ ' ' +				
								+ 'END ' +	
					 				
						 + ' ------------------------------------------------------------------------------------------------------------------------------------------ '  
						print @SQL		
						  EXEC sp_executesql @SQL 	
			Delete  NewTariffProcess where id = @FileId
		END			
 
 select 1
 -- run process in hail test -1:09 minutes
  /* drop table Tariff_ipprice
  CREATE TABLE [dbo].[Tariff_IPPrice](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TariffId] [int] NOT NULL,
	[BedTypeId] [int] NOT NULL,
	[IPBServiceId] [int] NOT NULL,
	 
	[ItemId] [int] NOT NULL,
	[Price] [numeric](10, 2) NOT NULL,
	[Deleted] [bit] NOT NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NULL,
	[OperatorID] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedDate] [datetime] NOT NULL DEFAULT (GETDATE())
) ON [MasterFile]
CREATE INDEX Tariff_ipprice_index_ID ON Tariff_ipprice (ID);
CREATE INDEX Tariff_ipprice_index_TariffId ON Tariff_ipprice (TariffId);
CREATE INDEX Tariff_ipprice_index_BedTypeId ON Tariff_ipprice (BedTypeId);
CREATE INDEX Tariff_ipprice_index_IPBServiceId ON Tariff_ipprice (IPBServiceId);
CREATE INDEX Tariff_ipprice_index_ItemId ON Tariff_ipprice (ItemId);

 */

 


END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETBED_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO













/*
[IPBILL].IPBILL_GETBED_IN 
182630,0,
'2015-10-23 00:17:09.000',
'2015-10-23 18:58:54.000',
'2015-10-23 18:58:54.000'

Execute SP_IP_GetRoomRentTarnsfers 182630,'2015-10-23 00:17:09.000','2015-10-23 18:58:54.000',1
execute SP_IP_GetRoomRentTarnsfers 182630,'2015-10-23 00:17:09.000','2015-10-23 18:58:54.000',0

*/
create proc [ITADMIN].[IPBILL_GETBED_IN_test]
@IPID int,
@DepartmentId int,            
@FromDateTime datetime,
@ToDateTime datetime,
@DischargeDateTime datetime
as

create table #temp (
RowID int,
IPSERVICEID int,
ID int,
DateTime datetime, 
BillDateTime datetime,
ServiceID	int,
bedid	int,
operatorid int,
Name		varchar(100),
Code	varchar(100),  
Quantity	int,
price		numeric(18,2),
DepartmentID	int,
DepartmentName	varchar(100),
DestSt	varchar(100)
)
create table #dt (
FromDate datetime,
ToDate	datetime
)
declare
@dt datetime,
@from datetime,
@to datetime,
@CutOffTime varchar(10),
@BedID int,
@BedNextID int

set @CutOffTime = convert(varchar(10),convert(datetime,(Select max(CutOffTime) from HIS.DBO.Roomrentconfig)),108)
--set @ToDateTime = DATEADD(day,1,@ToDateTime)
select @from = fromdatetime from HIS.DBO.BedTransfers where id = ( select min(id) from HIS.DBO.BedTransfers where ipid = @ipid)
select @to = ISNULL(todatetime,@ToDateTime) from HIS.DBO.BedTransfers where id = ( select max(id) from HIS.DBO.BedTransfers where ipid = @ipid)

Select 
a.ID,a.FromDateTime,isnull(a.ToDateTime,@ToDateTime) as ToDateTime,a.bedid,a.BillRoomType as BedTypeID,a.operatorid,
b.Name,
b.DepartmentID,d.name as DepartmentName,
a.dual
into #temp_bed
from HIS.DBO.BedTransfers a
left join HIS.DBO.Bed b on a.bedid = b.ID
left join HIS.DBO.BedType c on b.BedTypeID = c.id
left join HIS.DBO.Department d on b.DepartmentID = d.ID
where a.ipid = @ipid

-------------> new logic to check last to datetime and new from datetime. Deployed : 18-Feb-2017 9:13AM
--select @BedID = MIN(id) from #temp_bed
--while @BedID is not null
--begin
--	select @dt = todatetime from #temp_bed where id = @BedID
--	select @BedNextID = MIN(id) from #temp_bed where id > @BedID
--	if (select DATEDIFF(day, @dt,todatetime) from #temp_bed where id = @BedNextID) = 0
--	begin
--		 if (select case when todatetime <= convert(datetime,convert(varchar(11),todatetime,106) + ' ' + @CutOffTime) then 1 else 0 end from #temp_bed where id = @BedID) = 1 
--		 begin	 
--			update #temp_bed set todatetime = convert(datetime,convert(varchar(11),DATEADD(day,-1,todatetime),106) + ' 23:59') where id= @BedID
--		 end 
--	end
--select @BedID = MIN(id) from #temp_bed where id > @BedID
--end

-------------> end new logic to check last to datetime and new from datetime. Deployed : 18-Feb-2017 9:13AM


while datediff(day,@from,@to) > -1
begin
	insert into #dt select convert(varchar(10),@from,101) + ' 00:00', dateadd(MINUTE,-1, convert(datetime,DATEADD(d,1,convert(varchar(10),@from,101))))
	set @from = convert(datetime,DATEADD(d,1,convert(varchar(10),@from,101)))
end

if not exists(select * from #temp_bed where dual= 1)
begin
	delete from #temp_bed 
	where id in (
	select case when a.id <> b.id then a.id else 0 end from #temp_bed a
	inner join (select convert(varchar(10),fromdatetime,101) as fromdatetime,MAX(id) as id from #temp_bed 
	group by convert(varchar(10),fromdatetime,101) having COUNT(*) <> 1) b on DATEDIFF(day,a.fromdatetime,b.fromdatetime) = 0
	)
end

	insert into #TEMP
	select 	1,2,ID,	a.FromDate,	a.ToDate,bedid,BedTypeID,operatorid,	
	case departmentid  when 5 then 'ICU DAILY RATE - ' +Name  else 'USE OF FACILITIES - ' + Name  end,
	case departmentid  when 5 then 'FMANA-0029' ELSE '' END,1,0,DepartmentID,DepartmentName,'' 
	From #dt a
	inner join #temp_bed b on	convert(datetime,convert(varchar(10),a.FromDate,101)) >= convert(datetime,convert(varchar(10),b.fromdatetime,101)) 
	and a.ToDate < b.todatetime and b.dual = 0
	

	insert into #TEMP
	select 1,2,ID,a.FromDate,a.ToDate,bedid,BedTypeID,operatorid,	
	case departmentid  when 5 then 'ICU DAILY RATE - ' +Name  else 'USE OF FACILITIES - ' + Name  end,
	case departmentid  when 5 then 'FMANA-0029' ELSE '' END,1,0,DepartmentID,DepartmentName,'' 
	From #dt a
	inner join #temp_bed b on datediff(day,a.FromDate,b.fromdatetime) = 0 and b.dual = 1

	insert into #TEMP
	select 2,3,ID,a.FromDate,a.ToDate,bedid,BedTypeID,operatorid,	
	case departmentid  when 5 then 'MEDICAL SUPERVISION - ' +Name  else 'MEDICAL SUPERVISION - ' + Name  end,
	case departmentid  when 5 then 'FM39099999' ELSE 'FM39099999' END,1,0,
	case when  DepartmentID = 5 then 5 else (select max(departmentid) from HIS.dbo.ipbservice where id = 3) end,DepartmentName,''
	From #dt a
	inner join #temp_bed b on convert(datetime,convert(varchar(10),a.FromDate,101)) >= convert(datetime,convert(varchar(10),b.fromdatetime,101)) 
	and a.ToDate < b.todatetime
	

if not exists( select * from #temp where DATEDIFF(day,DateTime,@to) = 0)
begin
	--if (DATEDIFF(minute,@CutOffTime,convert(varchar(10),@to,108))) >0
	--begin
	insert into #TEMP	
	select 
	2,2,ID,
	dateadd(MINUTE,0, convert(datetime,DATEADD(d,0,convert(varchar(10),@to,101)))),
	todatetime,
	bedid,BedTypeID,operatorid,	
	case departmentid  when 5 then 'ICU DAILY RATE - ' +Name  else 'USE OF FACILITIES - ' + Name  end,
	case departmentid  when 5 then 'FMANA-0029' ELSE '' END,1,0,DepartmentID,DepartmentName,'' 
	from #temp_bed 
	where DATEDIFF(day,todatetime,@to) = 0
	
	insert into #TEMP	
	select 
	2,3,ID,
	dateadd(MINUTE,0, convert(datetime,DATEADD(d,0,convert(varchar(10),@to,101)))),
	todatetime,
	bedid,BedTypeID,operatorid,	
	case departmentid  when 5 then 'MEDICAL SUPERVISION - ' +Name  else 'MEDICAL SUPERVISION - ' + Name  end,
	case departmentid  when 5 then 'FM39099999' ELSE 'FM39099999' END,1,0,case when  DepartmentID = 5 then 5 else DepartmentID end,DepartmentName,''
	from #temp_bed 
	where DATEDIFF(day,todatetime,@to) = 0
end

if not exists(select * from #temp_bed where dual = 1)
begin
	delete  a
	from #temp a
	inner join (
	select max(id) as id, MIN(BillDateTime) as bt from #temp where IPSERVICEID = 2 group by convert(varchar(10),BillDateTime,101) having COUNT(*) <> 1) 
	b on a.id = b.id and DATEDIFF(day,a.BillDateTime,b.bt) = 0
	
	if exists(select datetime from #temp where IPSERVICEID = 2 group by datetime having COUNT(*) <> 1)
	begin
		delete a
		from #temp a
		left join HIS.dbo.BedTransfers b on a.ID = b.id	
		where DATEDIFF(day,datetime,fromdatetime) <> 0 and datediff(day,a.DateTime,GETDATE()) <> 0
	end
end

declare
@dt_from datetime,
@dt_id int
while exists(select * from #dt a left join  #temp b on DATEDIFF(day,b.DateTime,a.FromDate) = 0 where b.ID is null)
begin
	select @dt_from = MIN(FromDate) from #dt a left join  #temp b on DATEDIFF(day,b.DateTime,a.FromDate) = 0 where b.ID is null
	select @dt_id= MAX(id) from #temp_bed where fromdatetime <= @dt_from
	
	insert into #TEMP
	select 	1,2,c.ID,	a.FromDate,	a.ToDate,c.bedid,c.BedTypeID,c.operatorid,	
	case c.departmentid  when 5 then 'ICU DAILY RATE - ' + c.Name  else 'USE OF FACILITIES - ' + c.Name  end,
	case c.departmentid  when 5 then 'FMANA-0029' ELSE '' END,1,0,c.DepartmentID,c.DepartmentName,'' 
	From #dt a
	left join #temp_bed c on c.id = @dt_id 
	where datediff(day,a.FromDate,@dt_from) = 0
	
	insert into #TEMP
	select 	2,3,c.ID,a.FromDate,a.ToDate,c.bedid,c.BedTypeID,c.operatorid,	
	case c.departmentid  when 5 then 'MEDICAL SUPERVISION - ' +c.Name  else 'MEDICAL SUPERVISION - ' + c.Name  end,
	case c.departmentid  when 5 then 'FM39099999' ELSE 'FM39099999' END,1,0,
	case when  c.DepartmentID = 5 then 5 else (select max(departmentid) from HIS.dbo.ipbservice where id = 3) end,c.DepartmentName,''
	From #dt a
	left join #temp_bed c on c.id = @dt_id 
	where datediff(day,a.FromDate,@dt_from) = 0
end

--if exists(select * from #dt a left join  #temp b on DATEDIFF(day,b.DateTime,a.FromDate) = 0 where b.ID is null)
--begin
--	insert into #TEMP
--	select 	1,2,c.ID,	a.FromDate,	a.ToDate,c.bedid,c.BedTypeID,c.operatorid,	
--	case c.departmentid  when 5 then 'ICU DAILY RATE - ' + c.Name  else 'USE OF FACILITIES - ' + c.Name  end,
--	case c.departmentid  when 5 then 'FMANA-0029' ELSE '' END,1,0,c.DepartmentID,c.DepartmentName,'' 
--	From #dt a
--	left join  #temp b on DATEDIFF(day,b.DateTime,a.FromDate) = 0  and b.IPSERVICEID = 2
--	left join #temp_bed c on c.id = (select MAX(id) from #temp_bed )
--	where b.ID is null 
	
--	insert into #TEMP
--	select 	2,3,c.ID,a.FromDate,a.ToDate,c.bedid,c.BedTypeID,c.operatorid,	
--	case c.departmentid  when 5 then 'ICU DAILY RATE - ' +c.Name  else 'MEDICAL SUPERVISION - ' + c.Name  end,
--	case c.departmentid  when 5 then 'FMANA-0029' ELSE 'FM39099999' END,1,0,
--	case when  c.DepartmentID = 5 then 5 else (select max(departmentid) from HIS.dbo.ipbservice where id = 3) end,c.DepartmentName,''
--	From #dt a
--	left join  #temp b on DATEDIFF(day,b.DateTime,a.FromDate) = 0  and b.IPSERVICEID = 3
--	left join #temp_bed c on c.id = (select MAX(id) from #temp_bed )
--	where b.ID is null 
--end
	
--delete from #temp where id in (
--select MIN(id) from #temp where IPSERVICEID = 2 group by convert(varchar(10),BillDateTime,101) having COUNT(*) <> 1) 
 
 
 
 
select RowID,
IPSERVICEID,
a.ID,
DateTime,
BillDateTime,
ServiceID,
bedid,
operatorid,
Name,
Code,
Quantity,
price,
--case when a.DepartmentID = 0 then b.DepartmentID else a.DepartmentID end,
case when IPSERVICEID = 3 then b.DepartmentID else a.DepartmentID end,
DepartmentName,
DestSt ,
0 as Deleted
from #TEMP a
left join HIS.DBO.IPBService b on a.IPSERVICEID = b.ID
group by RowID,
IPSERVICEID,
a.ID,
DateTime,
BillDateTime,
ServiceID,
bedid,
operatorid,
Name,
Code,
Quantity,
price,
case when IPSERVICEID = 3 then b.DepartmentID else a.DepartmentID end,
DepartmentName,
DestSt

drop table #dt
drop table #temp_bed
drop table #temp




GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETSERV_CAN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO













create proc [ITADMIN].[IPBILL_GETSERV_CAN_test]
@IPID int,
@DepartmentId int,            
@FromDateTime datetime,
@ToDateTime datetime,
@DischargeDateTime datetime

as

select aa.*,1 as Deleted from (
------------[SP_IP_GetInvestigationOrders] 13 'INVESTIGATIONS(LAB/X-RAY/CARDIOLOGY)'
select 
4 as RowID,13 as IPSERVICEID,a.ID,a.DateTime,a.BillDateTime,a.ServiceID,a.bedid,a.operatorid,
a.Name,a.Code, 1 as Quantity,0 as price,
a.DepartmentID,a.DepartmentName,a.DestSt
from (
Select 
a.ID,a.canceleddatetime DateTime,a.DateTime as BillDateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,  1 as Quantity,0 as price,
c.DepartmentID,e.Name as DepartmentName,d.Name as DestSt
from HIS.DBO.CANTestRequisition a
inner join HIS.DBO.CANRequestedTest b on a.ID = b.OrderID
inner join HIS.DBO.Test c on b.ServiceID = c.ID
left join HIS.DBO.Station d on b.DestStID = d.ID
left join HIS.DBO.Department e on c.DepartmentID = e.ID
where a.IPID=@IPID and a.DateTime>=@FromDateTime and     
a.DateTime<=@ToDateTime --and c.profile=0     
and (b.profileid=1 OR B.PROFILEID IS NULL or b.profileid=0)      
union all
------------[SP_IP_GetLabProfiles]  13 'INVESTIGATIONS(LAB/X-RAY/CARDIOLOGY)'
Select distinct 
a.ID,a.canceleddatetime ,a.DateTime,b.profileid as serviceid , a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,1,0,
c.DepartmentID,e.Name as DepartmentName,'' 
from HIS.DBO.CANTestRequisition a
left join HIS.DBO.CANRequestedTest b on a.ID=b.OrderID 
left join HIS.DBO.Test c on b.ProfileID = c.ID 
left join HIS.DBO.Department e on c.DepartmentID  = e.ID
where a.IPID=@IPID     
and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime     
and c.profile=1 --order by a.ID,c.Name    
group by a.ID,a.DateTime,a.canceleddatetime,
a.Priority,b.profileid,a.bedid,a.operatorid,c.Name,isnull(c.Code,''),c.DepartmentID,e.Name
) a

union all
------------[SP_IP_GetPharmacyItems] 5	PHARMACY
Select 
3,5,isnull(b.DrugOrderId,a.drugorderid),a.DateTime,e.DateTime,SubstituteID, a.bedid,a.operatorid,
c.name,c.ItemCode,b.Quantity DispatchQuantity, f.Price, 
(select max(departmentid) from HIS.DBO.IPBService where id = 5) as DepartmentId,'PHARMACY' as DepartmentName,
convert(varchar,b.UnitID) + '|'+ convert(varchar,d.Name) + '|' + convert(varchar,b.Batchid )
From HIS.DBO.DrugReturn a              
left join HIS.DBO.DrugReturnDetail b on a.ID=b.OrderID
left join HIS.DBO.DrugOrder e on b.DrugOrderID = e.ID
left join HIS.DBO.Item C on b.ServiceID = c.id
left join HIS.DBO.drugorderdetailsubstitute f on (isnull(b.DrugOrderId,a.drugorderid) = f.OrderId) and b.ServiceID =f.SubstituteId and b.batchid = f.batchid
left join HIS.DBO.Packing d on f.UnitID=d.ID      
Where a.IPID = @IPID and (c.EUB=0 or c.EUB is null) and  a.OrderType=1 and                 
b.quantity>0 and a.DateTime >= @FromDateTime and                 
a.DateTime < = @ToDateTime 
union all
------------[SP_IP_GetOtherProcedures] 6	OTHER PROCEDURES
Select 
5,6,a.ID,a.canceleddatetime,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code, 1 as Quantity, 0 as price,
c.DepartmentID,d.Name as DepartmentName  ,'' as DestSt
from HIS.DBO.CANOtherProceduresOrder a
left join HIS.DBO.CANOtherProceduresOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.OtherProcedures c on b.ServiceID = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime
union all
----------[SP_IP_GetCSSItems] 1	CENTRAL STORAGE SUPPLIES
Select 
6,1,a.ID,a.DateTime,E.DateTime,b.ServiceID,e.bedid,a.operatorid,
c.Name,c.ItemCode, b.Quantity,b.Price,
(select max(departmentid) from IPBService where id = 1) as DepartmentId,
'CENTRAL STORAGE SUPPLIES' as DepartmentName,convert(varchar,b.UnitID) + '|'+ convert(varchar,d.Name) + '|' + convert(varchar,b.Batchid)             
From HIS.DBO.DrugReturn a,HIS.DBO.DrugReturnDetail b,HIS.DBO.Item C,Packing d,HIS.DBO.DrugOrder e 
Where a.IPID = @IPID and b.DrugOrderID = e.ID and
b.OrderID=a.ID and c.ID=b.ServiceID and b.UnitID=d.ID and (c.EUB=0 or c.EUB is null) and            
a.OrderType=0 and b.quantity>0 and a.Status=1 and a.DateTime >= @FromDateTime           
and a.DateTime < = @ToDateTime and a.ReceivedDateTime<=@DischargeDateTime           
union all
------------[SP_IP_GetMedicalEquipmentData] 7	MEDICAL EQUIPMENT
Select 
7,7,a.ID,a.DateTime,a.DateTime,a.MedicalEquipmentID,a.bedid,a.operatorid,  
--a.StartDateTime,  Case When a.EndDateTime>@DischargeDateTime Then @DischargeDateTime Else   a.EndDateTime End as EndDateTime,d.Cyclic as Type,
b.Name,isnull(b.Code,'') as Code, 1 as Quantity, 0 as price,
b.DepartmentID,c.Name as DepartmentName, '' as DestSt
from HIS.DBO.CANEquipmentUsage a
left join HIS.DBO.AssetItemsIP b on a.MedicalEquipmentID = b.Itemid 
left join HIS.DBO.Department c on b.Departmentid = c.ID
left join HIS.DBO.SupportTable d on a.MedicalEquipmentID = d.EquipmentId
where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime  
Union All   
Select 
7,7,a.ID,a.canceledon,a.OrderDateTime,  a.OTID,a.bedid,a.operatorid,
--a.OTStartDateTime as StartDateTime,Case When a.OTEndDateTime>@DischargeDateTime   Then @DischargeDateTime Else a.OTEndDateTime End as EndDateTime,e.Cyclic as Type,
c.name,isnull(c.Code,'') as Code, 1 as Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName, '' as DestSt
from HIS.DBO.CancelOTOrder a
left join HIS.DBO.CancelOTOrderDetail b on a.ID = b.OrderId
left join HIS.DBO.AssetItemsIP c on b.TypeId = c.Itemid
left join HIS.DBO.Department d on c.Departmentid = d.ID
left join HIS.DBO.SupportTable e on b.Type =e.EquipmentId 
where a.IpidOpid=@IPID and a.OrderDateTime>=@FromDateTime  and
a.OrderDateTime<=@ToDateTime and b.Typeid = 6   --order by a.ID  
union all
------------[SP_IP_GetPhysioOrders]  8	PHYSIOTHERAPY
Select 
8,8,a.ID, a.canceledon,a.OrderDateTime,b.typeid,a.bedid,a.operatorid, 
c.Name,isnull(c.Code,'') as Code,1 as Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName,'' as Destst
from HIS.DBO.CancelRHOrder a
left join HIS.DBO.CancelRHOrderDetail b on a.id = b.orderid
left join HIS.DBO.PTProcedure c on b.typeid = c.ID
left join HIS.DBO.Department d  on c.DepartmentID = d.ID
where a.PatientType=1 and a.IPIDOPID=@IPID and a.OrderDateTime>=@FromDateTime and a.OrderDateTime<=@ToDateTime and b.type=1  --order by a.ID, c.Name  
union all
------------[SP_IP_GetSurgicalProcedures]	10	SURGICAL PROCEDURES
Select 
10,10,a.ID,a.canceledon,a.OTStartDateTime,b.typeid,a.BedId,a.OperatorId,
c.Name,isnull(c.code,'') as Code,Isnull(b.Count,1) Quantity, 0 as price, 
c.DepartmentID,d.Name as DepartmentName,convert(varchar,a.OTID ) as Destst
from HIS.DBO.CancelOTOrder a
left join HIS.DBO.CancelOTOrderDetail b on a.ID = b.OrderId
left join HIS.DBO.Surgery c on b.TypeId = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
Where 
a.IPIDOPID = @IPID And 
b.Type = 1 and a.OTStartDateTime>=@FromDateTime and         
a.OTStartDateTime<=@ToDateTime and a.OrderDateTime<=@DischargeDateTime  --Order by a.ID,c.Name    
union all
------------[SP_IP_GetAanesthesia] 20	ANAESTHESIA CHARGES
Select 
--a.ID,a.AnaesthesiaTypeID,a.OrderDateTime as Datetime,a.OTStartDateTime,a.OperatorID,    
--a.BedID,b.Name,a.OTID 
12,20,a.ID,a.canceledon,a.OTStartDateTime,a.AnaesthesiaTypeID,a.BedID, a.OperatorID,
b.Name,isnull(b.Code,'') as Code,1 as Quantity, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 20) as DepartmentId,'ANAESTHESIA',convert(varchar,a.OTID) as Destst
from HIS.DBO.CancelOTOrder a,HIS.DBO.Anaesthesia b Where a.patienttype=1 and a.IPIDOPID = @IPID     
and a.OTStartDateTime>=@FromDateTime and a.OTStartDateTime<=@ToDateTime     
and a.OrderDateTime<=@DischargeDateTime and    
 a.AnaesthesiaTypeID=b.ID and b.BillingType=2 --Order By a.OTStartDateTime   
 union all
------------[SP_IP_GetAnaesthesiaOrders] 20	ANAESTHESIA CHARGES
Select 
12,20,a.ID,a.canceledon,a.OTStartDateTime,a.AnaesthesiaTypeID,a.BedID, a.OperatorID,
b.Name,isnull(b.Code,'') as Code,1 as Quantity, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 20) as DepartmentId,'ANAESTHESIA','' as Destst
from HIS.DBO.CancelOTOrder a
left join HIS.DBO.Anaesthesia b on a.AnaesthesiaTypeID = b.id 
where 
a.IPIDOPID=@IPID  and 
a.OTStartDateTime>=@FromDateTime and   
a.OTStartDateTime<=@ToDateTime and b.BillingType=1 --Order by a.ID, b.Name  
--union all
------------[SP_IP_GetCathProcedures] 16	CATH PROCEDURES
--Select 
--13,16,a.ID,a.OrderDateTime,a.ProcedureStartdateTime,b.Typeid as ServiceID,a.bedid,a.operatorid,
--c.Name,isnull(c.Code,'') as Code,1 as quantity, 0 as price,
--c.DepartmentID,d.Name as DepartmentName,''
--from CanCathOrder a
--left join CanCathOrderDetail b on a.id = b.orderid 
--left join CathProcedure c on b.TypeId = c.ID
--left join HIS.DBO.Department d on c.DepartmentID = d.ID
--where 
--a.IPIDOPID=@IPID and 
--b.type = 1 and
--a.ProcedureStartdateTime>=@FromDateTime and   
--a.ProcedureStartdateTime <=@ToDateTime and   
--a.OrderDateTime<=@DischargeDateTime   --Order by a.ID,c.Name  
union all
------------[SP_IP_GetLaundryOrders]	12	LAUNDRY
Select 
14,12,a.ID,a.CanceledOn,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,b.Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName,''
from HIS.DBO.CanLaundryOrder  a
left join HIS.DBO.CanLaundryOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.LaundryItem c on b.ServiceID = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
Where 
a.IPID=@IPID and 
b.OrderID=a.ID and c.ID=b.ServiceID  and c.DepartmentID=d.Id and   
a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime    --Order by a.ID, c.Name  
union all
------------[SP_IP_GetKitchenCharges] 4	KITCHEN CHARGES
Select 
15,4,a.ID,a.canceldatetime,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,C.Code,b.Quantity as Quantity, 0 as price,
c.DepartmentID,d.Name as DepartmentName,''
from HIS.DBO.CancelFoodOrder a
left join HIS.DBO.cancelFoodOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.FoodItem c on b.ServiceId = c.Id
left join HIS.DBO.Department d on c.DepartmentID = d.ID
where 
a.IPID=@IPID and 
b.OrderID=a.ID and --a.Dispatched=2 and      
c.ID=b.ServiceID and c.DepartmentID=d.id and a.DateTime>=@FromDateTime and         
a.DateTime<=@ToDateTime -- and a.DispatchedDateTime<=@DischargeDatetime         
Union All        
Select 
15,4,a.ID,a.canceldatetime as DateTime,a.AdmitDateTime as BillDateTime,b.ServiceID,a.bedid,        
a.operatorid,c.Name,c.Code,b.Quantity as Quantity, 0 as price,   c.DepartmentID,        
d.Name as DepartmentName ,''
from HIS.DBO.CancelFoodOrder a
left join HIS.DBO.CancelFoodOrderDetail b on a.ID = b.OrderID 
left join HIS.DBO.FoodItem c on b.ServiceId = c.Id
left join HIS.DBO.Department d on c.DepartmentID = d.ID        
left join HIS.DBO.Inpatient e on a.IPID = e.IPID 
where 
a.IPID=@IPID and 
isnull(a.DispatchedDateTime,a.DateTime)<=e.Admitdatetime --Order by a.ID, c.Name 
union all
------------[SP_IP_GetConsultations] 15	CONSULTATIONS
Select 
17,15,a.id,a.canceldateime,a.DateTime,a.RefDocID,a.bedid,a.operatorid,  
b.Name,isnull(b.EmpCode,'') as Code ,1, 0 as price,
a.dept_id as DepartmentID,d.name as DepartmentName,''
from HIS.DBO.CanIPReferralPatient a
left join HIS.DBO.Employee b on b.ID=a.RefDocID
left join HIS.DBO.doctor_specialisation c on (c.DoctorID=a.RefDocID and a.dept_id=c.SpecialisationId )
left join HIS.DBO.Department d on a.dept_id=d.Id
where 
a.ipid =@IPID and
a.EmergencyCodeID in(0,1)    
and DateTime>=@FromDateTime and
DateTime<@ToDateTime  --Order by a.RefDocID

union all
------------[SP_IP_GetNursingAdministration] 24	NURSING ADMINISTRATION
Select 
21,24,a.ID,a.canceleddatetime,a.DateTime,b.ServiceID, a.bedid,a.operatorid,
c.Name,  isnull(c.code,'') as Code,Isnull(b.Quantity,1), 0 as price,    c.DepartmentID,d.name as DepartmentName,'' 
from HIS.DBO.CanBSPExecution a,HIS.DBO.CanBSPExecutionDetail b,     
HIS.DBO.BedsideProcedure c,HIS.DBO.Department d 
where a.IPID=@IPID and b.OrderID=a.ID and c.ID=b.ServiceID     
and c.DepartmentID=d.Id and a.DateTime>=@FromDateTime and     
a.DateTime<@ToDateTime --order by a.ID, c.Name   
--group by a.ID,a.DateTime,b.ServiceID, a.bedid,a.operatorid,c.Name, isnull(c.code,''),Isnull(b.Quantity,1), c.DepartmentID,d.name
union all
------------[SP_IP_GetBloodCrossMatch] 25	BLOOD CROSS MATCH
Select 
23,25,ID,canceldatetime,DateTime,35,bedid,Operatorid,        
'CROSS MATCH','FMLAB-1035',1, 0 as price,
1,'BLOOD BANK','' 
from HIS.DBO.CanCrossMatch         
where IPID=@IPID and 
componentid in(select id from HIS.DBO.component where type=1 and deleted=0)      
and DateTime>=@FromDateTime and DateTime<=@ToDateTime --Order by ID          
union all
------------[SP_IP_GetBloodIssues] 26	BLOOD ISSUES
--Select 
--24,26,a.ID,a.DateTime,a.DateTime,a.ComponentID,a.BedID,a.OperatorID,
--b.Name,isnull(b.Code,''), a.Quantity, 0 as price,   
--1 as DepartmentId,'LABORATORY',''
--from CanIssue a,
--BloodIssueMaster b,
--BloodGroup c  
--Where a.IPID=@IPID and a.ComponentID=b.ID     
--and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime and     
--a.BagGroup=c.ID --Order by a.ID,b.Name    
--union all
------------[SP_IP_GetBloodComponents] 27	BLOOD COMPONENT
--Select 
--25,27,a.ID,a.DateTime,a.DateTime,a.ComponentID ,a.BedID,a.OperatorID,
--b.Name,isnull(b.Code,''),1, 0 as price,
--1 as DepartmentId,'LABORATORY','' 
--from CanIssue a 
--left join BloodComponent b  on a.ComponentID = b.ID
--Where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime --Order by a.ID,b.Name    
--union all
------------[SP_IP_GetBloodDonation] 28	BLOOD DONATION
Select 
26,28,a.DonorRegistrationNo,a.DonatedDate,a.DonatedDate, a.ProcID,c.bedid,a.operatorid,
b.Name ,isnull(b.Code,'') as Code,1, 0 as price,   
1,'LABORATORY',''
-- -(PAmount) as Fee,@DepartmentId as DepartmentId,              
from HIS.DBO.CanDonorReg a,
HIS.DBO.BloodDonationMaster b,              
HIS.DBO.BedTransfers c 
where a.IPID=@IPID and a.DonatedDate>=@FromDateTime and               
a.DonatedDate<=@ToDateTime and a.ProcID=b.ID and c.IPID=a.IPID and a.screenresult = 1 and              
a.DonatedDate Between c.FromDateTime and ISNull(c.ToDateTime,GetDate()) and c.Dual=0               
and a.DonorStatus=4 and IsNull(a.IssueID,0)=0 --Order by DonorRegistrationNo   
union all
------------[SP_IP_GetBloodBankOtherProcedures] 29	BLOOD BANK OTHER PROCEDURES
Select 
27,29,a.ID,a.canceledon,a.DateTime as BillDateTime,a.ProcedureID ,a.BedID,    
a.Operatorid,b.Name,isnull(b.Code,'') as Code,1, 0 as price,   1 as DepartmentId,'LABORATORY',''
from HIS.DBO.CanBBOtherProceduresIssues a,HIS.DBO.BBOtherProcedures b  where a.IPID=@IPID and     
a.ProcedureID=b.ID and a.DateTime>=@Fromdatetime and     
a.DateTime<=@Todatetime --Order by a.ID    
union all
------------[SP_IP_GetPharmachySurcharge] 33	PHARMACY SERVICE CHARGE

------------[SP_IP_GetTakeHomeMedicines] 37	TAKE HOME MEDICINES

------------[SP_IP_GetTelephoneCalls] 14	TELEPHONE CHARGES

------------[SP_IP_GetPinandMaterialandOthers] 22	MATERIALS & OTHERS
Select 
20,22,A.ID,a.CancelDateTime,DateTime,a.itemid,bedid,a.operatorid,
B.NAME as Name,isnull(b.Code,'') as Code,1,a.Amount as price,
C.ID as DepartmentId,  C.NAME AS DepartmentName,''
from  HIS.DBO.CanIPPINEntry A ,
HIS.DBO.MISCITEMS B,
HIS.DBO.DEPARTMENT C 
where   
C.ID=B.DEPARTMENTID AND  A.ITEMID=B.ID AND A.IPID=@IPID and   
DateTime>=@FromDateTime and DateTime<=@ToDateTime  --order by A.ID  
union all
--[SP_IP_GetAssistantSurgeonCharges]	18	ASSISTANT SURGEON FEE
Select 
12,18,a.ID,a.canceleddatetime,d.OTStartDateTime,a.ItemID,a.bedid,a.operatorid,
b.Name,isnull(b.EmpCode,''),1,a.Amount as Fee,  
c.SpecialisationID,e.Name,'' 
from HIS.DBO.CanIPAsstSurgeonEntry a,  
HIS.DBO.employee b,HIS.DBO.Doctor_Specialisation c,HIS.DBO.CancelOTOrder d,HIS.DBO.Department e Where a.itemid=b.id and   
c.DoctorID=a.ItemID and a.IPID=@IPID and a.ID=d.ID and c.SpecialisationID=e.Id and   
d.OTStartDateTime>=@FromDateTime and   
d.OTStartDateTime<=@ToDateTime and   
d.OrderDateTime<=@DischargeDateTime  
union all
--[SP_IP_GetOperationTheatreCharges] 9	OPERATION THEATRE CHARGES          
Select 
9,9,a.ID,a.canceleddatetime,b.OTStartDateTime,a.ServiceID,a.bedid,a.operatorid,
a.RefNo as Name,ISNULL(A.ITEMCODE,'') as Code,1,a.Amount,
ISNULL(A.DEPARTMENTID,0) as DepartmentId,c.Name,''  
from HIS.DBO.CanIPOREntry a
left join HIS.DBO.CancelOTOrder b on a.ID=b.ID
left join HIS.DBO.Department c on a.DEPARTMENTID = c.id
where a.IPID=@IPID and b.OTStartDateTime>=@FromDateTime         
and b.OTStartDateTime<=@ToDateTime and         
b.OrderDateTime<=@DischargeDateTime        
union all  
--[SP_IP_GetORNursingAdminCharges] 31	OR NURSING ADMINISTRATION
Select 
22,31,a.ID,a.canceleddatetime,b.OTStartDateTime,0,a.bedid,a.operatorid, 
a.RefNo,ISNULL(A.ITEMCODE,''),1,a.Amount,
(select max(departmentid) from HIS.DBO.IPBService where id = 31),'NURSING ADMINISTRN',''
from HIS.DBO.CanIPORNursingAdministrationEntry a,HIS.DBO.CancelOTOrder b      
Where a.IPID=@IPID and a.ID=b.ID and b.OTStartDateTime>=@FromDateTime      
and b.OTStartDateTime<=@ToDateTime and       
b.OrderDateTime<=@DischargeDateTime      
union all
--[SP_IP_GetRecoveryRoomCharges] 11	RECOVERY ROOM CHARGES
Select 
11,11,a.ID,a.canceleddatetime,b.OTStartDateTime,0,a.bedid,a.operatorid,
a.RefNo,ISNULL(A.ITEMCODE,''),1,a.Amount, 
ISNULL(A.DEPARTMENTID,0),c.name,''
from HIS.DBO.CanIPRecoveryEntry a
left join HIS.DBO.CancelOTOrder b on a.ID=b.ID
left join HIS.DBO.Department c on a.departmentid = c.id
where a.IPID=@IPID and 
b.OTStartDateTime>=@FromDateTime and b.OTStartDateTime<=@ToDateTime            
and b.OrderDateTime<=@DischargeDateTime            
union all

------------------ OT PROCEDURES
--[SP_IP_OTSurgeries] 10	SURGICAL PROCEDURES   
Select 
10,10,a.ID,a.canceledon,a.OrderDateTime,b.TypeID,a.OperatorID,a.BedID,
c.Name,'',1,0,
c.DepartmentID,d.Name,convert(varchar,a.OTID )
from HIS.DBO.CancelOTOrder a,		
HIS.DBO.CancelOTOrderDetail b,HIS.DBO.Surgery c,HIS.DBO.Department d Where a.IPIDOPID = @IPID And b.OrderID = a.ID   
And b.Type = 1 and c.id=b.typeid and c.DepartmentID=d.Id and   
a.OTStartDateTime<=@FromDateTime and a.OTEndDateTime>=@FromDateTime   --Order by a.ID,c.Name      


) aa



GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETSERV_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




create proc [ITADMIN].[IPBILL_GETSERV_IN_test]
@IPID int,
@DepartmentId int,            
@FromDateTime datetime,
@ToDateTime datetime,
@DischargeDateTime datetime

as
Select
a.ID,a.OrderDatetime,IPIDOPID,OTID,a.BedId,a.OperatorID,b.TypeId,b.Type, a.AnaesthesiaTypeID, b.Priority
into #temp_OTORDER 
from HIS.DBO.OTOrder a
left join HIS.DBO.OTOrderDetail b on a.ID = b.OrderId
Where patienttype=1 and IPIDOPID =@IPID and OTStartDateTime>=@FromDateTime and OTStartDateTime<=@ToDateTime and OrderDateTime<=@DischargeDateTime

if exists(Select * from #temp_OTORDER)
begin
---------IPOREntry
	delete from IPBILL.IP_OREntry where id in (Select ID from #temp_OTORDER)

	insert into IPBILL.IP_OREntry (ID,DateTime,Refno,Amount,IPID,ServiceID,BedID,OperatorID,ItemCode,DEPARTMENTID)
	Select a.id,OrderDatetime,'OperationTheatre Charges',0 as Amount,a.IPIDOPID,a.OTID,a.BedId,a.OperatorID, e.ItemCode,e.DepartmentID
	from #temp_OTORDER a
	left join HIS.DBO.Surgery c on a.TypeId = c.ID
	left join HIS.DBO.OTItemCodes e on OTNO = a.OTID and e.Type = 3 and e.Deleted = 0	
	Where  a.IPIDOPID = @IPID And 	a.Type = 1 
	group by a.id,OrderDatetime,a.IPIDOPID,a.OTID,a.BedId,a.OperatorID, e.ItemCode,e.DepartmentID

---------IP_AsstSurgeonEntry
	delete from IPBILL.[IP_AsstSurgeonEntry] where id in (Select ID from #temp_OTORDER)

	insert into IPBILL.[IP_AsstSurgeonEntry] (ID,IPID,Refno,Amount,Itemid,BedID,OTID,OperatorID,DateTime,ItemCode)
	Select a.id,@IPID,'Asst.Surgeon Charges',0 as Amount,TypeId,a.BedId, a.OTID,a.OperatorId, a.OrderDatetime,''
	from #temp_OTORDER a
	left join HIS.DBO.OTItemCodes e on OTNO = a.OTID and e.Type = 3 and e.Deleted = 0	
	Where  a.IPIDOPID = @IPID And 	a.Type = 3 

---------IPRecoveryEntry
	delete from IPBILL.[IP_RecoveryEntry] where id in (Select ID from #temp_OTORDER)

	insert into IPBILL.[IP_RecoveryEntry] (ID,DateTime,Refno,Amount,IPID,BedID,OperatorID,OTID,ServiceId,ItemCode,DEPARTMENTID)
	Select a.ID,a.OrderDatetime,'RecoveryRoom Charges',0 as amount,a.IPIDOPID,a.BedId,a.OperatorId,a.OTID,a.AnaesthesiaTypeID,e.ItemCode,e.DepartmentID
	from #temp_OTORDER a
	left join HIS.DBO.OTItemCodes e on OTNO = a.OTID and e.Type = 2 and e.Deleted = 0	
	Where  a.IPIDOPID = @IPID And 	a.Type = 1  
	group by  a.ID,a.OrderDatetime,a.IPIDOPID,a.BedId,a.OperatorId,a.OTID,a.AnaesthesiaTypeID,e.ItemCode,e.DepartmentID

---------IPRecoveryEntry
	delete from IPBILL.[IP_AnaesthesiaEntry] where id in (Select ID from #temp_OTORDER)

if exists(Select  *	from #temp_OTORDER a Where a.IPIDOPID = @IPID And a.Type in (1,3) and a.Priority=1 and a.AnaesthesiaTypeID in (Select ID from HIS.DBO.Anaesthesia Where BillingType=2) )
	begin		
		insert into IPBILL.[IP_AnaesthesiaEntry] (ID,IPID,RefNo,Amount,ServiceID,BedID,DateTime,OperatorID,OTID)
		Select distinct  a.ID,a.IPIDOPID ,'GENERAL ANESTHESIA',0 as amount,a.AnaesthesiaTypeID,a.BedId,a.OrderDatetime,a.OperatorId,a.OTID
		from #temp_OTORDER a
		Where a.IPIDOPID = @IPID And a.Type in (1,3) and a.Priority=1 and a.AnaesthesiaTypeID in (Select ID from HIS.DBO.Anaesthesia Where BillingType=2) 	
	end
end

drop table #temp_OTORDER

select aa.*,'0' as Deleted 
from (
------------[SP_IP_GetInvestigationOrders] 13 'INVESTIGATIONS(LAB/X-RAY/CARDIOLOGY)'
Select 
4 as RowID,13 as IPSERVICEID,a.ID,a.DateTime,a.DateTime as BillDateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,  1 as Quantity,0 as price,
c.DepartmentID,e.Name+ case when isnull(b.TestDoneby,0) = 0 then 'NOTDELIVERED' else '' end as DepartmentName ,d.Name as DestSt
from HIS.DBO.TestRequisition a
inner join HIS.DBO.RequestedTest b on a.ID = b.OrderID
inner join HIS.DBO.Test c on b.ServiceID = c.ID
left join HIS.DBO.Station d on b.DestStID = d.ID
left join HIS.DBO.Department e on c.DepartmentID = e.ID
where a.IPID=@IPID and a.DateTime>=@FromDateTime and     
a.DateTime<=@ToDateTime --and c.profile=0     
and (b.profileid=1 OR B.PROFILEID IS NULL or b.profileid=0)     
--order by b.DestStID,a.ID, c.Name    
union all
------------[SP_IP_GetLabProfiles]  13 'INVESTIGATIONS(LAB/X-RAY/CARDIOLOGY)'
Select distinct 
4,13,a.ID,a.DateTime,a.DateTime,b.profileid as serviceid , a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,1,0,
c.DepartmentID,e.Name+ case when isnull(b.TestDoneby,0) = 0 then 'NOTDELIVERED' else '' end as DepartmentName,'' 
from HIS.DBO.TestRequisition a
left join HIS.DBO.RequestedTest b on a.ID=b.OrderID 
left join HIS.DBO.Test c on b.ProfileID = c.ID 
left join HIS.DBO.Department e on c.DepartmentID  = e.ID
where a.IPID=@IPID     
and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime     
and c.profile=1 --order by a.ID,c.Name    
and isnull(b.TestDoneby,0) <> 0 --ADDED : the problem on the script is that if all the items inside the profile is not done it will not show on the bill : 15-Nov-2017 9:30
group by a.ID,a.DateTime,
a.Priority,b.profileid,a.bedid,a.operatorid,c.Name,isnull(c.Code,''),c.DepartmentID,e.Name,b.TestDoneby
union all
------------[SP_IP_GetPharmacyItems] 5	PHARMACY
select 
3,5,ID,DateTime,BillDateTime,SubstituteID, bedid,operatorid,
name,Code,DispatchQuantity, Price, 
DepartmentId,DepartmentName,convert(varchar,UnitID) + '|'+ convert(varchar,unit) + '|' + convert(varchar,SerialNo )
from   
(select ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,
(DispatchQuantity - IsNull(sum(ReturnQty),0)) DispatchQuantity, sum(ReturnQty) ReturnQty,            
Case When (DispatchQuantity - IsNull((sum(ReturnQty)),0)) = 0 then 'Y' else 'N' end Show,Price,name,Code,UnitID,unit,SerialNo  
from (Select  f.OrderId DrugReturnId,  (f.Quantity) ReturnQty,b.BillableQty as DispatchQuantity,            
a.ID,a.DispatchedDateTime as DateTime,a.DateTime as BillDateTime,a.bedid,                    
a.operatorid,(select max(departmentid) from HIS.DBO.ipbservice where id =5) as DepartmentId,DepartmentName='PHARMACY' + case when a.Dispatched <> 3 then 'NOTDELIVERED' else '' end,b.SubstituteID,                    
b.BillablePrice as Price,C.name,isnull(c.ItemCode,'') as Code,                  
b.UnitID,d.name as unit,isnull(b.batchid,0) as SerialNo                     
From HIS.DBO.DrugOrder a  
Inner Join HIS.DBO.DrugOrderDetailsubstitute b ON A.ID=B.OrderID  
Inner Join HIS.DBO.Item C ON C.ID=B.SubstituteID  
Inner Join HIS.DBO.Packing d ON D.ID=B.UNITID  
Left Outer Join (Select Sum(X.Quantity)Quantity,X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime FROM HIS.DBO.DrugReturnDetail X  
Inner Join HIS.DBO.DrugReturn Y  ON Y.ID=X.OrderID  Where IPID=@IPID AND Y.DateTime<=@DischargeDateTime  Group BY X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime) f ON b.SubstituteId = f.serviceid and b.BatchID = f.BatchID AND A.ID=F.DrugOrderID     
Where a.IPID = @IPID and A.ISTAKEHOME in(0,1) AND a.OrderType=1 and  a.Dispatched>=2 and b.DispatchQuantity >0 and (c.EUB=0 or c.EUB is null) and            
a.DateTime >= @FromDateTime and a.DateTime < = @ToDateTime and a.DispatchedDateTime<=@DischargeDateTime) a  
Group By	ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,Price,name,Code,UnitID,unit,SerialNo,                  
DispatchQuantity                  
) a where a.Show = 'N' --Order by ID   
union all
------------[SP_IP_GetOtherProcedures] 6	OTHER PROCEDURES
Select 
5,6,a.ID,a.DateTime,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code, 1 as Quantity, 0 as price,
c.DepartmentID,d.Name as DepartmentName  ,'' as DestSt
from HIS.DBO.OtherProceduresOrder a
left join HIS.DBO.OtherProceduresOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.OtherProcedures c on b.ServiceID = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime  --order by a.ID, c.Name   
--group by  a.ID,a.DateTime,b.ServiceID,a.bedid,a.operatorid,c.Name,  
--isnull(c.Code,''), Isnull(b.Quantity,1),c.DepartmentID,d.Name
union all
------------[SP_IP_GetCSSItems] 1	CENTRAL STORAGE SUPPLIES
select 
6,1,ID,DateTime,BillDateTime,SubstituteID,bedid,operatorid,
Name,Code, DispatchQuantity,Price,
DepartmentId,DepartmentName,convert(varchar,UnitID) + '|'+ convert(varchar,unit) + '|' + convert(varchar,SerialNo ) 
from     
(select ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,              
(DispatchQuantity - IsNull(SUM(ReturnQty),0)) DispatchQuantity, SUM(ReturnQty) ReturnQty,              
Case When (DispatchQuantity - IsNull((SUM(ReturnQty)),0)) = 0 then 'Y' else 'N' end Show              
,Price,name,Code,UnitID,unit,SerialNo    
from    
(Select  f.OrderId DrugReturnId,  (f.Quantity) ReturnQty,              
b.BillableQty as DispatchQuantity,              
a.ID,a.DispatchedDateTime as DateTime,a.DateTime as BillDateTime,a.bedid,                      
a.operatorid,(select max(departmentid) from HIS.DBO.IPBService where id = 1) as DepartmentId,DepartmentName='CENTRAL STORAGE SUPPLIES'+ case when a.Dispatched <> 3 then 'NOTDELIVERED' else '' end,b.SubstituteID,                      
b.BillablePrice as Price,C.name,isnull(c.ItemCode,'') as Code,                    
b.UnitID,d.name as unit,isnull(b.batchid,0) as SerialNo                       
From HIS.DBO.DrugOrder a    
Inner Join HIS.DBO.DrugOrderDetailsubstitute b    
ON A.ID=B.OrderID    
Inner Join HIS.DBO.Item C    
ON C.ID=B.SubstituteID    
Inner Join HIS.DBO.Packing d    
ON D.ID=B.UNITID    
Left Outer Join (Select Sum(X.Quantity)Quantity,X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime FROM HIS.DBO.DrugReturnDetail X    
Inner Join HIS.DBO.DrugReturn Y    
ON Y.ID=X.OrderID    
Where IPID=@IPID AND Y.DateTime<@DischargeDateTime    
Group BY X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime) f    
ON b.SubstituteId = f.serviceid and b.BatchID = f.BatchID AND A.ID=F.DrugOrderID       
Where a.IPID = @IPID and A.ISTAKEHOME =0 AND a.OrderType=0 and     
a.Dispatched>=2 and b.DispatchQuantity >0 and (c.EUB=0 or c.EUB is null) and              
a.DateTime > @FromDateTime and a.DateTime < @ToDateTime and a.DispatchedDateTime<@DischargeDateTime) a             
group by  ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,Price,name,              
Code,UnitID,unit,SerialNo, DispatchQuantity    
) a where a.Show = 'N' --Order by ID     
union all
------------[SP_IP_GetMedicalEquipmentData] 7	MEDICAL EQUIPMENT
Select 
7,7,a.ID,a.DateTime,a.DateTime,a.MedicalEquipmentID,a.bedid,a.operatorid,  
--a.StartDateTime,  Case When a.EndDateTime>@DischargeDateTime Then @DischargeDateTime Else   a.EndDateTime End as EndDateTime,d.Cyclic as Type,
b.Name,isnull(b.Code,'') as Code, 1 as Quantity, 0 as price,
b.DepartmentID,c.Name as DepartmentName, '' as DestSt
from HIS.DBO.EquipmentUsage a
left join HIS.DBO.AssetItemsIP b on a.MedicalEquipmentID = b.Itemid 
left join HIS.DBO.Department c on b.Departmentid = c.ID
left join HIS.DBO.SupportTable d on a.MedicalEquipmentID = d.EquipmentId
where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime  
Union All   
Select 
7,7,a.ID,a.OrderDateTime,a.OrderDateTime,  a.OTID,a.bedid,a.operatorid,
--a.OTStartDateTime as StartDateTime,Case When a.OTEndDateTime>@DischargeDateTime   Then @DischargeDateTime Else a.OTEndDateTime End as EndDateTime,e.Cyclic as Type,
c.name,isnull(c.Code,'') as Code, 1 as Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName, '' as DestSt
from HIS.DBO.OTOrder a
left join HIS.DBO.OTOrderDetail b on a.ID = b.OrderId
left join HIS.DBO.AssetItemsIP c on b.TypeId = c.Itemid
left join HIS.DBO.Department d on c.Departmentid = d.ID
left join HIS.DBO.SupportTable e on b.Type =e.EquipmentId 
where a.IpidOpid=@IPID and a.OrderDateTime>=@FromDateTime  and
a.OrderDateTime<=@ToDateTime and b.Typeid = 6   --order by a.ID  
union all
------------[SP_IP_GetPhysioOrders]  8	PHYSIOTHERAPY
Select 
8,8,a.ID, a.OrderDateTime,a.OrderDateTime,b.typeid,a.bedid,a.operatorid, 
c.Name,isnull(c.Code,'') as Code,1 as Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName,'' as Destst
from HIS.DBO.RHOrder a
left join HIS.DBO.RHOrderDetail b on a.id = b.orderid
left join HIS.DBO.PTProcedure c on b.typeid = c.ID
left join HIS.DBO.Department d  on c.DepartmentID = d.ID
where a.PatientType=1 and a.IPIDOPID=@IPID and a.OrderDateTime>=@FromDateTime and a.OrderDateTime<=@ToDateTime and b.type=1  --order by a.ID, c.Name  
union all
------------[SP_IP_GetSurgicalProcedures]	10	SURGICAL PROCEDURES
Select 
10,10,a.ID,a.OrderDateTime,a.OTStartDateTime,b.typeid,a.BedId,a.OperatorId,
c.Name,isnull(c.code,'') as Code,Isnull(b.Count,1) Quantity, 0 as price, 
c.DepartmentID,d.Name as DepartmentName,convert(varchar,a.OTID ) as Destst
from HIS.DBO.OTOrder a
left join HIS.DBO.OTOrderDetail b on a.ID = b.OrderId
left join HIS.DBO.Surgery c on b.TypeId = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
Where 
a.IPIDOPID = @IPID And 
b.Type = 1 and a.OTStartDateTime>=@FromDateTime and         
a.OTStartDateTime<=@ToDateTime and a.OrderDateTime<=@DischargeDateTime  --Order by a.ID,c.Name    
union all
------------[SP_IP_GetAanesthesia] 20	ANAESTHESIA CHARGES
--Select 
----a.ID,a.AnaesthesiaTypeID,a.OrderDateTime as Datetime,a.OTStartDateTime,a.OperatorID,    
----a.BedID,b.Name,a.OTID 
--12,20,a.ID,a.OrderDatetime,a.OTStartDateTime,a.AnaesthesiaTypeID,a.BedID, a.OperatorID,
--b.Name,isnull(b.Code,'') as Code,1 as Quantity, 0 as price,
--(select max(departmentid) from IPBService where id = 20) as DepartmentId,'ANAESTHESIA',convert(varchar,a.OTID) as Destst
--from HIS.DBO.OTOrder a,HIS.DBO.Anaesthesia b Where a.patienttype=1 and a.IPIDOPID = @IPID     
--and a.OTStartDateTime>=@FromDateTime and a.OTStartDateTime<=@ToDateTime     
--and a.OrderDateTime<=@DischargeDateTime and    
-- a.AnaesthesiaTypeID=b.ID and b.BillingType=2 --Order By a.OTStartDateTime   
Select 
12,20,a.ID,b.OrderDatetime,b.OTStartDateTime,b.AnaesthesiaTypeID,a.BedID, a.OperatorID,
c.Name,isnull(c.Code,'') as Code,1 as Quantity, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 20) as DepartmentId,'ANAESTHESIA',convert(varchar,a.OTID) as Destst
from HIS.DBO.IPAnaesthesiaEntry a,HIS.DBO.OTOrder b,HIS.DBO.Anaesthesia c where a.IPID=@IPID and a.ID=b.ID   
and b.OTStartDateTime>=@FromDateTime and   
b.OTStartDateTime<=@ToDatetime and b.OrderDateTime<=@DischargeDateTime  
 and a.ServiceID=c.ID   
 union all
--------------[SP_IP_GetAnaesthesiaOrders] 20	ANAESTHESIA CHARGES
Select 
12,20,a.ID,a.OrderDatetime,a.OTStartDateTime,a.AnaesthesiaTypeID,a.BedID, a.OperatorID,
b.Name,isnull(b.Code,'') as Code,1 as Quantity, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 20) as DepartmentId,'ANAESTHESIA','' as Destst
from HIS.DBO.OTOrder a
left join HIS.DBO.Anaesthesia b on a.AnaesthesiaTypeID = b.id 
where 
a.IPIDOPID=@IPID  and 
a.OTStartDateTime>=@FromDateTime and   
a.OTStartDateTime<=@ToDateTime and b.BillingType=1 --Order by a.ID, b.Name  
union all
------------[SP_IP_GetCathProcedures] 16	CATH PROCEDURES
Select 
13,16,a.ID,a.OrderDateTime,a.ProcedureStartdateTime,b.Typeid as ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,1 as quantity, 0 as price,
c.DepartmentID,d.Name as DepartmentName,''
from HIS.DBO.CathOrder a
left join HIS.DBO.CathOrderDetail b on a.id = b.orderid 
left join HIS.DBO.CathProcedure c on b.TypeId = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
where a.IPIDOPID=@IPID and b.type = 1 and
a.ProcedureStartdateTime>=@FromDateTime and   
a.ProcedureStartdateTime <=@ToDateTime and   
a.OrderDateTime<=@DischargeDateTime   --Order by a.ID,c.Name  
union all
------------[SP_IP_GetLaundryOrders]	12	LAUNDRY
Select 
14,12,a.ID,a.DateTime,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,isnull(c.Code,'') as Code,b.Quantity, 0 as price,   
c.DepartmentID,d.Name as DepartmentName,''
from HIS.DBO.LaundryOrder  a
left join HIS.DBO.LaundryOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.LaundryItem c on b.ServiceID = c.ID
left join HIS.DBO.Department d on c.DepartmentID = d.ID
Where a.IPID=@IPID and b.OrderID=a.ID and c.ID=b.ServiceID  and c.DepartmentID=d.Id and   
a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime    --Order by a.ID, c.Name  
union all
------------[SP_IP_GetKitchenCharges] 4	KITCHEN CHARGES
Select 
15,4,a.ID,a.DateTime,a.DateTime,b.ServiceID,a.bedid,a.operatorid,
c.Name,C.Code,b.Quantity as Quantity, 0 as price,
c.DepartmentID,d.Name as DepartmentName,''
from HIS.DBO.FoodOrder a
left join HIS.DBO.FoodOrderDetail b on a.ID = b.OrderID
left join HIS.DBO.FoodItem c on b.ServiceId = c.Id
left join HIS.DBO.Department d on c.DepartmentID = d.ID
where a.IPID=@IPID and b.OrderID=a.ID and --a.Dispatched=2 and      
c.ID=b.ServiceID and c.DepartmentID=d.id and a.DateTime>=@FromDateTime and         
a.DateTime<=@ToDateTime -- and a.DispatchedDateTime<=@DischargeDatetime         
Union All        
Select 
15,4,a.ID,a.AdmitDateTime as DateTime,a.AdmitDateTime as BillDateTime,b.ServiceID,a.bedid,        
a.operatorid,c.Name,c.Code,b.Quantity as Quantity, 0 as price,   
c.DepartmentID, d.Name as DepartmentName ,''
from HIS.DBO.FoodOrder a
left join HIS.DBO.FoodOrderDetail b on a.ID = b.OrderID 
left join HIS.DBO.FoodItem c on b.ServiceId = c.Id
left join HIS.DBO.Department d on c.DepartmentID = d.ID        
left join HIS.DBO.Inpatient e on a.IPID = e.IPID 
where a.IPID=@IPID and isnull(a.DispatchedDateTime,a.DateTime)<=e.Admitdatetime --Order by a.ID, c.Name 
union all
------------[SP_IP_GetConsultations] 15	CONSULTATIONS
Select 
17,15,a.id,a.DateTime,a.DateTime,a.RefDocID,a.bedid,a.operatorid,  
b.Name,isnull(b.EmpCode,'') as Code ,1, 0 as price,
a.dept_id as DepartmentID,d.name as DepartmentName,''
from HIS.DBO.IPReferralPatient a
left join HIS.DBO.Employee b on b.ID=a.RefDocID
left join HIS.DBO.doctor_specialisation c on (c.DoctorID=a.RefDocID and a.dept_id=c.SpecialisationID)      
left join HIS.DBO.Department d on a.dept_id=d.Id
where a.ipid =@IPID and a.EmergencyCodeID in(0,1) and DateTime>=@FromDateTime and DateTime<@ToDateTime  --Order by a.RefDocID
union all
------------[SP_IP_GetNursingAdministration] 24	NURSING ADMINISTRATION
Select 
21,24,a.ID,a.DateTime,a.DateTime,b.ServiceID, a.bedid,a.operatorid,
c.Name,  isnull(c.code,'') as Code,Isnull(b.Quantity,1), 0 as price,    
c.DepartmentID,d.name as DepartmentName,'' 
from HIS.DBO.BSPExecution a,HIS.DBO.BSPExecutionDetail b,     
HIS.DBO.BedsideProcedure c,HIS.DBO.Department d 
where a.IPID=@IPID and b.OrderID=a.ID and c.ID=b.ServiceID     
and c.DepartmentID=d.Id and a.DateTime>=@FromDateTime and     
a.DateTime<@ToDateTime --order by a.ID, c.Name   

union all
------------[SP_IP_GetBloodCrossMatch] 25	BLOOD CROSS MATCH
Select 
23,25,ID,DateTime,DateTime,35,bedid,Operatorid,        
'CROSS MATCH','FMLAB-1035',1, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 25),'','' 
from HIS.DBO.CrossMatch         
where IPID=@IPID and 
componentid in(select id from HIS.DBO.component where type=1 and deleted=0)      
and DateTime>=@FromDateTime and DateTime<=@ToDateTime --Order by ID          
union all
------------[SP_IP_GetBloodIssues] 26	BLOOD ISSUES
Select 
24,26,a.ID,a.DateTime,a.DateTime,a.ComponentID,a.BedID,a.OperatorID,
b.Name,isnull(b.Code,''), a.Quantity, 0 as price,   
(select max(departmentid) from HIS.DBO.IPBService where id = 26),'',''
from HIS.DBO.Issue a,
HIS.DBO.BloodIssueMaster b,
HIS.DBO.BloodGroup c  
Where a.IPID=@IPID and a.ComponentID=b.ID     
and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime and     
a.BagGroup=c.ID --Order by a.ID,b.Name    
union all
------------[SP_IP_GetBloodComponents] 27	BLOOD COMPONENT
Select 
25,27,a.ID,a.DateTime,a.DateTime,a.ComponentID ,a.BedID,a.OperatorID,
isnull(b.Name,'No Setup'),isnull(b.Code,'No Code'),1, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 27),'','' 
from HIS.DBO.Issue a 
left join HIS.DBO.BloodComponent b  on a.ComponentID = b.ID
Where a.IPID=@IPID and a.DateTime>=@FromDateTime and a.DateTime<=@ToDateTime --Order by a.ID,b.Name    
union all
------------[SP_IP_GetBloodDonation] 28	BLOOD DONATION
Select 
26,28,a.DonorRegistrationNo,a.DonatedDate,a.DonatedDate, a.ProcID,c.bedid,a.operatorid,
b.Name ,isnull(b.Code,'') as Code,1, 0 as price,   
(select max(departmentid) from HIS.DBO.IPBService where id = 28),'',''
-- -(PAmount) as Fee,@DepartmentId as DepartmentId,              
from HIS.DBO.DonorReg a,
HIS.DBO.BloodDonationMaster b,              
HIS.DBO.BedTransfers c 
where a.IPID=@IPID and a.DonatedDate>=@FromDateTime and               
a.DonatedDate<=@ToDateTime and a.ProcID=b.ID and c.IPID=a.IPID and a.screenresult = 1 and              
a.DonatedDate Between c.FromDateTime and ISNull(c.ToDateTime,GetDate()) and c.Dual=0               
and a.DonorStatus=4 and IsNull(a.IssueID,0)=0 --Order by DonorRegistrationNo   
union all
------------[SP_IP_GetBloodBankOtherProcedures] 29	BLOOD BANK OTHER PROCEDURES
Select 
27,29,a.ID,a.DateTime,a.DateTime as BillDateTime,a.ProcedureID ,a.BedID,    
a.Operatorid,b.Name,isnull(b.Code,'') as Code,1, 0 as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 29),'',''
from HIS.DBO.BBOtherProceduresIssues a,HIS.DBO.BBOtherProcedures b  where a.IPID=@IPID and     
a.ProcedureID=b.ID and a.DateTime>=@Fromdatetime and     
a.DateTime<=@Todatetime --Order by a.ID    
union all
------------[SP_IP_GetPharmachySurcharge] 33	PHARMACY SERVICE CHARGE
select 
30,33,ID,DateTime,BillDateTime,SubstituteID,bedid,operatorid,
Name,Code,DispatchQuantity,Price,
DepartmentId,DepartmentName,convert(varchar,UnitID) + '|'+ convert(varchar,unit) + '|' + convert(varchar,SerialNo )
from     
(select ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,              
(DispatchQuantity - IsNull(SUM(ReturnQty),0)) DispatchQuantity, SUM(ReturnQty) ReturnQty,              
Case When (DispatchQuantity - IsNull((SUM(ReturnQty)),0)) = 0 then 'Y' else 'N' end Show              
,Price,name,Code,UnitID,unit,SerialNo from (
Select  f.OrderId DrugReturnId,  (f.Quantity) ReturnQty,              
b.BillableQty as DispatchQuantity,              
a.ID,a.DispatchedDateTime as DateTime,a.DateTime as BillDateTime,a.bedid,                      
a.operatorid,(select max(departmentid) from HIS.DBO.IPBService where id = 33) as DepartmentId,DepartmentName='NURSING ADMINISTRN',b.SubstituteID,                      
b.BillablePrice as Price,C.name,isnull(c.ItemCode,'') as Code,                    
b.UnitID,d.name as unit,isnull(b.batchid,0) as SerialNo                       
From HIS.DBO.DrugOrder a    
Inner Join HIS.DBO.DrugOrderDetailsubstitute b    
ON A.ID=B.OrderID    
Inner Join HIS.DBO.Item C    
ON C.ID=B.SubstituteID    
Inner Join HIS.DBO.Packing d    
ON D.ID=B.UNITID    
Left Outer Join (Select Sum(X.Quantity)Quantity,X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime FROM HIS.DBO.DrugReturnDetail X    
Inner Join HIS.DBO.DrugReturn Y    
ON Y.ID=X.OrderID    
Where IPID=@IPID AND Y.DateTime<=@DischargeDateTime    
Group BY X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime) f    
ON b.SubstituteId = f.serviceid and b.BatchID = f.BatchID AND A.ID=F.DrugOrderID       
Where a.IPID = @IPID and A.ISTAKEHOME <> 2 AND a.OrderType=1 and     
a.Dispatched>=2 and b.DispatchQuantity >0 and (c.EUB=0 or c.EUB is null) 
and a.DateTime >= @FromDateTime and a.DateTime < = @ToDateTime and a.DispatchedDateTime<=@DischargeDateTime
) a GROUP BY ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,
Price,name,Code,UnitID,unit,SerialNo ,DispatchQuantity
) a where a.Show = 'N' --Order by ID    
union all
	Select 30 as RowID,33 as IPSERVICEID,1 as ID,@FromDateTime DateTime,@FromDateTime as BillDateTime,1 ServiceID,0 bedid,0 operatorid,
	'Medicine Service' Name,'FMNUR-9001' Code,  1 Quantity,0 price,(select max(departmentid) from HIS.DBO.IPBService where id = 33),'' as DepartmentName,'||' as DestSt
union all
------------[SP_IP_GetTakeHomeMedicines] 37	TAKE HOME MEDICINES
select 
33,37,ID,DateTime,BillDateTime,SubstituteID,bedid,operatorid,
name,Code,DispatchQuantity,Price,
DepartmentId,DepartmentName,convert(varchar,UnitID) + '|'+ convert(varchar,unit) + '|' + convert(varchar,SerialNo )
from     
(select ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,              
(DispatchQuantity - IsNull(SUM(ReturnQty),0)) DispatchQuantity, SUM(ReturnQty) ReturnQty,              
Case When (DispatchQuantity - IsNull((SUM(ReturnQty)),0)) = 0 then 'Y' else 'N' end Show              
,Price,name,Code,UnitID,unit,SerialNo from    
(Select  f.OrderId DrugReturnId,  (f.Quantity) ReturnQty,              
b.BillableQty as DispatchQuantity,              
a.ID,a.DispatchedDateTime as DateTime,a.DateTime as BillDateTime,a.bedid,                      
a.operatorid,(select max(departmentid) from HIS.DBO.IPBService where id = 37) as DepartmentId,DepartmentName='TAKE HOME MEDICINES',b.SubstituteID,                      
b.BillablePrice as Price,C.name,isnull(c.ItemCode,'') as Code,                    
b.UnitID,d.name as unit,isnull(b.batchid,0) as SerialNo                       
From HIS.DBO.DrugOrder a    
Inner Join HIS.DBO.DrugOrderDetailsubstitute b    
ON A.ID=B.OrderID    
Inner Join HIS.DBO.Item C    
ON C.ID=B.SubstituteID    
Inner Join HIS.DBO.Packing d    
ON D.ID=B.UNITID    
Left Outer Join (Select Sum(X.Quantity)Quantity,X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime FROM HIS.DBO.DrugReturnDetail X    
Inner Join HIS.DBO.DrugReturn Y    
ON Y.ID=X.OrderID    
Where IPID=@IPID AND Y.DateTime<=@DischargeDateTime    
Group BY X.BatchID,X.ServiceID,X.DrugOrderID,X.OrderID,DateTime) f    
ON b.SubstituteId = f.serviceid and b.BatchID = f.BatchID AND A.ID=F.DrugOrderID       
Where a.IPID = @IPID and A.ISTAKEHOME =2 AND a.OrderType=1 and     
a.Dispatched>=2 and b.DispatchQuantity >0 and (c.EUB=0 or c.EUB is null) and              
a.DateTime >= @FromDateTime and a.DateTime < = @ToDateTime and a.DispatchedDateTime<=@DischargeDateTime) a 
group by                         
ID,DateTime,BillDateTime,bedid,operatorid,DepartmentId,DepartmentName,SubstituteID,Price,name,Code,UnitID,unit,SerialNo,                        
DispatchQuantity              
) a where a.Show = 'N' --Order by ID    
union all
------------[SP_IP_GetTelephoneCalls] 14	TELEPHONE CHARGES
Select 
16,14,ID,DateTime,DateTime,0,BedID,OperatorID,
isnull(RefNo,'NA') as Name,'FMTEL-0001' as Code, 1 as Fee,amount as price,
(select max(departmentid) from HIS.DBO.IPBService where id = 14) as DepartmentId,'TELEPHONE EXCHANGE',''
from HIS.DBO.IPPhoneEntry 
where IPID=@IPID and DateTime>=@FromDateTime and DateTime<=@ToDateTime          
Union All         
Select 
16,14,ID,EndTime, EndTime,0,bedid,0,
isnull(NumberCalled,'NA') as Name ,'FMTEL-0001' as Code,1 as Fee,cost as Fee,
(select max(departmentid) from HIS.DBO.IPBService where id = 14) as DepartmentId,'TELEPHONE EXCHANGE',''
from  HIS.DBO.TelephoneInpatientCalls where IPID=@IPID and         
EndTime>=@FromDateTime and EndTime<=@ToDateTime and Cost>0 and deleted = 0 --order by ID        
union all
------------[SP_IP_GetPinandMaterialandOthers] 22	MATERIALS & OTHERS
Select 
20,22,A.ID,DateTime,DateTime,a.itemid,bedid,a.operatorid,
B.NAME as Name,isnull(b.Code,'') as Code,1,a.Amount as price,
C.ID as DepartmentId,  C.NAME AS DepartmentName,''
from  HIS.DBO.IPPINEntry A ,
HIS.DBO.MISCITEMS B,
HIS.DBO.DEPARTMENT C 
where   
C.ID=B.DEPARTMENTID AND  A.ITEMID=B.ID AND A.IPID=@IPID and   
DateTime>=@FromDateTime and DateTime<=@ToDateTime  --order by A.ID  
union all
--[SP_IP_GetAssistantSurgeonCharges]	18	ASSISTANT SURGEON FEE
Select 
12,18,a.ID,a.DateTime,d.OTStartDateTime,a.ItemID,a.bedid,a.operatorid,
b.Name,isnull(b.EmpCode,''),1,a.Amount as Fee,  
c.SpecialisationID,e.Name,'' 
--from IPAsstSurgeonEntry a,  
from IPBILL.[IP_AsstSurgeonEntry] a,  
HIS.DBO.employee b,HIS.DBO.Doctor_Specialisation c,HIS.DBO.OTOrder d,HIS.DBO.Department e Where a.itemid=b.id and   
c.DoctorID=a.ItemID and a.IPID=@IPID and a.ID=d.ID and c.SpecialisationID=e.Id and   
d.OTStartDateTime>=@FromDateTime and   
d.OTStartDateTime<=@ToDateTime and   
d.OrderDateTime<=@DischargeDateTime  
 union all
----[SP_IP_GetCSSReturns] 21	CENTRAL STORAGE SUPPLIES RETURNS
--Select 
--6,21,b.DrugOrderID,e.DateTime,a.ReceivedDateTime,b.ServiceID,a.BedID,a.OperatorID,
--C.name,isnull(c.ItemCode,''),b.Quantity,isNull(b.Price,0) as Price,
--@DepartmentId,'CENTRAL STORAGE SUPPLIES',
--convert(varchar,b.UnitID) + '|'+ convert(varchar,d.Name) + '|' + convert(varchar,b.batchid )
--From HIS.DBO.DrugReturn a,HIS.DBO.DrugReturnDetail b,HIS.DBO.Item C,HIS.DBO.Packing d,HIS.DBO.DrugOrder e 
--Where a.IPID = @IPID and b.DrugOrderID = e.ID and
--b.OrderID=a.ID and c.ID=b.ServiceID and b.UnitID=d.ID and (c.EUB=0 or c.EUB is null) and            
--a.OrderType=0 and b.quantity>0 and a.Status=1 and a.DateTime >= @FromDateTime           
--and a.DateTime < = @ToDateTime and a.ReceivedDateTime<=@DischargeDateTime --order by a.ID,c.Name          
--union all
--[SP_IP_GetOperationTheatreCharges] 9	OPERATION THEATRE CHARGES          
Select 
9,9,a.ID,a.DateTime,b.OTStartDateTime,a.ServiceID,a.bedid,a.operatorid,
a.RefNo as Name,ISNULL(A.ITEMCODE,'') as Code,1,a.Amount,
ISNULL(A.DEPARTMENTID,0) as DepartmentId,c.Name,''  
from IPBILL.IP_OREntry a
left join HIS.DBO.OTOrder b on a.ID=b.ID
left join HIS.DBO.Department c on a.DEPARTMENTID = c.id
where a.IPID=@IPID and b.OTStartDateTime>=@FromDateTime         
and b.OTStartDateTime<=@ToDateTime and         
b.OrderDateTime<=@DischargeDateTime        
union all  
--[SP_IP_GetORNursingAdminCharges] 31	OR NURSING ADMINISTRATION
Select 
22,31,a.ID,a.DateTime,a.DateTime,0,a.bedid,a.operatorid, 
a.RefNo,ISNULL(A.ITEMCODE,''),1,a.Amount,
(select max(departmentid) from HIS.DBO.IPBService where id = 31),'NURSING ADMINISTRN',''
from HIS.DBO.IPORNursingAdministrationEntry a,HIS.DBO.OTOrder b      
Where a.IPID=@IPID and a.ID=b.ID and b.OTStartDateTime>=@FromDateTime      
and b.OTStartDateTime<=@ToDateTime and       
b.OrderDateTime<=@DischargeDateTime      
union all
----[SP_IP_GetORNursingAdministration]  24	NURSING ADMINISTRATION
--Select 
--21,24,a.ID,a.OrderDateTime as Datetime,a.OTStartDateTime,a.AnaesthesiaTypeID,a.BedID,a.OperatorID,
--'','',1,0,0,'',''
--from HIS.DBO.OTOrder a,HIS.DBO.Anaesthesia b Where a.patienttype=1 and       
--a.IPIDOPID = @IPID and a.OTStartDateTime>=@FromDateTime and       
--a.OTStartDateTime<=@ToDateTime and a.OrderDateTime<=@DischargeDateTime      
--and a.AnaesthesiaTypeID=b.ID --Order By a.OTStartDateTime      
--union all
--[SP_IP_GetPharmacyReturns] 23	PHARMACY RETURNS
--Select 
--18,23,b.DrugOrderID,e.DateTime,a.DateTime,B.SERVICEID,a.BedID,a.OperatorID,
--c.Name,C.ITEMCODE, b.Quantity,isNull(f.Price,0) as Price,
--@DepartmentId,'PHARMACY',
--convert(varchar,f.UnitID) + '|'+ convert(varchar,d.Name) + '|' + convert(varchar,b.batchid )              
--From HIS.DBO.DrugReturn a              
--left join HIS.DBO.DrugReturnDetail b on a.ID=b.OrderID
--left join HIS.DBO.DrugOrder e on b.DrugOrderID = e.ID
--left join HIS.DBO.Item C on b.ServiceID = c.id
--left join drugorderdetailsubstitute f on (b.DrugOrderId = f.OrderId and b.ServiceID =f.SubstituteId and b.batchid = f.batchid)
--left join HIS.DBO.Packing d on f.UnitID=d.ID      
--Where a.IPID = @IPID and (c.EUB=0 or c.EUB is null) and  a.OrderType=1 and                 
--b.quantity>0 and a.DateTime >= @FromDateTime and                 
--a.DateTime < = @ToDateTime --order by a.ID,c.Name  
--union all
--[SP_IP_GetRecoveryRoomCharges] 11	RECOVERY ROOM CHARGES
Select 
11,11,a.ID,a.DateTime,b.OTStartDateTime,0,a.bedid,a.operatorid,
a.RefNo,ISNULL(A.ITEMCODE,''),1,a.Amount, 
ISNULL(A.DEPARTMENTID,0),c.name,''
from IPBILL.IP_RecoveryEntry a
left join HIS.DBO.OTOrder b on a.ID=b.ID
left join HIS.DBO.Department c on a.departmentid = c.id
where a.IPID=@IPID and 
b.OTStartDateTime>=@FromDateTime and b.OTStartDateTime<=@ToDateTime            
and b.OrderDateTime<=@DischargeDateTime            
union all

------------------ OT PROCEDURES
--[SP_IP_OTSurgeries] 10	SURGICAL PROCEDURES   
Select 
10,10,a.ID,a.OrderDateTime,a.OrderDateTime,b.TypeID,a.OperatorID,a.BedID,
c.Name,'',1,0,
c.DepartmentID,d.Name,convert(varchar,a.OTID )
from HIS.DBO.OTOrder a,		
HIS.DBO.OTOrderDetail b,HIS.DBO.Surgery c,HIS.DBO.Department d Where a.IPIDOPID = @IPID And b.OrderID = a.ID   
And b.Type = 1 and c.id=b.typeid and c.DepartmentID=d.Id and   
a.OTStartDateTime<=@FromDateTime and a.OTEndDateTime>=@FromDateTime   --Order by a.ID,c.Name      

) aa
order by IPSERVICEID


GO

/****** Object:  StoredProcedure [ITADMIN].[IPBILL_GETBILL_IN_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
[IPBILL].[IPBILL_GETBILL] 175351,53,
Last Update : 29-Feb-2015

exec [IPBILL].IPBILL_GETBILL_IN
2235,51,
'09 Oct 2016 22:11:49',
'30 Oct 2016 22:11:49',
'30 Oct 2016 22:11:49',
1,--@CompanyID varchar(10),
1 ,--@GradeID int,
1,--@TariffID varchar(10),
1 ,--@CategoryID int,
0,--@PrintPayable
1,--@OperatorID,
1,--Discharge
0,--@ExcludeRoomBill
0,--@PackageID
'',
0

*/

create proc [ITADMIN].[IPBILL_GETBILL_IN_test]
@IPID int,
@DepartmentId int,            
@FromDateTime datetime,
@ToDateTime datetime,
@DischargeDateTime datetime,
@CompanyID varchar(10),
@GradeID int,
@TariffID varchar(10),
@CategoryID int,
@PrintPayable int,	/*1 for Prepare Payable*/
@OperatorID int,
@Discharge int = 0,	/*1 for discharge*/
@ExcludeRoomBill int,
@PackageID int,
@ReturnMessage VARCHAR(100) OUT,
@ReturnFlag int OUT
as 
set nocount on;
set @ReturnMessage = ''
declare
@DiscTest int,
@BedType int,
@Billroomtype varchar(5),
@squery varchar(max),
@PriceTable varchar(50),
@sPriceTable varchar(50),
@BedTypeID varchar(5),
@DoctorID int,
---VARIABLES FOR DISCHARGE
	@ddate datetime,
	@SLNO int,
	@BillType int,
	@Cash int,
	@BillNo int,
	@SerialNo int,
	@IPBillDateTime datetime
	
set @IPBillDateTime = dateadd(MINUTE,-1, convert(datetime,DATEADD(d,1,convert(varchar(10),GETDATE()-1,101))))
set @DiscTest = @Discharge

create table #temp (
RowID int,
IPSERVICEID int,
ID int,
OrderDateTime datetime, 
BillDateTime datetime,
ItemID	int,
BedID	int,
OperatorID int,
ItemName		varchar(100),
ItemCode	varchar(100),  
Quantity	int,
Price		numeric(18,2),
DepartmentID	int,
DepartmentName	varchar(100),
DestSt	varchar(100),
Deleted int
)
set @CategoryID = ISNULL(@CategoryID,1)
set @CompanyID = ISNULL(@CompanyID,1)
--set @TariffID = ISNULL(@TariffID,1)
if (isnull(@TariffID,0) = 0)
begin
	select @TariffID = TariffID from his.dbo.company where ID = @CompanyID
	update his.dbo.inpatient set TariffID = ISNULL(TariffID,@TariffID) where IPID = @IPID
end
set @GradeID = ISNULL(@GradeID,1)
set @PackageID = ISNULL(@PackageID,0)
select 
@doctorid = doctorid,@BillType = BillType,@Cash = b.Cash,@BedTypeID = a.BedTypeID 
from HIS.DBO.allInPatients a 
left join HIS.DBO.IPBillType b on a.BillType = b.Id
where ipid = @IPID

--if datediff(year,(select admitdatetime from HIS.DBO.inpatient where ipid = @IPID),GETDATE()) <> 0
--begin
	insert into #temp
	exec ipbill.IPBILL_GETSERV_IN @IPID,@DepartmentId,@FromDateTime,@ToDateTime,@DischargeDateTime
	
	insert into #temp
	exec ipbill.IPBILL_GETSERV_CAN @IPID,@DepartmentId,@FromDateTime,@ToDateTime,@DischargeDateTime
	-->Added new feature : Check not delivered items/orders 21-Feb-2017 15:10
	update a
	set DepartmentName = case when  a.DepartmentName like '%NOTDELIVERED%' then  c.Name + '-NOTDELIVERED' else c.name end
	from #temp a
	inner join his.dbo.Department c on a.DepartmentId = c.ID
	
	insert into #temp
	exec [IPBILL].[IPBILL_GETBED_IN]  @IPID,@DepartmentId,@FromDateTime,@ToDateTime,@DischargeDateTime

if OBJECT_ID('HIS.DBO.IPCompanyServiceCharge') is not null
begin
	if exists(select * from HIS.DBO.IPCompanyServiceCharge) 
	begin
		insert into #temp
		select  30,38,1,@FromDateTime,@FromDateTime,IPSERVICEID,(select max(id) from HIS.dbo.BED where ipid = @ipid),1,'','SERV-' + convert(varchar,IPSERVICEID),1,0,b.DepartmentID,c.name,'',0 from #temp a
		left join HIS.IPBILL.IPBSERVICES B on B.id = 38
		left join HIS.dbo.Department c on b.departmentId = c.id		
		group by IPSERVICEID,b.DepartmentID,c.name		
	end
end

--if exists(select  * from ipbill.IPBillAdditionalOthers where ipid = @IPID)
--begin
--	insert into #temp
--	select  31,case when IPServiceID=0 then 22 else IPServiceID end,1,@FromDateTime,@FromDateTime,ItemID,(select max(bedid) from HIS.dbo.BedTransfers where ipid = @ipid),1,'',
--	'OTHERS-' + convert(varchar,IPSERVICEID),1,0,0,'Others','',0 from ipbill.IPBillAdditionalOthers 
--	where IPID= @IPID and OrderID = 0
--end

delete from #temp where IPSERVICEID in (select id from HIS.DBO.IPBService where Deleted = 1)

--??New logic for OT Order due to late ordering of Surgery - 15-Aug 2016
if exists(select *
from #temp a
inner join his.dbo.BedTransfers b on a.BillDateTime >= b.fromdatetime and a.BillDateTime < b.todatetime and b.ipid = @IPID
where IPSERVICEID in (10,25))
begin
	update a
	set a.BedID = b.bedid
	from #temp a
	left join his.dbo.BedTransfers b on a.BillDateTime >= b.fromdatetime and a.BillDateTime < isnull(b.todatetime,getdate()) and b.ipid = @IPID
	where IPSERVICEID in (10,25) and a.Deleted = 0
end

--??New logic for billroom type
select 
a.*,
case when b.OrderType = 4 then b.ServiceName else DepartmentName end as PrinteServiceHeader,
--??'P_'+ @TariffID + '_' + convert(varchar,c.BedTypeID) + '_'  + b.PriceTable as sPriceTable,
--'P_'+ @TariffID + '_' + convert(varchar,g.billroomtype)  + '_'  + b.PriceTable as sPriceTable,
'P_'+ (case when h.ID Is not null then  '1' else @TariffID end ) + '_' + convert(varchar,g.billroomtype)  + '_'  + b.PriceTable as sPriceTable,
c.BedTypeID,d.type as BedTypeType, 
convert(varchar(250),b.PriceTable) as PriceTable,
case when h.ID Is not null then  1 else @TariffID end as TariffID,
case when h.ID Is not null then  '1' else @CompanyID end as CompanyID,
@CategoryID as CategoryID,
convert(numeric(18,2),0) as Discount,
0 as DiscountLevel,
0 as MarkUpLevel,
convert(numeric(18,2),0) as DiscountPercent,
convert(numeric(18,2),0) as MarkUp,
convert(numeric(18,2),0) as Deposit,
convert(numeric(18,2),0) as Refund,
convert(numeric(18,2),0) as LessReceipt,

CONVERT(numeric(18,2),0) as Deductible,
convert(numeric(18,2),0) as DeductiblePercent,
0 as DDCLevel,
convert(numeric(18,2),0) as DDCDeposit,
convert(numeric(18,2),0) as DDCRefund,
convert(numeric(18,2),0) as DDCDiscount,

CONVERT(numeric(18,2),0.00) as ApolloAmount,
convert(numeric(18,2),0) as ApolloPercent,
convert(numeric(18,2),0) as ApolloDiscount,
convert(numeric(18,2),0) as ApolloDeposit,
convert(numeric(18,2),0) as ApolloRefund,

g.billroomtype as BillRoomType,
f.orderno as ServOrder,
identity(int,1,1) as IDD,
case when h.ID Is not null then  '1' else 0 end as Tariff,	--1 if Cash, 2 - if Old , 0 if Current tariff
convert(numeric(18,2),0) as PackagePrice,
0 as PackageID,
0 as LimitID,
0 AS PACKAGEBILL,
0 as FinalBillDiscount
into #temp2
from #temp a
left join his.ipbill.IPBServices b on a.IPSERVICEID = b.ID
left join his.dbo.bed c on a.BedID = c.ID
left join his.dbo.bedtype d on a.BedID  = d.id
left join his.IPBILL.IPBDisplayServices  f on a.IPSERVICEID = f.ID 
left join (select bedid,min(billroomtype) as billroomtype from his.dbo.bedtransfers where ipid = @IPID group by bedid) g on a.BedID = g.bedid

left join IPBILL.DaysExclusionAR h on datediff(day,a.OrderDateTime,h.datetime) = 0 and h.Deleted = 0 and h.IPID = @IPID	--?? AR DAYWISE EXCLUSION
order by f.OrderNo,a.OrderDateTime,a.ID

update a set BillRoomType = b.billroomtype
from #temp2 a
left join (select bedid,MAX(billroomtype) as billroomtype from his.dbo.bedtransfers where ipid = @IPID group by bedid) b on a.ItemID = b.bedid
where a.BillRoomType is null and a.IPSERVICEID in (2,3)

--select * from #temp2 a
--left join HIS.dbo.BedTransfers b on a.OrderDateTime>=b.fromdatetime and a.OrderDateTime <b.todatetime
--where ipid = @IPID

--update #temp2 set sPriceTable = 'P_1_2_Test',BedTypeID=2 where IPSERVICEID in (13)
--update #temp2 set sPriceTable = 'P_1_2_Surgery',BedTypeID=2 where IPSERVICEID in (10)


-------Added to check item with no billroom type - 20-jun-2016
update a
set 
	a.BillRoomType = c.billroomtype,
	sPriceTable = 'P_'+ @TariffID + '_' + convert(varchar,c.billroomtype)  + '_'  + b.PriceTable
from #temp2 a
left join his.ipbill.IPBServices b on a.IPSERVICEID = b.ID
left join (select e.bedid,e.billroomtype from his.dbo.BedTransfers e where  e.ipid = @IPID 
	group by e.bedid,e.billroomtype) c on a.BedID = c.bedid
where isnull(a.BillRoomType ,0) = 0

-----------------------------------------------------------------------------------PRICE COMPUTATION
-------ROOM AND BOARD-------
if exists(select * from #temp2 where IPSERVICEID = 2)
begin
	--> UPDATE FIX FOR READING OLDP_RENT, REMOVE  "b.bedtypeid is not null" 2-Mar-2017 14:36
	update #temp2
	set #temp2.Price = 
		case when a.BillDateTime <= b.StartDateTime then isnull(c.price,0)
		else ISNULL(b.price,c.price) end
	from #temp2 a
	left join his.dbo.OldP_Rent c on a.bedid = c.bedtypeid and c.CategoryID = @TariffID and 
		a.BillDateTime > isnull(c.StartDateTime,GETDATE()) and a.BillDateTime < isnull(c.EndDateTime,dateadd(day,1,GETDATE()))
	left join his.dbo.P_Rent b on a.bedid = b.bedtypeid and b.CategoryID =@TariffID and a.BillDateTime >  isnull(b.StartDateTime,GETDATE()) and 
		a.BillDateTime <=  isnull(b.EndDateTime,dateadd(day,1,GETDATE()))
	where IPSERVICEID = 2
	
	-->UPDATE FIX FOR RENT WITHOUT TARIFF. GET FROM CASH. 4-MAR-2017 13:46
	if exists(select* from #temp2 where IPSERVICEID = 2 and isnull(price,0) =0)
	begin
	update #temp2
	set #temp2.Price = 
		case when a.BillDateTime <= b.StartDateTime then isnull(c.price,0)
		else ISNULL(b.price,c.price) end
		from #temp2 a
		left join his.dbo.OldP_Rent c on a.bedid = c.bedtypeid and c.CategoryID = 1 and 
			a.BillDateTime > isnull(c.StartDateTime,GETDATE()) and a.BillDateTime < isnull(c.EndDateTime,dateadd(day,1,GETDATE()))
		left join his.dbo.P_Rent b on a.bedid = b.bedtypeid and b.CategoryID =1 and a.BillDateTime >  isnull(b.StartDateTime,GETDATE()) and 
			a.BillDateTime <=  isnull(b.EndDateTime,dateadd(day,1,GETDATE()))
		where IPSERVICEID = 2  and ISNULL(a.price,0) = 0
	end
	
			
	-------ROOM DIFFERENCE-------	Cash not included
	if exists(select * from #temp2 where IPSERVICEID = 2 and BedID <> @BedTypeID) --?? new logic
	begin	
	declare
	@MaxBedPrice numeric(18,2)

	if (@CompanyID <> 1)
	begin
		select @MaxBedPrice = isnull(MAX(price),0) from his.dbo.BedTypeGrade a
		left join his.dbo.p_rent b on a.bedtypeid = b.BedTypeID	and b.CategoryID = @TariffID
		where a.categoryid = @CategoryID and companyid = @CompanyID and gradeid = @GradeID and a.bedtypeid = @BedTypeID
		set @MaxBedPrice = ISNULL(@MaxBedPrice,0)
		
	end
	if exists(select * from #temp2 where BedTypeType <> (select MIN(bedtypeid) from his.dbo.BedTypeGrade where categoryid = @CategoryID and companyid = @CompanyID and bedtypeid = @BedTypeID) and IPSERVICEID = 2) and @CompanyID <> 1 and @BedTypeID <> 10
		begin		
			select a.ID,c.Price as Tariff,a.type 
			into #temp_beddiff 
			from his.dbo.bedtype a
			left join his.dbo.BedTypeGrade b on a.id = b.bedtypeid and  categoryid = @CategoryID and companyid = @CompanyID
			left join his.dbo.P_Rent c on c.BedTypeID = b.bedtypeid and c.CategoryID = @TariffID	
			where a.deleted = 0 and type=1 and c.Price is not null group by a.ID,c.Price,a.type	

	
		if (select COUNT(*) from #temp_beddiff) <> 0
		begin						
			if (select MAX(a.price) from #temp2 a  where bedid in (select id from HIS.dbo.bedtype where type=1)) > 				
				(select tariff from #temp_beddiff where id = (select MIN(bedtypeid) from his.dbo.BedTypeGrade where categoryid = @CategoryID and companyid = @CompanyID and bedtypeid >= @BedTypeID))
				begin			
					update  a
					set a.ApolloAmount= case when (select tariff from #temp_beddiff where id = @BedTypeID ) > a.Price then 0 else a.price end
					from #temp2 a
					where BedTypeType < (select MIN(bedtypeid) from his.dbo.BedTypeGrade where categoryid = @CategoryID and companyid = @CompanyID and bedtypeid = @BedTypeID) and IPSERVICEID = 2			
					and a.DepartmentID not in (35,5) --??Exclude ICU/ER in Room Difference
			
					update  a
					set a.Price= case when (select tariff from #temp_beddiff where id = @BedTypeID ) > a.Price then a.price else (select tariff from #temp_beddiff where id = @BedTypeID ) end
					from #temp2 a
					where BedTypeType < (select MIN(bedtypeid) from his.dbo.BedTypeGrade where categoryid = @CategoryID and companyid = @CompanyID and bedtypeid = @BedTypeID) and IPSERVICEID = 2			
					and a.DepartmentID not in (35,5) and a.Price <> 0 --??Exclude ICU/ER in Room Difference 
				
					update  a
					set a.ApolloAmount= a.ApolloAmount - a.Price
					from #temp2 a
					where BedTypeType < (select MIN(bedtypeid) from his.dbo.BedTypeGrade where categoryid = @CategoryID and companyid = @CompanyID and bedtypeid = @BedTypeID) and IPSERVICEID = 2			
					and a.DepartmentID not in (35,5) and a.Price <> 0 and  a.ApolloAmount - a.Price > 0 --?? Exclude EROR in Room Difference
				
				end
			end			
			drop table #temp_beddiff
		end
		
		if not exists(select * from #temp2 where IPSERVICEID = 2 and ApolloAmount <> 0 and price<>0)
		begin
			if (@MaxBedPrice <>0)
			begin		
				update #temp2 set 
				ApolloAmount =  case when price >@MaxBedPrice  then price else 0 end
				where IPSERVICEID = 2 and BedID <> @BedTypeID and ApolloAmount = 0 and itemid not in (
					select id from bed where stationid in (21,55)) and price<>0--ICU and NBD	
					
				update #temp2 set 
				price = case when  price > @MaxBedPrice  then @MaxBedPrice  else  price end, 
				ApolloAmount = case when ApolloAmount =0 then 0 else ApolloAmount - @MaxBedPrice end
				where IPSERVICEID = 2 and BedID <> @BedTypeID and price <> 0 and ApolloAmount <> 0
					and itemid not in (
						select id from bed where stationid in (21,55)) and price<>0 --ICU and NBD
						
			end
		end
	end
	-------END ROOM DIFFERENCE-------
	
	--if exists(select id from #temp2 where IPSERVICEID = 2 group by id having SUM(price)=0)
	if exists(select id from #temp2 where IPSERVICEID = 2 and BedID <> 17 and DepartmentID <> 35 and ApolloAmount =0  group by id having SUM(price)=0) --?? Exclue ER in the price check bec it is always 0
	begin
	
	
		update #temp2
		set #temp2.Price = case when a.BillDateTime <= b.StartDateTime then isnull(c.price,0)
		else ISNULL(b.price,0) end
		from #temp2 a
		left join his.dbo.P_Rent b on a.bedid = b.bedtypeid and b.categoryid = 1 and a.OrderDateTime >b.startdatetime and a.OrderDateTime <= dateadd(day,1,isnull(b.enddatetime,getdate()))
		left join his.dbo.OldP_Rent c on a.bedid = c.bedtypeid and c.categoryid = 1 and a.OrderDateTime >c.startdatetime and a.OrderDateTime <= dateadd(day,1,isnull(c.enddatetime,getdate()))
		where b.bedtypeid is not null and IPSERVICEID = 2 and a.price = 0	and BedID <> 17 and DepartmentID <> 35--??	
		
			
		if (@MaxBedPrice <>0)
		begin		
			update #temp2 set 
			ApolloAmount =  case when price >@MaxBedPrice  then price else 0 end
			where IPSERVICEID = 2 and BedID <> @BedTypeID and ApolloAmount = 0 and itemid not in (
				select id from bed where stationid in (21,55)) --ICU and NBD		
				and price <>0 and ApolloAmount = 0 and ApolloAmount - @MaxBedPrice >0
			update #temp2 set 
			price = case when  price > @MaxBedPrice  then @MaxBedPrice  else  price end, 
			ApolloAmount = case when ApolloAmount =0 then 0 else ApolloAmount - @MaxBedPrice end
			where IPSERVICEID = 2 and BedID <> @BedTypeID and price <> 0 and ApolloAmount <> 0
				and itemid not in (
					select id from bed where stationid in (21,55)) --ICU and NBD
				and price <>0 and ApolloAmount <> 0 and ApolloAmount - @MaxBedPrice >0
		end
		
	end
	
	--delete from  #temp2 where IPSERVICEID = 2 and price = 0
end

-------MEDICAL SUPERVISION-------
if exists(select * from #temp2 where IPSERVICEID = 3) --?? and (select SUM(price) from #temp2 where IPSERVICEID = 2) <> 0
begin
declare @billdate datetime
select @billdate =  min(BillDateTime) from #temp2 where IPSERVICEID = 3
	--> UPDATE FIX FOR READING OLDP_RENT, REMOVE  "b.bedtypeid is not null" 2-Mar-2017 14:36
	update #temp2
	set #temp2.Price = case when @billdate <= b.StartDateTime then isnull(c.price,0)
		else ISNULL(b.price,c.price) end
	from #temp2 a
	left join his.dbo.P_nurse b on a.bedid = b.bedtypeid and b.CategoryID = @TariffID and b.Deleted=0
		and a.OrderDateTime >b.startdatetime and a.OrderDateTime <= dateadd(day,1,isnull(b.enddatetime,getdate()))
	left join his.dbo.OldP_nurse c on a.bedid = c.bedtypeid and c.CategoryID = @TariffID and c.Deleted=0 
		and a.OrderDateTime >c.startdatetime and a.OrderDateTime <= dateadd(day,1,isnull(c.enddatetime,getdate()))
	where IPSERVICEID = 3
		
	if exists(select * from #temp2 where IPSERVICEID = 3 and isnull(price,0)=0)
	begin
		update #temp2
		set #temp2.Price =
			case when @billdate <= b.StartDateTime then isnull(c.price,0)
		else ISNULL(b.price,c.price) end,
		#temp2.categoryid = 1,
		Tariff = 1
		from #temp2 a
		left join his.dbo.P_nurse b on a.bedid = b.bedtypeid and b.categoryid = 1 
		left join his.dbo.OldP_nurse c on a.bedid = c.bedtypeid and c.categoryid = 1 	
		where IPSERVICEID = 3 and isnull(a.price,0) = 0
		
	end
	--delete from  #temp2 where IPSERVICEID = 3 and price = 0
end

-------MEDICAL SUPERVISION WITH ZERO ROOM AND BOARD HARD CODE-------
-->UPDATED : ADDED THE "and b.ApolloAmount = 0" to add medical supervision for exclusion room and board : 28-JUN-2017 10:42
if exists(select * from #temp2 where IPSERVICEID = 2 and price = 0)
begin
	update  a
	set a.Price = 0
	from #temp2 a
	inner join #temp2 b on a.ItemID = b.ItemID and b.IPSERVICEID = 2 and DATEDIFF(day,a.OrderDateTime,b.OrderDateTime) = 0
	where a.IPSERVICEID = 3 and b.price = 0 and a.Price <> 0 and b.ApolloAmount = 0
end


-------OTHER SERVICES-------
select @sPriceTable = MIN(sPriceTable) from #temp2
while @sPriceTable is not null
begin
select @BedTypeID = min(BedTypeID),@PriceTable = MIN(PriceTable),@Billroomtype = MIN(BillRoomType) from #temp2 where @sPriceTable = sPriceTable
	set @squery = '
	if OBJECT_ID(''his.dbo.'+@sPriceTable+' '') is not null
	begin
		IF EXISTS(SELECT * FROM sys.columns WHERE Name = N''startdatetime'' AND Object_ID = Object_ID(N''his.DBO.'+@sPriceTable+'''))
			and EXISTS(SELECT * FROM sys.columns WHERE Name = N''enddatetime'' AND Object_ID = Object_ID(N''his.dbo.'+@sPriceTable+'''))
		BEGIN
			---->ADDED TO FIX END DATE TIME WITH VALUE IN CURRENT PRICE 14-Mar-2017 11:09
			if exists(select * from HIS.DBO.'+@sPriceTable+' where enddatetime is not null)
			begin				
				update HIS.DBO.'+@sPriceTable+' set enddatetime = null where enddatetime is not null
			end
			
			update #temp2
			set #temp2.Price = isnull(b.price,0)
			from #temp2 a
			left join HIS.DBO.'+@sPriceTable+' b on a.itemid = b.id and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,isnull(b.enddatetime,getdate()))
			where b.id is not null and a.sPriceTable = '''+ @sPriceTable +'''
			
			if OBJECT_ID(''his.dbo.Old'+@sPriceTable+' '') is not null
			begin
				if exists(select * from #temp2 where sPriceTable = '''+ @sPriceTable +'''  and price = 0 )
				begin		
					update #temp2
					set #temp2.Price = b.price
					from #temp2 a
					left join HIS.DBO.old'+@sPriceTable+' b on a.itemid = b.id and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,b.enddatetime)				
					where b.id is not null and a.sPriceTable = '''+ @sPriceTable +''' and a.price = 0
				end
			end
				
		END
		else
		begin
			update #temp2
			set #temp2.Price = b.price
			from #temp2 a
			left join HIS.DBO.'+@sPriceTable+' b on a.itemid = b.id
			where b.id is not null and a.sPriceTable = '''+ @sPriceTable +'''
		end		
	end
	
	if OBJECT_ID(''his.DBO.P_1_'+@Billroomtype+'_'+@PriceTable+' '') is not null
	begin
		if exists(select * from #temp2 where isnull(price,0) = 0 and sPriceTable = '''+ @sPriceTable +''' and IPSERVICEID <> 15)
			begin	
				IF EXISTS(SELECT * FROM sys.columns WHERE Name = N''startdatetime'' AND Object_ID= OBJECT_ID(N''his.DBO.P_1_'+@Billroomtype+'_'+@PriceTable+' ''))
						and EXISTS(SELECT * FROM sys.columns WHERE Name = N''enddatetime'' AND  Object_ID=OBJECT_ID(N''his.DBO.P_1_'+@Billroomtype+'_'+@PriceTable+' ''))
				BEGIN
					update a
					set a.Price = b.price, Tariff = 1
					from #temp2 a
					left join HIS.DBO.P_1_'+@Billroomtype+'_'+@PriceTable+' b on a.itemid = b.id and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,isnull(b.enddatetime,getdate()))				
					where b.id is not null and isnull(a.price,0) = 0 and a.sPriceTable = '''+ @sPriceTable +'''
					
					if exists(select * from #temp2 where sPriceTable = '''+ @sPriceTable +''' and Price = 0 )
					begin	
						update a
						set a.Price = b.price, sPriceTable = ''OldP_1_'+@Billroomtype+'_'+@PriceTable+''',Tariff = 1
						from #temp2 a
						left join HIS.DBO.oldP_1_'+@Billroomtype+'_'+@PriceTable+' b on a.itemid = b.id and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,b.enddatetime)				
						where b.id is not null and isnull(a.price,0) = 0 and a.sPriceTable = '''+ @sPriceTable +'''
	
					end
					--else 
					--begin
					--	update a
					--	set sPriceTable = ''P_1_'+@Billroomtype+'_'+@PriceTable+''', Tariff = 1
					--	from #temp2 a where a.sPriceTable = '''+ @sPriceTable +'''
					--end
				end
				else
				begin
					update a
					set a.Price = b.price, Tariff = 1, sPriceTable = ''P_1_'+@Billroomtype+'_'+@PriceTable+'''
					from #temp2 a
					left join HIS.DBO.P_1_'+@Billroomtype+'_'+@PriceTable+' b on a.itemid = b.id 
					where b.id is not null and isnull(a.price,0) = 0 and a.sPriceTable = '''+ @sPriceTable +'''
				end	
		end	
		else if exists(select * from #temp2 where isnull(price,0) = 0 and sPriceTable = '''+ @sPriceTable +''' and IPSERVICEID = 15)
		begin
			update a
			set sPriceTable = ''FIXCONS'', Tariff = 1, a.Price = (select max(FixedConCharges) from HIS.DBO.company where id = '+@CompanyID+' )
			from #temp2 a where a.sPriceTable = '''+ @sPriceTable +''' and isnull(price,0) = 0 and IPSERVICEID = 15
		end
		
		
		
	end		
	'
	exec(@squery)	
	select @sPriceTable = MIN(sPriceTable) from #temp2 where sPriceTable > @sPriceTable
end
--select* FROM #temp2 where IPSERVICEID = 5
-------BLOOD CROSS MATCH	-	CategoryID is @TariffID-------
if exists(select * from #temp2 where isnull(price,0) = 0 and IPSERVICEID = 25)
begin
select @BedTypeID = a.BedTypeID 
from HIS.DBO.allInPatients a 
where ipid = @IPID
	-->UPDATE FOR OLDP_CrossMatch 2-MAR-2017 14:20
	update a
	set a.Price = b.price
	from #temp2 a
	left join HIS.DBO.P_CrossMatch b on b.BedTypeID = @BedTypeID and b.CategoryID = @TariffID and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,isnull(b.enddatetime,getdate()))
	where b.BedTypeID is not null and isnull(a.price,0) = 0 and IPSERVICEID = 25
	
	update a
	set a.Price = b.price
	from #temp2 a
	left join HIS.DBO.oldP_CrossMatch b on b.BedTypeID = @BedTypeID and b.CategoryID = @TariffID and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,b.enddatetime)				
	where b.BedTypeID is not null and isnull(a.price,0) = 0 and IPSERVICEID = 25
				
	--CASH DEFAULT
	update a
	set a.Price = b.Price,
	--??a.ApolloAmount = b.Price,
	Tariff = 1
	from #temp2 a
	left join HIS.DBO.P_CrossMatch b on  b.BedTypeID = @BedTypeID and  b.CategoryID = 1
	where b.BedTypeID is not null and isnull(a.price,0) = 0 and IPSERVICEID = 25	
end

if exists(select * from #temp2 where isnull(price,0) = 0 and IPSERVICEID = 25)
begin
	update a
	set a.Price = b.price
	from #temp2 a
	left join HIS.DBO.P_CrossMatch b on a.BillRoomType = b.BedTypeId and b.CategoryID = @TariffID
	and b.CategoryID = @TariffID and a.billdatetime >b.startdatetime and a.billdatetime <= dateadd(day,1,isnull(b.enddatetime,getdate()))
	where b.BedTypeID is not null and isnull(a.price,0) = 0 and IPSERVICEID = 25
	
	--CASH DEFAULT
	update a
	set a.Price = b.Price,
	--??a.ApolloAmount = b.Price,
	Tariff = 1
	from #temp2 a
	left join HIS.DBO.P_CrossMatch b on a.BillRoomType = b.BedTypeId and  b.CategoryID = 1
	where b.BedTypeID is not null and isnull(a.price,0) = 0 and IPSERVICEID = 25	
end
	
-------PHARMACY SERVICE CHARGE-------
if exists(select * from #temp2 where isnull(price,0) <> 0 and IPSERVICEID = 33)
begin
	if exists(select * from HIS.DBO.P_PharmacySCharge where CategoryID = @CategoryID)
	begin
		update #temp2
		set #temp2.Price = (a.price  * convert(numeric(18,2),b.ServiceCharge) /100)
		from #temp2 a
		left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = @CategoryID
		where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 33		
		
		update a	
		set a.Price = 0
		from #temp2 a
		left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = 1
		where b.BedTypeID is null and isnull(a.price,0) <> 0 and IPSERVICEID = 33
		
		update a
		set a.MarkUp = (a.price  * convert(numeric(18,2),b.ServiceCharge) /100)
		from #temp2 a
		left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = @CategoryID
		where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 5 and a.Deleted = 1
		
	end
	else
	begin
		if exists(select * from #temp2 a
		left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = 1
		where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 33) 
		begin
			update a
			set a.Price = (a.price * convert(numeric(18,2),b.ServiceCharge) /100)--,??a.ApolloAmount = (a.price * convert(numeric(18,2),b.ServiceCharge) /100)
			from #temp2 a
			left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = 1
			where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 33			
			
			update a	
			set a.Price = 0
			from #temp2 a
			left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = 1
			where b.BedTypeID is null and isnull(a.price,0) <> 0 and IPSERVICEID = 33
			
			update a
			set a.MarkUp = (a.price * convert(numeric(18,2),b.ServiceCharge) /100)--,??a.ApolloAmount = (a.price * convert(numeric(18,2),b.ServiceCharge) /100)
			from #temp2 a
			left join HIS.DBO.P_PharmacySCharge b on a.BillRoomType = b.BedTypeId and b.CategoryID = 1
			where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 5 and a.Deleted = 1
			
		end
		else 
		begin
			delete from #temp2 where isnull(price,0) <> 0 and IPSERVICEID = 33 
		end
	end
end

-------OPERATING ROOM CHARGES AND ASST SURGEON AND ANAESTHESIA-------
if exists(select * from #temp2 where IPSERVICEID = 9 and price = 0)
begin
	declare
	@OTAmount numeric(18,2),
	@OREntryAmt numeric(18,2)
	
	select ID,sum(Quantity * Price) as OTAmount,DestSt into #tempOT_Order from #temp2 where IPSERVICEID = 10 and Deleted =0	group by id,DestSt

	if (@FromDateTime < '21-Sep-2016')
	begin
		if exists(select * from his.dbo.P_AsstSurgeon where CategoryID = @TariffID)
		begin
			update a
			set a.Amount = case when b.Priority = 1 then 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID)  * (c.Percentage/100) else 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (d.Percentage/100) end
			from IPBILL.[IP_AsstSurgeonEntry] a
			inner join his.dbo.otorderdetail b on a.ID = b.OrderId  and b.Type = 3 and a.Itemid = b.TypeId 	
			left join his.dbo.P_AsstSurgeon c on c.CategoryID = @TariffID and a.OTID = c.OTIDNo and c.SlNo = 1
			left join his.dbo.P_AsstSurgeon d on d.CategoryID = @TariffID and a.OTID = d.OTIDNo and d.SlNo = 0
			where ipid = @IPID
		end
		else
		begin
			update a
			set a.Amount = case when b.Priority = 1 then 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (c.Percentage/100) else 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (d.Percentage/100) end
			from IPBILL.[IP_AsstSurgeonEntry] a
			inner join his.dbo.otorderdetail b on a.ID = b.OrderId  and b.Type = 3 and a.Itemid = b.TypeId 	
			left join his.dbo.P_AsstSurgeon c on c.CategoryID = 1 and a.OTID = c.OTIDNo and c.SlNo = 1
			left join his.dbo.P_AsstSurgeon d on d.CategoryID = 1 and a.OTID = d.OTIDNo and d.SlNo = 0
			where ipid = @IPID
		end
		
		update a set a.Price = b.Amount	from #temp2 a inner join IPBILL.[IP_AsstSurgeonEntry] b on a.ID = b.ID and a.ItemID = b.Itemid where IPSERVICEID = 18	
		
		update a set a.OTAmount = a.OTAmount + b.Price from #tempOT_Order  a
		left join (
			select a.ID, isnull(SUM(quantity * price),0) as Price  from #temp2 a
			inner join IPBILL.[IP_AsstSurgeonEntry] b on a.ID = b.ID and a.ItemID = b.Itemid 
			inner join his.dbo.otorderdetail c on a.ID = c.OrderId  and c.Type = 3 and a.Itemid = c.TypeId and c.Priority = 1
			where IPSERVICEID = 18	group by a.ID
		) b on a.ID = b.ID
		
		------IP_OREntry		
		update a  set a.Amount = b.OTAmount * (ISNULL(c.Percentage,d.Percentage))/100 from IPBILL.IP_OREntry a 
		inner join #tempOT_Order b on a.ID = b.ID
		left join his.dbo.P_OR c on c.CategoryID = @TariffID and c.OTIDNo = b.DestSt
		left join his.dbo.P_OR d on d.CategoryID = 1 and d.OTIDNo = b.DestSt
		where IPID = @IPID	
		
		update  a set price = b.Amount from #temp2 a
		inner join IPBILL.IP_OREntry b on a.ID = b.ID and a.ItemID = b.ServiceID 
		where IPSERVICEID = 9	
		------END IP_OREntry
		
		------[IP_RecoveryEntry]
		if exists(select Percentage/100 from his.dbo.P_Recovery where CategoryID = @TariffID)
		begin
			update a
			set a.Amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * 
			(select Percentage/100 from his.dbo.P_Recovery where CategoryID = @TariffID and OTID = a.OTID)
			from IPBILL.IP_RecoveryEntry a
			WHERE IPID = @IPID		
		end
		else
		begin
			update a
			set a.Amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * 
			(select Percentage/100 from his.dbo.P_Recovery where CategoryID = 1 and OTID = a.OTID)
			from IPBILL.IP_RecoveryEntry a
			WHERE IPID = @IPID		
		end

		update a  set price = b.Amount from #temp2 a
		left join IPBILL.IP_RecoveryEntry b on a.ID = b.ID
		where IPSERVICEID = 11	
		------END [IP_RecoveryEntry]
		
		
		------[IP_AnaesthesiaEntry]
		select @OREntryAmt = @OTAmount  * (select Percentage/100 from his.dbo.P_Anaesthesia where CategoryID = @TariffID and OTID = max(a.OTID) and ServiceID = max(a.ServiceID)) 
		from IPBILL.IP_AnaesthesiaEntry a where IPID = @IPID		
		
		update a set a.amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (ISNULL(c.Percentage,d.Percentage) / 100)
		from IPBILL.IP_AnaesthesiaEntry  a
		left join #tempOT_Order b on a.ID = b.ID
		left join his.dbo.P_Anaesthesia c on c.CategoryID = @TariffID and c.OTID = a.OTID and c.ServiceID = a.ServiceID 
		left join his.dbo.P_Anaesthesia d on d.CategoryID = 1 and d.OTID = a.OTID and d.ServiceID = a.ServiceID 
		WHERE IPID = @IPID		
		
		update a set a.Price = b.Amount from #temp2 a
		left join IPBILL.IP_AnaesthesiaEntry b on a.ID = b.ID
		where IPSERVICEID = 20
		------END [IP_AnaesthesiaEntry]
	end
	else
	begin
	if exists(select * from IPBILL.PRC_AsstSurgeon where CategoryID = @TariffID)
		begin
			update a
			set a.Amount = case when b.Priority = 1 then 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID)  * (c.Percentage/100) else 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (d.Percentage/100) end
			from IPBILL.[IP_AsstSurgeonEntry] a
			inner join his.dbo.otorderdetail b on a.ID = b.OrderId  and b.Type = 3 and a.Itemid = b.TypeId 	
			left join IPBILL.PRC_AsstSurgeon c on c.CategoryID = @TariffID and a.OTID = c.OTIDNo and c.SlNo = 1
			left join IPBILL.PRC_AsstSurgeon d on d.CategoryID = @TariffID and a.OTID = d.OTIDNo and d.SlNo = 0
			where ipid = @IPID
		end
		else
		begin
			update a
			set a.Amount = case when b.Priority = 1 then 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (c.Percentage/100) else 
			(select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (d.Percentage/100) end
			from IPBILL.[IP_AsstSurgeonEntry] a
			inner join his.dbo.otorderdetail b on a.ID = b.OrderId  and b.Type = 3 and a.Itemid = b.TypeId 	
			left join IPBILL.PRC_AsstSurgeon c on c.CategoryID = 1 and a.OTID = c.OTIDNo and c.SlNo = 1
			left join IPBILL.PRC_AsstSurgeon d on d.CategoryID = 1 and a.OTID = d.OTIDNo and d.SlNo = 0
			where ipid = @IPID
		end
		
		update a set a.Price = b.Amount	from #temp2 a 
		inner join IPBILL.[IP_AsstSurgeonEntry] b on a.ID = b.ID and a.ItemID = b.Itemid 
		where IPSERVICEID = 18	and Deleted = 0

		update a set a.OTAmount = a.OTAmount + isnull(b.Price,0) from #tempOT_Order  a
		left join (
			select a.ID, isnull(SUM(quantity * price),0) as Price  from #temp2 a
			inner join IPBILL.[IP_AsstSurgeonEntry] b on a.ID = b.ID and a.ItemID = b.Itemid 
			inner join his.dbo.otorderdetail c on a.ID = c.OrderId  and c.Type = 3 and a.Itemid = c.TypeId and c.Priority = 1
			where IPSERVICEID = 18	group by a.ID
		) b on a.ID = b.ID
		
		------IP_OREntry		
		update a  set a.Amount = b.OTAmount * (ISNULL(c.Percentage,d.Percentage))/100 from IPBILL.IP_OREntry a 
		inner join #tempOT_Order b on a.ID = b.ID
		left join ipbill.PRC_OR c on c.CategoryID = @TariffID and c.OTIDNo = b.DestSt
		left join ipbill.PRC_OR d on d.CategoryID = 1 and d.OTIDNo = b.DestSt
		where IPID = @IPID	
		
		update  a set price = b.Amount from #temp2 a
		inner join IPBILL.IP_OREntry b on a.ID = b.ID and a.ItemID = b.ServiceID 
		where IPSERVICEID = 9 and Deleted = 0
			
		------END IP_OREntry
		------[IP_RecoveryEntry]
		if exists(select * from ipbill.PRC_Recovery where CategoryID = @TariffID)
		begin
			
			update a
			set a.Amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * 
			(select max(Percentage)/100 from ipbill.PRC_Recovery where CategoryID = @TariffID and OTID = a.OTID) --and StartDateTime>=a.DateTime)
			from IPBILL.IP_RecoveryEntry a
			WHERE IPID = @IPID	
		end
		else
		begin
			update a
			set a.Amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * 
			(select max(Percentage)/100 from ipbill.PRC_Recovery where CategoryID = 1 and OTID = a.OTID )--and StartDateTime>=a.DateTime)
			from IPBILL.IP_RecoveryEntry a
			WHERE IPID = @IPID		
		end

		update a  set price = b.Amount from #temp2 a
		left join IPBILL.IP_RecoveryEntry b on a.ID = b.ID
		where IPSERVICEID = 11	and Deleted = 0
		------END [IP_RecoveryEntry]
		
		
		------[IP_AnaesthesiaEntry]
		select @OREntryAmt = @OTAmount  * (select Percentage/100 from ipbill.Prc_Anaesthesia where CategoryID = @TariffID and OTID = max(a.OTID) and ServiceID = max(a.ServiceID)) 
		from IPBILL.IP_AnaesthesiaEntry a where IPID = @IPID		
		
		update a set a.amount = (select SUM(OTAmount) from #tempOT_Order where ID = a.ID) * (ISNULL(c.Percentage,d.Percentage) / 100)
		from IPBILL.IP_AnaesthesiaEntry  a
		left join #tempOT_Order b on a.ID = b.ID
		left join ipbill.Prc_Anaesthesia c on c.CategoryID = @TariffID and c.OTID = a.OTID and c.ServiceID = a.ServiceID 
		left join ipbill.Prc_Anaesthesia d on d.CategoryID = 1 and d.OTID = a.OTID and d.ServiceID = a.ServiceID 
		WHERE IPID = @IPID		
		
		update a set a.Price = b.Amount from #temp2 a
		left join IPBILL.IP_AnaesthesiaEntry b on a.ID = b.ID
		where IPSERVICEID = 20 and Deleted = 0
		------END [IP_AnaesthesiaEntry]
	
	end
	
	--delete from IPBILL.[IP_AsstSurgeonEntry] where isnull(Amount,0) = 0 and ipid = @IPID
	delete from #temp2 where IPSERVICEID = 18 and isnull(price,0) = 0 
	if not exists(select* from his.dbo.IPAsstSurgeonEntry where ipid = @IPID)
	begin
		insert into his.dbo.IPAsstSurgeonEntry
		select * from IPBILL.[IP_AsstSurgeonEntry] where ipid = @IPID
	end
	
	
	--delete from IPBILL.IP_OREntry where isnull(Amount,0) = 0 and ipid = @IPID
	delete from #temp2 where IPSERVICEID = 9 and isnull(price,0) = 0 
	if not exists(select* from his.dbo.IPOREntry where ipid = @IPID)
	begin
		insert into his.dbo.IPOREntry
		select * from IPBILL.IP_OREntry where ipid = @IPID
	end
	
	--delete from IPBILL.IP_RecoveryEntry where isnull(Amount,0) = 0 and ipid = @IPID
	delete from #temp2 where IPSERVICEID = 11 and isnull(price,0) = 0 	
	if not exists(select* from his.dbo.IPRecoveryEntry where ipid = @IPID)
	begin
		insert into his.dbo.IPRecoveryEntry
		select * from IPBILL.IP_RecoveryEntry where ipid = @IPID
	end
	
	--delete from IPBILL.IP_AnaesthesiaEntry where isnull(Amount,0) = 0 and ipid = @IPID
	
	delete from #temp2 where IPSERVICEID = 20 and isnull(price,0) = 0 
	if not exists(select* from his.dbo.IPAnaesthesiaEntry where ipid = @IPID)
	begin
		insert into his.dbo.IPAnaesthesiaEntry
		select * from IPBILL.IP_AnaesthesiaEntry where ipid = @IPID
	end


	drop table #tempOT_Order
end
-----------------------------------------------------------------------------------END PRICE COMPUTATION

-----------------------------------------------------------------------------------CST MARKUP
if exists(select * from #temp2 where isnull(price,0) <> 0 and IPSERVICEID = 1 ) 
begin
	declare
	@cstMarkUp numeric(18,2)
	
	update #temp2 set Price = 0 where ItemCode in (Select ItemCode from HIS.DBO.CANCSTZeroPriceItems ) and IPSERVICEID = 1 
	
	if datediff(day,'21 Sep 2016',@FromDateTime) < 0
	begin
		update a
		set a.Price = a.price + ((a.price * convert(numeric(18,2),b.MarkupPer)) /100),
			a.MarkUp = ((a.price * convert(numeric(18,2),b.MarkupPer)) /100),
			a.MarkUpLevel =  1
		from #temp2 a
		left join HIS.DBO.P_IPCSTBEDTYPEMARKUP b on a.BedTypeId = b.BedTypeId and b.deleted = 0
		where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 1
		
		select @cstMarkUp = isnull(MarkupPer,0) from HIS.DBO.P_IPCSTCompMarkup where CompanyId = @CompanyID and categoryid = @CategoryID	
		set @cstMarkUp = ISNULL(@cstMarkUp,0)
		
		if @cstMarkUp <> 0
		begin
			if @cstMarkUp < 100
			begin		
				update a
				set a.Price = a.price + ((a.price * @cstMarkUp) /100), 
				a.MarkUp = a.MarkUp + (price * (@cstMarkUp/100)),
				a.MarkUpLevel =  2			
				from #temp2 a where isnull(a.price,0) <> 0 and IPSERVICEID = 1
					--and a.MarkUp = 0 --??new logic that there will only one markup level
			end
			else
			begin
			
				update a
				set a.Price = ((a.price * @cstMarkUp) /100), a.MarkUp = a.MarkUp + (price * (@cstMarkUp/100)),
				a.MarkUpLevel =  2
				from #temp2 a where isnull(a.price,0) <> 0 and IPSERVICEID = 1
					--and a.MarkUp = 0 --??new logic that there will only one markup level
			end			
		end
		--??if (SELECT isnull(max(a.CategoryType),0) FROM HIS.DBO.CATEGORY A,HIS.DBO.COMPANY B WHERE A.ID=B.CATEGORYID AND b.ID = @companyid) <> 2 or @companyid = 1 --??if cash and categoryid <> 2
		if not exists(select * from HIS.DBO.ippackage where ipid = @IPID)
		begin	
			update a
			set a.Price = 
			case when isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and isnull(IsMarkupOthers,0) = 0 and a.price >= MinRange and a.price <= MaxRange),0) <100
			then
			a.price + ((a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			else
			((a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			end,
			
			a.MarkUp = 		
			case when (a.MarkUp +(a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100) < a.Price then 
			(a.MarkUp +(a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			else 
			(a.MarkUp +(a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100) - a.Price 
			end,
			a.MarkUpLevel =  3
			from #temp2 a
			where isnull(a.price,0) <> 0 and IPSERVICEID = 1 and ItemID not in (select itemid from HIS.DBO.NoCSTRangeMarkUpItems)
				and a.Price < 20
				--and a.MarkUp = 0--??new logic that there will only one markup level
				
			if ((SELECT isnull(max(a.CategoryType),0) FROM HIS.DBO.CATEGORY A,HIS.DBO.COMPANY B WHERE A.ID=B.CATEGORYID AND b.ID = @companyid) = 2)  or @companyid = 1
			begin
				update a
				set a.Price = 
				case when isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and isnull(IsMarkupOthers,0) = 0 and a.price >= MinRange and a.price <= MaxRange),0) <100
				then
				a.price + ((a.price * 
					isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				else
				((a.price * 
					isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				end,
				
				a.MarkUp = 		
				case when (a.MarkUp +(a.price * 
					isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100) < a.Price then 
				(a.MarkUp +(a.price * 
					isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				else 
				(a.MarkUp +(a.price * 
					isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100) - a.Price 
				end
				from #temp2 a
				where isnull(a.price,0) <> 0 and IPSERVICEID = 1 and ItemID not in (select itemid from HIS.DBO.NoCSTRangeMarkUpItems)
					and a.Price >= 20 and MarkUpLevel <> 3
			end
				
		end	
	end
	else
	begin		
		update a
		set a.Price = a.price + ((a.price * convert(numeric(18,2),b.MarkupPer)) /100),
			a.MarkUp = ((a.price * convert(numeric(18,2),b.MarkupPer)) /100),
			a.MarkUpLevel =  1
		from #temp2 a
		left join IPBILL.IPCSTBEDTYPEMARKUP b on a.BedTypeId = b.BedTypeId and b.deleted = 0
		where b.BedTypeID is not null and isnull(a.price,0) <> 0 and IPSERVICEID = 1
		
		select @cstMarkUp = isnull(MarkupPer,0) from IPBILL.IPCSTCompMarkup where CompanyId = @CompanyID and categoryid = @CategoryID	
		set @cstMarkUp = ISNULL(@cstMarkUp,0)
		
		if @cstMarkUp <> 0
		begin
			if @cstMarkUp < 100
			begin		
				update a
				set a.Price = a.price + ((a.price * @cstMarkUp) /100), 
				a.MarkUp = a.MarkUp + (price * (@cstMarkUp/100)),
				a.MarkUpLevel =  2			
				from #temp2 a where isnull(a.price,0) <> 0 and IPSERVICEID = 1
					--and a.MarkUp = 0 --??new logic that there will only one markup level
			end
			else
			begin
			
				update a
				set a.Price = ((a.price * @cstMarkUp) /100), a.MarkUp = a.MarkUp + (price * (@cstMarkUp/100)),
				a.MarkUpLevel =  2
				from #temp2 a where isnull(a.price,0) <> 0 and IPSERVICEID = 1
					--and a.MarkUp = 0 --??new logic that there will only one markup level
			end			
		end
		--??if (SELECT isnull(max(a.CategoryType),0) FROM HIS.DBO.CATEGORY A,HIS.DBO.COMPANY B WHERE A.ID=B.CATEGORYID AND b.ID = @companyid) <> 2 or @companyid = 1 --??if cash and categoryid <> 2
		if not exists(select * from HIS.DBO.ippackage where ipid = @IPID) and not exists(select * from HIS.ipbill.CurrentIPPackage where ipid = @IPID and deleted = 0 )
		begin	
			update a
			set a.Price = 
			case when isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and isnull(IsMarkupOthers,0) = 0 and a.price >= MinRange and a.price <= MaxRange),0) <100
			then
			a.price + ((a.price * 
				isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			else
			((a.price * 
				isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			end,
			
			a.MarkUp = 		
			case when (a.MarkUp +(a.price * 
				isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100) < a.Price then 
			(a.MarkUp +(a.price * 
				isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100)
			else 
			(a.MarkUp +(a.price * 
				isnull((select max(percentage) from HIS.DBO.P_IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
			) /100) - a.Price 
			end,
			a.MarkUpLevel =  3
			from #temp2 a
			where isnull(a.price,0) <> 0 and IPSERVICEID = 1 and ItemID not in (select itemid from HIS.DBO.NoCSTRangeMarkUpItems)
				and a.Price < 20
				--and a.MarkUp = 0--??new logic that there will only one markup level
				
			if ((SELECT isnull(max(a.CategoryType),0) FROM HIS.DBO.CATEGORY A,HIS.DBO.COMPANY B WHERE A.ID=B.CATEGORYID AND b.ID = @companyid) = 2)  or @companyid = 1
			begin
				update a
				set a.Price = 
				case when isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and isnull(IsMarkupOthers,0) = 0 and a.price >= MinRange and a.price <= MaxRange),0) <100
				then
				a.price + ((a.price * 
					isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				else
				((a.price * 
					isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				end,
				
				a.MarkUp = 		
				case when (a.MarkUp +(a.price * 
					isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100) < a.Price then 
				(a.MarkUp +(a.price * 
					isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100)
				else 
				(a.MarkUp +(a.price * 
					isnull((select max(percentage) from IPBILL.IPCSTMarkUp Where Deleted=0 and a.price >= MinRange and a.price <= MaxRange),0)
				) /100) - a.Price 
				end
				from #temp2 a
				where isnull(a.price,0) <> 0 and IPSERVICEID = 1 and ItemID not in (select itemid from HIS.DBO.NoCSTRangeMarkUpItems)
					and a.Price >= 20 and MarkUpLevel <> 3
			end
				
		end	
	end
end
-----------------------------------------------------------------------------------END CST MARKUP

declare
@cashMark numeric(18,2)
-----------------------------------------------------------------------------------DEFAULT CASH MARKUP
if @CompanyID = '1' and @PackageID = 0
begin
	SELECT @cashMark = max(CASHDEFAULTMARKUP)  FROM HIS.DBO.organisationdetails
	--set @cashMark = 20
	if isnull(@cashMark,0) <> 0 and not exists(Select * from HIS.DBO.IPPackage B where  b.IPID = @IPID)
	begin
		update 	a
		set a.price = a.price + (a.price * (@cashMark/100)), a.MarkUp = (a.price * (@cashMark/100))
		from #temp2 a
		left join HIS.DBO.IPBSERVICE b on a.IPSERVICEID = b.ID
		where a.IPSERVICEID not in (14,30,21,23,28,2,3,35,36,1) and b.MarkUp = 1 and b.DELETED=0
		--and a.IPSERVICEID not in (9,10,11,18,24)
	end	
	

end
if @CompanyID = '1' 
begin
	-->Applied to Cash even Package Patient as per Carlo - 8 Feb 2017 e.g. PIN 1549659
	SELECT @cashMark = max(MarkUpPercent)  FROM HIS.DBO.CheckMarkUp	where IPID = @IPID
	if isnull(@cashMark,0) <> 0
	begin
		update 	a
		set a.price = a.price + (a.price * (@cashMark/100)), a.MarkUp = (a.price * (@cashMark/100))
		from #temp2 a
		left join HIS.DBO.IPBSERVICE b on a.IPSERVICEID = b.ID
		where a.IPSERVICEID not in (14,30,21,23,28,2,3,35,36) and b.MarkUp = 1 and b.DELETED=0		
	end	
end

-------DOCTOR MARKUP - Supposed to be for Cash Only-------
if exists(select * from HIS.DBO.DoctorMarkUp where DoctorId = @DoctorID)
begin
	update 	a
	set a.price = a.price + (a.price * (convert(numeric(18,2),b.MarkUpPercent)/100)), a.MarkUp = (a.price * (convert(numeric(18,2),b.MarkUpPercent)/100))
	from #temp2 a
	left join HIS.DBO.DoctorMarkUp b on b.Deleted = 0 and b.DoctorId = @DoctorID --and a.OrderDateTime >= b.StartDateTime		
	where a.IPSERVICEID not in (14,30,21,23,28,2,3,35,36,1,5,33) 	
end
-----------------------------------------------------------------------------------END DEFAULT CASH MARKUP

-----------------------------------------------------------------------------------IP ITEM MARKUP
if exists(select * from HIS.DBO.IPCompanyItemMarkup where gradeid=@GradeID and CompanyID = @CompanyID)
begin
	update a
	set a.price = price + (price * (c.Percentage/100)), a.MarkUp = price * (c.Percentage/100)
	from #temp2 a
	inner join HIS.DBO.IPCompanyItemMarkup c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and a.ItemID  = c.ItemID and a.CategoryID= c.categoryid
end
else if exists(select * from HIS.DBO.IPCompanyDeptMarkup where gradeid=@GradeID and CompanyID = @CompanyID)
begin
	update a
	set a.price = price + (price * (c.Percentage/100)), a.MarkUp = price * (c.Percentage/100)
	from #temp2 a
	inner join HIS.DBO.IPCompanyDeptMarkup c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and a.DepartmentID = c.DepartmentId and a.CategoryID= c.categoryid
end
else if exists(select * from HIS.DBO.IPCompanyServiceMarkup where gradeid=@GradeID and CompanyID = @CompanyID)
begin	
	update a
	set a.price = price + (price * (c.Percentage/100)),
		a.MarkUp = (price * (c.Percentage/100))
	from #temp2 a
	inner join HIS.DBO.IPCompanyServiceMarkup c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and a.CategoryID= c.categoryid
	--left join OldIPCompanyServiceMarkup d on a.IPSERVICEID = d.ServiceID and d.GradeID = @GradeID and d.CompanyID = @CompanyID 	
end
-----------------------------------------------------------------------------------END IP ITEM MARKUP

-----------------------------------------------------------------------------------DISCOUNT COMPUTATION
-------IP SERVICE DISCOUNT-------
if exists(select * from HIS.DBO.IPCompanyServiceDiscount where gradeid=@GradeID and CompanyID = @CompanyID and (Percentage>0 or Amount>0))
begin
	update #temp2
	set 
		#temp2.Discount = convert(numeric(18,2),Quantity * price * (c.Percentage/100)), DiscountLevel = 3,DiscountPercent = c.Percentage
	from #temp2 a
	inner join HIS.DBO.IPCompanyServiceDiscount c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = a.CompanyID and
	 (Percentage>0 or Amount>0)
end
-------IP DEPARTMENT DISCOUNT-------
if exists(select * from HIS.DBO.IPCompanyDeptDiscount where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
begin
	update #temp2
	set 
		#temp2.Discount = convert(numeric(18,2),Quantity * price * (c.Percentage/100)), DiscountLevel = 2,DiscountPercent = c.Percentage
	from #temp2 a
	inner join HIS.DBO.IPCompanyDeptDiscount c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
		and c.GradeID = @GradeID and c.CompanyID = a.CompanyID and
	 (Percentage>0 or Amount>0)
end
-------IP ITEM DISCOUNT-------
if exists(select * from HIS.DBO.IPCompanyItemDiscount where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
begin
	update #temp2
	set 
		#temp2.Discount = convert(numeric(18,2),Quantity * price * (c.Percentage/100)), DiscountLevel = 1,DiscountPercent = c.Percentage
	from #temp2 a
	inner join HIS.DBO.IPCompanyItemDiscount c on a.IPSERVICEID = c.ServiceID and a.ItemID = c.ItemID and a.DepartmentID = c.departmentid
		and c.GradeID = @GradeID and c.CompanyID = a.CompanyID and
	 (Percentage>0 or Amount>0)
end
-----------------------------------------------------------------------------------END DISCOUNT COMPUTATION

-----------------------------------------------------------------------------------OR NURSING ADMINISTRATION
if (select SUM(Price) from #temp2 where IPSERVICEID in (10,18) and DestSt <> '14') <> 0
begin	
	--if exists(select * from HIS.DBO.P_OTNursingAdministration where CategoryID = @TariffID and BedTypeID = @BedTypeID)
	if exists(select * from IPBill.PRC_OTNursingAdministration where CategoryID = @TariffID and BedTypeID = @BedTypeID)
	begin		
		--?? Exceed Price is not actual price		
		update aa set Price = bb.Price
		from #temp2 aa
		left join 		
		(	
		select 
		case when sum(b.Percentage) <> 0 then
			case when (SUM(a.Price) * max(b.Percentage) / 100 ) >= max(b.ExceededPrice) and max(ExceededPrice) <> 0 then max(ExceededPrice)
				else SUM(a.Price) * max(b.Percentage) / 100  end
		else
			max(b.ExceededPrice)
		end as Price,
		convert(varchar(10),a.orderdatetime,101) as orderdatetime
		from #temp2 a
		left join IPBill.PRC_OTNursingAdministration b on b.CategoryID = @TariffID and b.BedTypeID = @BedTypeID		
		where IPSERVICEID in (10,18) and DestSt <> '14' and IDD in (
				select aa.IDD from #temp2 aa
				inner join (
				select convert(varchar(10),orderdatetime,101) as orderdatetime,IPSERVICEID,MAX(price) as Price from #temp2 
				where IPSERVICEID in (10,18) and DestSt <> '14'  group by convert(varchar(10),orderdatetime,101),IPSERVICEID
				) bb on aa.IPSERVICEID = bb.IPSERVICEID 
				group by convert(varchar(10),aa.orderdatetime,101),aa.IPSERVICEID,aa.IDD
		) group by convert(varchar(10),a.orderdatetime,101)
		) bb on DATEDIFF(day,aa.OrderDateTime,bb.orderdatetime) = 0		
		where IPSERVICEID = 31		
		
	end
	else
	begin
	
	update aa set Price = bb.Price
		from #temp2 aa
		left join 		
		(	
		select 
		case when sum(b.Percentage) <> 0 then
			case when (SUM(a.Price) * max(b.Percentage) / 100 ) > max(b.ExceededPrice) and max(ExceededPrice) <> 0 then max(ExceededPrice)
				else SUM(a.Price) * max(b.Percentage) / 100  end
		else
			max(b.ExceededPrice)
		end as Price,
		convert(varchar(10),a.orderdatetime,101) as orderdatetime
		from #temp2 a
		left join IPBill.PRC_OTNursingAdministration b on b.CategoryID = 1 and b.BedTypeID = a.billroomtype		
		where IPSERVICEID in (10,18) and DestSt <> '14' and IDD in (
				select max(aa.IDD) as IDD from #temp2 aa
				inner join (
				select convert(varchar(10),orderdatetime,101) as orderdatetime,IPSERVICEID,MAX(price) as Price from #temp2 
				where IPSERVICEID in (10,18) and DestSt <> '14'  group by convert(varchar(10),orderdatetime,101),IPSERVICEID
				) bb on datediff(day,aa.OrderDateTime,bb.orderdatetime) = 0 and aa.IPSERVICEID = bb.IPSERVICEID and aa.Price = bb.Price
				group by convert(varchar(10),aa.orderdatetime,101),aa.IPSERVICEID
		) group by convert(varchar(10),a.orderdatetime,101)
		) bb on DATEDIFF(day,aa.OrderDateTime,bb.orderdatetime) = 0		
		where IPSERVICEID = 31	and aa.Price = 0
		
		--update #temp2 
		--set Tariff = 1,Price = (	
		--select 
		--case when (SUM(a.Price) * max(b.Percentage) / 100 ) > max(b.ExceededPrice) and max(ExceededPrice) <> 0 then max(ExceededPrice)
		--	else SUM(a.Price) * max(b.Percentage) / 100  end
		--from #temp2 a
		--left join HIS.DBO.P_OTNursingAdministration b on b.CategoryID = 1 and b.BedTypeID = a.billroomtype--??
		--where IPSERVICEID in (10,18) and DestSt <> '14')
		--where IPSERVICEID = 31
	end
end
-----------------------------------------------------------------------------------END OR NURSING ADMINISTRATION

-----------------------------------------------------------------------------------EXCLUSION COMPUTATION
if @CategoryID not in (1,34) --34	CHRITY,1	CASH
begin
-------IP SERVICE EXCLUSION------- 
	if exists(select * from HIS.DBO.IPCompanyServices where gradeid=@GradeID and CompanyID = @CompanyID)
	begin			
	print 'IP SERVICE EXCLUSION'
		update a
		set 
			a.ApolloAmount = convert(numeric(18,2),price)
		from #temp2 a
		inner join HIS.DBO.IPCompanyServices c on a.IPSERVICEID = c.ServiceID 
			and c.GradeID = @GradeID and c.CompanyID = @CompanyID 		
			
		update a set  a.price = 0 from #temp2 a
		inner join HIS.DBO.IPCompanyServices c on a.IPSERVICEID = c.ServiceID 
			and c.GradeID = @GradeID and c.CompanyID = @CompanyID 
			
	end

	-------IP DEPARTMENT EXCLUSION-------
	if exists(select * from HIS.DBO.IPCompanyDeptServices where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
	begin		
		update a
		set 
			a.ApolloAmount = convert(numeric(18,2),price)
		from #temp2 a
		inner join HIS.DBO.IPCompanyDeptServices c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
			and c.GradeID = @GradeID and c.CompanyID = @CompanyID 
			
		update a set a.price = 0 from #temp2 a
		inner join HIS.DBO.IPCompanyDeptServices c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
			and c.GradeID = @GradeID and c.CompanyID = @CompanyID 
			
	end

-------IP ITEM EXCLUSION-------

	if exists(select * from HIS.DBO.IPCompanyItemServices where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
	begin
		update a
		set 
			a.ApolloAmount = convert(numeric(18,2),price)
		from #temp2 a
		inner join HIS.DBO.IPCompanyItemServices c on a.IPSERVICEID = c.ItemID and a.DepartmentID = c.departmentid
			and c.GradeID = @GradeID and c.CompanyID = @CompanyID 
	end
end
-----------------------------------------------------------------------------------END EXCLUSION COMPUTATION

-----------------------------------------------------------------------------------DEDUCTIBLE COMPUTATION
-------IP SERVICE DEDUCTIBLE-------
if exists(select * from HIS.DBO.IPCompanyServiceDeductable where gradeid=@GradeID and CompanyID = @CompanyID)
begin
	update a
	set 
		--a.ApolloAmount = convert(numeric(18,2),((price*Quantity)-discount) * (c.Percentage/100))--, DiscountLevel = 3
		a.Deductible = convert(numeric(18,2),((price)-discount) * (c.Percentage/100)),a.DeductiblePercent = c.Percentage,a.DDCLevel = 3
		
	from #temp2 a
	inner join HIS.DBO.IPCompanyServiceDeductable c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and ApolloAmount =0
		
	update a 
	set a.price = case when  c.Percentage = 100 then 0 else
		convert(numeric(18,2),((price)-discount) * ((100-c.Percentage)/100)) end
	from #temp2 a
	inner join HIS.DBO.IPCompanyServiceDeductable c on a.IPSERVICEID = c.ServiceID 
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID  and Deductible <> 0
end

-------IP DEPARTMENT DEDUCTIBLE-------
if exists(select * from HIS.DBO.IPCompanyDeptDeductable where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
begin
	--update a
	--set a.ApolloAmount = (convert(numeric(18,2), price) * (c.Percentage/100)) 
	--from #temp2 a
	--inner join HIS.DBO.IPCompanyDeptDeductable c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
	--	and c.GradeID = @GradeID and c.CompanyID = @CompanyID and ApolloAmount = 0
	
	update a
	set a.Deductible = (convert(numeric(18,2), price - discount) * (c.Percentage/100)),a.DeductiblePercent = c.Percentage ,a.DDCLevel = 2
	from #temp2 a
	inner join HIS.DBO.IPCompanyDeptDeductable c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and Deductible = 0
		
	
	update a set a.price = case when  c.Percentage = 100 then 0 else
		convert(numeric(18,2),(price-discount) * ((100-c.Percentage)/100)) end 
	from #temp2 a
	inner join HIS.DBO.IPCompanyDeptDeductable c on a.IPSERVICEID = c.ServiceID and a.DepartmentID = c.departmentid
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and Deductible <> 0
end

-------IP ITEM DEDUCTIBLE-------
if exists(select * from HIS.DBO.IPCompanyItemDeductable 
where gradeid=@GradeID and CompanyID = @CompanyID and CategoryID = @CategoryID)
begin
	update a
	set a.Deductible = (convert(numeric(18,2), price - discount) * (c.Percentage/100)),a.DeductiblePercent = c.Percentage ,a.DDCLevel = 1
	from #temp2 a
	inner join HIS.DBO.IPCompanyItemDeductable c on a.IPSERVICEID = c.ServiceID and a.ItemID = c.ItemID
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and Deductible = 0
		
	
	update a set a.price = case when  c.Percentage = 100 then 0 else
		convert(numeric(18,2),(price-discount) * ((100-c.Percentage)/100)) end 
	from #temp2 a
	inner join HIS.DBO.IPCompanyItemDeductable c on a.IPSERVICEID = c.ServiceID and a.ItemID = c.ItemID
		and c.GradeID = @GradeID and c.CompanyID = @CompanyID and Deductible <> 0
end

-----------------------------------------------------------------------------------END DEDUCTIBLE COMPUTATION

-----------------------------------------------------------------------------------LIMIT COMPUTATION
DECLARE
@LimitPrice numeric(18,2),
@LimitLoop int,
@LimitDay int
/*
LimitID = 1 : Limit by price
LimitID = 2 : Limit by day
*/
select @LimitPrice = creditamount,@LimitDay = NoOfDays from HIS.DBO.IPCompanyCreditLimit where ipid = @IPID
if (isnull(@LimitPrice,0)=0)
begin
	select @LimitPrice = CreditLimit,@LimitDay = NoOfDays from ipbill.CreditLimit where ipid = @IPID and Deleted = 0
end

select @LimitLoop = min(idd) from #temp2

--if isnull(@LimitPrice,0) = 0
--begin
--	select @LimitPrice = LoaAmount,@LimitDay = LoaDays  from HIS.DBO.InPatientDetails where ipid = @IPID
--end

if isnull(@LimitPrice,0) <> 0
begin
	while @LimitLoop is not null
	begin
		select @LimitPrice = @LimitPrice - (price * Quantity)	from #temp2 where IDD = @LimitLoop
		update #temp2 set LimitID = 1,Discount = 0,Deductible =0,DiscountPercent=0,DiscountLevel=0 from #temp2 where IDD = @LimitLoop
		if (@LimitPrice < 0)
		begin
			update #temp2 set Price = (price * Quantity) + @LimitPrice,LimitID = 1,Discount = 0,Deductible =0,DiscountPercent=0,DiscountLevel=0 	
			from #temp2 where IDD = @LimitLoop
			update #temp2 set ApolloAmount = abs(@LimitPrice)	from #temp2 where IDD = @LimitLoop
			update #temp2 set ApolloAmount = ApolloAmount +  (price * Quantity) where IDD > @LimitLoop
			update #temp2 set price = 0 where IDD > @LimitLoop
			set @LimitLoop = null
		end
	select @LimitLoop = min(idd) from #temp2 where IDD > @LimitLoop
	end
end
else if ISNULL(@LimitDay,0) <> 0
begin		
	update #temp2 set ApolloAmount = ApolloAmount +  (price * Quantity) where OrderDateTime > dateadd(dd,@LimitDay-1,@FromDateTime)
	update #temp2 set price = 0,LimitID = 2 where OrderDateTime > dateadd(dd,@LimitDay-1,@FromDateTime)
end
-----------------------------------------------------------------------------------END LIMIT COMPUTATION

-----------------------------------------------------------------------------------AR DAYWISE EXCLUSION
if exists(select * from IPBILL.DaysExclusionAR where ipid= @IPID and Deleted= 0)
begin
update a
set ApolloAmount = price
from #temp2 a
inner join IPBILL.DaysExclusionAR b on datediff(day,a.OrderDateTime,b.DateTime) = 0 and a.Deleted = 0 and b.IPID = @IPID

update a
set Price = 0
from #temp2 a
inner join IPBILL.DaysExclusionAR b on datediff(day,a.OrderDateTime,b.DateTime) = 0 and a.Deleted = 0 and b.IPID = @IPID
end
-----------------------------------------------------------------------------------END AR DAYWISE EXCLUSION

-----------------------------------------------------------------------------------AR ROOM AND BOARD EXTENSION
if exists(SELECT * FROM  [IPBILL].DaysExtensionAR where IPID = @IPID and Deleted  = 0)
begin
	update a	
	set a.BedID = c.BedID,a.ItemID = c.ItemID,a.ItemName= c.ItemName,a.Price = c.Price,a.DepartmentID = c.DepartmentID,a.DepartmentName = c.DepartmentName,
		a.PriceTable = 'EXTN',a.BedTypeID = c.BedTypeID,a.BedTypeType = c.BedTypeType,a.BillRoomType = c.BillRoomType,a.Discount = c.Discount,a.ID  = c.ID
	from #temp2 a
	inner join [IPBILL].DaysExtensionAR b on DATEDIFF(day,a.OrderDateTime,b.ToDateTime) = 0 and b.Deleted = 0 and b.IPID = @IPID
	left join (select * from #temp2 where idd = (
	select MAX(idd) from #temp2 a
	left join [IPBILL].DaysExtensionAR b on DATEDIFF(day,a.OrderDateTime,b.ToDateTime) = 0 and b.Deleted = 0
	where a.IPSERVICEID = 2 and b.ID is null)	
	) c on c.IPSERVICEID = 2 
	where a.IPSERVICEID = 2 
end
-----------------------------------------------------------------------------------END AR ROOM AND BOARD EXTENSION

-----------------------------------------------------------------------------------GROUPING
update #temp2 
set price = (select sum(price * Quantity) from #temp2 where IPSERVICEID = 33 ) ,
discount = (select sum(discount) from #temp2 where IPSERVICEID = 33 ) ,
ApolloAmount =(select sum(ApolloAmount * Quantity) from #temp2 where IPSERVICEID = 33 ) 
where IPSERVICEID = 33 and DestSt = '||'

update a
set a.MarkUp = b.Price
from #temp2 a
inner join #temp2 b on a.ID = b.ID and a.ItemID = b.ItemID and a.OrderDateTime= b.OrderDateTime and b.IPSERVICEID = 33
where a.ipserviceid = 5
	
delete from #temp2 where IPSERVICEID = 33 and DestSt <> '||'
-----------------------------------------------------------------------------------END GROUPING


-----------------------------------------------------------------------------------MOH ICU PACKAGE
-->UPDATED : Revise the code for MOH 4-Apr-2017  10:49
if OBJECT_ID('his.ARADMIN.BedPackages') is not null
begin
	if exists(select  * from his.ARADMIN.BedPackages where companyid  = @CompanyID)
	--if @CompanyID = 5237
	begin
		declare
		@MOH_ID int
		
		--if exists(select * from #temp2 where IPSERVICEID = 2 and itemid in (select id from HIS.DBO.bed where StationID in (select id from HIS.DBO.station where Name like 'icu%')))
		if exists(select * from #temp2 where IPSERVICEID = 2 and bedid in (select  BedTypeID from his.ARADMIN.BedPackages where companyid  = @CompanyID) )
		begin
			if not exists(select* from HIS.dbo.EDITPACKAGE where ipid = @IPID and Deleted = 0)
			begin
				INSERT INTO HIS.dbo.EDITPACKAGE (IPID,CODE,Name,NoofDays,StartDateTime,EndDateTime,Deleted,CategoryID,CompanyID,StartBefore,Discount,Confirmed,PackageLimit,
				OperatorID,DEPARTMENTID,PackageType)  
				select IPID,'MOH-ICU','MOH ICU Package','-1',AdmitDateTime,Null,0,CategoryID,CompanyID,-1,0,0,0,@OperatorID,49, 1 
				from HIS.dbo.inpatient where ipid = @IPID
				
				SELECT @PackageID = SCOPE_IDENTITY()
				if isnull(@packageid,0) = 0
				begin			
					select @PackageID = MIN(id) from HIS.dbo.EDITPACKAGE where IPID = @IPID
				end
				
				if not exists(select * from his.dbo.IPPackage where Ipid = @IPID)
				begin
					Insert into HIS.dbo.IpPackage(IPID,PackageId,dateTime,Cofirmed,SERVICEID,IsFixedPackage,PackageAmount,NoOfDays,ProfilePakageID,SURGERYID)			
					select @IPID,@PackageID,@FromDateTime,0,2,0,(select  MAX(Amount) from his.ARADMIN.BedPackages where companyid  = @CompanyID),-1,@PackageID,0 			
					
					insert into  [IPBILL].[CurrentIPPackage] (IPID,PackageId, Datetime,ServiceID,DepartmentID, PackageAmount,NoOfDays,SURGERYID,Cofirmed,PackageItemID,PackageCode,PackageName,deleted,DiscountID)
					select @IPID,@PackageID,GETDATE(),2,49,0,-1,0,1,0,'MOH-ICU','MOH ICU Package',0,0
					
					INSERT ipbill.IPBillPackagePDDetail (IPID,PackageID,PackageMasterID,Deleted,OrderID ,ItemID ,ServiceID)		
					select @IPID,@PackageID,0,0,0 ,0 ,2		
				end
			end
			-->ADDED : WHEN USER OPEN THE PIN ON OLD SYSTEM AND DELETE THE PACKAGE APPLIED IN THE PATIENT
			--> THIS WILL RE-INSERT EVERYTHING TO AVOID ERROR IN THE SYSTEM : 28-JUN-2017 10:55
			else 
			begin
				select @PackageID = MIN(id) from HIS.dbo.EDITPACKAGE where IPID = @IPID 
				
				if exists(select * from his.dbo.IPPackage where Ipid = @IPID and PackageId is null)
				begin
					delete from his.dbo.IPPackage where Ipid = @IPID and PackageId is null	
					delete from [IPBILL].[CurrentIPPackage] where Ipid = @IPID 				
					delete from [IPBILL].IPBillPackagePDDetail where Ipid = @IPID 
					
					Insert into HIS.dbo.IpPackage(IPID,PackageId,dateTime,Cofirmed,SERVICEID,IsFixedPackage,PackageAmount,NoOfDays,ProfilePakageID,SURGERYID)			
					select @IPID,@PackageID,@FromDateTime,0,2,0,(select  MAX(Amount) from his.ARADMIN.BedPackages where companyid  = @CompanyID),-1,@PackageID,0 			
					
					insert into  [IPBILL].[CurrentIPPackage] (IPID,PackageId, Datetime,ServiceID,DepartmentID, PackageAmount,NoOfDays,SURGERYID,Cofirmed,PackageItemID,PackageCode,PackageName,deleted,DiscountID)
					select @IPID,@PackageID,GETDATE(),2,49,0,-1,0,1,0,'MOH-ICU','MOH ICU Package',0,0
					
					INSERT ipbill.IPBillPackagePDDetail (IPID,PackageID,PackageMasterID,Deleted,OrderID ,ItemID ,ServiceID)		
					select @IPID,@PackageID,0,0,0 ,0 ,2		
				end
			end
			
			if isnull(@packageid,0) = 0
			begin			
				select @PackageID = MIN(id) from HIS.dbo.EDITPACKAGE where IPID = @IPID
			end
			
			select @MOH_ID = MIN(idd) from #temp2 where IPSERVICEID = 2 and bedid in (select  BedTypeID from his.ARADMIN.BedPackages where companyid  = @CompanyID) 
			while @MOH_ID is not null
			begin
				update a
				set a.ApolloAmount= 0,PackagePrice=0,a.MarkUp=0,Discount=0,PackageID = @PackageID
				from #temp2 a
				inner join (select MAX(OrderDateTime) as OrderDateTime from #temp2 where IDD = @MOH_ID) b on 
				 datediff(day,a.OrderDateTime,b.OrderDateTime) = 0			
				
				update a set 
				PackagePrice = (select  MAX(Amount) from his.ARADMIN.BedPackages where companyid  = @CompanyID), 
				PackageID = @PackageID,DestSt='MOH ICU Package|||',PriceTable='MOH ICU Package|||',PACKAGEBILL=@PackageID
				from #temp2 a
				where  idd = @MOH_ID
				
				select @MOH_ID = MIN(idd) from #temp2 where IPSERVICEID = 2 and idd > @MOH_ID 
				and bedid in (select  BedTypeID from his.ARADMIN.BedPackages where companyid  = @CompanyID) 
			end
			
			update #temp2 set PACKAGEBILL= 1,PackagePrice = price where packageid = 0		
			
			update #temp2 set PackageID = 0 where IPSERVICEID in (9,10,11,18,20)
		
			if not exists(select * from HIS.dbo.PackagePatient where ipid = @IPID)
			begin		
				insert into HIS.dbo.PackagePatient (IPID,PackageID,StartDateTime,EndDateTime,Amount,BedID,BedTypeID,SurgeryID,ServiceID,DepartmentID,
				NoofDays,OrderId,DateTime,OperatorID,Discount,StartBefore,IsPriceEdited,PriceEditedOn,PriceEditedBy,IsConfirmed,ConfirmedOn,ConfirmedBy,DepartmentName)
				select top 1  ipid,a.PackageId,Datetime,GETDATE(),PackageAmount,0,
				b.BillRoomType as BedtypID,0 ,IPSERVICEID, DepartmentId,
				NoOfDays,b.ID as OrderID,Datetime,b.OperatorID as OpertorId,0 as Discount,-1,0,null,0,1,
				GETDATE() ConfirmedOn, @OperatorID as ConfirmedBy,b.DepartmentName as DepartmentName
				from HIS.DBO.ippackage a
				left join (select * from #temp2 where PackagePrice <> 0) b on a.PackageId = b.PackageID
				where a.ipid = @IPID order by b.ItemID
			end
			
			update ipbill.CurrentIPPackage 
				set SurgeryDateTime = (select min(OrderDateTime) as OrderDateTime from #temp2 where PackageID<>0 and ServiceID = 2) 
			where Ipid =@IPID and PackageCode = 'MOH-ICU' and PackageItemID =0	
		end
		
		-->ADDED : Record the Package Days of the patient package. to be used in PackageBill : 24-May-2017 11:27
		update [IPBILL].CurrentIPPackageDays set Deleted = 1 where IPID = @IPID
		insert into [IPBILL].CurrentIPPackageDays (IPID,PackageID,PackageDaysStart,PackageDaysEnd,OperatorID,DateTime,Deleted)	
		select @IPID,packageid,Orderdatetime,billdatetime,@OperatorID,GETDATE(),0 from #temp2 where PackageID = packagebill
		and IPSERVICEID = 2		
		
	end
	else
	begin
		-->ADDED : DELETE CHANGE COMPANY BILL 4-MAR-2017 12:32
		if exists(select * from ipbill.CurrentIPPackage where Ipid =@IPID and PackageCode = 'MOH-ICU' and PackageItemID =0 )
		begin
			update ipbill.CurrentIPPackage set Deleted =1 where Ipid =@IPID and PackageCode = 'MOH-ICU' and PackageItemID =0	
			update HIS.DBO.EditPackage set Deleted = 1 where IPID = @IPID 	and code = 'MOH-ICU' 
		end
	end
	
	---->ADDED : TO DELETE ipbill.CurrentIPPackage if they change the room and board ICU to normal : 7-OCT-2017 11:45
	--if (select SUM(packagebill) from #temp2 where IPSERVICEID = 2) = 0
	--begin	
	--	if exists(select * from ipbill.CurrentIPPackage where Ipid = @IPID) 
	--	begin 
	--		update ipbill.CurrentIPPackage set Deleted=  1 where Ipid = @IPID 
	--		set @PackageID = 0 
	--	end 
	--end	
			
end
-----------------------------------------------------------------------------------END MOH ICU PACKAGE

-----------------------------------------------------------------------------------AR IP PACKAGE

if exists(select * from IPBILL.[CurrentIPPackage] where ipid= @IPID and Deleted= 0) 
and not exists(select  * from his.ARADMIN.BedPackages where companyid  = @CompanyID)
and @CompanyID <> 1
begin		
declare
@addDay int,
@PackageIDLoop int,
@PackageDate datetime,
@PackageNofDays int
	set @addDay = 0
	if (select COUNT(*) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and Deleted = 0) = 1
	begin
		set @addDay = 1
	end
	
	if (select DATEDIFF(day,min(SurgeryDateTime),GETDATE()) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and Deleted = 0) <> 1
	begin
		set @addDay = 0
	end
	-->UPDATE : -1 for package days more than the avail 19-Apr-2017 17:07

	if  (DATEDIFF(day,@FromDateTime,GETDATE())) > (select max(NoOfDays) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and deleted = 0)
	begin
		set  @addDay = @addDay - 1
	end
	
	update a
	set  a.PackageID = b.PackageId,
		PriceTable = isnull(d.code,a.itemcode) + '-'+ isnull(d.Name,a.ItemName) +'|' + CONVERT(varchar,isnull(b.NoOfDays,'-1')) + '|' + convert(varchar,isnull(e.Percentage,0) * 100) +'%',
		--a.ItemName = isnull(d.Name,a.ItemName),
		a.PackagePrice = b.PackageAmount,PACKAGEBILL=b.PackageId		
	from #temp2 a
	inner join IPBILL.[CurrentIPPackage] b on b.Ipid = @IPID 
	inner join IPBILL.IPBillPackagePDDetail c on b.PackageId =c.PackageID and a.ItemID = c.ItemID and a.ID = c.OrderID  and a.IPSERVICEID = c.ServiceID
	left join HIS.ARADMIN.ARPackage d on b.PackageItemID = d.Id
	left join ARADMIN.ARPackagePercentage e on b.DiscountID = e.Id
	where b.deleted = 0 and c.Deleted = 0 --and b.PackageId = @PackageID 	
	
	---FOR PACKAGE WITHOUT SURGERY DATETIME IN OTORDER - GET ORDER DATE TIME IN TRX -- 7-FEB-2017 3:01PM
	if exists(select * from IPBILL.[CurrentIPPackage] where Ipid = @IPID and SurgeryDateTime is null and Deleted = 0)
	begin	
		update a
		set  a.SurgeryDateTime =  b.orderdatetime
		from IPBILL.[CurrentIPPackage]  a
		inner join #temp2 b on a.PackageId = b.PackageID
		where a.deleted = 0 and a.Ipid = @IPID and a.SurgeryDateTime is null--and b.PackageId = @PackageID 	
	end
	
		
	if @IPID = 212959
	begin
		---FOR PACKAGE WITH MULTIPLE APPLIED ITEMS e.g. : PIN 1047602 12-AUG-2017 16:42 for this PIN only. Will update and test tomorrow
		update a
		set a.PackagePrice = 0,PACKAGEBILL = 0
		from #temp2 a 
		left join ipbill.CurrentIPPackage b on a.PackageID = b.PackageId
		left join aradmin.ARPackageSurgery c on b.PackageItemID = c.PackageID and a.IPSERVICEID = c.ServiceID and a.ItemID = c.SurgeryID
		where a.PackageID <>0 and a.PackagePrice <> 0 and a.Deleted = 0	and c.PackageID is null 
	end
	else
	begin	
		---FOR PACKAGE WITH MULTIPLE APPLIED ITEMS e.g. : PIN 845204
		update a set PackagePrice = 0
		from #temp2 a
		inner join (
		select IPID,PackageID,MIN(serviceid) as serviceid,
		(select MIN(ItemID) from IPBILL.IPBillPackagePDDetail b where b.ipid = a.IPID and b.packageid =  a.PackageID and b.ServiceID = MIN(a.serviceid) and b.deleted=0) as ItemId
		 from IPBILL.IPBillPackagePDDetail a where ipid = @IPID and deleted = 0 group by ipid,packageid having COUNT(*)<> 1
		) b on a.PackageID = b.PackageID and a.IPSERVICEID <> b.serviceid and a.ItemID <> b.ItemId
		where a.PackageID <>0 and a.PackagePrice <> 0 and Deleted = 0
	end
	
	select @PackageIDLoop = min(PackageID) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and Deleted = 0

	while @PackageIDLoop is not null
	begin
		select @PackageDate = SurgeryDateTime,@PackageNofDays = NoOfDays + @addDay from IPBILL.[CurrentIPPackage] where PackageId = @PackageIDLoop and Deleted = 0
		
		update a
		set  a.PackageID = @PackageIDLoop
		from #temp2 a	
		--UPDATE : ADD THE CONVERSION OF DATETIME 31-DEC-2017 17:40
		where convert(datetime,convert(varchar(10),OrderDateTime,101)) >= convert(datetime,convert(varchar(10),@PackageDate,101)) and convert(datetime,convert(varchar(10),OrderDateTime,101)) <= convert(datetime,convert(varchar(10),DATEADD(DAY,@PackageNofDays,@PackageDate),101))
		--where convert(varchar(10),OrderDateTime,101) >= convert(varchar(10),@PackageDate,101) and convert(varchar(10),OrderDateTime,101) <= convert(varchar(10),DATEADD(DAY,@PackageNofDays,@PackageDate),101)
		--->UPDATE : ADD where PackageID in (select PackageItemID from IPBILL.[CurrentIPPackage] where Ipid = @ipid) in the query : 3-Apr-2017 14:46
		 --and a.itemid not in (select surgeryid from aradmin.ARPackageSurgery where PackageID in (select PackageItemID from IPBILL.[CurrentIPPackage] where Ipid = @ipid and Deleted = 0)) 
		 -->UPDATE as of 3-Aug-2017 16:09
		 and a.PackagePrice = 0
		 and isnull(a.PackageID,0) = 0
		 
		select @PackageIDLoop = min(PackageID) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and Deleted = 0 and PackageId > @PackageIDLoop
	end
	
	---FIRST DAY PD e.g. : PIN 845204
	if exists(select* from #temp2 where datediff(day,OrderDateTime,@FromDateTime) = 0 and PackageID = 0)
	begin
		if not exists(select* from #temp2 where datediff(day,OrderDateTime,@FromDateTime) <> 0 and PackageID = 0)
		begin
			select @PackageIDLoop = min(PackageID) from IPBILL.[CurrentIPPackage] where Ipid = @IPID and Deleted = 0
			update #temp2 set PackageID = @PackageIDLoop where datediff(day,OrderDateTime,@FromDateTime) = 0 and PackageID = 0
		end
	end
	
	update a
	set PACKAGEBILL = 1,PackagePrice = price
	from #temp2  a
	where Deleted = 0 and PackageID =0	
	--ADDED : IF CATEGORY IS CHARITY INCLUDE TAKE HOME MED IN PACKAGE : 27-NOV-2017 10:57
	if (@CategoryID <> 34)
	begin
		update a
		set a.PackageID = 0,PACKAGEBILL = 1
		from #temp2  a
		where Deleted = 0 AND A.IPSERVICEID = 37	
	end
	
	---FOR 1 PACKAGE MULTIPLE ITEMS 
	select c.IPID,c.OrderID,c.ItemID,c.ServiceID
	into #temp_multiplepack	from #temp2 a
	inner join IPBILL.[CurrentIPPackage] b on b.Ipid = @IPID 
	inner join IPBILL.IPBillPackagePDDetail c on b.PackageId =c.PackageID and a.ItemID = c.ItemID and a.ID = c.OrderID  and a.IPSERVICEID = c.ServiceID
	left join HIS.ARADMIN.ARPackage d on b.PackageItemID = d.Id
	where b.deleted = 0 and c.Deleted = 0 group by c.IPID,c.OrderID,c.ItemID,c.ServiceID having COUNT(*) <> 1	
	
	if exists(select * from #temp_multiplepack)
	begin
		insert into #temp2 (RowID,IPSERVICEID,ID,OrderDateTime, BillDateTime,ItemID,BedID,OperatorID,ItemName,ItemCode,Quantity,Price,DepartmentID,DepartmentName,
		DestSt,Deleted,PrinteServiceHeader,sPriceTable,BedTypeID,BedTypeType, PriceTable,TariffID,CompanyID,CategoryID,Discount,DiscountLevel,MarkUpLevel,DiscountPercent,MarkUp,Deposit,Refund,LessReceipt,
		Deductible,DeductiblePercent,DDCLevel,DDCDeposit,DDCRefund,DDCDiscount,ApolloAmount,ApolloPercent,ApolloDiscount,ApolloDeposit,ApolloRefund,
		BillRoomType,ServOrder,Tariff,PackagePrice,PackageID,LimitID,PACKAGEBILL,FinalBillDiscount)	
		select distinct 
		RowID,IPSERVICEID,a.ID,OrderDateTime, BillDateTime,a.ItemID,BedID,a.OperatorID,ItemName,ItemCode,1 Quantity, 0 Price,a.DepartmentID,DepartmentName,
		DestSt,0 Deleted,
		PrinteServiceHeader,sPriceTable,BedTypeID,BedTypeType, isnull(c.PackageCode,a.itemcode) + '-'+ isnull(c.PackageName,a.ItemName) +'|' + CONVERT(varchar,isnull(c.NoOfDays,'-1')) + '|' + convert(varchar,isnull(e.Percentage,0) * 100) +'%' as PriceTable,
		TariffID,CompanyID,a.CategoryID,0 Discount,DiscountLevel,MarkUpLevel,a.DiscountPercent,MarkUp,Deposit,Refund,LessReceipt,
		Deductible,DeductiblePercent,DDCLevel,DDCDeposit,DDCRefund,DDCDiscount,0 ApolloAmount,ApolloPercent,ApolloDiscount,ApolloDeposit,ApolloRefund,
		BillRoomType,ServOrder,Tariff,isnull(c.PackageAmount,0) PackagePrice,c.PackageId,LimitID,c.PackageId PACKAGEBILL,FinalBillDiscount			
		from #temp2 a
		inner join #temp_multiplepack b on a.ID = b.OrderID and a.ItemID  = b.ItemID and a.IPSERVICEID = b.ServiceID
		inner join IPBILL.[CurrentIPPackage] c on c.Ipid = @IPID and a.PackageID <> c.PackageId and c.Deleted = 0
		inner join IPBILL.IPBillPackagePDDetail d on a.PackageID <> d.PackageID and a.ItemID = d.ItemID and a.ID = d.OrderID  and a.IPSERVICEID = d.ServiceID		
		left join ARADMIN.ARPackagePercentage e on c.DiscountID = e.Id		
	end	
	drop table #temp_multiplepack
	
	-->update package price for multiple package PIN : 1257555 25-Feb-2017 16:24
	while exists(select packageid from #temp2 where packageid <> 0 and packageprice <> 0 group by PackageID,packageprice having COUNT(*) <> 1)
	begin
		update #temp2 set PackagePrice = 0,packagebill= 0,PriceTable='PCK' where IDD in (
		select MAX(idd) from #temp2 where packageid <> 0 and packageprice <> 0 group by PackageID,packageprice having COUNT(*) <> 1)
	end
	
	---END FOR 1 PACKAGE MULTIPLE ITEMS
	
	-->ADDED : Record the Package Days of the patient package. to be used in PackageBill : 24-May-2017 11:27
	update [IPBILL].CurrentIPPackageDays set Deleted = 1 where IPID = @IPID
	
	-->REMOVED : Change logic because not all package are recorded : 26-Aug-2017 11:31
	--insert into [IPBILL].CurrentIPPackageDays (IPID,PackageID,PackageDaysStart,PackageDaysEnd,OperatorID,DateTime,Deleted)	
	--select @IPID,packageid,Orderdatetime,billdatetime,@OperatorID,GETDATE(),0 from #temp2 where PackageID <> 0 and PACKAGEBILL = 0 
	--and IPSERVICEID = 2	
	-->UPDATE : Change logic to get all packages : 26-Aug-2017 11:31
	insert into [IPBILL].CurrentIPPackageDays (IPID,PackageID,PackageDaysStart,PackageDaysEnd,OperatorID,DateTime,Deleted)	
	select distinct @IPID,packageid,Orderdatetime,billdatetime,@OperatorID,GETDATE(),0 from #temp2 where PackageID = packagebill		
	and PackagePrice <> 0
end
-----------------------------------------------------------------------------------END AR IP PACKAGE

-----------------------------------------------------------------------------------NORMAL CASH PACKAGE
if exists(select * from HIS.DBO.ippackage where packageid = @PackageID and ipid = @ipid)
and not exists(select * from HIS.ipbill.CurrentIPPackage where packageid = @PackageID and ipid = @ipid and Deleted = 0)
begin	
	-------GET ITEMS BY NO. OF DAYS-------
	update a 
	set PackageID = @PackageID
	from #temp2 a
	left join HIS.DBO.ippackage b on b.Ipid = @IPID 
	where  (a.OrderDateTime >= b.Datetime or a.OrderDateTime < DATEADD(day,1, (DATEADD(day,b.noofdays,b.Datetime))))
	and a.Deleted = 0
	
	update top(1) a
	set a.PackagePrice = a.PackagePrice + b.PackageAmount, a.PackageID = b.PackageId,DestSt='|||',PriceTable='|||',a.PACKAGEBILL = a.PackageID
	from #temp2 a
	left join HIS.DBO.ippackage b on b.Ipid = @IPID
	inner join HIS.DBO.EditPackageSurgery c on c.PackageID = b.PackageId and a.ItemID = c.SURGERYID  and a.IPSERVICEID = b.ServiceID
	where a.Deleted = 0
	
	--update a
	--set a.PackagePrice = a.PackagePrice + b.PackageAmount, a.PackageID = b.PackageId,DestSt='|||',PriceTable='|||',a.PACKAGEBILL = a.PackageID
	--from #temp2 a
	--left join HIS.DBO.ippackage b on b.Ipid = @IPID
	--inner join HIS.DBO.packagepatient c on c.PackageID = b.PackageId and a.ItemID = c.SURGERYID  and a.IPSERVICEID = b.ServiceID

	-->Check if there no Surgery Match in Package
	if (select SUM(PackagePrice) from #temp2) = 0
	begin
		update #temp2 set PackagePrice = 0, PackageID= 0 ,PACKAGEBILL = 0 where Deleted = 0
	end
	
	-->Insert in packagepatient if the packageid does not exists --15-Feb-2017 1022AM
	if not exists(select * from HIS.dbo.PackagePatient where IPID = @IPID and packageid = @PackageID)
	begin
		-->CHECK IF #TEMP2 HAS A PACKAGEPRICE <> 0 JEROME --24-JULY-2017-3:13PM
		IF  EXISTS(select * from #temp2 where PackagePrice <> 0 and Deleted = 0)
		BEGIN 
				insert into HIS.dbo.PackagePatient (IPID,PackageID,StartDateTime,EndDateTime,Amount,BedID,BedTypeID,SurgeryID,ServiceID,DepartmentID,
				NoofDays,OrderId,DateTime,OperatorID,Discount,StartBefore,IsPriceEdited,PriceEditedOn,PriceEditedBy,IsConfirmed,ConfirmedOn,ConfirmedBy,DepartmentName)
				select ipid,a.PackageId,Datetime,GETDATE(),PackageAmount,0,
				b.BillRoomType as BedtypID, b.ItemID SurgeryID, b.IPSERVICEID ServiceID, b.DepartmentID DepartmentId,
				NoOfDays,b.ID as OrderID,Datetime,b.OperatorID as OpertorId,0 as Discount,-1,0,null,0,1,
				GETDATE() ConfirmedOn, @OperatorID as ConfirmedBy,b.DepartmentName as DepartmentName
				from HIS.DBO.ippackage a
				left join (select * from #temp2 where PackagePrice <> 0 and Deleted = 0) b on a.PackageId = b.PackageID
				where a.ipid = @IPID	
		END			
	end
	-->UPDATE PACKAGEPATIENT IF THERE IS EXISTING PACKAGE 5-Mar-2017 12:50
	if (select COUNT(*) from HIS.dbo.PackagePatient where PackageID = @PackageID) <> 1
	begin
		update a 
		set a.PackageID = -1 * a.PackageID,a.IPID = -1 * a.IPID
		from HIS.dbo.PackagePatient a
		left join #temp2 b on a.OrderId = b.ID and a.SurgeryID = b.ItemID and a.ServiceID = b.IPSERVICEID
		where a.PackageID = @PackageID and b.Deleted <> 0
	end
	
	if (select sum(a.PackageAmount - b.Amount) from his.dbo.ippackage a
	left join his.dbo.packagepatient b on a.Ipid = b.ipid
	where a.Ipid =@IPID and a.PackageId  = b.PackageID) <> 0
	begin
		--select b.PackageAmount,a.Amount 
		update a set a.Amount = b.PackageAmount
		from his.dbo.packagepatient  a
		left join his.dbo.ippackage  b on a.Ipid = b.ipid
		where a.Ipid =@IPID and a.PackageId  = b.PackageID
	end
	--if not exists(select * from #temp2 where packageid <> 0 and PackagePrice <> 0 and Deleted = 1)
	--begin
	--	update his.dbo.EditPackage set Deleted = 1 where id in (select packageid from #temp2 where packageid <> 0 and PackagePrice <> 0 and Deleted = 1) 
	--	update #temp2 set PackageID = 0,PackagePrice = 0,PACKAGEBILL=0 where PackageID in (select packageid from #temp2 where packageid <> 0 and PackagePrice <> 0 and Deleted = 1)				
	--end
end
-----------------------------------------------------------------------------------END NORMAL CASH PACKAGE

-----------------------------------------------------------------------------------DEPOSIT
-------IF CASH-------
if @CompanyID = 1 or @CategoryID in (34)
begin
	update top(1) #temp2 set deposit = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (1,2) ),0)
	--update top(1) #temp2 set LessReceipt = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type = 2 ),0)
	update top(1) #temp2 set Refund = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (3,6) ),0)
end
-------IF EXCLUSION-------
else 
begin	
	if not exists(select * from #temp2 where ApolloAmount <>0)
	begin
		update top(1) #temp2 set deposit = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (1) ),0) 
		update top(1) #temp2 set LessReceipt = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type = 2 ),0) 
		update top(1) #temp2 set Refund = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (3,6) ),0) 
		
		-->ADDED Determine if there is payment in the system.not yet deployed 
		--declare
		--@ApolloAmountDeposit numeric(18,2)
		--Select @ApolloAmountDeposit = sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (1,2)
		--update #temp2 set 
		--ApolloAmount = (convert(numeric(18,2),(quantity * price)) * 
		--(@ApolloAmountDeposit) / (select SUM(price * Quantity) from #temp2 where Deleted = 0))/Quantity
		--where Deleted = 0		
		--if (select SUM(ApolloAmount * Quantity) from #temp2 where Deleted = 0) <> @ApolloAmountDeposit
		--begin
		--	update top (1)  #temp2 set ApolloAmount = ApolloAmount - ((select SUM(ApolloAmount * Quantity) from #temp2 where Deleted = 0) - @ApolloAmountDeposit)
		--	where IDD = (select top 1 idd from #temp2 where Deleted =0 order by ApolloAmount desc)
			
		--end				
		--update #temp2 set price = price- ApolloAmount where Deleted = 0		
		
		--update top(1) #temp2 set ApolloDeposit = @ApolloAmountDeposit where ApolloAmount <> 0
							
	end
	else
	begin
		update top(1) #temp2 set ApolloDeposit = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (1) ),0) where ApolloAmount <> 0
		update top(1) #temp2 set LessReceipt = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type = 2 ),0) where ApolloAmount <> 0
		update top(1) #temp2 set ApolloRefund = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (3,6) ),0) where ApolloAmount <> 0			
		update top(1) #temp2 set DDCDeposit = isnull((Select sum(Amount) from HIS.DBO.IPTRANSACTIONS where ipid = @IPID and type in (1,7)),0) where Deductible <> 0		
	end
end
-------IF EXCLUSION------- 



-------IF CHARITY-------

-----------------------------------------------------------------------------------END DEPOSIT

-----------------------------------------------------------------------------------NORMALIZE FIELDS
if @CategoryID = 1
begin
	update #temp2 set Price = ApolloAmount where ApolloAmount <> 0
	update #temp2 set ApolloAmount = 0 where ApolloAmount <> 0
end

-------FOR PRINTING HEADERS-------
	update a set a.DepartmentName = b.Name from #temp2 a
	left join IPBILL.IPBDisplayServices b on a.IPSERVICEID = b.ID
	where a.IPSERVICEID = 2
	
	--update a set a.DepartmentName = b.Name ,a.PrinteServiceHeader= b.Name from #temp2 a
	--left join HIS.IPBILL.IPBDisplayServices b on b.ID = 24
	--where a.IPSERVICEID = 33
	
	update #temp2 set DepartmentName = upper(DepartmentName),PrinteServiceHeader = upper(PrinteServiceHeader)
	
	update a
	set DepartmentName = upper(c.name),PrinteServiceHeader = upper(c.name)
	from #temp2 a 
	left join his.IPBILL.IPBServices b on a.IPSERVICEID = b.id
	left join his.dbo.department C on b.departmentid = c.id
	where isnull(DepartmentName,'') = '' or isnull(PrinteServiceHeader,'') = '' or IPSERVICEID in (3)
	
	update #temp2 set Discount = case when Discount is null then 0 else Discount end,
	Price = case when Price is null then 0 else Price end,
	MarkUp = case when MarkUp is null then 0 else MarkUp end,
	ApolloAmount = case when ApolloAmount is null then 0 else ApolloAmount end
	
	--update #temp2 set ApolloDiscount = Discount where ApolloAmount <> 0
	--update #temp2 set Discount = 0 where ApolloAmount <> 0 and IPSERVICEID = 2
	
	update #temp2 set DDCDiscount = Discount where Deductible <> 0
	update #temp2 set Deductible = ISNULL(Deductible,0)
	update #temp2 set Discount = 0 where Deductible <> 0

	update #temp2 set Discount = 0 where price = 0
	update #temp2 set DepartmentID = 16 where isnull(DepartmentID,0) = 0
	update #temp2 set price = 100 where price  =0 and IPSERVICEID = 15 and CompanyID = 1
	update #temp2 set ItemName = '' where ISNULL(ITEMNAME,'') = ''
	
	update #temp2 set Discount = 0 where price = 0
	update #temp2 set PackagePrice = 0 where PackagePrice is null
	
-----------------------------------------------------------------------------------END NORMALIZE FIELDS

-----------------------------------------------------------------------------------AR IP Bill Others/NPD
if exists(select  * from ipbill.IPBillAdditionalOthers where ipid = @IPID and  Deleted = 0)
begin
	update a
	set a.PackageID = 0,PACKAGEBILL = 1
	from #temp2  a
	inner join ipbill.IPBillAdditionalOthers b on a.ItemID = b.ItemID and a.ID = b.OrderID and a.IPSERVICEID = b.IPServiceID and b.IPID = @IPID	
	where b.Deleted = 0
	
	-->UPDATE : For room and board Others. IDD should be saved in ipbill.IPBillAdditionalOthers 3-Aug-2017 16:54
	if exists(select  * from ipbill.IPBillAdditionalOthers where ipid = @IPID and  Deleted = 0 and IPServiceID = 2)
	begin	
		update a
		set a.PackageID = 0,PACKAGEBILL = 1
		from #temp2  a
		inner join ipbill.IPBillAdditionalOthers b on a.ItemID = b.ItemID and a.IDD = b.OrderID and a.IPSERVICEID = b.IPServiceID and b.IPID = @IPID	
		where b.Deleted = 0  and a.IPSERVICEID = 2
	end
	
	-->UPDATE : Add room and board in the NPD Others 13-Apr-2017 13:38
	update a
	set a.PackageID = 0,PACKAGEBILL = 1
	from #temp2  a
	inner join ipbill.IPBillAdditionalOthers b on a.ItemID = b.ItemID and b.IPID = @IPID and datediff(day,a.OrderDateTime,b.ServiceOrderDateTime) = 0 and b.IPServiceID= 2
	where b.Deleted = 0 and a.IPSERVICEID = 2




	--update a
	--set a.Price = b.Price,PackageID = 0
	--from #temp2  a
	--inner join ipbill.IPBillAdditionalOthers b on a.ItemID = b.ItemID and b.IPID = @IPID
	--where a.IPSERVICEID = 22
end

	update #temp2 set ID = itemid where IPSERVICEID in (2,3)
-----------------------------------------------------------------------------------End AR IP Bill Others

-------------------------------------------------------------------------------------EXCLUDE LAST DAY
if exists(select * from [IPBILL].BedDayExclude where IPID = @IPID and Deleted= 0 )
begin
	update #temp2 set Price=0,PackagePrice=0,ApolloAmount= 0,ApolloDiscount=0,Deductible=0  where IDD = (	select max(idd) from #temp2 where IPSERVICEID = 2)
end
-------------------------------------------------------------------------------------END EXCLUDE LAST DAY
-------------------------------------------------------------------------------------EXCLUDE LAST MEDICAL SUPERVISION
if exists(select * from [IPBILL].MedicalDayExclude where IPID = @IPID and Deleted= 0 )
begin
	update #temp2 set Price=0,PackagePrice=0,ApolloAmount= 0,ApolloDiscount=0,Deductible=0  where IDD = (	select max(idd) from #temp2 where IPSERVICEID = 3)
end
-------------------------------------------------------------------------------------END EXCLUDE LAST MEDICAL SUPERVISION

-----------------------------------------------------------------------------------SERVICE CHARGE
if OBJECT_ID('HIS.DBO.IPCompanyServiceCharge') is not null
begin		
	update 	aa
	set 
	aa.ApolloAmount = 
		case when @CategoryID  = 1  then bb.ApolloPrice 
			when ApolloPrice <> 0 then ApolloPrice
		else 0 end, 
	aa.Price = bb.price, 
	aa.itemname= c.ServiceName--,aa.DepartmentName = (select max(ServiceName) from ipbill.IPBServices where id =38)
	from #temp2 aa
	inner join (
	select a.IPSERVICEID,
		SUM((price * quantity) * isnull(b.Percentage,0)) / 100 as Price,
		SUM((ApolloAmount * quantity) * isnull(b.Percentage,0)) / 100 as ApolloPrice  		
		from #temp2  a
	left join HIS.DBO.IPCompanyServiceCharge b on a.IPSERVICEID = b.ServiceID and b.CompanyID = @CompanyID and b.CategoryID = @CategoryID and GradeID = @GradeID
	group by a.IPSERVICEID) bb on aa.ItemID = bb.IPSERVICEID
	left join HIS.ipbill.IPBServices c on aa.itemid = c.id
	where aa.IPSERVICEID = 38
end
-----------------------------------------------------------------------------------END SERVICE CHARGE

-----------------------------------------------------------------------------------CHECK DISPATCH AND LAB WITHOUT RESULT

update #temp2 set PriceTable = 'NOTDELIVERED' where DepartmentName like '%NOTDELIVERED' and PriceTable not like '%|%'
update #temp2 set DepartmentName = replace(DepartmentName,'-NOTDELIVERED',''),PrinteServiceHeader = replace(PrinteServiceHeader,'-NOTDELIVERED','') where DepartmentName like '%NOTDELIVERED'

-----------------------------------------------------------------------------------END CHECK DISPATCH AND LAB WITHOUT RESULT


	update #temp2 set Discount = 0 where price = 0
	
	----------------------------------------------------------------------------------- LONG STAYING PATIENT ZERO
	--PIN 1536804
	if (@IPID = 201381)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where DepartmentID in (77,101)
	end
	--PIN 1501033
	if (@IPID = 193272)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where DepartmentID in (77,101,50)
	end
	--PIN 1496120
	if (@IPID = 191616)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where IPSERVICEID in (2)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where DepartmentID in (77,101)
	end
	--PIN 1002906
	if (@IPID = 79640)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0 where DepartmentID in (77,101)
	end
	----------------------------------------------------------------------------------- END LONG STAYING PATIENT ZERO

-----------------------------------------------------------------------------------Normal Viewing of Bill
if ISNULL(@PrintPayable,0) = 0 and @Discharge = 0 
begin
	---->ADDED : FOR DATE RANGE VIEWING -- 18-OCT-2017
	--delete a from #temp2 a 
	--left join (
	--select * from #temp2 where IPSERVICEID in (2,3) and OrderDateTime >= @FromDateTime and OrderDateTime < DATEADD(DAY,1,@ToDateTime)
	--) b on datediff(day,a.OrderDateTime,b.OrderDateTime) = 0
	--where b.id is null and a.IPSERVICEID in (2,3)
	
	-----------------------------------------------------------------------------------PRE OPERATIVE ITEMS
	-->PREOPERATIVE WILL ON VIEWING ONLY. IT WILL NOT AFFECT THE CREATED RECORD 5-MAR-2017 14:07
	-->PREOPERATIVE PRICE WAS REMOVE BECAUSE IT IS AFFECTING THE CREATED BILL. WILL VERIFY WITH AR WHICH ONE SHOULD REFLECT THESE PREOP. 27-APR-2017 11:31
	if exists(SELECT * FROM  [IPBILL].IPBillAdditionalPreOP where IPID = @IPID and Deleted  = 0)
	begin
		update a 
		set --a.price = 0,a.Discount = 0,a.DiscountPercent = 0,ApolloAmount = 0,
		PriceTable = 'PREOP'
		from #temp2 a 
		inner join [IPBILL].IPBillAdditionalPreOP b on a.ItemID = b.ItemID and a.ID = b.OrderID and b.Deleted = 0
		where a.IPSERVICEID = 13
		
		--update top (1) a 
		--set a.price = c.Price,
		--a.ItemCode = case when @Discharge = 0 then c.ItemCode else a.ItemCode end,
		--a.ItemName = case when @Discharge = 0 then c.ItemName else a.ItemName end,
		--a.PriceTable = 'PREOP'		
		--from #temp2 a 
		--inner join [IPBILL].IPBillAdditionalPreOP b on a.ItemID = b.ItemID and a.ID = b.OrderID and b.Deleted = 0
		--left join (select ItemCode,ItemName,price
		--from [ARADMIN].[pd_additional_items] where CategoryId = @CategoryID and ItemCode like 'PRE%' and Deleted = 0 group by ItemCode,ItemName,price) c on c.ItemCode <> ''
		--where a.IPSERVICEID = 13
	end
	-----------------------------------------------------------------------------------END PRE OPERATIVE ITEMS

	update #temp2 set PrinteServiceHeader = 'MEDICAL SUPERVISION',DepartmentName = 'MEDICAL SUPERVISION' where IPSERVICEID  = 3
	update #temp2 set PrinteServiceHeader = 'NURSING ADMINISTRN',DepartmentName = 'NURSING ADMINISTRN' where IPSERVICEID  = 33

	update #temp2 set PriceTable='ZEROITEMS' where price = 0 and PriceTable not in ( 'PREOP','PCK') and PackagePrice = 0  and Deleted = 0
	update #temp2 set PriceTable='' where price = 0 and ItemCode in (Select ItemCode from HIS.DBO.CANCSTZeroPriceItems ) and IPSERVICEID = 1
	--ADD - Remove IPBservice 7 in zero price - 23-Nov-2017 12:52
	update #temp2 set PriceTable='' where price = 0 and IPSERVICEID in (2,3,7,27,14,28)
	
	if not exists(select * from #temp2 where IPSERVICEID = 5 and Deleted = 0)
	begin
		update #temp2 set PriceTable='' where price = 0 and IPSERVICEID in (33)
	end
	update #temp2 set PriceTable='' where price = 0 and ApolloAmount <>0 
	update #temp2 set PriceTable='' where price = 0 and DiscountPercent = 100
	
	update #temp2 set PriceTable='|||' where packageprice  <> 0  and PriceTable = ''
	update #temp2 set PriceTable='|||' where packageprice  <> 0  and PriceTable = 'PCK'
	
	update a
	set a.PriceTable = a.PriceTable + '|' + 'REMOVEITEM'
	from #temp2 a
	inner join ipbill.IPBillRemovedItems b on  a.IPSERVICEID = b.IPServiceID and a.ItemID = b.ItemID and a.ID = b.OrderID
	where b.IPID = @IPID and b.Deleted = 0
	
	
	--PIN 1536804
	if (@IPID = 201381)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where DepartmentID in (77,101)
	end
	--PIN 1501033
	if (@IPID = 193272)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where DepartmentID in (77,101,50)
	end
	--PIN 1496120
	if (@IPID = 191616)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where IPSERVICEID in (2)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where DepartmentID in (77,101)
	end
	--PIN 1002906
	if (@IPID = 79640)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where DepartmentID in (77,101)
	end
	
	
	select a.*,b.Name as ServiceName from #temp2 a
	left join HIS.IPBILL.IPBDisplayServices b on a.IPSERVICEID = b.ID
	where Deleted = 0
	--order by a.PriceTable
	--where ItemCode = 'MS-G-000272'
	--where OperatorID > 0
	--where packageid <> 0
	--where a.IPSERVICEID = 13-- and ApolloAmount <> 0 --and a.ItemID=14267
	--where a.ID=623737
	--select a.ID,a.IPSERVICEID,a.ItemID from #temp2 a
	--left join IPBILL.IPBDisplayServices b on a.IPSERVICEID = b.ID
	--group by a.ID,a.IPSERVICEID,a.ItemID having COUNT(*) <> 1
	--order by Departmentname	
end

declare
@currIPBill int
set @ddate = GETDATE()
-----------------------------------------------------------------------------------Prepare Payable function
if ISNULL(@PrintPayable,0) = 1 and isnull(@OperatorID,0) <> 0
begin	
	declare
	@OPBillID int
	
	-------Current IP function-------	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPBill-Delete',@OperatorID,GETDATE()

	Delete from HIS.dbo.CurrentIPBillItemDetail Where IPBillID in (Select id from HIS.dbo.CurrentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	Delete from HIS.dbo.CurrentIPBillDetail Where IPBillID in (Select id from HIS.dbo.CurrentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	Delete from HIS.dbo.CurrentIPBill Where ID in (Select id from HIS.dbo.CurrentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	
	Insert into HIS.dbo.CurrentIPBill(IPID,BillAmount,DepositAmount,RefundAmount,DoctorID,Cash,CompanyID, CategoryID,GradeID,TariffID,DeductableType,MarkUp,Discount,Deductable,DateTime,OperatorID) 	
	select @IPID,SUM((PRICE + ApolloAmount +Deductible) * Quantity) as BillAmount,
	sum(Deposit) + SUM(DDCDeposit) as DepositAmount,sum(Refund) + SUM(DDCRefund) as RefundAmount,@doctorid as DoctorID,
	case when @CompanyID <> 1 then 2 else 1 end as Cash,@CompanyID,@CategoryID,@GradeID,@TariffID,
	sum(MarkUp) as MarkUP,sum(Discount) + SUM(DDCDiscount) as Discount,SUM(Deductible) as Deductible,
	convert(int,isnull((select max(deductible) from HIS.dbo.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),-1)) as DeductableType,
	@ToDateTime as DateTime,@OperatorID as OperatorID from #temp2 a where Deleted = 0
	
	select @OPBillID = SCOPE_IDENTITY()
	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPBill-' +CONVERT(varchar,@OPBillID) ,@OperatorID,GETDATE()
	
	insert into HIS.dbo.CurrentIPBillDetail 
	select @OPBillID as IPBillID,a.ID,
	isnull(SUM((b.PRICE+b.ApolloAmount+b.Deductible) * Quantity),0) ,	
	isnull(SUM(b.ApolloAmount),0) as ApolloAmount,0.00 as CategoryAmount,
	isnull(SUM(b.markup * Quantity),0) as MarkUp,
	isnull(SUM(b.discount),0) as Discount,
	isnull(SUM(b.Deductible),0) as Deductible 
	from HIS.IPBILL.IPBServices a left join #temp2 b on a.ID = b.IPSERVICEID and b.Deleted =0 where a.Deleted = 0 	group by a.ID order by a.ID

	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPBillDetail-' +CONVERT(varchar,@OPBillID) ,@OperatorID,GETDATE()

	print 'IPBILL.CurrentIPBillingItemDetail'
	Insert into HIS.dbo.CurrentIPBillItemDetail(IPBillID,SerialNo,ServiceID,OrderID,ItemID,DateTime,Fromdatetime,ToDateTime,Quantity,Price,ApolloPrice,
	CategoryPrice,MarkUpAmount,BedTypeID,DepartmentID,DeductableAmount,DeductableLevel,Discount,DiscountLevel,BedID,OperatorID,ItemCode, ItemName)
	select 	 
	@OPBillID as IPBillID,
	case when IPSERVICEID  in (1,5,33,37) then 
	SUBSTRING(DestSt, CHARINDEX('|',DestSt,0)+ CHARINDEX('|', SUBSTRING(DestSt, CHARINDEX('|',DestSt,0)+ 1,LEN(DestSt))) + 1,len(DestSt)) --BATCHID
	else 0	end	as SerialNo,
	IPSERVICEID as ServiceID,
	case 
	when IPSERVICEID in (2,3) then a.ItemID
	when b.OrderType = 4 then ItemID 
	else a.ID end as OrderID,
	ItemID,
	BillDateTime,
	case when b.OrderType = 4 then OrderDateTime else null end as Fromdatetime,
	case when b.OrderType = 4 then BillDateTime else null end as ToDateTime,
	Quantity,	
	a.PRICE,
	ApolloAmount as ApolloPrice,
	0 as CategoryPrice,a.MarkUp as MarkUpAmount,
	case 
	when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
	when IPSERVICEID in (2,3) then BedID
	else 0 
	end as BedTypeID,
	a.DepartmentID,Deductible as DeductableAmount,
	0 as DeductableLevel,Discount,0 as DiscountLevel,
	case when b.OrderType = 4 then ItemID else a.ID end as BedID,
	OperatorID,a.ItemCode , a.ItemName	
	from #temp2 a
	left join HIS.IPBILL.IPBServices b on a.IPSERVICEID = b.ID	
	where a.Deleted = 0
	order by a.IPSERVICEID,a.ID

	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPBillItemDetail-' +CONVERT(varchar,@OPBillID) ,@OperatorID,GETDATE()

	set @ReturnMessage = 'Prepare Payable Done!'	
end
else if ISNULL(@PrintPayable,0) = 2	--FOR PRINTING REPORT ONLY
begin
	select	
	SUM(price * Quantity) BillAmount,
	SUM(price * Quantity) - sum(Deposit) - sum(Refund) Balance,
	sum(MarkUp) MarkUp,
	sum(Discount) Discount,
	sum(Deductible) Deductable	
	from #temp2 where Deleted = 0
end
-----------------------------------------------------------------------------------End Prepare Payable function

if exists(select * from his.dbo.ipbill where IPID = @IPID)
begin
	set @Discharge = 0
end

	
-----------------------------------------------------------------------------------Discharge function
if (@Discharge = 1 )
begin
	insert into IPBILL.DischargeDataLog
	select @IPID,* from #temp2

	set @ddate = GETDATE()
	-----------REMARKS
	Update HIS.DBO.Bed Set IPID=0,Status=9 where IPID=@IPID	
	Update HIS.DBO.BedTransfers Set ToDateTime=@ddate where IPID=@IPID and ToDateTime Is Null	
	Update HIS.DBO.IPBillNo With (TABLOCKX)  Set SlNo=SlNo Where 1=2		
	
	--select @SLNO = max(a.slno)
	--USE COUNTER
	--from (select max(slno) as slno from HIS.DBO.ipbill  where billtype = 1 	union all 
	--select max(slno) as slno from HIS.DBO.cancelipbill  where billtype = 1 ) A 		
	
	--select @SLNO = max(a.slno)
	--from (select max(slno) as slno from HIS.DBO.ipbill union all 
	--select max(slno) as slno from HIS.DBO.cancelipbill ) A 
	
	-----------REMARKS
	--	
	--Update HIS.DBO.IPBillItemSerialNo With (TABLOCKX)  Set SerialNo=SerialNo Where 1=2		
	
	Select @SerialNo = SerialNo from HIS.DBO.IPBillItemSerialNo
	--update SerialNo = from HIS.DBO.IPBillItemSerialNo
	--Select @SerialNo = SerialNo from ipbill.IPBillingItemSerialNo	

	-->UPDATE : GET SLNO ON IPBILL AND CANCEL. BILLTYPE DISREGARDED. It will be unique like billno. 13-Apr-2017 9:21
	if (@CompanyID = 1)
	begin
		set @BedTypeID = 1--Company
		set @BillType = 1
		set @Cash = 1
		
		select @SLNO = max(a.slno) + 1
		from (select max(slno) as slno from HIS.dbo.ipbill union all select max(slno) as slno from HIS.dbo.cancelipbill) A 	
		
		
		--select @SLNO = SlNo from HIS.DBO.IPBillNo Where BILLTYPE=1		
		Update HIS.DBO.IPBillNo Set SlNo=@SLNO Where BILLTYPE=1		
	end
	else if (@CompanyID <> 1)
	begin
		set @BedTypeID = 2--Company
		set @BillType = 2
		set @Cash = 2	
		
		select @SLNO = max(a.slno) + 1
		from (select max(slno) as slno from HIS.dbo.ipbill union all select max(slno) as slno from HIS.dbo.cancelipbill ) A 	
		
		--select @SLNO = SlNo from HIS.DBO.IPBillNo Where BILLTYPE=2
		Update HIS.DBO.IPBillNo Set SlNo=@SLNO Where BILLTYPE=2	
	end
	
	if (@PackageID = 0)
	begin
	
		insert into his.dbo.ipbill (IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,		
		Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select	
		@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
		SUM(price * Quantity) BillAmount,
		SUM(price * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
		@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, sum(Discount) Discount, sum(Deductible) Deductable,
		isnull((select max(deductible) from HIS.dbo.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
		@OperatorID OperatorID, 0 IsSplit from #temp2 where Deleted= 0
		
		select @BillNo = SCOPE_IDENTITY()
		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-NPD',@OperatorID,GETDATE()
		
		Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,isnull(SUM(price * Quantity),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		isnull(SUM(discount),0) as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2 
		where Deleted= 0 group by IPSERVICEID
		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail',@OperatorID,GETDATE()
		
		insert into HIS.dbo.IPbillitemdetail (		
		BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select 
		@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,		
		--case 
		--	when IPSERVICEID = 1 then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) 
		--	when IPSERVICEID = 2 then BedID
		--	else BedTypeID 
		--	end as BedTypeID,
		case 
			when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			when IPSERVICEID in (2,3) then BedID
			else 0 
		end as BedTypeID,	
		IPSERVICEID, ItemID, Quantity, Price, ApolloAmount as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, Discount/Quantity Discount , 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where Deleted= 0 order by IPSERVICEID,ID	
		
		set @SerialNo = (select max(SerialNo) from HIS.dbo.IPbillitemdetail where billno = @billno)
		update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail',@OperatorID,GETDATE()
		
		if (@CompanyID <> 1)
		begin
			exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,0			
		end
		
		--if (select SUM(price) from #temp2 where IPSERVICEID= 15) <> 0 and @BillType = 2
		--begin
		--	select @cashMark =  SUM(price) from #temp2 where IPSERVICEID= 1
		--	exec HIS.dbo.SP_IP_SetInvoiceConsultationCharges @Billno,@cashMark
		--end
	end
	else
	begin	
		if not exists(select * from HIS.dbo.PackagePatient where IPID = @IPID)
		begin
			insert into HIS.dbo.PackagePatient (IPID,PackageID,StartDateTime,EndDateTime,Amount,BedID,BedTypeID,SurgeryID,ServiceID,DepartmentID,
			NoofDays,OrderId,DateTime,OperatorID,Discount,StartBefore,IsPriceEdited,PriceEditedOn,PriceEditedBy,IsConfirmed,ConfirmedOn,ConfirmedBy,DepartmentName)
			select ipid,a.PackageId,Datetime,GETDATE(),PackageAmount,0,
			b.BillRoomType as BedtypID, b.ItemID SurgeryID, b.IPSERVICEID ServiceID, b.DepartmentID DepartmentId,
			NoOfDays,b.ID as OrderID,Datetime,b.OperatorID as OpertorId,0 as Discount,-1,0,null,0,1,
			GETDATE() ConfirmedOn, @OperatorID as ConfirmedBy,b.DepartmentName as DepartmentName
			from HIS.DBO.ippackage a
			left join (select * from #temp2 where PackagePrice <> 0) b on a.PackageId = b.PackageID
			where a.ipid = @IPID
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackagePatient',@OperatorID,GETDATE()
			
		end

	
		if (@CompanyID = 1)
		begin
			set @BedTypeID = -1--CASH PACKAGE
		end
		
		update #temp2 set PackagePrice = price where packagebill <> 0 and PackageID = 0 and Deleted= 0	
		
		print 'IPBill-PD'						
		insert into HIS.dbo.ipbill (IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,
		Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select @IPID as IPID, @SLNO as SlNo, @ddate as BillDate, SUM(PackagePrice * Quantity) BillAmount, 
		SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,@GradeID GradeID, @TariffID TariffID, 
		@BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, 0 Deductable,-1 DeductableType, @OperatorID OperatorID, 0 IsSplit 
		from #temp2 a where packagebill <> 0 and Deleted= 0
		
		select @BillNo = SCOPE_IDENTITY()
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-PD',@OperatorID,GETDATE()
		
		print  'IPBillDetail-PD'		
		Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,isnull(SUM(a.PackagePrice * Quantity ),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  a where packagebill <> 0 and Deleted= 0
		group by IPSERVICEID	
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail-PD',@OperatorID,GETDATE()
		
		select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
		print  'IPbillitemdetail-PD'		
		insert into HIS.dbo.IPbillitemdetail (
		BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select @BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		--case when IPSERVICEID = 2 then itemid else BedID end as BedID,
		--0 as BedID, --IF PACKAGE 		
		case when PACKAGEBILL = PackageID then 0 else case when IPSERVICEID in (2,3) then ItemID else bedid end end,--> Changed 7-Feb-2017 2:34PM as per request for EOD and ERP
		case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
		end as BedTypeID,	
		--case 
		--	when IPSERVICEID = 1 then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) 
		--	when IPSERVICEID = 2 then BedID else BedTypeID
		--	end as BedTypeID,			
		IPSERVICEID, ItemID, Quantity, PackagePrice, 0 as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 
		CASE WHEN packageid = 0 then Discount/quantity else 0 end, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where packagebill <> 0 and Deleted= 0
		
		set @SerialNo = (select max(SerialNo) from HIS.dbo.IPbillitemdetail where billno = @billno)
		update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail-PD-SERRIAL' + CONVERT(varchar,@SerialNo),@OperatorID,GETDATE()
					
		--PACKAGE BILL
		--Include all as actual bill in PackageBill table for ERP/Finance
		
		select @PackageID = max(packageid) from #temp2
		update #temp2 set PackageID = @PackageID where Deleted = 0 and PackageID = 0
		
		if (@CompanyID = 1 or @CategoryID in (56,34,42))
		begin
			print  'PackageBill'		
			insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
			Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
			PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
			select 	@IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
			d.Amount,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
			SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.PackageID,d.IPSERVICEID PackageServiceID,
			d.id PackageOrderID,d.ItemID PackageItemID,d.BedTypeType PackageBedTypeID,
			d.OrderDateTime,- 1 StartBefore,d.NoOfDays,d.StartDateTime PackageStartDateTime,EndDateTime,
			d.CODE PACKAGECODE,d.Name PACKAGENAME,d.Amount EligiblePackageAmount		
			from #temp2 a
			left join (
			select 
				aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,isnull(aa.BedTypeType,aa.BillRoomType) as BedTypeType,
				bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
				cc.StartDateTime,cc.CODE,cc.Name				
			from #temp2 aa		
			inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID 
				and aa.ID = bb.OrderId
			left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
			where aa.PackageID <> 0 and aa.deleted = 0 and cc.deleted = 0 group by aa.id,itemid,aa.PackageID,OrderDateTime,isnull(aa.BedTypeType,aa.BillRoomType),
				IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
			) d on a.PackageID = d.PackageID
			where a.PackageID <> 0 and Deleted= 0
			group by a.PackageID,d.NoOfDays,d.StartDateTime,d.CODE,d.Name,d.Amount,d.BedTypeType,d.OrderDateTime,d.id,d.itemid,d.IPSERVICEID,EndDateTime

			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-CashPackageID-' + CONVERT(varchar,@PackageID),@OperatorID,GETDATE()			
		
			print  'PackageBillDetail'
			Insert into HIS.dbo.PackageBillDetail(
			BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
			PackageID,PackageOrderID,PackageItemID)
			select 
			@BillNo,a.IPSERVICEID,isnull(SUM(a.price * a.Quantity ),0),0 ,0 CategoryAmount,isnull(SUM(markup),0),
			isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.PackageID,d.ID PackageOrderID,d.ItemID PackageItemID
			from #temp2  a 
			left join (
			select 
				aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,aa.BedTypeType,
				bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
				cc.StartDateTime,cc.CODE,cc.Name				
			from #temp2 aa		
			inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId	 and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID	
				and aa.ID = bb.OrderId
			left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
			where aa.PackageID <> 0 and aa.Deleted =0 and cc.Deleted = 0 group by aa.id,itemid,aa.PackageID,OrderDateTime,BedTypeType,IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
			) d on a.PackageID = d.PackageID --and a.OrderDateTime >= d.StartDateTime and a.OrderDateTime < dateadd(day,1,d.EndDateTime)	--??Include the package date range
			where a.PackageID <> 0 and Deleted= 0
			group by a.IPSERVICEID,d.PackageID,d.ID,d.ItemID
			
			print  'IPBILL.PackageBillingItemDetail'
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail-CashPackageID-' + CONVERT(varchar,@PackageID),@OperatorID,GETDATE()
			
			select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
			Insert into HIS.dbo.packagebillitemdetail(			
			PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
			CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
			DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
						select 
			d.PackageID,d.IPSERVICEID PackageServiceID,d.ID PackageOrderID,d.ItemID PackageItemID,
			@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
			a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price,0 ApolloPrice,
			0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
			case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
	 		case 
				when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
				when a.IPSERVICEID in (2,3) then BedID
				else BedID 
			end as BedTypeID,
			a.MarkUp MarkUpAmount,a.Discount/a.Quantity as DIscount,0 ApolloDiscount,0 DeductableAmount,a.DepartmentID,
			case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,a.OperatorID,
			DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME		
			from #temp2  a 
			left join (
			select 
				aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,aa.BedTypeType,
				bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
				cc.StartDateTime,cc.CODE,cc.Name				
			from #temp2 aa		
			inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId	 and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID	
				and aa.ID = bb.OrderId	
			left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
			where aa.PackageID <> 0 and aa.Deleted = 0 and cc.Deleted = 0 group by aa.id,itemid,aa.PackageID,OrderDateTime,BedTypeType,IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
			) d on a.PackageID = d.PackageID --and a.OrderDateTime >= d.StartDateTime and a.OrderDateTime < dateadd(day,1,d.EndDateTime)	--??Include the package date range
			where a.PackageID <> 0 and Deleted= 0
			order by a.IPSERVICEID--,a.ID,a.ItemID
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'packagebillitemdetail-CashPackageID-' + CONVERT(varchar,@PackageID) + ' SER' + convert(varchar,@SerialNo),@OperatorID,GETDATE()
			
			set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
			update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		end
		else
		begin			
				
		if not exists(select * from [IPBILL].[CurrentIPPackage] where ipid = @IPID and deleted = 0)
		begin
			insert into  [IPBILL].[CurrentIPPackage] (PackageID,IPID,Datetime,ServiceID,
			DepartmentID, PackageAmount,NoOfDays,SURGERYID,Cofirmed,PackageItemID,PackageCode,PackageName,deleted,DiscountID,SurgeryDateTime)
			select a.PackageID, IPID,Datetime,ServiceID,b.DepartmentID,amount PackageAmount,NoOfDays,SURGERYID,1 Cofirmed,
			SurgeryID PackageItemID,itemcode PackageCode,ItemName PackageName,0 deleted,0 DiscountID,a.DateTime from his.dbo.PackagePatient a
			left join #temp2 b on a.PackageID = b.PackageID and a.SurgeryID = b.ItemID and ServiceID = b.IPSERVICEID
			where ipid =@IPID

			INSERT ipbill.IPBillPackagePDDetail (IPID,PackageID,PackageMasterID,Deleted,OrderID ,ItemID ,ServiceID)		
			select IPID,a.PackageID,SCOPE_IDENTITY(),0 Deleted,b.ID OrderID ,b.ItemID ItemID ,ServiceID from his.dbo.PackagePatient a
			left join #temp2 b on a.PackageID = b.PackageID and a.SurgeryID = b.ItemID and ServiceID = b.IPSERVICEID
			where ipid =@IPID
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPPackage-CompPackageID' + convert(varchar,@packageid),@OperatorID,GETDATE()
		end
	
		if (@CategoryID = 41 and @CompanyID = 5237)
		begin
			update ipbill.CurrentIPPackage set PackageAmount = (select sum(billamount) from his.dbo.ipbill where billno = @BillNo)
			where ipid = @ipid
			-->UPDATE - ADDED THIS LINE TO PREVENT PACKAGEID = 1 1-MAY-2017 10:01 
			select @PackageID = MAX(packageid) from  ipbill.CurrentIPPackage where ipid = @ipid			
			update #temp2 set PackageID = @PackageID where Deleted = 0
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPPackage-UPDATE-41 and 5237' + convert(varchar,@packageid),@OperatorID,GETDATE()
		end
			
			

			print  'PackageBill-CompPD'		
			insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
			Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
			PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
			select @IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
			d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
			SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
			d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
			d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,
			--dateadd(day,d.NoOfDays, d.SurgeryDateTime),
			-->ADDED : TO GET THE PACKAGE END DATE ON ipbill.CurrentIPPackageDays -- 28-JUN-2017 16:52
			isnull((select MAX(packagedaysend) from ipbill.CurrentIPPackageDays where ipid=  @ipid and Deleted = 0 and PackageID = a.packageid),
			dateadd(day,d.NoOfDays, d.SurgeryDateTime)) as PackageEndDateTime,
			d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
				left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
				where a.deleted = 0
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by d.PackageAmount,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-CompPackageID' + convert(varchar,@packageid),@OperatorID,GETDATE()
			
			print  'PackageBillDetail-CompPD'
			Insert into HIS.dbo.PackageBillDetail(			
			BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
			PackageID,PackageOrderID,PackageItemID)
			select 		
			@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
			isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
				left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by 			
			a.IPSERVICEID,d.ID, d.OrderID,d.ItemID
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()
			
			print  'packagebillitemdetail-CompPD'
			select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
			Insert into HIS.dbo.packagebillitemdetail(
			PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
			CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
			DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
			select 		
			d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
			@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
			a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
			0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
			case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
			case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
				when a.IPSERVICEID in (2,3) then BedID
				else 0 
			end as BedTypeID,
			a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,a.Deductible,a.DepartmentID,
			case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
			a.OperatorID,
			DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
			from #temp2 a
			inner join (
				select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID 	
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27			
				where b.ID in (	select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID)
				group by a.PackageId
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			order by a.IPSERVICEID		
			
			set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
			update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'packagebillitemdetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()
			
			-->ADDED UPDATE CORRECTE PACKAGE END DATE DEPLOYED AS OF 19-SEP-2017 15:43
			update a
			set PackageEndDateTime = 
			case when datediff(day,DATEADD(DAY,NoOfDays,PackageStartDateTime),PackageEndDateTime) <> 0
			then DATEADD(DAY,NoOfDays,PackageStartDateTime) else PackageEndDateTime end 
			from his.dbo.packagebill a where IPID = @IPID
			
			print  'IPBILL.IPBILL_GETBILLAR_IN'
			exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,1			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'Done AR Package-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()

			
		end
		
	end
	
	--Company Exclusion
	if exists(select * from #temp2 where ApolloAmount <>0)
	begin
		set @BillType = 6 --Exclusion
		set @Cash = 1
		set @BedTypeID = -1
		
		select @SLNO = SlNo from HIS.DBO.IPBillNo Where BILLTYPE=1
		Update HIS.DBO.IPBillNo Set SlNo=@SLNO + 1 Where BILLTYPE=1	
				
		insert into HIS.dbo.IPBill(IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,
		Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select	
		@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
		SUM(ApolloAmount * Quantity) BillAmount,
		SUM(ApolloAmount * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
		@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, sum(Deductible) Deductable,
		isnull((select max(deductible) from HIS.DBO.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
		@OperatorID OperatorID, 0 IsSplit from #temp2 where ApolloAmount <>0 and Deleted= 0

		select @BillNo = SCOPE_IDENTITY()
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-CompExcl',@OperatorID,GETDATE()		
		
		Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)
		select @BillNo,IPSERVICEID,0 as Amount,isnull(SUM(ApolloAmount * Quantity),0) as ApolloAmount,
		0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  where ApolloAmount <> 0 and Deleted= 0 group by IPSERVICEID

		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail',@OperatorID,GETDATE()		
				
		select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
				
		insert into HIS.dbo.IPbillitemdetail (
		BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select 
		@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,
		case 
			when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			when IPSERVICEID in (2,3) then BedID
			else 0 
		end as BedTypeID,
		IPSERVICEID, ItemID, Quantity, price as price, ApolloAmount as ApolloPrice,0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 0 as Discount, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, 0 as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where ApolloAmount <> 0 and Deleted= 0 order by IPSERVICEID,ID	
		
		set @SerialNo = (select max(SerialNo) from HIS.dbo.IPbillitemdetail where billno = @billno)
		update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
			
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail',@OperatorID,GETDATE()
	end	
	
	--Deductable Exclusion --> Update as of 28-Feb-2017 14:14	
	if exists(select * from #temp2 where Deductible <>0)
	begin
		set @BillType = 6 --Exclusion
		set @Cash = 1
		set @BedTypeID = -1
		
		select @SLNO = SlNo from HIS.DBO.IPBillNo Where BILLTYPE=1
		Update HIS.DBO.IPBillNo Set SlNo=@SLNO + 1 Where BILLTYPE=1	
		
		print 'HIS.dbo.IPBill - Deductable'
		insert into HIS.dbo.IPBill(IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,
		
		Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select	
		@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
		SUM(ApolloAmount * Quantity) BillAmount,
		SUM(ApolloAmount * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
		@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, sum(quantity * Deductible) Deductable,		
		1 as DeductableType,@OperatorID OperatorID, 0 IsSplit from #temp2 where Deductible <>0 and Deleted= 0

		select @BillNo = SCOPE_IDENTITY()
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-Deduc',@OperatorID,GETDATE()
		
		Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,0 as Amount,isnull(SUM(Deductible * Quantity),0),0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  where Deductible <> 0 and Deleted= 0 group by IPSERVICEID

		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail',@OperatorID,GETDATE()
		
		insert into HIS.dbo.IPbillitemdetail (		
		BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select @BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,
		case 
			when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			when IPSERVICEID in (2,3) then BedID
			else 0 
		end as BedTypeID,
		IPSERVICEID, ItemID, Quantity, 0 as price, 0 as ApolloPrice,0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 0, 0 as ApolloDiscount, Deductible as DeductableAmount, DepartmentID, DiscountLevel,
		0 as ApolloDiscountLevel, DDCLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where Deductible <> 0 and Deleted= 0 order by IPSERVICEID,ID	
		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail',@OperatorID,GETDATE()
		
	end	
	
	----Expired Patient
	
	if (select MAX(DischargeReasonId) from HIS.DBO.DischargeIntimation where ipid = @ipid) = 2
	begin		
		Insert into HIS.DBO.PinBlock (IPID,RegistrationNo,IssueAuthorityCode,Blocked,BlockTypeId,MessageType,MessageTypeId,Message,OperatorId,BlockedDatetime, CompanyId, BlockAmount)	
		select a.IPID,RegistrationNo,IssueAuthorityCode,1,3,1,3,'Patient expired',@OperatorID,@ddate, a.CompanyId, b.Balance
		from HIS.DBO.inpatient a left join his.dbo.ipbill b on a.IPID = b.IPID 	where a.ipid = @IPID
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PinBlock',@OperatorID,GETDATE()
	end
	if exists(select * from ipbill where IPID = @IPID and companyid = 1 and Balance > 0)
	begin
		Insert into HIS.DBO.PinBlock (IPID,RegistrationNo,IssueAuthorityCode,Blocked,BlockTypeId, MessageType,MessageTypeId,Message,OperatorId,BlockedDatetime, companyid, BlockAmount) 
		select a.IPID,RegistrationNo,IssueAuthorityCode,1,4,1,4,'Patient is having O/S balance',@OperatorID,@ddate, a.CompanyId, b.Balance
		from HIS.DBO.inpatient a left join his.dbo.ipbill b on a.IPID = b.IPID 	where a.ipid = @IPID and b.Balance <> 0		
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PinBlock',@OperatorID,GETDATE()
	end
	
	Insert into HIS.DBO.ClaimBill(IPID,BillNo,BillDate,BillAmount,ClaimAmount,Cash,OperatorId,SlNo,Billtype,GradeID) 
	select ipid,billno,billdate,0,0,cash,@OperatorID,SlNo,billtype,gradeid from his.dbo.ipbill where ipid =@IPID
	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'ClaimBill',@OperatorID,GETDATE()
	
	Insert into HIS.DBO.OldInPatient(IPID,RegistrationNo,AdmitDateTime,Title,FirstName,MiddleName, LastName,
	DateOfBirth,Age,Sex,Sexothers,PCity,  PState,PCountry,PPhone,PEMail,
	OtherAllergies,BloodGroup,CompanyId,CategoryID,GradeID,TariffID,BedTypeID,PatientType,
	OperatorID,Block,Newborn, DoctorID,ModifiedBy,  ModifiedOn,IssueAuthorityCode,CityName,
	DistrictName,StateName,CountryName,AgeType,District,Address1,Address2,Address3,PCellNo,
	PPagerNo,FamilyName,PZipCode,Billtype,SaudiIqamaid,Sidissuedate,Sidexpirydate,SidIssuedAt,
	Tredoctor1,Tredoctor2,Adminno,NonSaudi,Dischargedatetime,DischargeTypeid,Nationality,CareType,MotherIpid, 
	ReasonForDischarge,ModeofVisit,NewBornSlNo,AttendRelation,Messages,DepartmentID,MedIDNumber, 
	LETTERNO,POLICYNO,AdmitedAtId, Religion)  
	Select IPID,RegistrationNo,AdmitDateTime,Title,FirstName, 	MiddleName,LastName,
	DateOfBirth,Age,Sex,Sexothers,PCity,  PState,PCountry,PPhone,PEMail, 
	OtherAllergies,BloodGroup,CompanyId,CategoryID,GradeID,  isnull(TariffID,@tariffID) ,BedTypeID,PatientType, 
	OperatorID,Block,Newborn,DoctorID,ModifiedBy,  ModifiedOn,IssueAuthorityCode,CityName, 
	DistrictName,StateName,CountryName,AgeType,District,Address1,Address2,Address3,PCellNo, 
	PPagerNo,FamilyName,  PzipCode,Billtype,SaudiIqamaid,Sidissuedate,Sidexpirydate,SidIssuedAt,
	Tredoctor1,Tredoctor2,AdminNo,NonSaudi  ,@ddate,  (select MAX(DischargeReasonId) from HIS.DBO.DischargeIntimation where ipid = @ipid),
	Nationality,  0 as CareType  ,ISNull(MotherIpid,0),'',
	ModeofVisit,NewBornSlNo,AttendRelation,Messages,DepartmentID,MedIDNumber, 
	LETTERNO,POLICYNO,AdmitedAtId , Religion from HIS.DBO.InPatient a where IPID=  @ipid	

	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'OldInPatient',@OperatorID,GETDATE()

	Insert into HIS.DBO.mrCurrentStatus(Registrationno, Issueauthoritycode,VisitId,PatientType,Doctorid,ModifiedDatetime,Status,Remarks,OperatorId,StatusId,Reporttype,ReportIn,Deleted,ReportNotRequired )   
	Select Registrationno, Issueauthoritycode,IPID,1,DoctorID,@ddate, 'Not Received','',  @OperatorID   , 6,1,1,0,0 from HIS.DBO.InPatient where IPID=  @IPID
	
	UPDATE HIS.DBO.ExpiredCompanyPINRelease SET BILLNO = @BillNo Where IPID = @IPID
	Delete from HIS.DBO.InPatient where IPID=@IPID
	Insert into HIS.DBO.OldInPatientDetails Select * from HIS.DBO.InPatientDetails where IPID=@IPID
	Delete from HIS.DBO.InPatientDetails where IPID=@IPID
	Update HIS.DBO.IPBillItemSerialNo Set SerialNo= @SerialNo

	
	Update HIS.DBO.DischargeIntimation set Discharged=1,OperatorId= @OperatorID where Ipid= @IPID and deleted=0
	Update HIS.DBO.FoodOrder set Billed=1 where DispatchedDateTime<= @ToDateTime and Ipid= @IPID
	Update HIS.DBO.Cleanbedrelease set HouseKeepingDateTime=dateadd(MI,5,GETDATE()),SafetyDateTime=dateadd(MI,5,GETDATE()),
		MaintenanceDateTime=dateadd(MI,5,GETDATE()),FinalDateTime=null,HouseKeepingApproveID=@OperatorID,SafetyApproveID=@OperatorID,
		MaintenanceApprove=@OperatorID,FinalApproveID=null where Ipid= @IPID and revoked=1

	set @ReturnMessage = 'Patient Discharged Successfull!'
	set @ReturnFlag  = 1
	
end
-----------------------------------------------------------------------------------End Discharge Function

-----------------------------------------------------------------------------------Adjustment function
if ISNULL(@PrintPayable,0) = 1 and isnull(@OperatorID,0) <> 0 or @Discharge = 1
begin

	Delete from HIS.dbo.AdjustmentIPBillItemDetail Where IPBillID in (Select id from HIS.dbo.AdjustmentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	Delete from HIS.dbo.AdjustmentIPBillDetail Where IPBillID in (Select id from HIS.dbo.AdjustmentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	Delete from HIS.dbo.AdjustmentIPBill Where ID in (Select id from HIS.dbo.AdjustmentIPBill Where datediff(DAY,datetime,@ToDateTime) =0 And IPID = @IPID)
	
	-->UPDATE - TO REMOVE SAME DAY CANCELLATION - 28-Mar-2017 11:51
	--delete from #temp2 where Deleted = 1 and DATEDIFF(day,OrderDateTime,billdatetime) = 0
	
	if exists(select * from #temp2 where Deleted = 1 and DATEDIFF(day,	OrderDateTime,GETDATE()) = 0)
	begin
		print 'AdjustmentIPBill-Cancelled'
		-------Adjustment Type : 1 = Cancellation -------				
		insert into HIS.dbo.AdjustmentIPBill(IPID,adjustmenttype,adjamount,depositamount,refundamount,doctorid,cash,companyid,markup,discount,deductable,		
		datetime,operatorid,CategoryID,GradeID,TariffID)		
		select	@IPID as IPID,1 adjustmenttype,SUM(price * Quantity),0 depositamount,0 refundamount,@DoctorID,@Cash,@CompanyID,
		SUM(a.MarkUp),SUM(a.Discount),0 deductable,	@ddate,@OperatorID,@CategoryID,@GradeID,@TariffID from #temp2 a where Deleted = 1 and DATEDIFF(day,a.OrderDateTime,GETDATE()) = 0
		
		select @BillNo = SCOPE_IDENTITY()
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBill-Cancelled',@OperatorID,GETDATE()
		if (isnull(@BillNo,0) <> 0)
		begin
			print 'AdjustmentIPBillDetail-Cancelled'			
			insert into HIS.dbo.AdjustmentIPBillDetail(ipbillid,serviceid,amount,apolloamount,categoryamount,markupamount,discount,deductableamount)	
			select @BillNo,IPSERVICEID,isnull(SUM(a.price * Quantity ),0) as Amount,
			0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
			isnull(SUM(discount),0) as Discount,isnull(SUM(Deductible),0) 
			from #temp2  a where Deleted = 1 and DATEDIFF(day,a.OrderDateTime,GETDATE()) = 0 group by IPSERVICEID	
		
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBillDetail-Cancelled',@OperatorID,GETDATE()
			
			print 'AdjustmentIPBillItemDetail-Cancelled'		
			insert into HIS.dbo.AdjustmentIPBillItemDetail(ipbillid,serviceid,orderid,itemid,quantity,datetime,price,apolloprice,categoryprice,fromdatetime,todatetime,
			bedtypeid,markupamount,discount,deductableamount,departmentid,bedid,operatorid,deductablelevel,discountlevel,canceleddatetime,ItemCode,ItemName,PrvAdjustmentID)
			select @BillNo,IPSERVICEID,case when IPSERVICEID = 2 then itemid else ID end as OrderID,ItemID,Quantity,BillDateTime,price,0,0 categoryprice,
			case when IPSERVICEID in (2,3) then  OrderDateTime else null end,case when IPSERVICEID in (2,3) then  BillDateTime else null end,
			bedtypeid,MarkUp,discount,0 deductableamount,departmentid,
			case when IPSERVICEID in (2,3) then ItemID else bedid end,operatorid,0 deductablelevel,discountlevel,@ddate,ItemCode,ItemName,null		
			from #temp2 where deleted = 1 and DATEDIFF(day,OrderDateTime,GETDATE()) = 0
			
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBillItemDetail-Cancelled',@OperatorID,GETDATE()
		end
	end
	-------End Adjustment Type : 1 = Cancellation -------
	
	-------Adjustment Type : 2 = Change Price-------	
	--> Added Apolloamount for the computation of adjusted price e.g. room and board (1045352) 16-Feb-2017 10:38AM	
	if (select COUNT(*) from his.dbo.currentipbill where ipid = @ipid) <> 0
		begin
			select @currIPBill = MAX(id) from his.dbo.currentipbill where ipid = @ipid and datediff(day,DateTime,GETDATE()) <> 0		
			
			select OrderID as bOrderID,ItemID as bItemID,serviceid as bServID, a.DateTime as bDateTime,price + ApolloPrice as bPrice, a.discount as bDiscount,
			a.MarkUpAmount as bMarkUpAmount
			into #tempCurr2
			from his.dbo.currentipbillitemdetail a where ipbillid = @currIPBill 
	
			select * 
			into #temp_adjamt
			from (select
			a.bServID,a.bOrderID,a.bItemID,a.bDateTime,ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,
			(SUM(a.bPrice)) - Price as Adj, (SUM(a.bdiscount)) - b.Disc as AdjDisc, b.Quantity,(SUM(a.bMarkUpAmount)) - markup as adjMarkup
			from #tempCurr2 a
			left join (
			select ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,SUM(price + ApolloAmount) as Price,SUM(discount) as Disc,SUM(quantity) as Quantity,SUM(markup) as markup
			from #temp2 where Deleted = 0 
			group by ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted) b on a.bOrderID = b.ID and a.bItemID = b.ItemID and 
			datediff(day,a.bDateTime,b.BillDateTime) = 0 and a.bServID = b.IPSERVICEID
			where OrderDateTime <= GETDATE()
			group by a.bServID,a.bOrderID,a.bItemID,a.bDateTime,ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,Price,b.Disc,b.Quantity,b.markup
			) aa where aa.Adj<>0 or aa.AdjDisc <> 0 and aa.adjMarkup <> 0
	
			----------FOR ORDER WITH MULTIPLE LINE BUT IT SHOULD BE ONE LINE ONLY.
			update a
			set a.Quantity = b.Quantity
			from #temp_adjamt a
			inner join (
			select a.ID, a.ItemID,a.Price,a.Quantity,a.IPSERVICEID from #temp2 a	
			where a.IPSERVICEID = 1 and ID in (select bOrderID from #temp_adjamt where bServID = 1)
			group by  a.ID, a.ItemID,a.Price,a.Quantity,a.OrderDateTime,a.IPSERVICEID having COUNT(*) <> 1
			) b on a.bOrderID = b.ID and a.bItemID = b.ItemID and a.IPSERVICEID = b.IPSERVICEID
			
			print 'AdjustmentIPBill-Adjustment'
			
			if exists(select * from #temp_adjamt aa where aa.Adj<>0 or aa.AdjDisc <> 0 or aa.adjMarkup <> 0)
			begin
				print 'AdjustmentIPBill-Adjustment'				
				insert into HIS.dbo.AdjustmentIPBill(IPID,adjustmenttype,adjamount,depositamount,refundamount,doctorid,cash,companyid,markup,discount,deductable,				
				datetime,operatorid,CategoryID,GradeID,TariffID)
				select
				@IPID as IPID,2 adjustmenttype,sum(case when aa.IPSERVICEID = 1 then (aa.Adj) else aa.Adj / aa.Quantity end) ,(select SUM(deposit) from #temp2 where deleted=0),0 refundamount,@DoctorID,@Cash,@CompanyID,
				0 MarkUp,SUM(aa.AdjDisc),0 deductable,	@ddate,@OperatorID,@CategoryID,@GradeID,@TariffID 	
				from #temp_adjamt aa where aa.Adj<>0 or aa.AdjDisc <> 0
					
				select @BillNo = SCOPE_IDENTITY()
				insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBill-Adjustment',@OperatorID,GETDATE()
				
				if (isnull(@BillNo,0) <> 0)
				begin
					print 'AdjustmentIPBillDetail-Adjustment'					
					insert into HIS.dbo.AdjustmentIPBillDetail(ipbillid,serviceid,amount,apolloamount,categoryamount,markupamount,discount,deductableamount)					
					select @BillNo,aa.IPSERVICEID,SUM(case when aa.IPSERVICEID = 1 then (aa.Adj) else aa.Adj / aa.Quantity end),0 apolloamount,0 categoryamount,0 markupamount,sum(aa.AdjDisc) discount, 0 deductableamount
					from #temp_adjamt aa	where aa.Adj <> 0
					group by aa.IPSERVICEID having SUM(aa.Adj) <> 0 or SUM(aa.AdjDisc) <> 0
												
					insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBillDetail-Adjustment',@OperatorID,GETDATE()
					
					print 'AdjustmentIPBillItemDetail-Adjustment'	
					insert into HIS.dbo.AdjustmentIPBillItemDetail(
					ipbillid,serviceid,orderid,itemid,quantity,datetime,price,apolloprice,categoryprice,fromdatetime,todatetime,
					bedtypeid,markupamount,discount,deductableamount,departmentid,bedid,operatorid,deductablelevel,discountlevel,canceleddatetime,ItemCode,ItemName,PrvAdjustmentID)
					select 
					distinct
					@BillNo,b.IPSERVICEID,case when b.IPSERVICEID in (2,3) then b.itemid else b.ID end as OrderID,aa.ItemID,aa.Quantity,
					aa.OrderDateTime,
					
					case when b.IPSERVICEID in (1) then (aa.Adj) 
						when b.IPSERVICEID in (5) then 
							case when aa.Adj < 0 then -1 * (aa.Adj + MarkUp) 
							when aa.adj = 0 and adjMarkup <> 0 then 0
							else (aa.Adj + MarkUp)  end
						else aa.Adj / aa.Quantity end as Price,	
						
					0,0 categoryprice,
					case when aa.IPSERVICEID in (2,3) then  aa.OrderDateTime else null end,case when aa.IPSERVICEID in (2,3) then  aa.BillDateTime else null end,
					bedtypeid,
						case when b.IPSERVICEID in (5) then
							case when aa.adj = 0 and adjMarkup <> 0 then adjMarkup
							else MarkUp end	
						else MarkUp end as MarkUp,
					discount,0 deductableamount,departmentid,case when b.IPSERVICEID in (2,3) then b.ItemID else bedid end as bedid,
					operatorid,0 deductablelevel,discountlevel,@ddate,ItemCode,ItemName,null								
					from #temp_adjamt aa	
					left join #temp2 b on aa.bOrderID = b.ID and aa.bServID = b.IPSERVICEID and aa.bItemID = b.ItemID and DATEDIFF(DAY, aa.OrderDateTime,b.OrderDateTime) = 0
					where aa.Adj <> 0 or aa.AdjDisc <> 0
					
					update his.dbo.adjustmentipbill set adjamount =( select SUM(price*quantity) from his.dbo.adjustmentipbillitemdetail where ipbillid= @BillNo)
					where id = @BillNo
					
					insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AdjustmentIPBillItemDetail-Adjustment',@OperatorID,GETDATE()
				end
			end				
					
			drop table #tempCurr2
			drop table #temp_adjamt
		end
	-------End Adjustment Type : 2 = Change Price-------		
end
-----------------------------------------------------------------------------------End Adjustment function

-----------------------------------------------------------------------------------Cash to Company after discharge
--ADDED : SAVE AR IPBILL DETAILS WITHOUT AFFECTING THE CREATED BILL 1-OCT-2017 13:36
if @DiscTest = 2
begin
	select @billno = min(billno),@ddate = min(BillDate),@SLNO = MIN(slno) from HIS.dbo.IPBill where IPID = @IPID
	select @SerialNo= min(SerialNo) from his.dbo.IPbillitemdetail where billno = @BillNo
	
	set @BedTypeID = 2--Company
	set @BillType = 2
	set @Cash = 2	

	insert into his.dbo.ARIPbill (BillNo, IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,		
	Discount,Deductable,DeductableType,OperatorID,IsSplit,
	Editdatetime,Edited,EditOperatorID,IsInvoiced, InvoiceDatetime,EditBillAmount,EditBalance)	
	select	
	@BillNo,@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
	SUM(price * Quantity) BillAmount,
	SUM(price * Quantity) - sum(Deposit) - sum(Refund) Balance,
	@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
	@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
	0 as MarkUp, sum(Discount) Discount, sum(Deductible) Deductable,
	isnull((select max(deductible) from HIS.dbo.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
	@OperatorID OperatorID, 0 IsSplit,
	@ddate Editdatetime,0 Edited,@OperatorID,1 IsInvoiced,@ddate InvoiceDatetime,SUM(price * Quantity)  EditBillAmount,SUM(price * Quantity) - sum(Deposit) - sum(Refund) EditBalance
	from #temp2 where Deleted= 0
	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AR-IPBILL-CASH-COMP',@OperatorID,GETDATE()
	
	Insert into HIS.dbo.ARIPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,EditAmount)		
	select @BillNo,IPSERVICEID,isnull(SUM(price * Quantity),0) as Amount,
	0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
	isnull(SUM(discount),0) as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0),isnull(SUM(price * Quantity),0)
	from #temp2 where Deleted= 0 group by IPSERVICEID
	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AR-IPBillDetail-CASH-COMP',@OperatorID,GETDATE()
	
	insert into HIS.dbo.ARIPbillitemdetail (		
	BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
	ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName,
	EditItemID,EditQuantity,EditOrderDateTime,EditPrice,EditBedID,EditOperatorID
	)
	select 
	@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
	case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
	case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,
	case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
	end as BedTypeID,	
	IPSERVICEID, ItemID, Quantity, Price, ApolloAmount as ApolloPrice,
	0 as CategoryPrice,
	case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
	case when IPSERVICEID in (2,3) then  BillDateTime else null end,
	MarkUp, Discount/Quantity Discount , 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
	0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName,
	ItemID EditItemID,Quantity EditQuantity,OrderDateTime EditOrderDateTime,Price EditPrice,BedID EditBedID,@OperatorID EditOperatorID
	from #temp2 where Deleted= 0 order by IPSERVICEID,ID	
	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'AR-ARIPbillitemdetail-CASH-COMP',@OperatorID,GETDATE()
	
end


set @Discharge = @DiscTest




--ADJUSTMENT
if @Discharge = 4
begin

	select 'cancelled',* from #temp2 where Deleted = 1
	
	
	select @currIPBill = MAX(id) from his.dbo.currentipbill where ipid = @ipid and datediff(day,DateTime,GETDATE()) <> 0		

	select OrderID as bOrderID,ItemID as bItemID,serviceid as bServID, a.DateTime as bDateTime,price + ApolloPrice as bPrice, a.discount as bDiscount,
	a.MarkUpAmount as bMarkUpAmount
	into #tempCurr2test
	from his.dbo.currentipbillitemdetail a where ipbillid = @currIPBill 
	select '#tempCurr2test',* from #tempCurr2test
	
	
	select * 
	into #temp_adjamttest
	from (select
	a.bServID,a.bOrderID,a.bItemID,a.bDateTime,ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,
	(SUM(a.bPrice)) - Price as Adj, (SUM(a.bdiscount)) - b.Disc as AdjDisc, b.Quantity,(SUM(a.bMarkUpAmount)) - markup as adjMarkup
	from #tempCurr2test a
	left join (
	select ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,SUM(price) as Price,SUM(discount) as Disc,SUM(quantity) as Quantity,SUM(markup) as markup
	from #temp2 where Deleted = 0 
	group by ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted) b on a.bOrderID = b.ID and a.bItemID = b.ItemID and 
	datediff(day,a.bDateTime,b.BillDateTime) = 0 and a.bServID = b.IPSERVICEID
	where OrderDateTime <= GETDATE()
	group by a.bServID,a.bOrderID,a.bItemID,a.bDateTime,ID,itemid,BillDateTime,IPSERVICEID,OrderDateTime,Deleted,Price,b.Disc,b.Quantity,b.markup
	) aa where aa.Adj<>0 or aa.AdjDisc <> 0 and aa.adjMarkup <> 0
	
	select '#temp_adjamttest', * from #temp_adjamttest
	
	select
	@IPID as IPID,2 adjustmenttype,sum(case when aa.IPSERVICEID = 1 then (aa.Adj) else aa.Adj / aa.Quantity end) ,(select SUM(deposit) from #temp2 where deleted=0),0 refundamount,@DoctorID,@Cash,@CompanyID,
	0 MarkUp,SUM(aa.AdjDisc),0 deductable,	@ddate,@OperatorID,@CategoryID,@GradeID,@TariffID 	
	from #temp_adjamttest aa where aa.Adj<>0 or aa.AdjDisc <> 0
				
	select 'change',@BillNo,aa.IPSERVICEID,SUM(case when aa.IPSERVICEID = 1 then (aa.Adj) else aa.Adj / aa.Quantity end),0 apolloamount,0 categoryamount,0 markupamount,sum(aa.AdjDisc) discount, 0 deductableamount
	from #temp_adjamttest aa	where aa.Adj <> 0
	group by aa.IPSERVICEID having SUM(aa.Adj) <> 0 or SUM(aa.AdjDisc) <> 0

	select 
	distinct
	'change',
	@BillNo,b.IPSERVICEID,case when b.IPSERVICEID = 2 then b.itemid else b.ID end as OrderID,aa.ItemID,aa.Quantity,
	aa.OrderDateTime,
	
	case when b.IPSERVICEID in (1) then (aa.Adj) 
	when b.IPSERVICEID in (5) then 
		case when aa.Adj < 0 then -1 * (aa.Adj + MarkUp) 
		when aa.adj = 0 and adjMarkup <> 0 then 0
		else (aa.Adj + MarkUp)  end
	else aa.Adj / aa.Quantity end as Price,	
	
	0,0 categoryprice,
	case when aa.IPSERVICEID in (2,3) then  aa.OrderDateTime else null end,case when aa.IPSERVICEID in (2,3) then  aa.BillDateTime else null end,
	bedtypeid,
	
	case when b.IPSERVICEID in (5) then
		case when aa.adj = 0 and adjMarkup <> 0 then adjMarkup
		else MarkUp end	
	else MarkUp end as MarkUp,
	
	discount,0 deductableamount,departmentid,bedid,operatorid,0 deductablelevel,discountlevel,@ddate,ItemCode,ItemName,null								
	from #temp_adjamttest aa	
	left join #temp2 b on aa.bOrderID = b.ID and aa.bServID = b.IPSERVICEID and aa.bItemID = b.ItemID and DATEDIFF(DAY, aa.OrderDateTime,b.OrderDateTime) = 0
	where aa.Adj <> 0 or aa.AdjDisc <> 0
	order by aa.ItemID
			
			
	drop table #tempCurr2test
	drop table #temp_adjamttest

		
end

if @Discharge =8
begin
		select @PackageID = max(packageid) from #temp2
		update #temp2 set PackageID = @PackageID where Deleted = 0 and PackageID = 0
		
		select * from #temp2 
		select @IPID as IPID, @SLNO as SlNo, @ddate as BillDate, SUM(PackagePrice * Quantity) BillAmount, 
		SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,@GradeID GradeID, @TariffID TariffID, 
		@BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, 0 Deductable,-1 DeductableType, @OperatorID OperatorID, 0 IsSplit 
		from #temp2 a where packagebill <> 0 and Deleted= 0
		
		select @BillNo,IPSERVICEID,isnull(SUM(a.PackagePrice * Quantity ),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  a where packagebill <> 0 and Deleted= 0
		group by IPSERVICEID	

		select 
		@BillNo as BillNo, 
		@SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID = 2 then itemid else ID end as OrderID,
		--case when IPSERVICEID = 2 then itemid else BedID end as BedID,
		0 as BedID, --IF PACKAGE
		case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
		end as BedTypeID,	
		IPSERVICEID, ItemID, Quantity, PackagePrice, 0 as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 
		CASE WHEN packageid = 0 then Discount else 0 end, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where packagebill <> 0 and Deleted= 0
		
		

	--insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,
			
	--		Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
	--		PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
			select 		
			@IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
			d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
			SUM(a.Discount* a.Quantity),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
			d.OrderID PackageOrderID,d.ItemID PackageItemID,max(a.BedTypeType) PackageBedTypeID,
			d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,dateadd(day,d.NoOfDays, d.SurgeryDateTime),
			d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by 			
			d.PackageAmount	,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,
			d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount
			
			----insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-Package',@OperatorID,GETDATE()
			
			----print  'IPBILL.PackageBillingDetail'
			----Insert into HIS.dbo.PackageBillDetail(
			------Insert into HIS.IPBILL.PackageBillingDetail(
			----BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
			----PackageID,PackageOrderID,PackageItemID)
			--select 		
			--@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
			--isnull(SUM(a.discount* a.Quantity),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
			--from #temp2 a
			--inner join (
			--	select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
			--	from ipbill.CurrentIPPackage a
			--	left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
			--	group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			--) d on a.PackageID = d.ID
			--where a.packageid <> 0 and Deleted= 0
			--group by 			
			--a.IPSERVICEID,d.ID, d.OrderID,d.ItemID
			
			----print  'IPBILL.PackageBillingItemDetail'
			----insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail',@OperatorID,GETDATE()
			
			----select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
			----Insert into HIS.dbo.packagebillitemdetail(
			------Insert into HIS.IPBILL.PackageBillingItemDetail(
			----PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
			----CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
			----DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
			--select 		
			--d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
			--@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
			--a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
			--0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
			--case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
			--case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			--	when a.IPSERVICEID in (2,3) then BedID
			--	else 0 
			--end as BedTypeID,
			--a.MarkUp MarkUpAmount,a.Discount,0 ApolloDiscount,0 DeductableAmount,a.DepartmentID,BedID,a.OperatorID,
			--DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
			--from #temp2 a
			--inner join (
			--	select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
			--	from ipbill.CurrentIPPackage a
			--	left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID group by a.PackageId
			--) d on a.PackageID = d.ID
			--where a.packageid <> 0 and Deleted= 0
			--order by a.IPSERVICEID
end
--CASH PACKAGE
if @Discharge = 9
begin
	select 
*				
	from #temp2 where PackagePrice <> 0 
	
--	select 
--*				
--	from #temp2 aa		
--	inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID --and aa.ID = bb.OrderId
--	left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
--	where aa.PackageID <> 0 and aa.deleted = 0
	
	update #temp2 set PackagePrice = price where packagebill <> 0 and PackageID = 0 and Deleted= 0								
		--insert into HIS.dbo.ipbill (IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,
		--Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select @IPID as IPID, @SLNO as SlNo, @ddate as BillDate, SUM(PackagePrice * Quantity) BillAmount, 
		SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,@GradeID GradeID, @TariffID TariffID, 
		@BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, 0 Deductable,-1 DeductableType, @OperatorID OperatorID, 0 IsSplit 
		from #temp2 a where packagebill <> 0 and Deleted= 0
		
		--Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,isnull(SUM(a.PackagePrice * Quantity ),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  a where packagebill <> 0 and Deleted= 0
		group by IPSERVICEID	
				
		--insert into HIS.dbo.IPbillitemdetail (
		--BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		--ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select @BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		--case when IPSERVICEID = 2 then itemid else BedID end as BedID,
		--0 as BedID, --IF PACKAGE 		
		case when PACKAGEBILL = PackageID then 0 else case when IPSERVICEID in (2,3) then ItemID else bedid end end,--> Changed 7-Feb-2017 2:34PM as per request for EOD and ERP
		case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
		end as BedTypeID,	
		--case 
		--	when IPSERVICEID = 1 then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) 
		--	when IPSERVICEID = 2 then BedID else BedTypeID
		--	end as BedTypeID,			
		IPSERVICEID, ItemID, Quantity, PackagePrice, 0 as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 
		CASE WHEN packageid = 0 then Discount/quantity else 0 end, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where packagebill <> 0 and Deleted= 0
	
	
	
	
	--set @BillNo = 280295
	--select @SLNO = max(a.slno)
	--		from (select max(slno) as slno from HIS.DBO.ipbill  where billtype = 2 union all select max(slno) as slno from HIS.DBO.cancelipbill  where billtype = 2 ) A 			
	
	--insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
	--Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
	--PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
	select 	@IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
	d.Amount,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
	SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.PackageID,d.IPSERVICEID PackageServiceID,
	d.id PackageOrderID,d.ItemID PackageItemID,d.BedTypeType PackageBedTypeID,
	d.OrderDateTime,- 1 StartBefore,d.NoOfDays,d.StartDateTime PackageStartDateTime,EndDateTime,
	d.CODE PACKAGECODE,d.Name PACKAGENAME,d.Amount EligiblePackageAmount		
	from #temp2 a
	left join (
	select 
	aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,isnull(aa.BedTypeType,aa.BillRoomType) as BedTypeType,
	bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
	cc.StartDateTime,cc.CODE,cc.Name				
	from #temp2 aa		
	inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID and aa.ID = bb.OrderId
	left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
	where aa.PackageID <> 0 and aa.deleted = 0 group by aa.id,itemid,aa.PackageID,OrderDateTime,isnull(aa.BedTypeType,aa.BillRoomType),
	IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
	) d on a.PackageID = d.PackageID
	where a.PackageID <> 0 and Deleted= 0
	group by a.PackageID,d.NoOfDays,d.StartDateTime,d.CODE,d.Name,d.Amount,d.BedTypeType,d.OrderDateTime,d.id,d.itemid,d.IPSERVICEID,EndDateTime

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-Package',@OperatorID,GETDATE()			

	--Insert into HIS.dbo.PackageBillDetail(
	--BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
	--PackageID,PackageOrderID,PackageItemID)
	select 
	@BillNo,a.IPSERVICEID,isnull(SUM(a.price * a.Quantity ),0),0 ,0 CategoryAmount,isnull(SUM(markup),0),
	isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.PackageID,d.ID PackageOrderID,d.ItemID PackageItemID
	from #temp2  a 
	left join (
	select 
	aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,aa.BedTypeType,
	bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
	cc.StartDateTime,cc.CODE,cc.Name				
	from #temp2 aa		
	inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId	 and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID	 and aa.ID = bb.OrderId
	left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
	where aa.PackageID <> 0 and aa.Deleted =0 group by aa.id,itemid,aa.PackageID,OrderDateTime,BedTypeType,IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
	) d on a.PackageID = d.PackageID --and a.OrderDateTime >= d.StartDateTime and a.OrderDateTime < dateadd(day,1,d.EndDateTime)	--??Include the package date range
	where a.PackageID <> 0 and Deleted= 0
	group by a.IPSERVICEID,d.PackageID,d.ID,d.ItemID

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail',@OperatorID,GETDATE()

	--select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo

	--Insert into HIS.dbo.packagebillitemdetail(			
	--PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
	--CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
	--DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
	select 	d.PackageID,d.IPSERVICEID PackageServiceID,d.ID PackageOrderID,d.ItemID PackageItemID,
	@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
	a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price,0 ApolloPrice,
	0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
	case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
	case 
	when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
	when a.IPSERVICEID in (2,3) then BedID
	else BedID 
	end as BedTypeID,
	a.MarkUp MarkUpAmount,a.Discount/a.Quantity as DIscount,0 ApolloDiscount,0 DeductableAmount,a.DepartmentID,
	case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,a.OperatorID,
	DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME		
	from #temp2  a 
	left join (
	select 
	aa.id,aa.itemid,aa.PackageID,aa.OrderDateTime,aa.BedTypeType,
	bb.Amount,bb.NoOfDays,aa.IPSERVICEID,bb.EndDateTime,
	cc.StartDateTime,cc.CODE,cc.Name				
	from #temp2 aa		
	inner join HIS.dbo.PackagePatient bb on aa.PackageID = bb.PackageId	 and aa.ItemID = bb.SurgeryID and aa.IPSERVICEID = bb.ServiceID	and aa.ID = bb.OrderId	
	left join HIS.dbo.EditPackage cc on aa.PackageID =cc.Id	
	where aa.PackageID <> 0 and aa.Deleted = 0 group by aa.id,itemid,aa.PackageID,OrderDateTime,BedTypeType,IPSERVICEID,Amount,bb.NoOfDays,cc.StartDateTime,cc.CODE,cc.Name,bb.EndDateTime		
	) d on a.PackageID = d.PackageID --and a.OrderDateTime >= d.StartDateTime and a.OrderDateTime < dateadd(day,1,d.EndDateTime)	--??Include the package date range
	where a.PackageID <> 0 and Deleted= 0
	order by a.IPSERVICEID--,a.ID,a.ItemID

	--set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
	--update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo

end

if @Discharge = 10
begin
if (@CategoryID = 41 and @CompanyID = 5237)
		--begin
		--	update ipbill.CurrentIPPackage set PackageAmount = (select sum(billamount) from his.dbo.ipbill where billno = @BillNo)
		--end
			
			--print  'IPBILL.PackageBilling'		
			--insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
			--Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
			--PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
			select 		
			@IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
			d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
			SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
			d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
			d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,dateadd(day,d.NoOfDays, d.SurgeryDateTime),
			d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by 			
			d.PackageAmount	,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,
			d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount
			
			--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-Package',@OperatorID,GETDATE()
			
			--print  'IPBILL.PackageBillingDetail'
			--Insert into HIS.dbo.PackageBillDetail(			
			--BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
			--PackageID,PackageOrderID,PackageItemID)
			select 		
			@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
			isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by 			
			a.IPSERVICEID,d.ID, d.OrderID,d.ItemID
			
			--print  'IPBILL.PackageBillingItemDetail'
			--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail',@OperatorID,GETDATE()
			
			--select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
			--Insert into HIS.dbo.packagebillitemdetail(
			--PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
			--CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
			--DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
			select 		
			d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
			@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
			a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
			0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
			case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
			case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
				when a.IPSERVICEID in (2,3) then BedID
				else 0 
			end as BedTypeID,
			a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,0 DeductableAmount,a.DepartmentID,
			case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
			a.OperatorID,
			DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
			from #temp2 a
			inner join (
				select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID group by a.PackageId
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			order by a.IPSERVICEID		
			
			--set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
			--update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
			
			--exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,1		
end
--REUPLOAD PACKAGE
if @Discharge = 11
begin
		--select * from #temp2 where Deleted = 0
		select @PackageID = max(packageid) from #temp2
		update #temp2 set PackageID = @PackageID where Deleted = 0 and PackageID = 0
		
		update #temp2 set PackagePrice = price where packagebill <> 0 and PackageID = 0 and Deleted= 0	
		
		select @IPID as IPID, @SLNO as SlNo, @ddate as BillDate, SUM(PackagePrice * Quantity) BillAmount, 
		SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,@GradeID GradeID, @TariffID TariffID, 
		@BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, 0 Discount, 0 Deductable,-1 DeductableType, @OperatorID OperatorID, 0 IsSplit 
		from #temp2 a where packagebill <> 0 and Deleted= 0
		
		--Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,isnull(SUM(a.PackagePrice * Quantity ),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2  a where packagebill <> 0 and Deleted= 0
		group by IPSERVICEID	
		
		--insert into HIS.dbo.IPbillitemdetail (
		--BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		--ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select @BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,	
		case when PACKAGEBILL = PackageID then 0 else case when IPSERVICEID in (2,3) then ItemID else bedid end end,--> Changed 7-Feb-2017 2:34PM as per request for EOD and ERP
		case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
		end as BedTypeID,			
		IPSERVICEID, ItemID, Quantity, PackagePrice, 0 as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, 
		CASE WHEN packageid = 0 then Discount/quantity else 0 end, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where packagebill <> 0 and Deleted= 0
		
		set @BillNo = 283000
		set @SLNO = 142394
		insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
		Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
		PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
		select 		
		@IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
		d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
		SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
		d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
		d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,dateadd(day,d.NoOfDays, d.SurgeryDateTime),
		d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
		from #temp2 a
		inner join (
			select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
			from ipbill.CurrentIPPackage a
			left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
			where a.deleted = 0
			group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
		) d on a.PackageID = d.ID
		where a.packageid <> 0 and Deleted= 0
		group by 			
		d.PackageAmount	,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,
		d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount

		--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-Package',@OperatorID,GETDATE()

		print  'IPBILL.PackageBillingDetail'
		Insert into HIS.dbo.PackageBillDetail(			
		BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
		PackageID,PackageOrderID,PackageItemID)
		select 		
		@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
		isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
		from #temp2 a
		inner join (
		select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
		from ipbill.CurrentIPPackage a
		left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
		group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
		) d on a.PackageID = d.ID
		where a.packageid <> 0 and Deleted= 0
		group by 			
		a.IPSERVICEID,d.ID, d.OrderID,d.ItemID

		--print  'IPBILL.PackageBillingItemDetail'
		--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail',@OperatorID,GETDATE()

		select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo

		Insert into HIS.dbo.packagebillitemdetail(
		PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
		CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
		DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
		select 		
		d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
		@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
		a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
		0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
		case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
		case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when a.IPSERVICEID in (2,3) then BedID
		else 0 
		end as BedTypeID,
		a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,0 DeductableAmount,a.DepartmentID,
		case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
		a.OperatorID,
		DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
		from #temp2 a
		inner join (
		select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
		from ipbill.CurrentIPPackage a
		left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID 
		where b.ID in (	select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID)
		group by a.PackageId
		) d on a.PackageID = d.ID
		where a.packageid <> 0 and Deleted= 0
		order by a.IPSERVICEID		

		set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
		update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo

end

if @Discharge = 11 
begin
if (@CategoryID = 41 and @CompanyID = 5237)
		begin
			update ipbill.CurrentIPPackage set PackageAmount = (select sum(billamount) from his.dbo.ipbill where billno = @BillNo)
			where ipid = @ipid
			insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPPackage-UPDATE-41 and 5237' + convert(varchar,@packageid),@OperatorID,GETDATE()
		end
			
			print  'PackageBill-CompPD'		
			--insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
			--Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
			--PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
			select @IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
			d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
			SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
			d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
			d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,
			--dateadd(day,d.NoOfDays, d.SurgeryDateTime),
			isnull((select MAX(packagedaysend) from ipbill.CurrentIPPackageDays where ipid=  @ipid and Deleted = 0 and PackageID = a.packageid),
			dateadd(day,d.NoOfDays, d.SurgeryDateTime)) as PackageEndDateTime,
			d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
				left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
				where a.deleted = 0
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by d.PackageAmount,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount
			
			--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-CompPackageID' + convert(varchar,@packageid),@OperatorID,GETDATE()
			
			print  'PackageBillDetail-CompPD'
			--Insert into HIS.dbo.PackageBillDetail(			
			--BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
			--PackageID,PackageOrderID,PackageItemID)
			select 		
			@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
			isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
			from #temp2 a
			inner join (
				select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
				left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
				group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			group by 			
			a.IPSERVICEID,d.ID, d.OrderID,d.ItemID
			
			--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()
			
			print  'packagebillitemdetail-CompPD'
			--select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo
			
			--Insert into HIS.dbo.packagebillitemdetail(
			--PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
			--CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
			--DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
			select 		
			d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
			@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
			a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
			0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
			case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
			case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
				when a.IPSERVICEID in (2,3) then BedID
				else 0 
			end as BedTypeID,
			a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,a.Deductible,a.DepartmentID,
			case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
			a.OperatorID,
			DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
			from #temp2 a
			inner join (
				select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
				from ipbill.CurrentIPPackage a
				left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID 	
				-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27			
				where b.ID in (	select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID)
				group by a.PackageId
			) d on a.PackageID = d.ID
			where a.packageid <> 0 and Deleted= 0
			order by a.IPSERVICEID		
			
			--set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
			--update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		
			--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'packagebillitemdetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()
			
end
--normal discharge
if @Discharge = 12
begin

		select	
		@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
		SUM(price * Quantity) BillAmount,
		SUM(price * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
		@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, sum(Discount) Discount, sum(Deductible) Deductable,
		isnull((select max(deductible) from HIS.dbo.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
		@OperatorID OperatorID, 0 IsSplit from #temp2 where Deleted= 0
		
		select @BillNo,IPSERVICEID,isnull(SUM(price * Quantity),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		isnull(SUM(discount),0) as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2 
		where Deleted= 0 group by IPSERVICEID
		

		select 
		@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,		
		case 
			when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			when IPSERVICEID in (2,3) then BedID
			else 0 
		end as BedTypeID,	
		IPSERVICEID, ItemID, Quantity, Price, ApolloAmount as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, Discount/Quantity Discount , 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where Deleted= 0 order by IPSERVICEID,ID	

	select	
	@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
	SUM(ApolloAmount * Quantity) BillAmount,
	SUM(ApolloAmount * Quantity) - sum(Deposit) - sum(Refund) Balance,
	@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
	@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
	0 as MarkUp, 0 Discount, sum(Deductible) Deductable,
	isnull((select max(deductible) from HIS.DBO.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
	@OperatorID OperatorID, 0 IsSplit from #temp2 where ApolloAmount <>0 and Deleted= 0

	select @BillNo,IPSERVICEID,0 as Amount,isnull(SUM(ApolloAmount * Quantity),0) as ApolloAmount,
	0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
	0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
	from #temp2  where ApolloAmount <> 0 and Deleted= 0 group by IPSERVICEID
			
	select 
	@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
	case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
	case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,
	case 
		when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
		when IPSERVICEID in (2,3) then BedID
		else 0 
	end as BedTypeID,
	IPSERVICEID, ItemID, Quantity, price as price, ApolloAmount as ApolloPrice,0 as CategoryPrice,
	case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
	case when IPSERVICEID in (2,3) then  BillDateTime else null end,
	MarkUp, 0 as Discount, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, 0 as DiscountLevel,
	0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
	from #temp2 where ApolloAmount <> 0 and Deleted= 0 order by IPSERVICEID,ID	
end
--ZERO PRICE	
if @DiscTest = 13
begin
	update #temp2 set PrinteServiceHeader = 'MEDICAL SUPERVISION',DepartmentName = 'MEDICAL SUPERVISION' where IPSERVICEID  = 3
	update #temp2 set PrinteServiceHeader = 'NURSING ADMINISTRN',DepartmentName = 'NURSING ADMINISTRN' where IPSERVICEID  = 33

	update #temp2 set PriceTable='ZEROITEMS' where price = 0 and PriceTable not in ( 'PREOP','PCK') and PackagePrice = 0  
	update #temp2 set PriceTable='' where price = 0 and ItemCode in (Select ItemCode from HIS.DBO.CANCSTZeroPriceItems ) and IPSERVICEID = 1
	update #temp2 set PriceTable='' where price = 0 and IPSERVICEID in (2,3,27,14,28)
	
	if not exists(select * from #temp2 where IPSERVICEID = 5 and Deleted = 0)
	begin
		update #temp2 set PriceTable='' where price = 0 and IPSERVICEID in (33)
	end
	update #temp2 set PriceTable='' where price = 0 and ApolloAmount <>0 
	
	update #temp2 set PriceTable='' where price = 0 and DiscountPercent = 100
	update #temp2 set PriceTable='|||' where packageprice  <> 0  and PriceTable = ''
	update #temp2 set PriceTable='|||' where packageprice  <> 0  and PriceTable = 'PCK'
	
	update a
	set a.PriceTable = a.PriceTable + '|' + 'REMOVEITEM'
	from #temp2 a
	inner join ipbill.IPBillRemovedItems b on  a.IPSERVICEID = b.IPServiceID and a.ItemID = b.ItemID and a.ID = b.OrderID
	where b.IPID = @IPID and b.Deleted = 0
	
		if (@IPID = 201381)
	begin
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where IPSERVICEID in (2,3)
		update #temp2 set Price = 0,Discount=0,ApolloAmount=0,Deductible=0,PriceTable='' where DepartmentID in (77,101)
	end
	
	select * from #temp2 a
	where PriceTable='ZEROITEMS'
end
--REPROCESS

if @DiscTest = 14 
begin

	--update #temp2 set PackagePrice = price where packagebill <> 0 and PackageID = 0 and Deleted= 0	
	select 'this',@PackageID,* from #temp2
	
	select @BillNo = 1378969
	
	select @SerialNo = 6419637
	
	select @SLNO = 142859
	
	--insert into ipbill.ipbilling (BillNo, IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,
	--Discount,Deductable,DeductableType,OperatorID,IsSplit)	
	select @BillNo,@IPID as IPID, @SLNO as SlNo, @ddate as BillDate, SUM(PackagePrice * Quantity) BillAmount, 
	SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
	@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,@GradeID GradeID, @TariffID TariffID, 
	@BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
	0 as MarkUp, 0 Discount, 0 Deductable,-1 DeductableType, @OperatorID OperatorID, 0 IsSplit 
	from #temp2 a where packagebill <> 0 and Deleted= 0

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-PD-REPROCESS',@OperatorID,GETDATE()

	--print  'IPBillDetail-PD-REPROCESS'		
	--Insert into IPBILL.IPBillingDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
	select @BillNo,IPSERVICEID,isnull(SUM(a.PackagePrice * Quantity ),0) as Amount,
	0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
	0 as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
	from #temp2  a where packagebill <> 0 and Deleted= 0
	group by IPSERVICEID	
	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail-PD-REPROCESS',@OperatorID,GETDATE()


	--print  'IPbillitemdetail-PD-REPROCESS-REPROCESS'		
	--insert into IPBILL.IPBillingItemDetail(
	--BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
	--ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
	select @BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
	case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
	case when PACKAGEBILL = PackageID then 0 else case when IPSERVICEID in (2,3) then ItemID else bedid end end,--> Changed 7-Feb-2017 2:34PM as per request for EOD and ERP
	case 	when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
	when IPSERVICEID in (2,3) then BedID	else 0 
	end as BedTypeID,	IPSERVICEID, ItemID, Quantity, PackagePrice, 0 as ApolloPrice,	0 as CategoryPrice,
	case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
	case when IPSERVICEID in (2,3) then  BillDateTime else null end,	MarkUp, 
	CASE WHEN packageid = 0 then Discount/quantity else 0 end, 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
	0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
	from #temp2 where packagebill <> 0 and Deleted= 0

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail-PD-SERRIAL-REPROCESS' + CONVERT(varchar,@SerialNo),@OperatorID,GETDATE()

	select @PackageID = max(packageid) from #temp2
	
	update #temp2 set PackageID = @PackageID where Deleted = 0 and PackageID = 0
			
	--if not exists(select * from [IPBILL].[CurrentIPPackage] where ipid = @IPID and deleted = 0)
	--begin
	--	insert into  [IPBILL].[CurrentIPPackage] (PackageID,IPID,Datetime,ServiceID,
	--	DepartmentID, PackageAmount,NoOfDays,SURGERYID,Cofirmed,PackageItemID,PackageCode,PackageName,deleted,DiscountID,SurgeryDateTime)
	--	select a.PackageID, IPID,Datetime,ServiceID,b.DepartmentID,amount PackageAmount,NoOfDays,SURGERYID,1 Cofirmed,
	--	SurgeryID PackageItemID,itemcode PackageCode,ItemName PackageName,0 deleted,0 DiscountID,a.DateTime from his.dbo.PackagePatient a
	--	left join #temp2 b on a.PackageID = b.PackageID and a.SurgeryID = b.ItemID and ServiceID = b.IPSERVICEID
	--	where ipid =@IPID

	--	INSERT ipbill.IPBillPackagePDDetail (IPID,PackageID,PackageMasterID,Deleted,OrderID ,ItemID ,ServiceID)		
	--	select IPID,a.PackageID,SCOPE_IDENTITY(),0 Deleted,b.ID OrderID ,b.ItemID ItemID ,ServiceID from his.dbo.PackagePatient a
	--	left join #temp2 b on a.PackageID = b.PackageID and a.SurgeryID = b.ItemID and ServiceID = b.IPSERVICEID
	--	where ipid =@IPID

	--	insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPPackage-CompPackageID-REPROC' + convert(varchar,@packageid),@OperatorID,GETDATE()
	--end

	if (@CategoryID = 41 and @CompanyID = 5237)
	begin
		update ipbill.CurrentIPPackage set PackageAmount = (select sum(billamount) from his.dbo.ipbill where billno = @BillNo)
		where ipid = @ipid
		insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'CurrentIPPackage-UPDATE-41 and 5237-REPROC' + convert(varchar,@packageid),@OperatorID,GETDATE()
	end

	print  'PackageBill-CompPD'		
	--insert into  IPBILL.PackageBilling( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
	--Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
	--PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
	select @IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
	d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
	SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
	d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
	d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,dateadd(day,d.NoOfDays, d.SurgeryDateTime),
	d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
	from #temp2 a
	inner join (
	select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
	from ipbill.CurrentIPPackage a
	left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
	where a.deleted = 0
	group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
	) d on a.PackageID = d.ID
	where a.packageid <> 0 and Deleted= 0
	group by d.PackageAmount,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-CompPackageID-REPROC' + convert(varchar,@packageid),@OperatorID,GETDATE()

	--Insert into IPBILL.PackageBillingDetail(			
	--BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
	--PackageID,PackageOrderID,PackageItemID)
	select 		
	@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
	isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
	from #temp2 a
	inner join (
	select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
	from ipbill.CurrentIPPackage a
	left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
	group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
	) d on a.PackageID = d.ID
	where a.packageid <> 0 and Deleted= 0
	group by 			
	a.IPSERVICEID,d.ID, d.OrderID,d.ItemID

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail-CompPackageID-REPROC'+ convert(varchar,@packageid),@OperatorID,GETDATE()

	print  'packagebillitemdetail-CompPD'
	select @SerialNo = 6292340

	--Insert into IPBILL.PackageBillingItemDetail(
	--PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
	--CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
	--DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
	select 		
	d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
	@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
	a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
	0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
	case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
	case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
	when a.IPSERVICEID in (2,3) then BedID 	else 0 	end as BedTypeID,
	a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,a.Deductible,a.DepartmentID,
	case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
	a.OperatorID,	DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
	from #temp2 a
	inner join (
	select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
	from ipbill.CurrentIPPackage a
	left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID 		
	where b.ID in (	select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID)
	group by a.PackageId
	) d on a.PackageID = d.ID
	where a.packageid <> 0 and Deleted= 0
	order by a.IPSERVICEID		

	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'packagebillitemdetail-CompPackageID-REPROC'+ convert(varchar,@packageid),@OperatorID,GETDATE()

	print  'IPBILL.IPBILL_GETBILLAR_IN'
	--exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,1			
	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'Done AR Package-CompPackageID-REPROC'+ convert(varchar,@packageid),@OperatorID,GETDATE()
end


--if @Discharge = 15
--begin
--select 'this'
--		--select @PackageID = max(packageid) from #temp2
		
--		--update #temp2 set PackageID = 1 where Deleted = 0 and PackageID <> 0
--		--update #temp2 set PackageID = 1 where Deleted = 0 and PackageID = 0
--	set @billno = 284033
--	set @SLNO = 143145
	
--	--print  'PackageBill-CompPD'		
--	insert into  HIS.dbo.PackageBill( IPID,BillNo,BillDate,BillAmount,Balance,PackageAmount,Cash,OperatorId,SlNo,Billtype,MarkUp,PackageMarkDown,			
--	Discount,PackageDiscount,Deductable,PackageDeductable,DeductableType,PackageID,PackageServiceID,PackageOrderID,PackageItemID,PackageBedTypeID,
--	PackageOrderDateTime,StartBefore,NoOfDays,PackageStartDateTime,PackageEndDateTime,PACKAGECODE,PACKAGENAME,EligiblePackageAmount )	
--	select @IPID IPID,@BillNo BillNo,@ddate BillDate,SUM(Price  * Quantity) BillAmount,SUM(PackagePrice * Quantity) - sum(Deposit) - sum(Refund) Balance,
--	d.PackageAmount	,@cash Cash,@OperatorID,@SLNO SlNo,@BillType Billtype,sum(MarkUp) MarkUp, 0 PackageMarkDown,
--	SUM(a.Discount),0 PackageDiscount,0 Deductable,0 PackageDeductable,- 1 DeductableType,a.packageid,d.ServiceID PackageServiceID,
--	d.OrderID PackageOrderID,d.ItemID PackageItemID,isnull(max(a.BedTypeType),1) PackageBedTypeID,
--	d.SurgeryDateTime,- 1 StartBefore,d.NoOfDays,d.SurgeryDateTime PackageStartDateTime,dateadd(day,d.NoOfDays, d.SurgeryDateTime),
--	d.PackageCode,d.PackageName,d.PackageAmount EligiblePackageAmount		
--	from #temp2 a
--	inner join (
--	select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
--	from ipbill.CurrentIPPackage a
--	--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
--	-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
--	left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
--	where a.deleted = 0
--	group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
--	) d on a.PackageID = d.ID
--	where a.packageid <> 0 and Deleted= 0
--	group by d.PackageAmount,a.packageid,d.ServiceID,d.OrderID,d.id,d.ItemID,d.SurgeryDateTime,d.NoOfDays,d.SurgeryDateTime,d.PackageCode,d.PackageName,d.PackageAmount

--	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBill-CompPackageID' + convert(varchar,@packageid),@OperatorID,GETDATE()

--	--print  'PackageBillDetail-CompPD'
--	Insert into HIS.dbo.PackageBillDetail(			
--	BillNo,ServiceID,Amount,Apolloamount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,
--	PackageID,PackageOrderID,PackageItemID)
--	select 		
--	@BillNo,a.IPSERVICEID,isnull(SUM(Price  * a.Quantity ),0),isnull(SUM(ApolloAmount  * a.Quantity ),0) ,0 CategoryAmount,isnull(SUM(markup),0),
--	isnull(SUM(a.discount),0),0 ApolloDiscount,isnull(SUM(Deductible),0),d.ID,d.OrderID PackageOrderID,d.ItemID PackageItemID			
--	from #temp2 a
--	inner join (
--	select a.PackageId ID,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,a.SurgeryDateTime,MAX(b.OrderID) as OrderID 
--	from ipbill.CurrentIPPackage a
--	--left join ipbill.IPBillPackagePDDetail b on a.PackageId = b.PackageID
--	-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27
--	left join (select * from ipbill.IPBillPackagePDDetail  where id in ((select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID))) b on a.PackageId = b.PackageID
--	group by a.PackageId,a.PackageAmount,a.PackageCode,a.PackageName, a.NoOfDays,a.SurgeryDateTime 
--	) d on a.PackageID = d.ID
--	where a.packageid <> 0 and Deleted= 0
--	group by 			
--	a.IPSERVICEID,d.ID, d.OrderID,d.ItemID

--	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'PackageBillDetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()

--	--print  'packagebillitemdetail-CompPD'
--	select @SerialNo = SerialNo from HIS.dbo.IPBillItemSerialNo

--	Insert into HIS.dbo.packagebillitemdetail(
--	PackageID,PackageServiceID,PackageOrderID,PackageItemID,BillNO,SerialNo,ServiceID,OrderID,ItemID,Quantity,DateTime,Price,ApolloPrice,
--	CategoryPrice,FromDateTime,ToDateTime,BedTypeId,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount,DepartmentID,BedID,OperatorID,
--	DiscountLevel,ApolloDiscountLevel,DeductableLevel,ITEMCODE,ITEMNAME)
--	select 		
--	d.ID,d.ServiceID PackageServiceID,d.OrderID PackageOrderID,d.ItemID PackageItemID,
--	@BillNo BillNO,@SerialNo + ROW_NUMBER() OVER(ORDER BY a.IPSERVICEID,a.ID DESC) as SerialNo,
--	a.IPSERVICEID ServiceID,a.ID OrderID,a.ItemID ItemID,a.Quantity,a.OrderDateTime DateTime,Price ,ApolloAmount ApolloPrice,
--	0 CategoryPrice, case when a.IPSERVICEID in (2,3) then a.OrderDateTime end FromDateTime ,
--	case when a.IPSERVICEID in (2,3) then a.BillDateTime end ToDateTime,
--	case when a.IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
--	when a.IPSERVICEID in (2,3) then BedID
--	else 0 
--	end as BedTypeID,
--	a.MarkUp MarkUpAmount,a.Discount/a.Quantity as Discount,0 ApolloDiscount,a.Deductible,a.DepartmentID,
--	case when a.IPSERVICEID in (2,3) then a.ItemID else BedID end as BedID,
--	a.OperatorID,
--	DiscountLevel,0 ApolloDiscountLevel,0 DeductableLevel,ITEMCODE,ITEMNAME				
--	from #temp2 a
--	inner join (
--	select a.PackageId ID,max(b.ItemID) as ItemID,max(b.ServiceID) as ServiceID,MAX(b.OrderID) as OrderID 
--	from ipbill.CurrentIPPackage a
--	left join ipbill.IPBillPackagePDDetail b on a.PackageID = b.PackageID 	
--	-->ADDED TO GET THE FIRST ITEM IF PACKAGE IS APPLIED IN MULTIPLE ITEM --27-Mar-2017 10:27			
--	where b.ID in (	select MIN(ID) from ipbill.IPBillPackagePDDetail where IPID = @IPID group by PackageID)
--	group by a.PackageId
--	) d on a.PackageID = d.ID
--	where a.packageid <> 0 and Deleted= 0
--	order by a.IPSERVICEID		

--	set @SerialNo = (select max(SerialNo) from HIS.dbo.packagebillitemdetail where billno = @billno)
--	update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo

--	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'packagebillitemdetail-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()

--	--print  'IPBILL.IPBILL_GETBILLAR_IN'
--	--exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,1			
--	--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'Done AR Package-CompPackageID'+ convert(varchar,@packageid),@OperatorID,GETDATE()
--end

if @Discharge = 15
begin
		--select @SLNO = max(a.slno) + 1
		--from (select max(slno) as slno from HIS.dbo.ipbill union all select max(slno) as slno from HIS.dbo.cancelipbill ) A 	
		
		----select @SLNO = SlNo from HIS.DBO.IPBillNo Where BILLTYPE=2
		--Update HIS.DBO.IPBillNo Set SlNo=@SLNO Where BILLTYPE=2	
		
		--insert into his.dbo.ipbill (IPID,SlNo,BillDate,BillAmount,Balance,Cash,CompanyID,CategoryID,GradeID,TariffID,BillType,BedTypeID,SettleDate,MarkUp,		
		--Discount,Deductable,DeductableType,OperatorID,IsSplit)	
		select	
		@IPID as IPID, @SLNO as SlNo, @ddate as BillDate,
		SUM(price * Quantity) BillAmount,
		SUM(price * Quantity) - sum(Deposit) - sum(Refund) Balance,
		@Cash Cash, @CompanyID CompanyID, @CategoryID CategoryID,
		@GradeID GradeID, @TariffID TariffID, @BillType BillType, @BedTypeID BedTypeID, null SettleDate,--sum(MarkUp) MarkUp,
		0 as MarkUp, sum(Discount) Discount, sum(Deductible) Deductable,
		isnull((select max(deductible) from HIS.dbo.IPDeductableType where GradeID = @GradeID and CompanyID= @CompanyID and CategoryID= @CategoryID and IPOPTYPE=0),0) DeductableType,
		@OperatorID OperatorID, 0 IsSplit from #temp2 where Deleted= 0
		
		--select @BillNo = SCOPE_IDENTITY()
	
		--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBill-NPD',@OperatorID,GETDATE()
		
		--Insert into HIS.dbo.IPBillDetail(BillNo,ServiceID,Amount,ApolloAmount,CategoryAmount,MarkUpAmount,Discount,ApolloDiscount,DeductableAmount)		
		select @BillNo,IPSERVICEID,isnull(SUM(price * Quantity),0) as Amount,
		0 as ApolloAmount,0.00 as CategoryAmount,isnull(SUM(markup),0) as MarkUpAmount,
		isnull(SUM(discount),0) as Discount,0 as ApolloDiscount,isnull(SUM(Deductible),0) 
		from #temp2 
		where Deleted= 0 group by IPSERVICEID
		
		--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPBillDetail',@OperatorID,GETDATE()
		
	Select @SerialNo = SerialNo from HIS.DBO.IPBillItemSerialNo
	
		--insert into HIS.dbo.IPbillitemdetail (		
		--BillNo,SerialNo,OrderID,BedID,BedTypeID,ServiceID,ItemID,Quantity,Price,ApolloPrice,CategoryPrice,FromDateTime,ToDateTime,MarkUpAmount,Discount,
		--ApolloDiscount,DeductableAmount,DepartmentID,DiscountLevel,ApolloDiscountLevel,DeductableLevel,	DateTime,OperatorID,Itemcode,ItemName)
		select 
		@BillNo as BillNo, @SerialNo + ROW_NUMBER() OVER(ORDER BY IPSERVICEID,ID DESC)  as SerialNo,
		case when IPSERVICEID in (2,3) then itemid else ID end as OrderID,
		case when IPSERVICEID in (2,3) then itemid else BedID end as BedID,		
		case 
			when IPSERVICEID in (1,5,33,37) then SUBSTRING(DestSt,0,CHARINDEX('|', DestSt)) --UNITID
			when IPSERVICEID in (2,3) then BedID
			else 0 
		end as BedTypeID,	
		IPSERVICEID, ItemID, Quantity, Price, ApolloAmount as ApolloPrice,
		0 as CategoryPrice,
		case when IPSERVICEID in (2,3) then  OrderDateTime else null end,
		case when IPSERVICEID in (2,3) then  BillDateTime else null end,
		MarkUp, Discount/Quantity Discount , 0 as ApolloDiscount, 0 as DeductableAmount, DepartmentID, DiscountLevel as DiscountLevel,
		0 as ApolloDiscountLevel, 0 as DeductableLevel, OrderDateTime, OperatorID, Itemcode, ItemName
		from #temp2 where Deleted= 0 order by IPSERVICEID,ID	
		
		--set @SerialNo = (select max(SerialNo) from HIS.dbo.IPbillitemdetail where billno = @billno)
		--update HIS.DBO.IPBillItemSerialNo set SerialNo = @SerialNo
		
		--insert into [IPBILL].DischargeLog (IPID,BillNo,DatabaseTable,OperatorID,DateTime)select @IPID,@BillNo,'IPbillitemdetail',@OperatorID,GETDATE()
		
		--if (@CompanyID <> 1)
		--begin
		--	exec IPBILL.IPBILL_GETBILLAR_IN @BillNo, @IPID,@OperatorID,0			
		--end
end

drop table #temp
drop table #temp2

return






GO

/****** Object:  StoredProcedure [ITADMIN].[PatientCancelOrder_Save_SCS_july_9_2018]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [ITADMIN].[PatientCancelOrder_Save_SCS_july_9_2018]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
	@xmlPatientOrderHeaderSave			as xml,
    @xmlPatientCancelOrderSave	    as xml

	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPatientOrderHeaderSave
SELECT 
Action
,OperatorId
into #tmpPatientOrderHeaderSave

from openxml(@handle, '/DocumentElement/PatientOrderHeaderSave',2) with
(
Action int
,OperatorId int

)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPatientCancelOrderSave
SELECT 

OrderId
,TypeId -- serviceid
,groupId
into #tmpPatientCancelOrderSave

from openxml(@handle, '/DocumentElement/PatientCancelOrderSave',2) with
(
OrderId int
,TypeId int
,groupId int

)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int
declare @MaxID as int
declare @OrderId as int
declare @TypeId as int
declare @GroupId as int


select @Action = Action,@OperatorId =OperatorId
from #tmpPatientOrderHeaderSave 

select @OrderId = OrderId,@TypeId = TypeId,@GroupId = groupId
from   #tmpPatientCancelOrderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	 
		-----------Fro Cathlab Item Order----------
			Select @MaxID = Max(maxid)  from OrderMaxID where tableID = 9 And StationID in (10,12,71)
		---------For CatORder----------------
		if (@GroupId = 1)
			--if exists (Select * from CathOrderDetail where orderid = @OrderId)
	Begin

			INSERT INTO CancelCathOrderDetail
                      (orderid, type, typeid, price, canceledon)
			SELECT     orderid, type, TypeId, price, Getdate() as canceledon
			FROM       CathOrderDetail
			WHERE     (orderid = @OrderId) AND (TypeId = @TypeId) -- note serviceid 

		    DELETE FROM Cathorderdetail WHERE orderid = @OrderId and typeid = @TypeId-- note serviceid 

			INSERT INTO CancelCathOrder
                      (id, patienttype, ipidopid, operatorid, clid, orderdatetime, procedurestartdatetime, procedureenddatetime, issueauthoritycode, opbillid, anaesthesiatypeid, 
                      anaesthesiastartdatetime, anaesthesiaenddatetime, cathno, diagnosis, angiodata, cinecd, remarks, shiftingnurseid, stationid, canceledby, canceledon, normal, 
                      stationslno, recoverystartdatetime, recoveryenddatetime, chkar, bedid, modified)
			SELECT     id, PatientType, IPIDOPID,OperatorId,CLid,OrderDateTime,ProcedureStartdateTime,ProcedureEnddateTime, IssueAuthorityCode,opbillid,AnaesthesiaTypeId, 
					   anaesthesiastartdatetime,anaesthesiaenddatetime, CathNo,diagnosis,angiodata,CineCD,remarks,ShiftingNurseId,7,@OperatorId,--->hardcoded AS (IT STATION), 1412 AS Expr2, 
					   Getdate() as canceledon,Normal,@MaxID, RecoveryStartDateTime, RecoveryEndDateTime, ChkAR, bedid,0 
			FROM       CathOrder
			WHERE     (id = @OrderId)

			Declare @Empty as int

			select @Empty = count(*) from CathOrderDetail where OrderID = @OrderId and type = 1

			If (@Empty = 0)
			BEGIN	
					DELETE FROM Cathorder WHERE id = @OrderId
					DELETE FROM Cathorderdetail WHERE orderid = @OrderId
			END
		END
		---------For RequestedTest----------------
		if (@GroupId = 2)
			--if exists (Select * from RequestedTest where orderid = @OrderId)
				Begin

					INSERT INTO CanRequestedTest
								(orderid, serviceid, deststid, collectedby, acknowledgedby, testdoneby, collecteddatetime, acknowledgeddatetime, collectedat, testdonedatetime, sampleid, profileid, 
								verified1, verifiedby, labnum, receivingtime, normal, bimage, verifieddatetime, canceleddatetime, CanceledBy)
					SELECT     OrderID, ServiceID, DestStID, CollectedBy, AcknowledgedBy, TestDoneby, collectedDateTime, AcknowledgeddateTime, CollectedAt, TestDoneDateTime, SampleID, 
								ProfileID, Verified1, Verifiedby, labnum, ReceivingTime, normal, bIMAGE, verifieddatetime,getdate() as canceleddatetime,@OperatorId
					FROM       RequestedTest
					WHERE     (OrderID = @OrderId ) and (ServiceID= @TypeId)

					Delete from RequestedTest where OrderID = @OrderId and ServiceID = @TypeId

					INSERT INTO CanTestRequisition
                      (id, bedid, ipid, operatorid, sourcestid, priority, remarks, datetime, doctorid, tobedoneby, exstatus, printed, tobedoneat, phlebotomy, canceledby, canceleddatetime, 
                      modified, StationSlNo)
					SELECT   ID,BedID,IPID,OperatorID,SourceStID,Priority,Remarks, DateTime, DoctorID, ToBeDoneBy, Exstatus, Printed, ToBeDoneAt, Phlebotomy, @OperatorId AS CanceledBy
							, Getdate() AS canceleddatetime,0, stationslno
					FROM     TestRequisition
					WHERE     (ID = @OrderId)
			
					--DELETE from TestRequisition where ID = @OrderId

					select @Empty = count(*) from RequestedTest where OrderID = @OrderId and (profileid=1 OR PROFILEID IS NULL or profileid=0)

					If (@Empty = 0)

					BEGIN	
							DELETE FROM RequestedTest WHERE OrderID = @OrderId
							DELETE from TestRequisition where ID = @OrderId
					END							

				END
		---------FoodOrderDetail----------------------
	    if (@GroupId = 3)
		--if exists(Select * from FoodOrderDetail where OrderID = @OrderId)
				BEGIN
					   INSERT INTO CancelFoodOrderDetail
								  (orderid,serviceid,Quantity,batchno,dispatchedquantity)
						SELECT     orderid, ServiceID,Quantity,batchno,dispatchedquantity
						FROM         FoodOrderDetail
						WHERE     (OrderID = @OrderId)
		
			 ---select * From FoodOrder
				DELETE FROM CancelFoodOrderDetail WHERE orderid = @OrderId and ServiceID = @TypeId
			--	Select * from CancelFoodOrder
				INSERT INTO CancelFoodOrder 
						(id,RegistrationNo,IssueAuthorityCode,IPID,OPBillId,StationID,BedID,OperatorID,DateTime,canceldatetime,
						cancelledby,modified,dispatched,printstatus,amount,fboperatorid,dispatcheddatetime,stationslno,type,Billed,AdmitDatetime)
						SELECT 
						id,RegistrationNo,IssueAuthorityCode,IPID,OPBillId,StationID,BedID,OperatorID,DateTime,GetDate() as canceldatetime,@OperatorId,1,dispatched,printstatus,amount,fboperatorid,dispatcheddatetime,stationslno,type,Billed,AdmitDatetime
						from FoodOrder where id = @OrderId


							select @Empty = count(*) from CancelFoodOrderDetail where orderid = @OrderId
					   If (@Empty = 0)
								BEGIN	
										DELETE FROM FoodOrder WHERE id = @OrderId
										DELETE FROM FoodOrderDetail WHERE OrderID = @OrderId
								END
		
				END		
		---------BSPExecutionDetail--------------
		if (@GroupId = 4)
		    --if exists(Select * from BSPExecutionDetail where OrderID = @OrderId)
			Begin

						--select *  from CanBSPExecutionDetail

						INSERT INTO CanBSPExecutionDetail
								  (orderid, serviceid, canceleddatetime, Quantity)
						SELECT     orderid, ServiceID,Getdate() as canceleddatetime,Quantity
						FROM         BSPExecutionDetail
						WHERE     (orderid = @OrderId)

						DELETE FROM BSPExecutionDetail WHERE orderid = @OrderId and ServiceID = @TypeId

						--select *  from CanBSPExecution 

						INSERT INTO CanBSPExecution 
						(id,ipid,doctorid,bedid,stationid,operatorid,datetime,canceledby,canceleddatetime
						,modified,StationSlNo)
						SELECT 
						id,ipid,doctorid,bedid,stationid,operatorid,datetime,@OperatorId,Getdate() as canceleddatetime,1,stationslno
						from BSPExecution where id = @OrderId

						select @Empty = count(*) from BSPExecutionDetail where OrderID = @OrderId

					   If (@Empty = 0)
								BEGIN	
										DELETE FROM BSPExecution WHERE id = @OrderId
										DELETE FROM BSPExecutionDetail WHERE OrderID = @OrderId
								END

						---select * From CanBSPExecution
			END
		---------For ProceduresOrder----------------
	    if (@GroupId = 5)
			--if exists (Select * from OtherProceduresOrderDetail where orderid = @OrderId)
					BEGIN
							INSERT INTO CanOtherProceduresOrderDetail
										(orderid, serviceid,canceleddatetime,Quantity)
							SELECT     OrderID, ServiceID,Getdate() as canceleddatetime, Quantity
							FROM         OtherProceduresOrderDetail
							WHERE     (OrderID = @OrderId) AND (ServiceID = @TypeId)
							---select * from CanOtherProceduresOrderDetail  where orderid = 471801 and serviceid = 8549
							 
						---	select *  from OtherProceduresOrderDetail 

							Delete from OtherProceduresOrderDetail  where OrderID = @OrderId and ServiceID = @TypeId

							INSERT INTO CanOtherProceduresOrder
									(bedid, ipid, stationid, operatorid, datetime, doctorid, id, canceledby, canceleddatetime, modified, StationSlNo)
							SELECT   BedID, IPID, StationID, OperatorID, DateTime, DoctorID, ID, @OperatorId AS CanceledBy,Getdate() AS CanceledDateTime,1,stationslno
							FROM     OtherProceduresOrder
							WHERE     (ID = @OrderId)

						select @Empty = count(*) from otherproceduresorderDetail where OrderID = @OrderId

					If (@Empty = 0)

					BEGIN	
							DELETE FROM otherproceduresorderDetail WHERE OrderID = @OrderId
							DELETE from OtherProceduresOrder where ID = @OrderId
					END	
					
					
							

				END
		---------For RHOrder----------------
		if (@GroupId = 6)
			--if exists(Select * from RHOrderDetail where orderid = @OrderId)
				BEGIN
						
						INSERT INTO CancelRHOrderDetail
								  (orderid, type, typeid, price, canceledon)
						SELECT     orderid, type, typeid, price, GETDATE() as canceledon
						FROM         RHOrderDetail
						WHERE     (orderid = @OrderId)

						DELETE FROM RHOrderDetail WHERE orderid = @OrderId and typeid = @TypeId

						--select * from RHOrderDetail

						INSERT INTO CancelRHOrder
									(id, patienttype, ipidopid, operatorid, orderdatetime, procedurestartdatetime, procedureenddatetime, issueauthoritycode, opbillid, remarks, diagnosis, treatment, 
									stationid, status, canceledby, canceledon, shiftingnurseid, doctorid, referreddoctor, opvisitno, bedid, modified)
						SELECT     id, PatientType, IPIDOPID, OperatorId, OrderDateTime, ProcedureStartdateTime, ProcedureEnddateTime, IssueAuthorityCode, opbillid, remarks, diagnosis, Treatment, 
									stationid, status,@OperatorId,GETDATE() as canceledon, ShiftingNurseId, DoctorId, ReferredDoctor, OpVisitNo, bedid,0
						FROM         RHOrder
						WHERE     (id = @OrderId)

					--	select count(*) from RHOrderDetail where OrderID = 146067 and type = 1
						select @Empty = count(*) from RHOrderDetail where OrderID = @OrderId and type = 1
						
						If (@Empty = 0)
								BEGIN	
										DELETE FROM RHOrder WHERE id = @OrderId
										DELETE FROM RHOrderDetail WHERE orderid = @OrderId
								END


						---select * from RHOrder
			
				END

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Cancel Item Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
			--Update anaesthesia set name = 'GENERAL ANESTHESIA',costprice=15,code='FMORDZ9999',ModifiedBy = 1412,BillingType=2 ,ArabicName='"',ArabicCode='"' where id=85
			--sp_HElp anaesthesia
			--UPDATE a
			--SET a.name = b.Name
			--	,a.ModifiedBy = b.OperatorId
			--	,a.BillingType = b.BillingType
			--	,a.costprice = b.costprice
			--	,a.ArabicName = '"'
			--	,a.ArabicCode = '"'		
			--from Anaesthesia a
			--INNER JOIN #tmpAnesthesiaSave b
			--ON b.Id = a.Id
			--WHERE a.Id = @ID
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPatientCancelOrderSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatItemTabList_test]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[VatProfile_VatItemTabList_test] 
 @Type int = 1,
 @TaxId int = 0,
 @Serviceid int = 1,
 @Deptid int = 30
AS

BEGIN
		 --SP_HELP TaxServices
 
 declare @masterTable varchar(max)
 declare @sql nvarchar(max)

IF(@Type = 1) -- IP
BEGIN 
--select * from IPBService where deleted = 0
--select * from department where deleted = 0
	select @masterTable = RTRIM(LTRIM(MasterTable))   from IPBService where Deleted = 0 AND ID = @ServiceId
 

 print(LOWER(@masterTable));
 	IF  LOWER(@masterTable) = 'item' -- @ServiceId = 5
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.PharmacyItem a 
			left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) in ( 'doctor','employee')
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.employee a 
				left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE   a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC

		END
		ELSE IF LOWER(@masterTable)  in ( 'bedtype','otno') 
		BEGIN
 
			set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
			' from  @masterTable  a  '+
			 ' left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
			' where a.Deleted = 0   ' 
			
				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				print (@sql)
				EXEC (@sql)

		END
		ELSE IF LOWER(@masterTable)  in ( 'cssitem') 
		BEGIN

			set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.ItemCode +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
							' from  @masterTable  a  '+
							' left join  TaxItem c on a.Id = c.ItemId   and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
							' where a.Deleted = 0   ' 

								set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
								
								set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
								set @sql =  REPLACE(@sql,'@Type',@Type)
								print (@sql)
								 EXEC (@sql)
 END
		ELSE
		BEGIN
 --   [ITADMIN].[VatProfile_VatItemTabList_test]  
							set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
							' from  @masterTable  a  '+
							' left join Department b on a.Departmentid = b.ID  '+
							' left join  TaxItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
							' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

								set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
								set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
								set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
								set @sql =  REPLACE(@sql,'@Type',@Type)
								print (@sql)
								 EXEC (@sql)
			END
END 

IF(@Type = 2) -- OP
BEGIN 
 

     select @masterTable = RTRIM(LTRIM(MasterTable))   from OPBService where Deleted = 0 AND ID = @ServiceId

 IF LOWER(@masterTable) = 'item' --@ServiceId = 11
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.PharmacyItem a 
			left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) = 'doctor'
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.Doctor a 
				left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			
			WHERE  
				a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC
		END
		ELSE
		BEGIN

 			set @sql = N' select  Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
			' from  @masterTable  a  '+
			' left join Department b on a.Departmentid = b.ID  '+
			' left join  TaxItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
			' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				print (@sql)
				EXEC (@sql)
		END
END 
 
END

 


GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff_fooditem]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff_fooditem]
@TariffID int =1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
declare  @SQL nvarchar(max),@RowNum int, @CustId nchar(5), @Name1 nchar(25),@PriceTables as varchar(max), @ServiceIDs as int, @filename as varchar(max) 
select @CustId=MAX(id) from  his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --start with the highest ID
Select @RowNum = Count(*) from his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --get total number of records
 
 
  set @SQL  = N'  ' 

		WHILE @RowNum > 0                          --loop until no more records
		BEGIN   
			 select @Name1 = name from his.dbo.BedType where id= @CustId and  deleted=0    --get other info from that row
		
						--Select Name,Id from  Tariff  cast(@CustId as varchar) 
						Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  
						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' +LTRIM(RTRIM(@CustId)) -- + '_Anaesthesia'  
						
		  --  [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]
		--   Select Name,Id from  his.dbo.Tariff   select * from dbo.IPBService  SELECT ID,NAME FROM HIS..TARIFF ORDER BY NAME
		set @SQL  = N'  '+@SQL+ N'
					 Select ' + '''' + cast(@Name1 as varchar) + '''' + '   xGroup,x.Department,x.Code,x.Name,x.Price,x.arabicname,isnull(x.StartDateTime,0) StartDateTime from 
					(
					
				 select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_FBItem' +'   a left join FoodItem b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0
					 ) x 
					Group By x.Department,x.Code,x.Name,x.Price,x.arabicname,x.StartDateTime   UNION ALL'
-- [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]	

   select top 1 @CustId=id  from his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)  and id < @CustID order by id desc  --get the next one
     set @RowNum = @RowNum - 1                               --decrease count
END

declare @sqlNew nvarchar(max)
set @sqlNew = LEFT(@SQL, LEN(@SQL) -9 ) 
 
 print(@sqlNew);
if(@RowNum = 0)
BEGIN
 execute sp_executesql @sqlNew 
--EXECUTE(@SQL);
END

END
GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_CopyEmployeeAccess]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 
 
 
CREATE PROCEDURE [ITADMIN].[ModuleAccess_CopyEmployeeAccess]
@ErrorMessage as NVARCHAR(max) OUT,
@fromUserId int = 11261 
,@toUserId int = 11503
,@moduleId int = 306
,@DeleteOld int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
declare @Type as varchar(250)

declare @rowid int
 

    BEGIN TRY 
    
        BEGIN TRAN
		
--GET DATA FROM USER ID
select distinct Module_Id into #FromModuleId from HISGLOBAL.ACCESS_USERFEATURES where  UserID = @fromUserId  
-------features function  
select distinct FeatureId,ModuleId  into #FromFeatureId  from [HISGLOBAL].ACCESS_USERFUNCTION where   USERid =@fromUserId  

 if(@moduleId <> 0)
 BEGIN
		delete from #FromModuleId where Module_Id <> @moduleId
		delete from #FromFeatureId where ModuleId <> @moduleId
 END

 ---copy from wipro
delete from  dbo.L_USERROLES where  user_id = @toUserId and Role_id in (select Role_id from dbo.L_USERROLES where user_id = @fromUserId )

insert into dbo.L_USERROLES (Role_Id,User_Id,Startdatetime,OperatorID,Deleted)
select Role_Id,@toUserId,GETDATE(),11,Deleted from dbo.L_USERROLES  where user_id = @fromUserId



if(@DeleteOld = 1)--delete the existing 
BEGIN

delete from HISGLOBAL.ACCESS_USERFEATURES where UserID = @toUserId and Module_Id in (select Module_Id from #FromModuleId )
delete from [HISGLOBAL].ACCESS_USERFUNCTION where USERID = @toUserId and FeatureId  in ( select FeatureId from #FromFeatureId  )
 
END

-------module features 


delete from HISGLOBAL.ACCESS_USERFEATURES where  Deleted = 1 and 
UserID = @toUserId and Module_Id in (select Module_Id from #FromModuleId )
insert into HISGLOBAL.ACCESS_USERFEATURES (USERID,Module_Id,Feature_Id,Deleted,Station_Id)
select @toUserId,ModuleId,FeatureId,'True',0 from HISGLOBAL.ACCESS_MODULEFEATURES 
where    ModuleId in( select Module_Id from #FromModuleId  ) and FeatureId is not null
 

update [HISGLOBAL].ACCESS_USERFEATURES set Deleted = 0 where userid = @toUserId 
and Feature_Id in  (select Feature_Id from [HISGLOBAL].ACCESS_USERFEATURES where userid = @fromUserId and deleted = 0)
and Module_Id in  (select Module_Id from [HISGLOBAL].ACCESS_USERFEATURES where userid = @fromUserId and deleted = 0)

 --delete duplicates
 select Id,USERID,Feature_Id,Module_Id,Deleted into #tmpDuplicateFeat   from HISGLOBAL.ACCESS_USERFEATURES 
 where    UserID = @toUserId   and Module_Id in  (select Module_Id from [HISGLOBAL].ACCESS_USERFEATURES where userid = @toUserId and deleted = 0)
and Feature_Id in (select  feature_Id  from HISGLOBAL.ACCESS_USERFEATURES   
where    UserID = @toUserId   and Module_Id in  (select Module_Id from [HISGLOBAL].ACCESS_USERFEATURES where userid = @toUserId and deleted = 0)
 group by feature_Id,Module_Id having count(Feature_Id) > 1
 )
delete from #tmpDuplicateFeat where id  in ( select min(id) from #tmpDuplicateFeat group by Feature_Id,Module_Id )
delete from HISGLOBAL.ACCESS_USERFEATURES 
where    UserID = @toUserId   and Module_Id in  (select Module_Id from [HISGLOBAL].ACCESS_USERFEATURES where userid = @toUserId and deleted = 0) and id in ( select id from #tmpDuplicateFeat )
drop table  #tmpDuplicateFeat


-------features function 
delete from [HISGLOBAL].ACCESS_USERFUNCTION where Deleted = 1 and  USERID = @toUserId and FeatureId  in ( select FeatureId from #FromFeatureId  )
 insert into [HISGLOBAL].ACCESS_USERFUNCTION (USERID,ModuleId,FeatureId,FunctionID,Deleted ) 
select @toUserId,e.ModuleID,a.FeatureId,a.FunctionID ,1
from HISGLOBAL.ACCESS_FEATUREFUNCTIONS  a  left join HISGLOBAL.MENU_FUNCTIONS c on a.FunctionID = c.FunctionID 
left join HISGLOBAL.ACCESS_MODULEFEATURES d on  a.FeatureId = d.FeatureId left join HISGLOBAL.HIS_MODULES e on d.ModuleId = e.ModuleID
where  a.FeatureId  in ( select FeatureId  from #FromFeatureId  ) and e.ModuleID is not null 
and e.ModuleID in (select Module_Id from #FromModuleId )

update  HISGLOBAL.ACCESS_USERFUNCTION set deleted = 0 where UserID = @toUserId AND
FeatureId in (select FeatureId from HISGLOBAL.ACCESS_USERFUNCTION where UserID = @fromUserId and deleted = 0 )
and FunctionID in (select FunctionID from HISGLOBAL.ACCESS_USERFUNCTION where UserID = @fromUserId and deleted = 0 )

--delete duplicate
 select *  into #tmpDuplicateFunction   from HISGLOBAL.ACCESS_USERFUNCTION 
 where    UserID = @toUserId   and ModuleId in  (select Module_Id from #FromModuleId)
and FunctionID in (select  FunctionID  from HISGLOBAL.ACCESS_USERFUNCTION   
where    UserID = @toUserId   and ModuleId in  (select Module_Id from #FromModuleId)
 group by featureId,ModuleId,FunctionID having count(FunctionID) > 1
 )
 
delete from #tmpDuplicateFunction where id not in 
( select max(id) from #tmpDuplicateFunction group by featureId,ModuleId,FunctionID  )
 delete from HISGLOBAL.ACCESS_USERFUNCTION 
 where    UserID = @toUserId   and ModuleId in  ( select Module_Id from #FromModuleId) 
 and id in ( select id from #tmpDuplicateFunction )
select * from   #tmpDuplicateFunction order by functionid 
drop table  #tmpDuplicateFunction





---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

 

set xact_abort OFF

drop table #FromModuleId
drop table #FromFeatureId

/**
GIVE ALL ACCESS
 ----------- module features
delete from HISGLOBAL.ACCESS_USERFEATURES where UserID = 1  

insert into HISGLOBAL.ACCESS_USERFEATURES (USERID,Module_Id,Feature_Id,Deleted,Station_Id)
select 1,ModuleId,FeatureId,'False',0 from HISGLOBAL.ACCESS_MODULEFEATURES 
where  deleted = 0 and ModuleId in(
select ModuleID from HISGLOBAL.HIS_MODULES where deleted = 0 )

-------features function 
delete from [HISGLOBAL].ACCESS_USERFUNCTION where USERid = 1 
insert into [HISGLOBAL].ACCESS_USERFUNCTION (USERID,ModuleId,FeatureId,FunctionID,Deleted ) 
 select 1,e.ModuleID,a.FeatureId,a.FunctionID , 0
 from HISGLOBAL.ACCESS_FEATUREFUNCTIONS  a  
 left join HISGLOBAL.MENU_FUNCTIONS c on a.FunctionID = c.FunctionID 
 left join HISGLOBAL.ACCESS_MODULEFEATURES d on  a.FeatureId = d.FeatureId
 left join HISGLOBAL.HIS_MODULES e on d.ModuleId = e.ModuleID
               where a.FeatureId  in (
select FeatureId  from HISGLOBAL.ACCESS_MODULEFEATURES where deleted = 0 )


*/

END
 





GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ViewServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	

 */
CREATE PROCEDURE [ITADMIN].[ComissionProfile_ViewServiceTab] 
 @Type int = 2,
 @DocId int = 3128
AS

BEGIN
		 
IF(@Type = 1) -- IP
BEGIN 

	 select a.ServiceName as Name , isnull(b.Percentage,0) Percentage , isnull(b.Amount,0) Amount
	,Case when b.ServiceId != '' then '1' else '0' end as isService
	, a.Id as ServiceId,1 as IPOPType 
	 from IPBService a 
	 left join dbo.BillCommissionServices b on a.Id = b.ServiceId and b.IPOPType = 1 and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
	 where a.Deleted = 0  order by isService desc,a.ServiceName
END 

IF(@Type = 2) -- OP
BEGIN 
   
	 	
	 select a.Name as Name , isnull(b.Percentage,0) Percentage , isnull(b.Amount,0) Amount
	,Case when b.ServiceId != '' then '1' else '0' end as isService
	, a.Id as ServiceId,2 as IPOPType 
	 from OPBService a 
	 left join dbo.BillCommissionServices b on a.Id = b.ServiceId and b.IPOPType = 2    and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
	 where a.Deleted = 0 order by isService  desc,a.Name

END 
 

  
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ViewDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




  /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	
[ComissionProfile_ViewServiceTab]
 */
CREATE PROCEDURE [ITADMIN].[ComissionProfile_ViewDepartmentTab] 
 @Type int = 2,
 @ServiceId int = 4,
  @DocId int = 0
AS

BEGIN
		 --SP_HELP TaxServices
 declare @masterTable varchar(100)
  declare @sql nvarchar(max)
  declare @tmpMasterDeptTbl as table(rowID INT IDENTITY, DeptId Int)
IF(@Type = 1) -- IP
BEGIN 
 
 -- select * from BillCommissionDepartment
	select @masterTable = MasterTable from IPBService a where a.Deleted = 0  and Id = @ServiceId
	 
	 set @sql = N' select a.departmentId as id  from _masterTable_ a '+
			  ' left join Department b on a.Departmentid = b.ID  ' +
			  '  where a.DepartmentId is not null group by a.departmentId,b.Name  '

				set @sql = REPLACE(@sql,'_masterTable_', @masterTable)
				print (@sql)

				insert into @tmpMasterDeptTbl EXEC (@sql)  

				select c.Name as Name,a.DeptId as DeptId
				,Case when b.ServiceId != '' then '1' else '0' end as isDept
				,@ServiceId as ServiceID , @Type as IPOPType
				, isnull(b.Percentage,0) Percentage , isnull(b.Amount,0) Amount
				 from @tmpMasterDeptTbl a
				left join BillCommissionDepartment b on b.DepartmentId = a.DeptId and b.IPOPType = @Type and b.ServiceId = @ServiceId  and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
				left join Department c on c.ID = a.DeptId 
	 
	 


END 

IF(@Type = 2) -- OP
BEGIN 
 	select @masterTable = MasterTable from OPBService a where a.Deleted = 0  and Id = @ServiceId
	 
	 set @sql = N' select a.departmentId as id  from _masterTable_ a '+
			  ' left join Department b on a.Departmentid = b.ID  ' +
			  '  where a.DepartmentId is not null group by a.departmentId,b.Name  '

				set @sql = REPLACE(@sql,'_masterTable_', @masterTable)
				print (@sql)

				insert into @tmpMasterDeptTbl EXEC (@sql)  

				select c.Name as Name,a.DeptId as DeptId
				,Case when b.ServiceId != '' then '1' else '0' end as isDept
				,@ServiceId as ServiceID , @Type as IPOPType
				, isnull(b.Percentage,0) Percentage , isnull(b.Amount,0) Amount
				 from @tmpMasterDeptTbl a
				left join BillCommissionDepartment b on b.DepartmentId = a.DeptId and b.IPOPType = @Type and b.ServiceId = @ServiceId  and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
				left join Department c on c.ID = a.DeptId 
	                                        

END 
 
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	
[ComissionProfile_ViewServiceTab] 
 */
 
CREATE PROCEDURE [ITADMIN].[ComissionProfile_SaveServiceTab]
@ErrorMessage as NVARCHAR(max) OUT,
@serviceheader as xml = '<DocumentElement> <serviceheaderXML> <IPOPType>1</IPOPType> <IpAddress>121321</IpAddress> <OperatorId>11503</OperatorId> <DocId>11584</DocId> </serviceheaderXML> </DocumentElement>',
@servicedetails as xml = '<DocumentElement> <servicedetailsXML> <ServiceId>18</ServiceId> <Percentage>1</Percentage> <Amount>11</Amount> </servicedetailsXML> <servicedetailsXML> <ServiceId>2</ServiceId> <Percentage>2</Percentage> <Amount>22</Amount> </servicedetailsXML> </DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @serviceheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,IpAddress
,DocId
,OperatorId
into #tmpserviceheaderCP

from openxml(@handle, '/DocumentElement/serviceheaderXML',2) with
(
IPOPType  varchar(250)
,IpAddress varchar(250)
,DocId varchar(250)
,OperatorId varchar(250)

)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @servicedetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
ServiceId
,Percentage
,Amount
into #tmpservicedetailsCP

from openxml(@handle, '/DocumentElement/servicedetailsXML',2) with
(
ServiceId  varchar(250)
,Percentage  varchar(250)
,Amount varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)
declare @IpAdd as varchar(250)
declare @rowid int
declare @serviceid int
declare @docid int
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		 
--  [ITADMIN].[ComissionProfile_SaveServiceTab] ''
 select @Type = IPOPType, @operatorID = OperatorID,@IpAdd = IpAddress,@docid = DocId from #tmpserviceheaderCP
 
  
 insert into OLDBillCommissionServices (DoctorId,Percentage,Amount,ServiceId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditDateTime)
 select DoctorId,Percentage,Amount,ServiceId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,GETDATE() from BillCommissionServices where IPOPType = @Type and DoctorId = @docid 

 delete from BillCommissionServices where IPOPType = @Type and DoctorId = @docid
 

 insert into BillCommissionServices 
		(DoctorId,Percentage,Amount,ServiceId,StartDateTime,OperatorId,IPOPType,IPAddress)
 select @docid,Percentage,Amount,ServiceId,getdate(),@operatorID,@Type,@IpAdd 
 from #tmpservicedetailsCP

 
	 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Comission Profile Service Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpserviceheaderCP
drop table #tmpservicedetailsCP




END




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveItemTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	
[ComissionProfile_ViewServiceTab] 
 */
 
 
CREATE PROCEDURE [ITADMIN].[ComissionProfile_SaveItemTab]
@ErrorMessage as NVARCHAR(max) OUT,
@itemsheader as xml = '<DocumentElement> <itemheaderXML> <IPOPType>2</IPOPType> <OperatorId>11503</OperatorId> <ServiceId>3</ServiceId> <DeptId>13</DeptId> <DocId>3128</DocId> <IpAddress>::1</IpAddress> </itemheaderXML> </DocumentElement>'
,@itemsdetails as xml ='<DocumentElement> <itemdetailsXML> <ItemId>1798</ItemId> <Percentage>111</Percentage> <Amount>22</Amount> </itemdetailsXML> <itemdetailsXML> <ItemId>1799</ItemId> <Percentage>33</Percentage> <Amount>2</Amount> </itemdetailsXML> </DocumentElement>'
 AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @itemsheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,OperatorId
,ServiceId
,DeptId
,IpAddress
,DocId
into #tmpitemtabheaderCP

from openxml(@handle, '/DocumentElement/itemheaderXML',2) with
(
IPOPType  varchar(250)
,OperatorId varchar(250)
,ServiceId varchar(250)
,DeptId varchar(250)
,IpAddress varchar(250)
,DocId varchar(250)
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @itemsdetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
ItemId
,Percentage
,Amount
into #tmpitemtabdetailsCP

from openxml(@handle, '/DocumentElement/itemdetailsXML',2) with
(
ItemId  varchar(250)
,Percentage  varchar(250)
,Amount varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)
declare @rowid int
declare @serviceid int
declare @deptid int
declare @itemid int
declare @docid int
declare @IpAdd as varchar(250)
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
 
-- [ITADMIN].[ComissionProfile_SaveItemTab] ''
 select @Type = IPOPType, @operatorID = OperatorID, @serviceid = ServiceId,@deptid = DeptId,@IpAdd = IpAddress,@docid = DocId   from #tmpitemtabheaderCP


  insert into OLDBillCommissionItem ( DoctorId,Percentage,Amount,ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditDateTime)
 select DoctorId,Percentage,Amount,ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,GETDATE() from BillCommissionItem where IPOPType = @Type and DoctorId = @docid 
 
 delete from BillCommissionItem where IPOPType = @Type  and DoctorId = @docid 

 insert into BillCommissionItem 
			(DoctorId,Percentage,Amount,ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType)
 	select  @docid,Percentage,Amount,@serviceid,@deptid,ItemId,GETDATE(),@operatorID,@IpAdd,@Type
	from	#tmpitemtabdetailsCP

 
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpitemtabheaderCP
drop table #tmpitemtabdetailsCP

END




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_SaveDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





  /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	
[ComissionProfile_ViewServiceTab] 
 */
 
CREATE PROCEDURE [ITADMIN].[ComissionProfile_SaveDepartmentTab]
@ErrorMessage as NVARCHAR(max) OUT,
@departmentheader as xml ='<DocumentElement> <departmentheaderXML> <IPOPType>2</IPOPType> <OperatorId>11503</OperatorId> <ServiceId>3</ServiceId> <DocId>2687</DocId> <IpAddress>::1</IpAddress> </departmentheaderXML> </DocumentElement>'
,@departmentdetails as xml = '<DocumentElement> <departmentdetailsXML> <DeptId>123</DeptId> <Percentage>11</Percentage> <Amount>222</Amount> </departmentdetailsXML> <departmentdetailsXML> <DeptId>13</DeptId> <Percentage>333</Percentage> <Amount>444</Amount> </departmentdetailsXML> </DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @departmentheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,OperatorId
,ServiceId
,DocId
,IpAddress
into #tmpdepartmentheaderCP

from openxml(@handle, '/DocumentElement/departmentheaderXML',2) with
(
IPOPType  varchar(250)
,OperatorId varchar(250)
,ServiceId varchar(250)
,DocId varchar(250)
,IpAddress varchar(250)
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @departmentdetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
DeptId
,Percentage
,Amount
into #tmpdepartmentdetailsCP

from openxml(@handle, '/DocumentElement/departmentdetailsXML',2) with
(
DeptId  varchar(250)
,Percentage  varchar(250)
,Amount  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)
declare @rowid int
declare @serviceid int
declare @deptid int
declare @docid int
declare @IpAdd as varchar(250)
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		 
 
 select @Type = IPOPType, @operatorID = OperatorID,@serviceid = ServiceId,@docid = DocId,@IpAdd = IpAddress  from #tmpdepartmentheaderCP

 
  insert into OLDBillCommissionDepartment (DoctorId,Percentage,Amount,ServiceId,DepartmentId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditDateTime)
 select DoctorId,Percentage,Amount,ServiceId,DepartmentId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,getdate() from BillCommissionDepartment where IPOPType = @Type  and DoctorId = @docid
 
  delete from BillCommissionDepartment where IPOPType = @Type  and DoctorId = @docid

  insert into BillCommissionDepartment
          (DoctorId,Percentage,Amount,ServiceId,DepartmentId,StartDateTime,OperatorId,IPOPType,IPAddress)
	select @docid,Percentage,Amount,@serviceid,DeptId,GETDATE(),@operatorID,@Type,@IpAdd  
		from #tmpdepartmentdetailsCP

 
	 --  [ITADMIN].[ComissionProfile_SaveDepartmentTab] ''
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpdepartmentheaderCP
drop table #tmpdepartmentdetailsCP




END




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListServices]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	

 */
CREATE PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListServices] 
 
 @DocId int = 3128
AS

BEGIN
		 
  -- IP
 

	 select 'IP' as IPOPType 
			,a.ServiceName as ServiceName 
			, isnull(b.Percentage,0) Percentage 
			, isnull(b.Amount,0) Amount
	 from IPBService a 
	 left join dbo.BillCommissionServices b on a.Id = b.ServiceId and b.IPOPType = 1 and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
	 where a.Deleted = 0 and b.ServiceId is not null  
 
 union all
  -- OP  [ITADMIN].[ComissionProfile_perDoctorListServices] 

	 select 'OP' as IPOPType ,a.Name as ServiceName , isnull(b.Percentage,0) Percentage , isnull(b.Amount,0) Amount
	 from OPBService a 
	 left join dbo.BillCommissionServices b on a.Id = b.ServiceId and b.IPOPType = 2    and (isnull(@DocId,0) = 0  OR b.DoctorId = @DocId )
	 where a.Deleted = 0 and b.ServiceId is not null order by  IPOPType, ServiceName

 
 

  
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListItems]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	

 */
create PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListItems] 
 
 @DocId int = 3128
AS

BEGIN
	
	declare @rowIDIP int	 

	declare @IPServiceId int
	declare @masterTableIP varchar(100)	 
	declare @masterTableOP varchar(100)	 
	declare @sqlIP nvarchar(max)
	declare @tmpMasterDeptTbl as table(rowID INT IDENTITY, DeptId Int) 

  	declare @rowIDOP int	
	
	
	 
  -- Mejo madugo ito :))


 
  select * from BillCommissionItem
  
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_perDoctorListDept]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	

 */
CREATE PROCEDURE [ITADMIN].[ComissionProfile_perDoctorListDept] 
 
 @DocId int = 3128
AS

BEGIN
	
	declare @rowIDIP int	 

	declare @IPServiceId int
	declare @masterTableIP varchar(100)	 
	declare @masterTableOP varchar(100)	 
	declare @sqlIP nvarchar(max)
	declare @tmpMasterDeptTbl as table(rowID INT IDENTITY, DeptId Int) 

  	declare @rowIDOP int	
	
	
	 
  -- IP


  select 
  case when a.IPOPType = 1 then 'IP' else 'OP' end as IPOPType
  ,case when a.IPOPType = 1 then b.ServiceName else c.NAME end as ServiceName
  ,d.Name as DeptName
  , isnull(a.Percentage,0) Percentage 
	, isnull(a.Amount,0) Amount
   from BillCommissionDepartment a
  left join IPBService b on a.ServiceId = b.id and a.IPOPType = 1
  left join OPBService c on a.ServiceId = c.id and a.IPOPType = 2
  left join Department d on a.DepartmentId = d.ID
  where a.DoctorId = @DocId 
  order by IPOPType,d.Name,ServiceName
  
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[ComissionProfile_ItemTabList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




  /*
 Name	Schema	Create Date	Policy Health State
BillCommissionDepartment	dbo	7/29/2017 11:39 AM	
BillCommissionItem	dbo	7/29/2017 11:39 AM	
BillCommissionServices	dbo	7/29/2017 11:39 AM	
OldBillCommissionDepartment	dbo	7/29/2017 11:39 AM	
OldBillCommissionItem	dbo	7/29/2017 11:39 AM	
OldBillCommissionServices	dbo	7/29/2017 11:39 AM	
[ComissionProfile_ViewServiceTab] 
 */
 
CREATE PROCEDURE [ITADMIN].[ComissionProfile_ItemTabList] 
 @Type int = 1,
 
 @Serviceid int = 2,
 @Deptid int = 3,
  @DocId int = 0
AS

BEGIN
		 --SP_HELP TaxServices
 
 declare @masterTable varchar(max)
 declare @sql nvarchar(max)

IF(@Type = 1) -- IP
BEGIN 
 --select * from TaxItem  
 --select * from BillCommissionItem 
	select @masterTable = RTRIM(LTRIM(MasterTable))   from IPBService where Deleted = 0 AND ID = @ServiceId
 


 	IF  LOWER(@masterTable) = 'item' -- @ServiceId = 5
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName
			, isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount
			FROM dbo.PharmacyItem a 
			left join  BillCommissionItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) in ( 'doctor','employee')
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName
			, isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount
			FROM dbo.employee a 
				left join  BillCommissionItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )
			WHERE   a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC

		END
		ELSE IF LOWER(@masterTable)  in ( 'bedtype','otno') 
		BEGIN
 
			set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName , isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount  ' + 
			' from  @masterTable  a  '+
			 ' left join  BillCommissionItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type  and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )  '+
			' where a.Deleted = 0   ' 
			
				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				set @sql =  REPLACE(@sql,'@DocId',@DocId)
				print (@sql)
				EXEC (@sql)

		END
		ELSE
		BEGIN
 --  [ITADMIN].[VatProfile_VatItemTabList] 
							set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName, isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount ' + 
							' from  @masterTable  a  '+
							' left join Department b on a.Departmentid = b.ID  '+
							' left join  BillCommissionItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )  '+
							' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

								set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
								set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
								set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
								set @sql =  REPLACE(@sql,'@Type',@Type)
								set @sql =  REPLACE(@sql,'@DocId',@DocId)
								print (@sql)
								 EXEC (@sql)
			END
END 

IF(@Type = 2) -- OP
BEGIN 
 

     select @masterTable = RTRIM(LTRIM(MasterTable))   from OPBService where Deleted = 0 AND ID = @ServiceId

 IF LOWER(@masterTable) = 'item' --@ServiceId = 11
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName
			, isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount
			FROM dbo.PharmacyItem a 
			left join  BillCommissionItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) = 'doctor'
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName
			, isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount
			FROM dbo.Doctor a 
				left join  BillCommissionItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId )
			
			WHERE  
				a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC
		END
		ELSE
		BEGIN

 			set @sql = N' select  Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName , isnull(c.Percentage,0) Percentage , isnull(c.Amount,0) Amount ' + 
			' from  @masterTable  a  '+
			' left join Department b on a.Departmentid = b.ID  '+
			' left join  BillCommissionItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type   and (isnull(@DocId,0) = 0  OR c.DoctorId = @DocId ) '+
			' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				set @sql =  REPLACE(@sql,'@DocId',@DocId)
				print (@sql)
				EXEC (@sql)
		END
END 
 
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewVat]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewVat] 
 
AS

BEGIN
		 --SP_HELP tax
		SELECT     
Id
,TaxName
,Percentage
,CreatedDateTime
,isnull(convert(varchar(11),StartDateTime, 113) ,'01-Jan-'+ cast(year(getdate()) as varchar(max) ) ) StartDateTime
,convert(varchar(11),EndDateTime, 113) EndDateTime
,OperatorId
,Deleted
,CreatedIPAddress
,case when GrossNet = 1 then 'Gross' else 'Net' end as GrossNet

	 	FROM         dbo.tax
		 WHERE      deleted = 0 order by id desc
	 	 
	

END

 


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewTaxServices]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewTaxServices] 
 
AS

BEGIN
		 --SP_HELP TaxServices
SELECT     
'1' as ServiceId,
'' as StartDateTime,
'' as OperatorId,
'' as IPAddress,
'' as IPOPType


	--	FROM TaxServices
	--WHERE deleted = 0   
	--	ORDER BY name
/*
select * from OPBService
select * from IPBService
*/
END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewServiceTab] 
 @Type int = 1,
 @TaxId int = 1
AS

BEGIN
		 --SP_HELP TaxServices
 

IF(@Type = 1) -- IP
BEGIN 
	select a.ServiceName as Name--,'0' as isService 
	,Case when b.ServiceId != '' then '1' else '0' end as isService
	, a.Id as ServiceId,1 as IPOPType
	,isnull(b.Percentage,0) as Percentage
	
	 from IPBService a 
	left join TaxServices b on a.Id = b.ServiceId and b.IPOPType = 1 
	where a.Deleted = 0
END 

IF(@Type = 2) -- OP
BEGIN 
   
	select a.Name as Name--,'0' as isService 
	,Case when b.ServiceId != '' then '1' else '0' end as isService
	, a.Id as ServiceId,2 as IPOPType
		,isnull(b.Percentage,0) as Percentage
		 from OPBService a 
	left join TaxServices b on a.Id = b.ServiceId and b.IPOPType = 2 
	where a.Deleted = 0



END 
 
END

 


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewServiceListByType]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewServiceListByType] 
 @Type int = 2 
 
AS

BEGIN
		 --SP_HELP TaxServices
 
 
 
IF(@Type = 1) -- IP
BEGIN 
	select ServiceName as name,ServiceName as text,id from IPBService where Deleted = 0  and Rtrim(Ltrim(LOWER(MasterTable))) not in ('nomaster' )  order by ServiceName
	-- not in ('bedtype',  'nomaster' , 'doctor', 'employee','otno','cssitem','item')
	 
END 

IF(@Type = 2) -- OP
BEGIN 
      select name,name as text ,id from OPBService where Deleted = 0     and  Rtrim(Ltrim(LOWER(MasterTable))) not in ( 'nomaster' ) order by name 
END 
 
END

 



GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewDeptListByService]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewDeptListByService] 
 @Type int =1
 ,@ServiceId int = 1
 
AS

BEGIN

 
 declare @masterTable varchar(max)
 declare @sql nvarchar(max)

IF(@Type = 1) -- IP
BEGIN 
			select @masterTable = RTRIM(LTRIM(MasterTable))   from IPBService where Deleted = 0 AND ID = @ServiceId
 
 	IF  LOWER(@masterTable) in ( 'item','cssitem' )  
		BEGIN
			 SELECT DISTINCT a.ID as id ,A.Name as name, A.Name as text 
				 FROM DEPARTMENT A WHERE recordid = 'm' and deleted = 0 

		END
		ELSE IF LOWER(@masterTable) in ( 'doctor','employee','bedtype','otno'  )
			BEGIN
                 SELECT DISTINCT a.ID as id ,A.Name as name, A.Name as text 
				 FROM DEPARTMENT A WHERE recordid = 'm' and deleted = 0
			END 
				 ELSE
				 BEGIN

				set @sql = N'select a.departmentId as id ,b.Name as name, b.Name as text from '+@masterTable+'  a '+
				' left join Department b on a.Departmentid = b.ID' +
				' where b.Name is not null group by a.departmentId,b.Name '
			     print (@sql)
				EXEC (@sql)
				 END

END 

IF(@Type = 2) -- OP
BEGIN 
       select @masterTable = RTRIM(LTRIM(MasterTable))   from OPBService where Deleted = 0 AND ID = @ServiceId
 
			IF LOWER(@masterTable) in ( 'doctor','employee','item' )
			BEGIN
                 SELECT DISTINCT a.ID as id ,A.Name as name, A.Name as text 
				 FROM DEPARTMENT A WHERE recordid = 'm' and deleted = 0
			END 
			ELSE
			BEGIN
				set @sql = N'select a.departmentId as id ,b.Name as name, b.Name as text from '+@masterTable+'  a '+
				  ' left join Department b on a.Departmentid = b.ID' +
				   ' where b.Name is not null  group by a.departmentId,b.Name '
				print (@sql)
				EXEC (@sql)
			END
		                                        
	
END 
 


 


END






GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_ViewDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_ViewDepartmentTab] 
 @Type int = 1,
 @ServiceId int = 20
AS

BEGIN
		 --SP_HELP TaxServices
 declare @masterTable varchar(100)
  declare @sql nvarchar(max)
  declare @tmpMasterDeptTbl as table(rowID INT IDENTITY, DeptId Int)
IF(@Type = 1) -- IP
BEGIN 
 
 
	select @masterTable = MasterTable from IPBService a where a.Deleted = 0  and Id = @ServiceId
	 
	 set @sql = N' select a.departmentId as id  from _masterTable_ a '+
			  ' left join Department b on a.Departmentid = b.ID  ' +
			  '  where a.DepartmentId is not null group by a.departmentId,b.Name  '

				set @sql = REPLACE(@sql,'_masterTable_', @masterTable)
				print (@sql)

				insert into @tmpMasterDeptTbl EXEC (@sql)  

				select c.Name as Name,a.DeptId as DeptId
				,Case when b.ServiceId != '' then '1' else '0' end as isDept
				,@ServiceId as ServiceID , @Type as IPOPType
				,ISNULL(b.Percentage,0) as Percentage
				 from @tmpMasterDeptTbl a
				left join TaxDepartment b on b.DepartmentId = a.DeptId and b.IPOPType = @Type and b.ServiceId = @ServiceId
				left join Department c on c.ID = a.DeptId 
	 
	  --  [ITADMIN].[VatProfile_ViewDepartmentTab] 


END 

IF(@Type = 2) -- OP
BEGIN 
 	select @masterTable = MasterTable from OPBService a where a.Deleted = 0  and Id = @ServiceId
	 
	 set @sql = N' select a.departmentId as id  from _masterTable_ a '+
			  ' left join Department b on a.Departmentid = b.ID  ' +
			  '  where a.DepartmentId is not null group by a.departmentId,b.Name  '

				set @sql = REPLACE(@sql,'_masterTable_', @masterTable)
				print (@sql)

				insert into @tmpMasterDeptTbl EXEC (@sql)  

				select c.Name as Name,a.DeptId as DeptId
				,Case when b.ServiceId != '' then '1' else '0' end as isDept
				,@ServiceId as ServiceID , @Type as IPOPType
				,ISNULL(b.Percentage,0) as Percentage
				 from @tmpMasterDeptTbl a
				left join TaxDepartment b on b.DepartmentId = a.DeptId and b.IPOPType = @Type and b.ServiceId = @ServiceId
				left join Department c on c.ID = a.DeptId 
	 
	  --  [ITADMIN].[VatProfile_ViewDepartmentTab]                                  

	                                           

END 
 
END

 


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatProfile_ViewDeptListByService]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[VatProfile_VatProfile_ViewDeptListByService] 
 @Type int = 2 
 ,@ServiceId int = 18  
 
AS

BEGIN

 
 declare @masterTable varchar(max)
 declare @sql nvarchar(max)

IF(@Type = 1) -- IP
BEGIN 
	select @masterTable = MasterTable   from IPBService where Deleted = 0 AND ID = @ServiceId
 
	set @sql = N'select a.departmentId as id ,b.Name as name, b.Name as text from '+@masterTable+'  a '+
			  ' left join Department b on a.Departmentid = b.ID' +
			   ' group by a.departmentId,b.Name '
			     print (@sql)
	 EXEC (@sql)
END 

IF(@Type = 2) -- OP
BEGIN 
       select @masterTable = MasterTable   from OPBService where Deleted = 0 AND ID = @ServiceId
 
 select @masterTable
	set @sql = N'select a.departmentId as id ,b.Name as name, b.Name as text from '+@masterTable+'  a '+
			  ' left join Department b on a.Departmentid = b.ID' +
			   ' group by a.departmentId,b.Name '
			   print (@sql)
	 EXEC (@sql)
END 
 
END






GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatNewPrice]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[VatProfile_VatNewPrice] 
 
AS

BEGIN
		 --SP_HELP tax

		 If exists(select * FROM         tax WHERE      deleted = 0)
		 begin

		SELECT top 1 Id as row,   
			'' as Id
			,'' as TaxName
			,Percentage
			,CreatedDateTime
			,convert(varchar(11),StartDateTime, 113) StartDateTime
			,EndDateTime
			,OperatorId
			,Deleted
			,CreatedIPAddress
			FROM         tax
			WHERE      deleted = 0 
			order by Id desc
		  
	 	 
		 end
		 else
		 begin

				SELECT  '' as row,   
				'' as Id
				,'' as TaxName
				, '0.00' as Percentage
				, '' as CreatedDateTime
				,'01 Jan '+ cast(year(getdate()) as varchar(max) )  StartDateTime
				, '' as EndDateTime
				, '' as OperatorId
				, '0' as Deleted
				, '' as CreatedIPAddress

		 end
	 

END

 




GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_VatItemTabList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[VatProfile_VatItemTabList] 
 @Type int = 1,
 @TaxId int = 0,
 @Serviceid int = 1,
 @Deptid int = 30
AS

BEGIN
		 --SP_HELP TaxServices
 
 declare @masterTable varchar(max)
 declare @sql nvarchar(max)

IF(@Type = 1) -- IP
BEGIN 
--select * from IPBService where deleted = 0
--select * from department where deleted = 0
	select @masterTable = RTRIM(LTRIM(MasterTable))   from IPBService where Deleted = 0 AND ID = @ServiceId
 


 	IF  LOWER(@masterTable) = 'item' -- @ServiceId = 5
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.PharmacyItem a 
			left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) in ( 'doctor','employee')
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.employee a 
				left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE   a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC

		END
		ELSE IF LOWER(@masterTable)  in ( 'bedtype','otno') 
		BEGIN
 
			set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
			' from  @masterTable  a  '+
			 ' left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
			' where a.Deleted = 0   ' 
			
				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				print (@sql)
				EXEC (@sql)

		END
		ELSE IF LOWER(@masterTable)  in ( 'cssitem') 
		BEGIN
					set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.ItemCode +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
					' from  @masterTable  a  '+
					' left join  TaxItem c on a.Id = c.ItemId   and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
					' where a.Deleted = 0   ' 

					set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
					set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
					set @sql =  REPLACE(@sql,'@Type',@Type)
					print (@sql)
					EXEC (@sql)
		END
		ELSE
		BEGIN
 --  [ITADMIN].[VatProfile_VatItemTabList] 
							set @sql = N' select Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
							' from  @masterTable  a  '+
							' left join Department b on a.Departmentid = b.ID  '+
							' left join  TaxItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
							' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

								set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
								set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
								set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
								set @sql =  REPLACE(@sql,'@Type',@Type)
								print (@sql)
								 EXEC (@sql)
			END
END 

IF(@Type = 2) -- OP
BEGIN 
 

     select @masterTable = RTRIM(LTRIM(MasterTable))   from OPBService where Deleted = 0 AND ID = @ServiceId

 IF LOWER(@masterTable) = 'item' --@ServiceId = 11
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.ItemCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.PharmacyItem a 
			left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			WHERE a.deleted = 0 
			ORDER BY NAME
		END
		ELSE IF LOWER(@masterTable) = 'doctor'
		BEGIN
			select  Case when c.ItemId != '' then '1' else '0' end as isCheck, a.Id as itemId , UPPER(a.EmpCode) +' -' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage 
			FROM dbo.Doctor a 
				left join  TaxItem c on a.Id = c.ItemId and   c.DepartmentId = @Deptid and c.ServiceId = @Serviceid and c.IPOPType = @Type 
			
			WHERE  
				a.Deleted = 0 and a.DepartmentID = @Deptid
			ORDER BY a.empcode ASC
		END
		ELSE
		BEGIN

 			set @sql = N' select  Case when c.ItemId != '''' then ''1'' else ''0'' end as isCheck, a.Id as itemId , a.Code +'' -'' + a.Name  as itemName,isnull(c.Percentage,0) as Percentage  ' + 
			' from  @masterTable  a  '+
			' left join Department b on a.Departmentid = b.ID  '+
			' left join  TaxItem c on a.Id = c.ItemId and a.Departmentid = c.DepartmentId and c.ServiceId = @Serviceid and c.IPOPType = @Type '+
			' where a.Deleted = 0 and a.DepartmentID = @Deptid ' 

				set @sql =  REPLACE(@sql,'@masterTable',@masterTable)
				set @sql =  REPLACE(@sql,'@Deptid',@Deptid)
				set @sql =  REPLACE(@sql,'@Serviceid',@Serviceid)
				set @sql =  REPLACE(@sql,'@Type',@Type)
				print (@sql)
				EXEC (@sql)
		END
END 
 
END

 


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveServiceTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_SaveServiceTab]
@ErrorMessage as NVARCHAR(max) OUT,
@serviceheader as xml = '<DocumentElement> <serviceheaderXML> <IPOPType>2</IPOPType> <OperatorId>11503</OperatorId> </serviceheaderXML> </DocumentElement>' ,
@servicedetails as xml = '<DocumentElement> <servicedetailsXML> <ServiceId>2</ServiceId> </servicedetailsXML> <servicedetailsXML> <ServiceId>14</ServiceId> </servicedetailsXML> </DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @serviceheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,OperatorId
,IpAddress
into #tmpserviceheader

from openxml(@handle, '/DocumentElement/serviceheaderXML',2) with
(
IPOPType  varchar(250)
,OperatorId varchar(250)
,IpAddress varchar(250)

)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @servicedetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
ServiceId
,Percentage
into #tmpservicedetails

from openxml(@handle, '/DocumentElement/servicedetailsXML',2) with
(
ServiceId  varchar(250)
,Percentage  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)

declare @rowid int
declare @serviceid int
declare @ipadd as varchar(250)
declare @percentage as varchar(250)
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		 
-- [ITADMIN].[VatProfile_SaveServiceTab] ''
 select @Type = IPOPType, @operatorID = OperatorID,@ipadd = IpAddress from #tmpserviceheader

 insert into OLDTaxServices (ServiceId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditIPAddress,EditDateTime,Percentage)
 select ServiceId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,@ipadd,GETDATE(),Percentage from TaxServices where IPOPType = @Type  

 delete from TaxServices where IPOPType = @Type 

  WHILE EXISTS(select top 1 *  from #tmpservicedetails)  
        BEGIN
                select @rowid = RowId,@serviceid = serviceId,@percentage = Percentage  from #tmpservicedetails
              -- sp_help TaxServices
				insert into TaxServices (ServiceId,StartDateTime,OperatorId,IPOPType,IPAddress,Percentage)
				values (@serviceid,getdate(),@operatorID,@Type,@ipadd,@percentage)

                delete from #tmpservicedetails where RowId = @rowid
        END

	 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpserviceheader
drop table #tmpservicedetails




END


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveNewVat]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_SaveNewVat]
@ErrorMessage as NVARCHAR(max) OUT,
@savenewvat as xml ='<DocumentElement> <savenewvatXML> <Action>1</Action> <TaxName>3</TaxName> <GrossNet>1</GrossNet> <Percentage>14.00</Percentage> <StartDate>10-Aug-2017</StartDate> <IpAddress>::1</IpAddress> <OperatorId>11503</OperatorId> </savenewvatXML> </DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @savenewvat
SELECT 
IDENTITY(INT, 1,1) as TableID,
Action
,TaxName
,Percentage
,GrossNet
,StartDate
,IpAddress
,OperatorId
into #tmpsavenewvat

from openxml(@handle, '/DocumentElement/savenewvatXML',2) with
(
Action int
,TaxName  varchar(250)
,Percentage varchar(250)
,GrossNet varchar(250)
,StartDate varchar(250)
 ,IpAddress varchar(250)
 ,OperatorId  varchar(250)
)
exec sp_xml_removedocument @handle
 
 


declare @TaxName as varchar(250)
declare @percentage as varchar(250)
declare @startdate  as varchar(250)
declare @lastdate  as varchar(250)
declare @latestID  as varchar(250)
declare @GrossNet  as varchar(250)
declare @ipAdd  as varchar(250)
declare @operatorid  as varchar(250)
 
 

BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		 
select @TaxName = TaxName,@percentage = Percentage,@startdate = StartDate,@GrossNet = GrossNet,@ipAdd = IpAddress,@operatorid = OperatorId from #tmpsavenewvat

if exists(select * from dbo.tax where deleted = 0)
begin 
				
				
					insert into oldtax (TaxId,TaxName,Percentage,CreatedDatetime,StartDateTime,EndDateTime,OperatorId,Deleted,CreatedIPAddress,EditOperatorId,GrossNet,EditDateTime,EditIPAddress)
				select Id,TaxName,Percentage,CreatedDatetime,StartDateTime,@startdate,OperatorId,Deleted,CreatedIPAddress,@operatorid,GrossNet,GETDATE(),@ipAdd from dbo.tax

				 	delete  from dbo.tax

				insert dbo.Tax (TaxName,Percentage,CreatedDatetime,StartDateTime,EndDateTime,OperatorId,Deleted,CreatedIPAddress,GrossNet)
				values ( @TaxName,@percentage,GETDATE(),@startdate,null,@operatorid,0,@ipAdd,@GrossNet)

			--	 [ITADMIN].[VatProfile_SaveNewVat]''



				--sp_help tax
				/*
				select top 1 * into #tmpcurrentTax  from dbo.Tax  where deleted = 0 order by Id  desc
				select top 1 @latestID = Id,@lastdate = StartDateTime from dbo.Tax  where deleted = 0 order by Id  desc


				set @lastdate = @startdate-- convert(varchar(11), @lastdate, 113) +' 23:59:59.000' 
				insert into oldtax (TaxId,TaxName,Percentage,CreatedDatetime,StartDateTime,EndDateTime,OperatorId,Deleted,CreatedIPAddress,EditOperatorId,GrossNet)
				select Id,TaxName,Percentage,CreatedDatetime,StartDateTime,@lastdate,OperatorId,Deleted,CreatedIPAddress,@operatorid,GrossNet from #tmpcurrentTax
				update dbo.Tax set EndDateTime = @lastdate where id = @latestID

				insert dbo.Tax (TaxName,Percentage,CreatedDatetime,StartDateTime,EndDateTime,OperatorId,Deleted,CreatedIPAddress,GrossNet)
				values ( @TaxName,@percentage,GETDATE(),@startdate,null,@operatorid,0,@ipAdd,@GrossNet)
				
				drop table #tmpcurrentTax
				*/

end 
else
begin
select *  from #tmpsavenewvat

 declare @janDate smalldatetime 
 SET @janDate = convert(varchar(max), '01-Jan-'+ cast(year(getdate()) as varchar(max) ))


 
 insert into dbo.Tax (TaxName,Percentage,CreatedDatetime,StartDateTime,EndDateTime,OperatorId,Deleted,CreatedIPAddress,GrossNet)
select TaxName,Percentage,GETDATE(),@janDate,null ,@operatorid,0,@ipAdd,GrossNet from #tmpsavenewvat	
 
 

end

 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpsavenewvat




END


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveItemTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_SaveItemTab]
@ErrorMessage as NVARCHAR(max) OUT,
@itemsheader as xml = '<DocumentElement> <itemheaderXML> <IPOPType>1</IPOPType> <OperatorId>11503</OperatorId> <ServiceId>6</ServiceId> <DeptId>28</DeptId> </itemheaderXML> </DocumentElement>'
,@itemsdetails as xml ='<DocumentElement> <itemdetailsXML> <ItemId>801</ItemId> </itemdetailsXML> <itemdetailsXML> <ItemId>802</ItemId> </itemdetailsXML> </DocumentElement>'
 AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @itemsheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,OperatorId
,ServiceId
,DeptId
,IpAddress
into #tmpitemtabheader

from openxml(@handle, '/DocumentElement/itemheaderXML',2) with
(
IPOPType  varchar(250)
,OperatorId varchar(250)
,ServiceId varchar(250)
,DeptId varchar(250)
,IpAddress varchar(250)
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @itemsdetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
ItemId
,Percentage
into #tmpitemtabdetails

from openxml(@handle, '/DocumentElement/itemdetailsXML',2) with
(
ItemId  varchar(250)
,Percentage  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)
declare @rowid int
declare @serviceid int
declare @deptid int
declare @itemid int
 declare @ipadd as varchar(250)
declare @percentage as varchar(250)
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
-- [ITADMIN].[VatProfile_SaveItemTab] ''
 select @Type = IPOPType, @operatorID = OperatorID, @serviceid = ServiceId,@deptid = DeptId,@ipadd = IpAddress  from #tmpitemtabheader

 
  insert into OldTaxItem ( ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditIPAddress,EditDateTime,Percentage)
 select ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,@ipadd,GETDATE(),Percentage from TaxItem where IPOPType = @Type
 
  delete from TaxItem where IPOPType = @Type 
  WHILE EXISTS(select top 1 *  from #tmpitemtabdetails)  
        BEGIN
                select @rowid = RowId,@itemid = ItemId,@percentage = Percentage  from #tmpitemtabdetails
              
				insert into TaxItem (ServiceId,DepartmentId,ItemId,StartDateTime,OperatorId,IPAddress,IPOPType,Percentage)
				values (@serviceid,@deptid,@itemid,cast ( FLOOR( CAST(GETDATE() as FLOAT)) as datetime),@operatorID,@ipadd,@Type,@percentage)

                delete from #tmpitemtabdetails where RowId = @rowid
        END

 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpitemtabheader
drop table #tmpitemtabdetails

END


GO

/****** Object:  StoredProcedure [ITADMIN].[VatProfile_SaveDepartmentTab]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[VatProfile_SaveDepartmentTab]
@ErrorMessage as NVARCHAR(max) OUT,
@departmentheader as xml ='<DocumentElement> <departmentheaderXML> <IPOPType>1</IPOPType> <OperatorId>11503</OperatorId> <ServiceId>18</ServiceId> </departmentheaderXML> </DocumentElement>',
@departmentdetails as xml = '<DocumentElement></DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @departmentheader
SELECT 
IDENTITY(INT, 1,1) as RowId,
IPOPType
,OperatorId
,ServiceId
,IpAddress

into #tmpdepartmentheader

from openxml(@handle, '/DocumentElement/departmentheaderXML',2) with
(
IPOPType  varchar(250)
,OperatorId varchar(250)
,ServiceId varchar(250)
,IpAddress varchar(250)
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @departmentdetails
SELECT 
IDENTITY(INT, 1,1) as RowId,
DeptId
,Percentage
into #tmpdepartmentdetails

from openxml(@handle, '/DocumentElement/departmentdetailsXML',2) with
(
DeptId  varchar(250)
,Percentage  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)
declare @operatorID as varchar(250)
declare @rowid int
declare @serviceid int
declare @deptid int
declare @ipadd as varchar(250)
declare @percentage as varchar(250)
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		 
 
 select @Type = IPOPType, @operatorID = OperatorID,@serviceid = ServiceId,@ipadd = IpAddress from #tmpdepartmentheader

 insert into OLDTaxDepartment (ServiceId,DepartmentId,StartDateTime,OperatorId,IPAddress,IPOPType,EditOperatorId,EditDateTime,EditIPAddress,Percentage)
 select ServiceId,DepartmentId,StartDateTime,OperatorId,IPAddress,IPOPType,@operatorID,getdate(),@ipadd,Percentage from TaxDepartment where IPOPType = @Type  
 
 delete from TaxDepartment where IPOPType = @Type 

  WHILE EXISTS(select top 1 *  from #tmpdepartmentdetails)  
        BEGIN
                select @rowid = RowId,@deptid = DeptId,@percentage = Percentage  from #tmpdepartmentdetails
             
				insert into TaxDepartment (ServiceId,DepartmentId,StartDateTime,OperatorId,IPOPType,IPAddress,Percentage)
				values (@serviceid,@deptid,cast ( FLOOR( CAST(GETDATE() as FLOAT)) as datetime),@operatorID,@Type,@ipadd,@percentage)

                delete from #tmpdepartmentdetails where RowId = @rowid
        END
		 
	 --  [ITADMIN].[VatProfile_SaveDepartmentTab] ''
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpdepartmentheader
drop table #tmpdepartmentdetails




END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave_SCS_OLDOCT82017]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






create PROCEDURE [ITADMIN].[HealthCheckUpSave_SCS_OLDOCT82017]  
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlHealthCheckUpHeaderSave				as xml = '<DocumentElement> <HealthCheckUpHeaderSave> <Action>1</Action> <CompanyId>1</CompanyId> <Name>GENERAL CHECKUP-II</Name> <Deleted>0</Deleted> <Blocked>0</Blocked> <OperatorId>11503</OperatorId> <DepartmentId>54</DepartmentId> <Code>FMINT-0082</Code> <Amount>2080.00</Amount> <HealthCheckId>2</HealthCheckId> </HealthCheckUpHeaderSave> </DocumentElement>'
	,@xmlHealthInvestigationDetailsSave      as xml = '<DocumentElement> <HealthInvestigationDetailsSave> <Id>1</Id> <TestName>COMPLETE BLOOD COUNT (CBC)</TestName> <OriginalPrice>215</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> <HealthCheckUpId>2</HealthCheckUpId> <ServiceId>23</ServiceId> <stationid>28</stationid> <SampleId>26</SampleId> <Sample>0</Sample> <testid>0</testid> </HealthInvestigationDetailsSave> </DocumentElement>',
	@xmlHealthConsulDepart					as xml = '<DocumentElement> <ComputeConsultationDepartmentSave> <SNo>1</SNo> <HCUId>2</HCUId> <DepartmentId>35</DepartmentId> <OriginalPrice>660</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeConsultationDepartmentSave> </DocumentElement>' ,
	@xmlHealthCheckupProcedures				as xml = '<DocumentElement> <ComputeHealthProcedureSave> <SNo>1</SNo> <HCUId>2</HCUId> <ProcedureId>2065</ProcedureId> <OriginalPrice>660</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeHealthProcedureSave> </DocumentElement>' 

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckUpHeaderSave
SELECT 
Action
,Amount
,CompanyId
,Name
,Deleted
,Blocked
,OperatorId
,DepartmentId
,Code
,HealthCheckId
into #tmpHealthCheckUpHeaderSave


from openxml(@handle, '/DocumentElement/HealthCheckUpHeaderSave',2) with
(
Action int
,Amount decimal(18,2)
,CompanyId int
,Name nvarchar(250)
,Deleted int
,Blocked int
,OperatorId int
,DepartmentId int 
,Code nvarchar(250)
,HealthCheckId int
)
exec sp_xml_removedocument @handle
-----------------Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthInvestigationDetailsSave

select Id,TestName,OriginalPrice,Percentage,Price,HealthCheckUpId,ServiceId,stationid,Sequence,SampleId,testid
into #tmpHealthInvestigationDetailsSave

from openxml(@handle, '/DocumentElement/HealthInvestigationDetailsSave',2) with
(
Id int,TestName varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2),HealthCheckUpId int,ServiceId int,stationid int,Sequence int,SampleId int,testid int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------Consul Department----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthConsulDepart

select SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthConsultationDepartment

from openxml(@handle, '/DocumentElement/ComputeConsultationDepartmentSave',2) with
(
SNo int,HCUId int,DepartmentId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle


----------Health Procedure----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckupProcedures

select SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthCheckupProcedures

from openxml(@handle, '/DocumentElement/ComputeHealthProcedureSave',2) with
(
SNo int,HCUId int,ProcedureId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @HealthCheckId as int
 
declare @Amount as decimal(18,2)
declare @myId as int
declare @TestId int
declare @SampleId int
declare @OperatorId int
 

select @Action = Action,@OperatorId = OperatorId, @HealthCheckId  = HealthCheckId
from   #tmpHealthCheckUpHeaderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   -- [ITADMIN].[HealthCheckUpSave_SCS] ''
	 
	
 	if exists (select * from #tmpHealthCheckUpHeaderSave)
		Begin
		
						SELECT @Amount = Amount from #tmpHealthCheckUpHeaderSave

						UPDATE a
						 SET a.companyid = b.CompanyId
						 , a.NAME = b.Name
						 ,a.startdatetime = getdate()
						 ,a.Blocked= 0
						 ,a.DepartmentId= b.DepartmentId
						 ,a.Code= b.Code
						 ,a.deleted = 0
						 ,a.OperatorID = b.OperatorId
						from HEALTHCHECKUP a
						inner join #tmpHealthCheckUpHeaderSave b on a.id = b.HealthCheckId
						WHERE a.ID = @HealthCheckId

						delete from OP_P_HCU where HCUId = @HealthCheckId 
						INSERT INTO OP_P_HCU
						(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						SELECT  @HealthCheckId,CompanyId,GETDATE(),NULL,0,@Amount,OperatorId
						from #tmpHealthCheckUpHeaderSave

 

 				if exists (select * from #tmpHealthInvestigationDetailsSave)
					Begin
	 
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						INSERT INTO ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice
								(Id, TestName, OriginalPrice, Percentage, Price,HealthCheckupId,ServiceId,stationId,Sequence,SampleId)
						SELECT  Id,TestName,OriginalPrice,Percentage,Price,@HealthCheckId,ServiceId,stationId,Id as Sequence,SampleId
						FROM  #tmpHealthInvestigationDetailsSave

						UPDATE a
						set a.hcusampleid= b.SampleId
						from testsample a 
						LEFT JOIN #tmpHealthInvestigationDetailsSave b on a.testid = b.ServiceId
						where a.testid in (select ServiceId from #tmpHealthInvestigationDetailsSave)	

						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
 
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 

						insert into HealthCheckupDetail(hcuid,serviceid,stationid,sequence,SampleID,ItemPrice)
						select @HealthCheckId,ServiceId,stationId,Id,SampleId,Price FROM  #tmpHealthInvestigationDetailsSave
						--select * from HealthCheckupDetail where HCUID = 61
 
 
					end
					ELSE
					BEGIN
						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 
					END			
						
					---For ConsultDept
 					if exists (select * from #tmpHealthConsultationDepartment)
					Begin
							 

							DELETE ITADMIN_HCConsulDept_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HCConsulDept_FinalPrice
							(SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,DepartmentId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthConsultationDepartment

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					 
 
						insert into HealthCheckupConsultDept(HCUId, DepartmentId, Sequence, ItemPrice,  OperatorId)
						SELECT  @HealthCheckId,DepartmentId,SNo,Price,@OperatorId
						FROM  #tmpHealthConsultationDepartment

					End
					ELSE
					BEGIN

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					END

					---For HealthProcedure
 					if exists (select * from #tmpHealthCheckupProcedures)
					Begin
						 
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HealthProcedure_FinalPrice
								(SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,ProcedureId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
	
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
			 
							 insert into HealthCheckupProcedures(HCUId, ProcedureId, Sequence, ItemPrice,  OperatorId)
							 SELECT   @HealthCheckId,ProcedureId,SNo ,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
 
					End
					ELSE
					BEGIN
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
					END

End 
 

		 		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpHealthCheckUpHeaderSave
drop table #tmpHealthInvestigationDetailsSave	
drop table #tmpHealthConsultationDepartment	
drop table #tmpHealthCheckupProcedures	

set xact_abort OFF

END

/*
jerome jose july 30 2017
WIPRO based on profiler 
--LIST ALL DASHBOARD

 
select Id,Name from sample where deleted=0 order by name
go
select Id,Name,IsNull(Code,'')Code from company where deleted=0
go
select Id,Name,IsNUll(DeptCode,'') Code from Department where deleted=0 Order By DeptCode
go
select Id,Name,Code from Specialisation where deleted=0 Order By Code
go
select Id, Name,IsNull(Code,'')Code from Test where profile=0 and deleted=0 Order by Code
go
select Id, Name,IsNull(Code,'')Code from OtherProcedures where deleted=0 Order by Code
go 
select a.*,b.code,b.Name as Company from   a, Company b where a.companyid=b.id and a.deleted =0 ORDER BY a.NAME,b.name 
go





--CLICK GENERAL CHECKUP 1
select a.*,b.code,b.Name as Company from healthcheckup a, Company b where a.companyid=b.id and a.deleted =0 ORDER BY a.NAME,b.name 
go
select * from healthcheckup where id = 1
go
select price from OP_P_HCU where hcuid = 1
go
select a.serviceid as testid,IsNull(a.ItemPrice,0) ItemPrice,b.id as tid,b.name as testname,d.id as stnid,d.name as station,f.id as sid
,f.name as sample,a.sequence as seq from healthcheckupdetail a,test b,testlab c,station d,sample f where a.serviceid = b.id and a.hcuid =1 and c.Deleted =0 and b.id=c.testid and d.id=a.stationid and a.sampleid=f.id order by seq
go
select a.DepartmentId,IsNull(a.ItemPrice,0) ItemPrice,b.Name as Deptname,a.Sequence from HealthCheckupConsultDept a,Department b where a.DepartmentId = b.Id and a.hcuid =1 Order By Sequence
go
 select a.ProcedureId,IsNull(a.ItemPrice,0) ItemPrice,b.Code, b.Name, a.Sequence  from HealthCheckupProcedures a,OtherProcedures b where a.ProcedureId = b.Id and  a.hcuid =1 Order By Sequence
go


select * from HealthCheckupDetail


/*********SAVE****/
/*set implicit_transactions on 
go
select * from healthcheckup where id = 1
 
 UPDATE HEALTHCHECKUP SET companyid = 1, NAME = 'GENERAL CHECKUP-I',startdatetime = getdate(),Blocked= 0,DepartmentId= 54, Code= 'FMINT-0081' WHERE ID = 1
 
 Insert into oldop_p_hcu (HCUID,CompanyId, Price, Startdatetime, enddatetime, deleted,operatorid)  select HCUID,CompanyId, Price, Startdatetime, enddatetime, deleted, 139 from op_p_hcu  where HCUID=1
go
Delete from Op_P_HCU where HcuId= 1
go
 Insert into op_p_hcu(hcuid,companyid,startdatetime,enddatetime,deleted,price,operatorid) values(1,1,getdate(), null,0,1316, 139 )
go
Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = 1
go
delete from HealthCheckupDetail where HCUId = 1
go
 insert into HealthCheckupDetail(hcuid,serviceid,stationid,sequence,SampleID,ItemPrice) values(1,23,28,1,26,0)
go
update testsample set hcusampleid=26 where  testid=23
go
Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) select HCUId, DepartmentId, Sequence,  ItemPrice, 139, GetDate() from HealthCheckupConsultDept where HCUId = 1
go
delete from HealthCheckupConsultDept where HCUId = 1
go
 insert into HealthCheckupConsultDept(HCUId, DepartmentId, Sequence, ItemPrice,  OperatorId) values(1,120,1,0, 139)
go
Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) select ID, HCUId, ProcedureId, Sequence,  ItemPrice, 139, GetDate() from HealthCheckupProcedures where HCUId = 1
go
delete from HealthCheckupProcedures where HCUId = 1
go
 insert into HealthCheckupProcedures(HCUId, ProcedureId, Sequence, ItemPrice,  OperatorId) values(1,3268,1,0, 139)
go
IF @@TRANCOUNT > 0 COMMIT TRAN
go
*/
*/




GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBedClearanceSave_ForVacant]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [ITADMIN].[ReleaseBedClearanceSave_ForVacant]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlReleaseBedHeaderSave				as xml,
	@xmlReleaseBedDetaisSave				as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseBedHeaderSave
SELECT 
Action
,OperatorId
into #tmpReleaseBedHeaderSave


from openxml(@handle, '/DocumentElement/ReleaseBedHeaderSave',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseBedDetaisSave

select BedId,ROW_NUMBER() over(order by BedId) i
into #tmpReleaseBedDetaisSave

from openxml(@handle, '/DocumentElement/ReleaseBedDetaisSave',2) with
(
BedId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
Declare @OperatorId as int
declare @BedId as int

SELECT @Action = Action,@OperatorId = OperatorId
from   #tmpReleaseBedHeaderSave	

SELECT @BedId = BedId
from   #tmpReleaseBedDetaisSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			Declare @i as int
			---Release Employee from Vacation
			WHILE EXISTS (Select * From #tmpReleaseBedDetaisSave) 

				BEGIN 

					Select top 1 @i = i, @BedId = BedId from #tmpReleaseBedDetaisSave

						 Update bed set status=1 ,ForCleaning = 0 where id = @BedId and status = 9 and ForCleaning = 1

						-- Update cleanbedrelease set HouseKeepingApproveID = @OperatorId, HouseKeepingDateTime=getdate(), SafetyApproveID=@OperatorId,SafetyDateTime=getdate(),MaintenanceApprove=@OperatorId,MaintenanceDateTime=getdate(),FinalApproveID=@OperatorId,FinalDateTime=getdate()
						-- where bedid = @BedId and FinalApproveID is null and FinalDateTime is null

						Delete #tmpReleaseBedDetaisSave where i = @i
			   END
			
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Room Release for Vacancy Successfully'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReleaseBedHeaderSave
drop table #tmpReleaseBedDetaisSave	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBed_DashBoard_ForVacant]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 
create PROCEDURE [ITADMIN].[ReleaseBed_DashBoard_ForVacant]-- 0
AS

BEGIN  
			
	
SELECT     0 selected, a.Name as Room,  '' as IntimationDate, '' as  DischargeDateTime ,  '' as HouseKeepingDateTime, CASE WHEN a.IPID = 0 THEN 'FOR CLEANING' ELSE 'OCCUPIED' END AS FinalApproval 
            ,a.ID, '' as FinalDateTime
FROM         Bed AS a 
WHERE     a.Status= 9 and ForCleaning = 1 and a.deleted = 0 


END


GO

/****** Object:  StoredProcedure [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<jerome>
-- Create date: <aug 22 2017>
-- Description:	<Description,,this is for deletion of duplicate itemid in the ip tariff table based on update on logs >
-- =============================================
CREATE PROCEDURE [ITADMIN].[IPTARIFF_scriptForDeleteDuplicate]
 
AS
BEGIN
	-- rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush rush 
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    

	
/*
LEGEND --

uncomment the SQL EXECUTE


  select   distinct NAme     from LogsTempTariffTable where dateprocess > '2017-01-01' 
  and dateprocess < '2017-08-30' and Name like '%P_%' order by NAme desc

  select ID,StartDateTime from  P_1_1_Anaesthesia   where id in (
		Select id  from    P_1_1_Anaesthesia   where deleted = 0  group by id having count(id) > 1 
		)    order by id

  */



select  distinct NAme,IDENTITY(INT, 1,1) as rowID into #tmptablelogsjer from LogsTempTariffTable where dateprocess > '2017-08-01' 
--select  top 2  NAme,IDENTITY(INT, 1,1) as rowID into #tmptablelogsjer from LogsTempTariffTable where dateprocess > '2017-08-01' 
and dateprocess < '2017-08-30' and Name like '%P_%' order by NAme desc

----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE ----LIVE 
 select * from #tmptablelogsjer
declare @rowId int, @tablename varchar(max),@SQL nvarchar(max),@SQLNew1 nvarchar(max),@SQLNew2 nvarchar(max)
declare @NewTable as table (rowid INT IDENTITY(1, 1) ,ID int, StartDateTime DateTime )
 WHILE EXISTS(select top 1 *  from #tmptablelogsjer)  
        BEGIN
            select @rowId = rowID, @tablename = NAme  from #tmptablelogsjer
              
			set @SQL = N'	select ID,StartDateTime from  '+@tablename+'   where id in (
		Select id  from    '+@tablename+'      where deleted = 0  group by id having count(id) > 1 
		)   and year(StartDateTime) = 2015 order by id   '
			print @SQL	
			insert into @NewTable 	  EXEC sp_executesql @SQL 


							declare @newrowid int,@newId int ,@newStartDate datetime
							WHILE EXISTS(select top 1 *  from @NewTable)  
							BEGIN
									select @newrowid = rowid,@newId = ID,@newStartDate = StartDateTime from @NewTable 

									

									set @SQLNew1 = N' delete from  '+@tablename+' 
									where ID =  '+cast(@newId as varchar(max))+' and StartDateTime ='' ' +cast(@newStartDate as varchar(max))+''''
									 print(@SQLNew1);

									 --uncomment this  EXEC sp_executesql @SQLNew1 

									delete from @NewTable where rowid = @newrowid
							END

		---delete duplicate but keep 1 data ..same id at startdatetime
		set @SQLNew2 = N' with duplicates 
		as (select ID,StartDateTime ,ROW_NUMBER() over (partition by ID,StartDateTime order by (select 0 ) ) as Duplicate from  '+@tablename+'    )
		delete from duplicates where Duplicate > 1 '
		print(@SQLNew2);
									 --uncomment this  EXEC sp_executesql @SQLNew2 

		 
		  insert into [dbo].[LogsTempTariffTable_Deleted](Name,DateProcess)
			select @tablename,GETDATE()

				

				delete from @NewTable
                delete from #tmptablelogsjer where rowID = @rowId
        END
	 

		
drop table #tmptablelogsjer
 



 



END
GO

/****** Object:  StoredProcedure [ITADMIN].[DosageForm_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[DosageForm_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT
	,@xmlHeader as xml
	,@xmlDetail as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHeader
SELECT 
IDENTITY(INT, 1,1) as rowID,
Action
,OperatorId
into #tmpDosageFormHeader
from openxml(@handle, '/DocumentElement/xmlDosageForm',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDetail
SELECT 
 Name

,Deleted

,Id
into #tmpDosageFormDetail
from openxml(@handle, '/DocumentElement/xmlDetail',2) with
(
 Name varchar(250)

,Deleted int

,Id int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


declare @Action	  as int
declare @ID as int
declare @OperatorId as int
/*
select @Action = Action,@ID = Id,@OperatorId = OperatorId
from   #tmpDosageFormHeader	
*/
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
		
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
			--Update anaesthesia set name = 'GENERAL ANESTHESIA',costprice=15,code='FMORDZ9999',ModifiedBy = 1412,BillingType=2 ,ArabicName='"',ArabicCode='"' where id=85
			--sp_HElp anaesthesia
		/*	UPDATE a
			SET a.name = b.Name
				,a.ModifiedBy = b.OperatorId
				,a.BillingType = b.BillingType
				,a.costprice = b.costprice
				,a.ArabicName = '"'
				,a.ArabicCode = '"'		
			from Anaesthesia a
			INNER JOIN #tmpDosageFormHeader b
			ON b.Id = a.Id
			WHERE a.Id = @ID
			*/
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		 
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpDosageFormHeader


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlDosageForm xml, 
set @xmlDosageForm = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlDosageForm
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[DosageForm_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[DosageForm_Dashboard] 

AS

BEGIN
		 
 
		IF NOT EXISTS(SELECT * FROM sys.tables where name  = 'DosageFormMaster')
		 begin
			CREATE TABLE [dbo].[DosageFormMaster](
				[ID] [int] IDENTITY(1,1) NOT NULL,
				[Name] [varchar](100) NULL,
				[Description] [varchar](max) NULL,
				[Deleted] [int]  NULL,
				[DateCreated] [datetime] NULL
			) ON [MasterFile]  
		 end

		 IF NOT EXISTS(SELECT * FROM sys.tables where name  = 'DosageFormDetail')
		 begin
			 
			
				/*for active mapping*/
				CREATE TABLE [dbo].[DosageFormDetail](
					[DosageID] [int] IDENTITY(1,1) NOT NULL,
					[ItemId] [int] NOT NULL
				) ON [MasterFile]

				/*for old mapping history*/
				CREATE TABLE [dbo].[DosageFormDetailOld](
					[DosageID] [int] IDENTITY(1,1) NOT NULL,
					[ItemId] [int] NOT NULL
				) ON [MasterFile]


		 end
 	 
			Select row_number() over (order by Name asc) as slno,Id,Name,Description
			from dbo.DosageFormMaster where Deleted=0 order by Name asc
			--          [ITADMIN].[DosageForm_Dashboard] 
END


GO

/****** Object:  StoredProcedure [ITADMIN].[EMPLOYEE_FEATURE_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 10492,34
select * from employee where employeeid = '1726206'

select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/
create proc [ITADMIN].[EMPLOYEE_FEATURE_2017]
@UserID varchar(50) = '11503',
@ModuleID int = 1 ,
@FeatureID int  = 2325,
@FunctionID int = 2
 

as

Declare @tmpEMPLOYEE_FEATURE_2017 as TABLE (ID INT IDENTITY, ModuleID Int,UserID INT,FeatureID INT,featAccess INT,funcAccess INT)

insert into @tmpEMPLOYEE_FEATURE_2017 ( ModuleID,UserID,FeatureID,featAccess,funcAccess)
select @ModuleID as ModuleID,@UserID as UserID,@FeatureID as FeatureID ,isnull((
	
					select 
					c.FeatureID as ID
					 
					from hisglobal.HIS_MODULES a
					left join HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId
					inner join HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
					left join hisglobal.ACCESS_USERFEATURES d on a.ModuleID = d.Module_Id and b.FeatureId = d.Feature_Id and b.FeatureId = @FeatureID
					inner join HISGLOBAL.MENU_PARENT e on c.ParentID = e.MenuID--e.Id
					where USERID = @UserID and a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and d.Deleted = 0 and a.ModuleID = @ModuleID
					group by 
					c.FeatureID,
					c.Name ,
					e.Name ,
					c.MenuURL,
					c.ParentID,
					e.SequenceNo,
					e.MenuLevel,
					c.SequenceNo,
					c.Bar,
					c.FeatureID ,
					c.NewWindow,
					c.id,c.sequenceNo,
					a.VirtualPoolName,c.MenuType)
,0) as featAccess
,

isnull(
(select c.id  from HIS.HISGLOBAL.ACCESS_FEATUREFUNCTIONS  a 
left join HIS.[HISGLOBAL].ACCESS_USERFUNCTION b on a.FeatureId = b.FeatureId and a.FunctionID = b.FunctionID and b.USERID = @UserID and a.FunctionID = @FunctionID
left join HIS.HISGLOBAL.MENU_FUNCTIONS c on a.FunctionID = c.Id 
where a.FeatureId = @FeatureID   and isnull(b.deleted,1) = 0)
,0) as funcAccess

 

-- [ITADMIN].[EMPLOYEE_FEATURE_2017] 
if((select featAccess from @tmpEMPLOYEE_FEATURE_2017) <> 0 )
begin
	insert into hisglobal.HIS_LOGIN_LOG (ModuleID,UserID,FeatureID,LoginDate) 
	select isnull(@ModuleID,0),@UserID,@FeatureID,GETDATE()


end
 
select * from @tmpEMPLOYEE_FEATURE_2017
 
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySelected_ViewReport]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURe [ITADMIN].[SurgerySelected_ViewReport]


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 SELECT				a.ID as Id
				  ,a.Name
				  ,a.Code
				  ,a.DepartmentID
				  ,b.Name as DepartmentName
				  ,a.SurgeryType
				  ,(Case when SurgeryType =  1  Then 'Major'
						 when SurgeryType  = 2 then  'Moderate'
						 when SurgeryType =  3 then  'Minor' END) as SurgeryName
				  ,a.package
				  ,a.CostPrice
				  ,a.Instructions	
		FROM       Surgery a
		LEFT JOIN Department b on b.ID = a.DepartmentID
		WHERE       a.Deleted = 0 
		Order By SurgeryName,a.Name


END
GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureListPerFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureListPerFunction]
@RoleId varchar(max) = '4'
,@ModuleId varchar(max) = '3'
,@StationId varchar(max) = '13'
--, @CheckFeatureList as xml = '<DocumentElement> <CheckFeatureListXML> <FeatureId>1326</FeatureId> </CheckFeatureListXML> <CheckFeatureListXML> <FeatureId>443</FeatureId> </CheckFeatureListXML> <CheckFeatureListXML> <FeatureId>1267</FeatureId> </CheckFeatureListXML> <CheckFeatureListXML> <FeatureId>1330</FeatureId> </CheckFeatureListXML> <CheckFeatureListXML> <FeatureId>2427</FeatureId> </CheckFeatureListXML> </DocumentElement>'
 
, @CheckFeatureList as xml = '<DocumentElement> <CheckFeatureListXML> <FeatureId>1326</FeatureId> </CheckFeatureListXML></DocumentElement>'


AS
BEGIN

 DECLARE @handle      AS INT

 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @CheckFeatureList
SELECT 
IDENTITY(INT, 1,1) as RowID,
 FeatureId
into #FeatureList

from openxml(@handle, '/DocumentElement/CheckFeatureListXML',2) with
(
FeatureId  varchar(250)
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 

------------------------------------NOTE
-- THIS IS FOR THE SPECIFIC FUNCTION PER ROLE,STATION - MODULE and FEATURES
	SET NOCOUNT ON; 

 	 
------------------------------------------------------------------FOR Feature DATA TABLE LIST
		 select  a.ModuleId,b.Role_Id as RoleId,b.Station_Id as StationId,a.FeatureId, c.Name as FeatName
			,case when  a.FeatureId in ( select FeatureId from #FeatureList )  then 1 else 0 end as HasAccess
		   from HIS.HISGLOBAL.ACCESS_MODULEFEATURES a
		 left join HIS.HISGLOBAL.ACCESS_ROLEFEATURES b on a.ModuleID = b.Module_Id and a.FeatureId = b.Feature_Id
		 left join HIS.HISGLOBAL.MENU_ACCESS 	c on a.FeatureId = c.FeatureID
		 where  a.Deleted = 0 and  b.Role_Id = @RoleId and b.Station_Id = @StationId and b.Module_Id = @ModuleId 
		 and c.Name is not null  
		 order by c.Name

------------------------------------------------------------------------------------------------------------------------------------
   -- [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureListPerFunction]
		select a.Role_Id as RoleId,a.Station_Id as StationId,a.Feature_Id as FeatureId, a.Function_Id as FunctionId,@ModuleId as ModuleId
		,c.Name as FeatureName,b.Name as FunctionName, case when isnull(a.Deleted,0) = 0  then 1 else 0 end  as HasAccess
		
	  from HIS.HISGLOBAL.ACCESS_FunctionPerStationModuleRole a 
	  left join HISGLOBAL.MENU_FUNCTIONS b on b.FunctionID = a.Function_Id
	  left join HIS.HISGLOBAL.MENU_ACCESS  c on c.FeatureID = a.Feature_Id
	  where a.Role_Id = @RoleId and a.Station_Id = @StationId  and a.Feature_Id in (Select FeatureId from #FeatureList)
	order by c.Name
	
	DROP TABLE #FeatureList;	 
 END


 
 




GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureList]
@RoleId varchar(max) = '4'
,@ModuleId varchar(max) = '3'
,@StationId varchar(max) = '13'

AS
BEGIN

 

------------------------------------NOTE
-- THIS IS FOR THE SPECIFIC FUNCTION PER ROLE,STATION - MODULE and FEATURES
	SET NOCOUNT ON; 

	select a.*,case when isnull(b.Deleted,0) = 0  then 1 else 0 end  as HasAccess into #tempGlobalTempAccess
		   from HIS.HISGLOBAL.ACCESS_MODULEFEATURES a
		 left join HIS.HISGLOBAL.ACCESS_ROLEFEATURES b on a.ModuleID = b.Module_Id and a.FeatureId = b.Feature_Id
		 left join HIS.HISGLOBAL.MENU_ACCESS 	c on a.FeatureId = c.FeatureID
		 where  a.Deleted = 0 and  b.Role_Id = @RoleId and b.Station_Id = @StationId and b.Module_Id = @ModuleId 
		 and c.Name is not null

 	 
------------------------------------------------------------------FOR Feature DATA TABLE LIST
		 select  a.ModuleId,b.Role_Id as RoleId,b.Station_Id as StationId,a.FeatureId, c.Name as FeatName
		 	,case when isnull(b.Deleted,0) = 0  then 1 else 0 end  as HasAccess
		   from HIS.HISGLOBAL.ACCESS_MODULEFEATURES a
		 left join HIS.HISGLOBAL.ACCESS_ROLEFEATURES b on a.ModuleID = b.Module_Id and a.FeatureId = b.Feature_Id
		 left join HIS.HISGLOBAL.MENU_ACCESS 	c on a.FeatureId = c.FeatureID
		 where  a.Deleted = 0 and  b.Role_Id = @RoleId and b.Station_Id = @StationId and b.Module_Id = @ModuleId 
		 and c.Name is not null
		 order by c.Name

------------------------------------------------------------------------------------------------------------------------------------
   -- [ITADMIN].[WebSecAdmin_StationModuleRoleFeatureList] 	
		select a.Role_Id as RoleId,a.Station_Id as StationId,a.Feature_Id as FeatureId, a.Function_Id as FunctionId,@ModuleId as ModuleId
		,c.Name as FeatureName,b.Name as FunctionName, case when isnull(a.Deleted,0) = 0  then 1 else 0 end  as HasAccess
		into #tempGlobalACCESS_FunctionPerStationModuleRole
	  from HIS.HISGLOBAL.ACCESS_FunctionPerStationModuleRole a 
	  left join HISGLOBAL.MENU_FUNCTIONS b on b.FunctionID = a.Function_Id
	  left join HIS.HISGLOBAL.MENU_ACCESS  c on c.FeatureID = a.Feature_Id
	  where a.Role_Id = @RoleId and a.Station_Id = @StationId  and a.Feature_Id in (Select FeatureId from #tempGlobalTempAccess where HasAccess = 1)
	 order by c.Name


	 if EXISTS(select * from #tempGlobalACCESS_FunctionPerStationModuleRole)
	 begin 
	 select * from #tempGlobalACCESS_FunctionPerStationModuleRole
	 end
	 else
	 begin

			  select a.Role_Id as RoleId,a.Station_Id as StationId,a.Feature_Id as FeatureId, a.Function_Id as FunctionId,@ModuleId as ModuleId
				,c.Name as FeatureName,b.Name as FunctionName, case when isnull(a.Deleted,0) = 0  then 1 else 0 end  as HasAccess
		 
			  from HIS.HISGLOBAL.ACCESS_FunctionPerStationModuleRole a 
			  left join HISGLOBAL.MENU_FUNCTIONS b on b.FunctionID = a.Function_Id
			  left join HIS.HISGLOBAL.MENU_ACCESS  c on c.FeatureID = a.Feature_Id
			  where a.Role_Id = @RoleId and a.Station_Id = @StationId  and a.Feature_Id in (Select FeatureId from HISGLOBAL.HIS_MODULES where ModuleID = @ModuleId and deleted = 0 )
			 order by c.Name

	 end



 
 DROP TABLE #tempGlobalTempAccess
 DROP TABLE #tempGlobalACCESS_FunctionPerStationModuleRole
 END


 
 




GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigFunctionPerStationModule]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

create PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigFunctionPerStationModule]
@ErrorMessage                  as NVARCHAR(max) OUT,
@RoleId varchar(max) = '1000'
,@ModuleId varchar(max) = '306'
,@StationId varchar(max) = '81'
,@FeatId varchar(max) = '215'
,@FunctId varchar(max) = '215'
,@Action int = 1
AS
BEGIN

	SET NOCOUNT ON; 
	set xact_abort on

	DECLARE @ERROR_SEVERITY AS INT 
	DECLARE @ERROR_STATE AS INT 

    BEGIN TRY 
    
        BEGIN TRAN
 
 IF(@Action = 1)--ADD
 BEGIN

  UPDATE  hisglobal.[ACCESS_FunctionPerStationModuleRole] SET Deleted = 0  where deleted = 1 and  Feature_Id = @FeatId  and Role_Id = @RoleId and Station_Id = @StationId  and Function_Id = @FunctId

 
 END
 ELSE
 BEGIN

  UPDATE  hisglobal.[ACCESS_FunctionPerStationModuleRole] SET Deleted = 1  where deleted = 0 and Feature_Id = @FeatId  and Role_Id = @RoleId and Station_Id = @StationId and Function_Id = @FunctId
 
 END  
 
        
        COMMIT TRAN

        SET @ErrorMessage = '100-Successfully Updated.'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 


 END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction]
@RoleId varchar(max) = '1000'
,@ModuleId varchar(max) = '3'
,@StationId varchar(max) = '66'
,@FeatId varchar(max) = '2031'
AS
BEGIN

 

------------------------------------NOTE
-- THIS IS FOR THE SPECIFIC FUNCTION PER ROLE,STATION - MODULE and FEATURES
	SET NOCOUNT ON; 

 	    -- [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction] 
		select a.Feature_Id,d.Name as FeatName,c.FunctionID, c.Name as FunctName
		,case when isnull(e.Deleted,0) = 0  then 1 else 0 end  as HasAccess
		,a.Role_Id,a.Module_Id,a.Station_Id
		 from HIS.HISGLOBAL.ACCESS_ROLEFEATURES a 
		left join  HIS.HISGLOBAL.ACCESS_FEATUREFUNCTIONS b on a.Feature_Id = b.FeatureId
		left join HISGLOBAL.MENU_FUNCTIONS c on c.FunctionID = b.FunctionID
		left join HISGLOBAL.MENU_ACCESS d on a.Feature_Id = d.FeatureID
		-- THIS LEFT JOIN IS FOR THE SPECIFIC FUNCTION PER ROLE,STATION - MODULE and FEATURES
		left join HIS.HISGLOBAL.[ACCESS_FunctionPerStationModuleRole] e 
		on a.Role_Id = e.Role_Id and a.Station_Id = e.Station_Id 
		and a.Feature_Id = e.Feature_Id and b.FunctionID = e.Function_Id

		where a.Role_Id = @RoleId and a.Station_Id = @StationId and a.Module_Id = @ModuleId 
		and c.Deleted = 0 and a.Deleted = 0
		and a.Feature_Id = @FeatId 
		order by a.StartDateTime desc	
 END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RoleModuleConfigAccessRolePerFeatures]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_RoleModuleConfigAccessRolePerFeatures]
 @ErrorMessage                  as NVARCHAR(max) OUT,
@RoleId varchar(max) = '1000'
,@ModuleId varchar(max) = '306'
,@StationId varchar(max) = '81'
,@FeatId varchar(max) = '215'
,@Action int = 1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 
	set xact_abort on


DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 

 
    BEGIN TRY 
    
        BEGIN TRAN
 
 IF(@Action = 1)--ADD
 BEGIN
   
  UPDATE  hisglobal.ACCESS_ROLEFEATURES SET Deleted = 0  where deleted = 1 and  Feature_Id = @FeatId and  Module_Id = @ModuleId and Role_Id = @RoleId and Station_Id = @StationId
 
 END
 ELSE
 BEGIN

  UPDATE  hisglobal.ACCESS_ROLEFEATURES SET Deleted = 1  where deleted = 0 and Feature_Id = @FeatId and  Module_Id = @ModuleId and Role_Id = @RoleId and Station_Id = @StationId
 
 END  
   -- [ITADMIN].[WebSecAdmin_RoleModuleConfigAccessRolePerFeatures] ''

        -- Update bed set status=5,ipid= @ipid where id = @bedId
 
        
        COMMIT TRAN

        SET @ErrorMessage = '100-Successfully Updated.'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 


 END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_RemoveModuleRoleStation]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_RemoveModuleRoleStation]
@ErrorMessage as NVARCHAR(max) OUT,
 @ModuleId as int = 308  ,
 @RoleId as int = 1000,
 @StationId as int  = 70 
 AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
 

 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		-- select  @ModuleId,@RoleId,@StationId
		 -- [ITADMIN].[WebSecAdmin_RemoveModuleRoleStation] ''
		 delete from HIS.HISGLOBAL.ACCESS_ROLEFEATURES where Role_Id = @RoleId   and Module_Id = @ModuleId and Station_Id = @StationId
		 --for function
		delete from  hisglobal.[ACCESS_FunctionPerStationModuleRole] where Role_Id = @RoleId and Station_Id = @StationId and Feature_Id in (select FeatureId  from HISGLOBAL.ACCESS_MODULEFEATURES where ModuleId = @ModuleId)
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Removed Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

 
END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetModuleByRole]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_GetModuleByRole]
@RoleId varchar(max) = '1001'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	


 select distinct A.Station_Id,A.Module_Id,B.Name as StationName, C.ModuleName +' - '+ LOWER(B.Name) as ModuleName 
  from HISGLOBAL.ACCESS_ROLEFEATURES A
LEFT JOIN HIS.Dbo.Station B on A.Station_Id = B.ID
LEFT JOIN HIS.HISGLOBAL.HIS_MODULES  C on A.Module_Id = C.ModuleID
where A. Role_id = @RoleId -- and A.Deleted = 0
 AND B.Deleted = 0 and C.Deleted = 0 


-- [ITADMIN].[WebSecAdmin_GetModuleByRole]
 
END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetFeatureListByRoleModule]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_GetFeatureListByRoleModule]
@RoleId varchar(max) = '1000'
,@ModuleId varchar(max) = '3'
,@StationId varchar(max) = '66'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 

------------------------------------------START RUN the per feature function 
IF NOT EXISTS(select * from  hisglobal.[ACCESS_FunctionPerStationModuleRole] WHERE   Role_Id = @RoleId and Station_Id = @StationId and Feature_Id in (select FeatureId  from HISGLOBAL.ACCESS_MODULEFEATURES where ModuleId = @ModuleId)  )
BEGIN
				declare  @AddModuleHeader varchar(max)
				declare  @AddModuleDetails varchar(max)
 
				set @AddModuleHeader=N'<DocumentElement>
				  <AddModuleHeaderXML>
					<RoleId>'+@RoleId+' </RoleId>
					<ModuleId>'+@ModuleId+'</ModuleId>
				  </AddModuleHeaderXML>
				</DocumentElement>' 
				set @AddModuleDetails=N'<DocumentElement>
				  <AddModuleDetailsXML>
					<stationId>'+@StationId+'</stationId>
				  </AddModuleDetailsXML>
				</DocumentElement>'
				exec ITADMIN.WebSecAdmin_AddModuleByRoleId '',@AddModuleHeader,@AddModuleDetails
END
------------------------------------------END RUN the per feature function 
 

 select isnull(d.Role_Id,0) as FID, a.ModuleID,a.ModuleName,a.URLLink,e.Name as ParentName,e.SequenceNo as ParentSeq,c.FeatureID as FeatureID, c.name as FeatureName
 ,c.SequenceNo as FeatureSequence,case when isnull(d.Feature_Id,0) = 0 or d.Deleted = 1   then 0 else 1 end  as HasAccess , d.Station_Id as StationID ,d.Role_Id as RoleID
 from hisglobal.HIS_MODULES a
	left join HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId 
	left join HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID 
	left join hisglobal.ACCESS_ROLEFEATURES d on a.ModuleID = d.Module_Id and b.FeatureId = d.Feature_Id and d.Role_Id = @RoleId
	left join HISGLOBAL.MENU_PARENT e on c.ParentID = e.MenuID 
   where a.ModuleID = @ModuleId and d.Station_Id = @StationId and  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0
   -- [ITADMIN].[WebSecAdmin_GetFeatureListByRoleModule]

 END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_AddModuleByRoleId]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[WebSecAdmin_AddModuleByRoleId]
@ErrorMessage as NVARCHAR(max) OUT,
@AddModuleHeader as xml = '<DocumentElement> <AddModuleHeaderXML> <RoleId>1000</RoleId> <ModuleId>3</ModuleId> </AddModuleHeaderXML> </DocumentElement>'
, @AddModuleDetails as xml = '<DocumentElement> <AddModuleDetailsXML> <stationId>66</stationId> </AddModuleDetailsXML> </DocumentElement>'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @AddModuleHeader
SELECT 
IDENTITY(INT, 1,1) as TableID,
RoleId
,ModuleId
into #AddModuleHeader

from openxml(@handle, '/DocumentElement/AddModuleHeaderXML',2) with
(
RoleId  varchar(250)
,ModuleId varchar(250)
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @AddModuleDetails
SELECT 
IDENTITY(INT, 1,1) as TableID,
 stationId
into #AddModuleDetails

from openxml(@handle, '/DocumentElement/AddModuleDetailsXML',2) with
(
stationId  varchar(250)
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 
declare @RoleId as int
declare @ModuleId as int
declare @StationID as int


BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

------------------------------------NOTE
-- THIS IS FOR THE SPECIFIC FUNCTION PER ROLE,STATION - MODULE and FEATURES for [ITADMIN].[WebSecAdmin_RoleModuleConfigFeatureFunction] 
IF NOT EXISTS(select * from sys.tables where type = 'u' and name = 'ACCESS_FunctionPerStationModuleRole')
 BEGIN 
 
		 CREATE TABLE [HISGLOBAL].[ACCESS_FunctionPerStationModuleRole](
			[Role_Id] [int] NOT NULL,
			[Station_Id] [int] NOT NULL,
			[Feature_Id] [int] NOT NULL,
			[Function_Id] [int] NOT NULL,
			[StartDateTime] [datetime] NULL,
			[EndDateTime] [datetime] NULL,
			[OperatorId] [int] NULL,
			[Deleted] [bit] NOT NULL
		) ON [MasterFile]

END


		----sp_Help   [ITADMIN].[WebSecAdmin_AddModuleByRoleId] '' 
		  select @RoleId= RoleId,@ModuleId = ModuleId    from #AddModuleHeader
		 select * into #AllFeaturesPerModuleTemp from HIS.HISGLOBAL.ACCESS_MODULEFEATURES where moduleid = @ModuleId and Deleted = 0
 



		WHILE EXISTS(select top 1 *  from #AddModuleDetails)  
		BEGIN
				select @StationID = stationId  from #AddModuleDetails
	
				DELETE from HIS.HISGLOBAL.ACCESS_ROLEFEATURES where Role_Id = @RoleId and Station_Id = @StationID  and Module_Id = @ModuleId

				insert into HIS.HISGLOBAL.ACCESS_ROLEFEATURES (Role_Id,Station_Id,Module_Id,Feature_Id,StartDateTime,OperatorId,Deleted)
				select @RoleId,@StationID,@ModuleId,FeatureId,GETDATE(),0,0
				from #AllFeaturesPerModuleTemp

				--insert the function on STAtion per module role 
				  DELETE from  HIS.HISGLOBAL.[ACCESS_FunctionPerStationModuleRole] where  Role_Id = @RoleId and Station_Id = @StationID   and Feature_Id in (select FeatureId from #AllFeaturesPerModuleTemp  )
				
				 insert into  HIS.HISGLOBAL.[ACCESS_FunctionPerStationModuleRole] (Role_Id,Station_Id,Feature_Id,Function_Id,StartDateTime,OperatorId,Deleted)
			    select @RoleId,@StationID,a.FeatureId,c.FunctionID,GETDATE(),0,1
				from #AllFeaturesPerModuleTemp a
				left join  HIS.HISGLOBAL.ACCESS_FEATUREFUNCTIONS b on a.FeatureId = b.FeatureId
				left join HISGLOBAL.MENU_FUNCTIONS c on c.FunctionID = b.FunctionID 
				where c.FunctionID is not null order by a.FeatureId
				

				delete from #AddModuleDetails where stationId = @StationID
		END

 /* select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES where Role_Id = 1001   and Module_Id = 17 order by feature_id,Station_Id

pagsasave

select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES where Role_Id = 1001
select * from HIS.HISGLOBAL.ACCESS_MODULEFEATURES where moduleid = 17

*/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Added Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #AddModuleHeader
drop table #AddModuleDetails
drop table #AllFeaturesPerModuleTemp


END


GO

/****** Object:  StoredProcedure [ITADMIN].[Select2Module_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Select2Module_SCS]	
AS
BEGIN



	select isnull(a.ModuleID,'0') as id,isnull(a.ModuleName,'--') as name 
	from HIS.HISGLOBAL.HIS_MODULES  a where a.ModuleID is not null and id <> 2


END



GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleRolesList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


Create PROCEDURE [ITADMIN].[ModuleRolesList_SCS]	
@ModuleId as int
AS
BEGIN

SELECT 
DIStinct
a.Role_Id as id
,b.Name as name
 from HIS.HISGLOBAL.ACCESS_ROLEFEATURES	a
 INNER JOIN HIS.HISGLOBAL.ACCESS_ROLES b on b.RoleID = a.Role_Id
 where a.Module_Id = @ModuleId


END





GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_UpdateUserFunction]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
 
 
CREATE PROCEDURE [ITADMIN].[ModuleAccess_UpdateUserFunction]
@ErrorMessage as NVARCHAR(max) OUT,
@header as xml = '<DocumentElement> <headerXML> <ModuleId>37</ModuleId> <OperatorId>11503</OperatorId> </headerXML> </DocumentElement>'
,@details as xml ='<DocumentElement> <detailsXML> <Userid>11503</Userid> </detailsXML> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @header
SELECT 
IDENTITY(INT, 1,1) as RowId,
ModuleId
,OperatorId
,FeatureId
,FunctionId
,Deleted
into #tmpheaderModuleAccessAddEmp

from openxml(@handle, '/DocumentElement/headerXML',2) with
(
 ModuleId  varchar(250)
,OperatorId varchar(250)
,FeatureId int
,FunctionId int
,Deleted int
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --get moduleid
 declare @operatorID as varchar(250), @moduleId int,@FeatureId int,@deleted int,@FunctionId int
select @moduleId = ModuleId,@operatorID = OperatorId,@FeatureId = FeatureId,@deleted = Deleted,@FunctionId = FunctionId  from  #tmpheaderModuleAccessAddEmp

 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXEC sp_xml_preparedocument @handle OUTPUT, @details
SELECT 
IDENTITY(INT, 1,1) as RowId,
Userid
,@moduleId as moduleid
,@FeatureId as FeatureId
into #tmpdetailsModuleAccessUserFunc

from openxml(@handle, '/DocumentElement/detailsXML',2) with
(
Userid  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
	 
		delete from #tmpdetailsModuleAccessUserFunc where Userid in (
		select userid from	HISGLOBAL.ACCESS_USERFUNCTION where moduleId = @moduleId and featureId = @FeatureId  and FunctionId = @FunctionId and deleted = @deleted  group by userid
		)

		  if exists(select Userid from #tmpdetailsModuleAccessUserFunc)
		begin
 
		delete from HISGLOBAL.ACCESS_USERFUNCTION where USERID in (select Userid from #tmpdetailsModuleAccessUserFunc)
		and moduleId = @moduleId and featureId = @FeatureId and FunctionId = @FunctionId 
 
		insert into HISGLOBAL.ACCESS_USERFUNCTION (USERID,FunctionID,ModuleId,featureId,OperatorId,Deleted,StartDateTime)
		select Userid,@FunctionId,@moduleId,@FeatureId,@operatorID,@deleted,GETDATE() from #tmpdetailsModuleAccessUserFunc 
			
			-- select * from HISGLOBAL.ACCESS_USERFUNCTION where moduleId = 37 and featureId = 751 and FunctionId = 2 
	 	
		 
		end

 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpheaderModuleAccessAddEmp
drop table #tmpdetailsModuleAccessUserFunc

END


GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_UpdateUserFeatureDAL]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
 
 
CREATE PROCEDURE [ITADMIN].[ModuleAccess_UpdateUserFeatureDAL]
@ErrorMessage as NVARCHAR(max) OUT,
@header as xml = '<DocumentElement> <headerXML> <ModuleId>37</ModuleId> <OperatorId>11503</OperatorId> </headerXML> </DocumentElement>'
,@details as xml ='<DocumentElement> <detailsXML> <Userid>11503</Userid> </detailsXML> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @header
SELECT 
IDENTITY(INT, 1,1) as RowId,
ModuleId
,OperatorId
,FeatureId
,Deleted
into #tmpheaderModuleAccessAddEmp

from openxml(@handle, '/DocumentElement/headerXML',2) with
(
 ModuleId  varchar(250)
,OperatorId varchar(250)
,FeatureId int
,Deleted int
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --get moduleid
 declare @operatorID as varchar(250), @moduleId int,@FeatureId int,@deleted int
select @moduleId = ModuleId,@operatorID = OperatorId,@FeatureId = FeatureId,@deleted = Deleted  from  #tmpheaderModuleAccessAddEmp

 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXEC sp_xml_preparedocument @handle OUTPUT, @details
SELECT 
IDENTITY(INT, 1,1) as RowId,
Userid
,@moduleId as moduleid
,@FeatureId as FeatureId
into #tmpdetailsModuleAccessAddEmp

from openxml(@handle, '/DocumentElement/detailsXML',2) with
(
Userid  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
	 
		delete from #tmpdetailsModuleAccessAddEmp where Userid in (
		select userid from  HISGLOBAL.ACCESS_USERFEATURES where Module_Id = @moduleId and Feature_Id = @FeatureId and Deleted = @deleted   group by userid
		)

		  if exists(select Userid from #tmpdetailsModuleAccessAddEmp)
		begin
 
		delete from HISGLOBAL.ACCESS_USERFEATURES where USERID in (select Userid from #tmpdetailsModuleAccessAddEmp)
		and Module_Id = @moduleId and Feature_Id = @FeatureId
 
		insert into HISGLOBAL.ACCESS_USERFEATURES (USERID,Station_Id,Module_Id,Feature_Id,OperatorId,Deleted,StartDateTime)
		select Userid,0,@moduleId,@FeatureId,@operatorID,@deleted,GETDATE() from #tmpdetailsModuleAccessAddEmp 
				 
		end

 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpheaderModuleAccessAddEmp
drop table #tmpdetailsModuleAccessAddEmp

END


GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_SaveAddModuleEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
 
 
CREATE PROCEDURE [ITADMIN].[ModuleAccess_SaveAddModuleEmployee]
@ErrorMessage as NVARCHAR(max) OUT,
@header as xml = '<DocumentElement> <headerXML> <ModuleId>37</ModuleId> <OperatorId>11503</OperatorId> </headerXML> </DocumentElement>'
,@details as xml ='<DocumentElement> <detailsXML> <Userid>11503</Userid> </detailsXML> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @header
SELECT 
IDENTITY(INT, 1,1) as RowId,
ModuleId
,OperatorId
into #tmpheaderModuleAccessAddEmp

from openxml(@handle, '/DocumentElement/headerXML',2) with
(
 ModuleId  varchar(250)
,OperatorId varchar(250)
)
exec sp_xml_removedocument @handle
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 --get moduleid
 declare @operatorID as varchar(250), @moduleId int
select @moduleId = ModuleId,@operatorID = OperatorId  from  #tmpheaderModuleAccessAddEmp

 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

EXEC sp_xml_preparedocument @handle OUTPUT, @details
SELECT 
IDENTITY(INT, 1,1) as RowId,
Userid
,@moduleId as moduleid
into #tmpdetailsModuleAccessAddEmp

from openxml(@handle, '/DocumentElement/detailsXML',2) with
(
Userid  varchar(250)
)
exec sp_xml_removedocument @handle
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Type as varchar(250)

declare @rowid int
declare @serviceid int
declare @deptid int
declare @itemid int

declare @IpAdd as varchar(250)
 
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		-- [ITADMIN].[ModuleAccess_SaveAddModuleEmployee] ''
		
		 delete from #tmpdetailsModuleAccessAddEmp where Userid in ( 
			 select USERID from HISGLOBAL.ACCESS_USERFEATURES  where Module_Id = @moduleId group by USERID
			 )

		
		  if exists(select Userid from #tmpdetailsModuleAccessAddEmp)
		begin
 
 
			

			 delete from HISGLOBAL.ACCESS_USERFEATURES where UserID in (select Userid from #tmpdetailsModuleAccessAddEmp ) and Module_Id= @moduleId 

			 insert into HISGLOBAL.ACCESS_USERFEATURES 
						(USERID,Module_Id,Feature_Id     ,Deleted,Station_Id,OperatorId,StartDateTime)
			  select    b.Userid,a.ModuleId,a.FeatureId  ,'True'   ,0       ,@operatorID,GETDATE()
			  from HISGLOBAL.ACCESS_MODULEFEATURES  a
			  left join #tmpdetailsModuleAccessAddEmp b on a.ModuleId = b.moduleid
			  where  a.deleted = 0 and a.ModuleId = @moduleId
			  

		end

 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 

drop table #tmpheaderModuleAccessAddEmp
drop table #tmpdetailsModuleAccessAddEmp

END


GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetUser]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE proc [ITADMIN].[ModuleAccess_GetUser]
@id int

as

select b.ID as EmpID, b.EmployeeID,b.Name as EmpName,c.Name as DeptName from HISGLOBAL.ACCESS_USERFEATURES a
left join employee b on a.USERID = b.ID
left join Department c on b.DepartmentID = c.ID
where Module_Id = @id
group by b.ID, b.EmployeeID,b.Name,c.Name




GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetModuleAccessFeature]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create proc [ITADMIN].[ModuleAccess_GetModuleAccessFeature]
@moduleId int = 3
as

SET NOCOUNT ON;


                 select isnull( b.FeatureId,0) as FID, a.ModuleID,a.ModuleName,a.URLLink,e.Name as ParentName,e.SequenceNo as ParentSeq,c.FeatureID as FeatureID, c.name as FeatureName,c.SequenceNo as FeatureSequence
				 ,0  as HasAccess  
				 from hisglobal.HIS_MODULES a 
                 left join HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId 
                 left join HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID 
            
                 left join HISGLOBAL.MENU_PARENT e on c.ParentID = e.MenuID 
                 where a.ModuleID = @moduleId  and  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 




GO

/****** Object:  StoredProcedure [ITADMIN].[ModuleAccess_GetAllEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[ModuleAccess_GetAllEmployee]
@deptid varchar(10) = '19'
,@desId varchar(10) =  2553
,@catid varchar(10) = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT  a.id as Userid, a.EmployeeID, a.Name as FullName , b.Name as DeptName 
	,convert(varchar(11), c.DOA, 113)  as Datehired,d.Name as Position,e.name as Category,d.id
	from dbo.employee a 
	left join dbo.Department b on a.departmentid = b.id
	left join dbo.SalaryDetail c on a.id = c.id 
	left join dbo.Designation d on a.DesignationID = d.ID
	left join dbo.HRCategory e on a.CategoryID = e.id
	where a.deleted = 0  
	and (@deptid = '0' OR b.id = @deptid)
	and (@desId = '0' OR d.id = @desId)
	and (@catid = '0' OR e.id = @catid)
	order by b.Name,a.Name

 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Create_ModuleID]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Jerome Jose>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE   [ITADMIN].[Create_ModuleID]
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here


	
declare @maxModuleId int

select @maxModuleId =  max(moduleId) + 1 from HISGLOBAL.HIS_MODULES

  

 
 insert into HISGLOBAL.HIS_MODULES (ModuleID,ModuleName,Deleted)
 VALUES (@maxModuleId,' --Reserved -- ',0)

 insert into  HISGLOBAL.HIS_VERSION (ModuleID,MajorVersion,MinorVersion,Description,DateDeployed,DateDeveloped)
 Values (@maxModuleId,1,0,'---reserved',GETDATE(),GETDATE())


END

GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_UpdateRoleSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_UpdateRoleSave]
    @ErrorMessage as NVARCHAR(max) OUT,
    @RoleDetailsXML as xml = '<DocumentElement> <RoleDetailsXML> <RoleId>1139</RoleId> <Name>test1</Name> <Description>deleted</Description> <Deleted>1</Deleted> </RoleDetailsXML> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @RoleDetailsXML
SELECT 
IDENTITY(INT, 1,1) as TableID,
RoleId
,Name
,Description
,Deleted
into #tmpRoleUpdateSave

from openxml(@handle, '/DocumentElement/RoleDetailsXML',2) with
(
RoleId int
,Id int
,Name varchar(250)
,Description varchar(250)
,Deleted int
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Name as varchar(250)
declare @desc as varchar(250)
declare @RoleId as int
declare @deleted as int


BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help   [ITADMIN].[WebSecAdmin_UpdateRoleSave] '' select * from HIS.HISGLOBAL.ACCESS_ROLES
		 select @RoleId =RoleId,@Name = Name ,@desc= Description,@deleted = deleted  from #tmpRoleUpdateSave

		UPDATE HIS.HISGLOBAL.ACCESS_ROLES 
		set Name=  @Name,Description = @desc,Startdatetime = GETDATE(),Deleted = @deleted
		  where RoleID = @RoleId
		 
	 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 



END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowUsers]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[WebSecAdmin_ShowUsers]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/
SELECT ID as UserId,Name,EMPLOYEEID as EmpId,LOGGEDYN as Status FROM EMPLOYEE WHERE  (DELETED=0 OR DELETED IS NULL) ORDER BY NAME


END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowRolesByDept]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (select * from dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (select * from dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (select * from dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (select * from dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_ShowRolesByDept]
@DeptId varchar(max) = '19',
@RoleId varchar(max) = '681'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	


select   A.ID,A.EMPLOYEEID,A.EMPCODE,A.NAME,B.NAME AS DEPT,c.ROLE_ID , '1' as selected 
into #tempWebSecAdmin_ShowRolesByDept
 from EMPLOYEE A 
left join Department b on a.DepartmentID = b.ID
 left join HIS.HISGLOBAL.ACCESS_USERROLES c on c.User_Id = a.ID
 where c.Role_Id = @RoleId 
 and (@DeptId = '0' OR  b.Id = @DeptId)
  ORDER BY c.ROLE_ID DESC,b.Id 


select * from #tempWebSecAdmin_ShowRolesByDept  
  union all 
select  A.ID,A.EMPLOYEEID,A.EMPCODE,A.NAME,B.NAME AS DEPT,@RoleId, '0' as selected 
 from EMPLOYEE a 
left join Department b on a.DepartmentID = b.ID
where  (a.DELETED=0 OR a.DELETED IS NULL)
and a.ID not IN ( select ID from #tempWebSecAdmin_ShowRolesByDept)
 and (@DeptId = '0' OR  b.Id = @DeptId)
  ORDER BY  selected desc ,dept , a.name
   
-- [ITADMIN].[WebSecAdmin_ShowRolesByDept]


  drop table #tempWebSecAdmin_ShowRolesByDept
END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_ShowRoles]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[WebSecAdmin_ShowRoles]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

select RoleId,Name,Description,Startdatetime from HIS.HISGLOBAL.ACCESS_ROLES where  (DELETED=0 OR DELETED IS NULL) ORDER BY Id desc


END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_GetRoleByUserID]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[WebSecAdmin_GetRoleByUserID]
  @UserId               as NVARCHAR(max) = '11503'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/
select Name from HIS.HISGLOBAL.ACCESS_ROLES 
WHERE (DELETED=0 OR DELETED IS NULL) 
AND ID IN (SELECT ROLE_ID FROM HIS.HISGLOBAL.ACCESS_USERROLES WHERE USER_ID=@UserId) ORDER BY NAME
 

END


GO

/****** Object:  StoredProcedure [ITADMIN].[WebSecAdmin_AssignRoleSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,306
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/

CREATE PROCEDURE [ITADMIN].[WebSecAdmin_AssignRoleSave]
@ErrorMessage as NVARCHAR(max) OUT,
@assignRoleHeaderSave as xml = '<DocumentElement> <assignRoleHeaderSaveXML> <Action>1</Action> <deptid>19</deptid> <roleid>681</roleid> <stationid>81</stationid> </assignRoleHeaderSaveXML> </DocumentElement>'
, @assignRoleDetailsSave as xml = '<DocumentElement> <assignRoleDetailsSaveXML> <employeeId>1878927</employeeId> <userId>11503</userId> </assignRoleDetailsSaveXML> <assignRoleDetailsSaveXML> <employeeId>1878927</employeeId> <userId>11503</userId> </assignRoleDetailsSaveXML> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @assignRoleHeaderSave
SELECT 
IDENTITY(INT, 1,1) as TableID,
Action
,deptid
,roleid
,stationid
into #tmpAssignRoleHeader

from openxml(@handle, '/DocumentElement/assignRoleHeaderSaveXML',2) with
(
Action int
,deptid  varchar(250)
,roleid varchar(250)
,stationid varchar(250)
 
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @assignRoleDetailsSave
SELECT 
IDENTITY(INT, 1,1) as TableID,
 
 employeeId
,userId
 
into #tmpAssignRoleDetails

from openxml(@handle, '/DocumentElement/assignRoleDetailsSaveXML',2) with
(
 
employeeId  varchar(250)
,userId varchar(250)
 
 
)
exec sp_xml_removedocument @handle
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



declare @Name as varchar(250)
declare @desc as varchar(250)
declare @userId as int
declare @RoleId as int
declare @deleted as int
declare @deptID as int


BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		 select @RoleId = roleid ,@deptID = deptid   from #tmpAssignRoleHeader
		 select @userId = userId    from #tmpAssignRoleDetails

		 if(@deptID <> 0 )
		 BEGIN

		 	delete from   HIS.HISGLOBAL.ACCESS_USERROLES where Role_Id = @RoleId and User_Id in (select ID from employee where DepartmentID = @deptID)
		 	INSERT INTO HIS.HISGLOBAL.ACCESS_USERROLES (ROLE_ID,USER_ID,STARTDATETIME,OPERATORID,Deleted)
		 	select @RoleId,userId,getdate(),0,0 from #tmpAssignRoleDetails

		END
		ELSE
		BEGIN

			delete from   HIS.HISGLOBAL.ACCESS_USERROLES where Role_Id = @RoleId  
			INSERT INTO HIS.HISGLOBAL.ACCESS_USERROLES (ROLE_ID,USER_ID,STARTDATETIME,OPERATORID,Deleted)
			select @RoleId,userId,getdate(),0,0 from #tmpAssignRoleDetails

		END
 
 /*
pagsasave WIPRO 

DELETE FROM L_USERROLES WHERE ROLE_ID = 99 AND USER_ID IN (SELECT ID FROM EMPLOYEE)
INSERT INTO L_USERROLES (ROLE_ID,USER_ID,STARTDATETIME,OPERATORID) VALUES (99,11503,GETDATE(),1412)
select * from HIS.HISGLOBAL.ACCESS_USERROLES

 


*/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END 



END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[HealthCheckUpSave_SCS]  
	
 --   @ErrorMessage				as NVARCHAR(max) OUT,
 --   @xmlHealthCheckUpHeaderSave				as xml = '<DocumentElement> <HealthCheckUpHeaderSave> <Action>1</Action> <CompanyId>1</CompanyId> <Name>GENERAL CHECKUP-II</Name> <Deleted>0</Deleted> <Blocked>0</Blocked> <OperatorId>11503</OperatorId> <DepartmentId>54</DepartmentId> <Code>FMINT-0082</Code> <Amount>2080.00</Amount> <HealthCheckId>2</HealthCheckId> </HealthCheckUpHeaderSave> </DocumentElement>'
	--,@xmlHealthInvestigationDetailsSave      as xml = '<DocumentElement> <HealthInvestigationDetailsSave> <Id>1</Id> <TestName>COMPLETE BLOOD COUNT (CBC)</TestName> <OriginalPrice>215</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> <HealthCheckUpId>2</HealthCheckUpId> <ServiceId>23</ServiceId> <stationid>28</stationid> <SampleId>26</SampleId> <Sample>0</Sample> <testid>0</testid> </HealthInvestigationDetailsSave> </DocumentElement>',
	--@xmlHealthConsulDepart					as xml = '<DocumentElement> <ComputeConsultationDepartmentSave> <SNo>1</SNo> <HCUId>2</HCUId> <DepartmentId>35</DepartmentId> <OriginalPrice>660</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeConsultationDepartmentSave> </DocumentElement>' ,
	--@xmlHealthCheckupProcedures				as xml = '<DocumentElement> <ComputeHealthProcedureSave> <SNo>1</SNo> <HCUId>2</HCUId> <ProcedureId>2065</ProcedureId> <OriginalPrice>660</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeHealthProcedureSave> </DocumentElement>' 

   
       @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlHealthCheckUpHeaderSave				as xml = '<DocumentElement> <HealthCheckUpHeaderSave> <Action>1</Action> <CompanyId>29668</CompanyId> <Name>test</Name> <Deleted>0</Deleted> <Blocked>0</Blocked> <OperatorId>11503</OperatorId> <DepartmentId>3</DepartmentId> <Code>test</Code> <Amount>111</Amount> <HealthCheckId>0</HealthCheckId> </HealthCheckUpHeaderSave> </DocumentElement>',
	@xmlHealthInvestigationDetailsSave      as xml = '<DocumentElement> <HealthInvestigationDetailsSave> <Id>1</Id> <TestName>BILIRUBIN (AMNIOTIC FLUID)</TestName> <OriginalPrice>0</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> <HealthCheckUpId>0</HealthCheckUpId> <ServiceId>3210</ServiceId> <stationid>27</stationid> <SampleId>27</SampleId> <Sample>0</Sample> <testid>0</testid> </HealthInvestigationDetailsSave> </DocumentElement>',
	@xmlHealthConsulDepart					as xml = '<DocumentElement> <ComputeConsultationDepartmentSave> <SNo>1</SNo> <HCUId>0</HCUId> <DepartmentId>4</DepartmentId> <OriginalPrice>0.00</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeConsultationDepartmentSave> </DocumentElement>',
	@xmlHealthCheckupProcedures				as xml = '<DocumentElement> <ComputeHealthProcedureSave> <SNo>1</SNo> <HCUId>0</HCUId> <ProcedureId>3268</ProcedureId> <OriginalPrice>0</OriginalPrice> <Percentage>0.00</Percentage> <Price>0.00</Price> </ComputeHealthProcedureSave> </DocumentElement>'

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckUpHeaderSave
SELECT 
Action
,Amount
,CompanyId
,Name
,Deleted
,Blocked
,OperatorId
,DepartmentId
,Code
,HealthCheckId
into #tmpHealthCheckUpHeaderSave


from openxml(@handle, '/DocumentElement/HealthCheckUpHeaderSave',2) with
(
Action int
,Amount decimal(18,2)
,CompanyId int
,Name nvarchar(250)
,Deleted int
,Blocked int
,OperatorId int
,DepartmentId int 
,Code nvarchar(250)
,HealthCheckId int
)
exec sp_xml_removedocument @handle
-----------------Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthInvestigationDetailsSave

select Id,TestName,OriginalPrice,Percentage,Price,HealthCheckUpId,ServiceId,stationid,Sequence,SampleId,testid
into #tmpHealthInvestigationDetailsSave

from openxml(@handle, '/DocumentElement/HealthInvestigationDetailsSave',2) with
(
Id int,TestName varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2),HealthCheckUpId int,ServiceId int,stationid int,Sequence int,SampleId int,testid int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------Consul Department----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthConsulDepart

select SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthConsultationDepartment

from openxml(@handle, '/DocumentElement/ComputeConsultationDepartmentSave',2) with
(
SNo int,HCUId int,DepartmentId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle


----------Health Procedure----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckupProcedures

select SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthCheckupProcedures

from openxml(@handle, '/DocumentElement/ComputeHealthProcedureSave',2) with
(
SNo int,HCUId int,ProcedureId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @HealthCheckId as int
 
declare @Amount as decimal(18,2)
declare @myId as int
declare @TestId int
declare @SampleId int
declare @OperatorId int
 

select @Action = Action,@OperatorId = OperatorId, @HealthCheckId  = HealthCheckId
from   #tmpHealthCheckUpHeaderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	 
	--  [ITADMIN].[HealthCheckUpSave_SCS] ''
	 
	 if(@HealthCheckId = 0) -- new
	 BEGIN

	 SELECT @HealthCheckId = isnull(max(Id),0)+1   from healthcheckup
	 
	 	if exists (select * from #tmpHealthCheckUpHeaderSave)
		Begin
		
						SELECT @Amount = Amount from #tmpHealthCheckUpHeaderSave

						INSERT INTO HealthCheckUp
							(ID, companyid, Name, StartDateTime, Deleted, Blocked, OperatorID, DepartmentId, Code)
							SELECT @HealthCheckId,CompanyId,Name,GETDATE(),0,0,OperatorId,DepartmentId,Code
							from #tmpHealthCheckUpHeaderSave

						
						INSERT INTO OLDOP_P_HCU
						(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						select HCUID,CompanyID,StartdateTime,GETDATE(),deleted,Price,@OperatorId  from OP_P_HCU where HCUId = @HealthCheckId 

						delete from OP_P_HCU where HCUId = @HealthCheckId 
						INSERT INTO OP_P_HCU
						(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						SELECT  @HealthCheckId,CompanyId,GETDATE(),NULL,0,@Amount,OperatorId
						from #tmpHealthCheckUpHeaderSave

 

 				if exists (select * from #tmpHealthInvestigationDetailsSave)
					Begin
	 
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						INSERT INTO ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice
								(Id, TestName, OriginalPrice, Percentage, Price,HealthCheckupId,ServiceId,stationId,Sequence,SampleId)
						SELECT  Id,TestName,OriginalPrice,Percentage,Price,@HealthCheckId,ServiceId,stationId,Id as Sequence,SampleId
						FROM  #tmpHealthInvestigationDetailsSave

						UPDATE a
						set a.hcusampleid= b.SampleId
						from testsample a 
						LEFT JOIN #tmpHealthInvestigationDetailsSave b on a.testid = b.ServiceId
						where a.testid in (select ServiceId from #tmpHealthInvestigationDetailsSave)	

						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
 
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 

						insert into HealthCheckupDetail(hcuid,serviceid,stationid,sequence,SampleID,ItemPrice)
						select @HealthCheckId,ServiceId,stationId,Id,SampleId,Price FROM  #tmpHealthInvestigationDetailsSave
						--select * from HealthCheckupDetail where HCUID = 61
 
 
					end
					ELSE
					BEGIN
						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 
					END			
						
					---For ConsultDept
 					if exists (select * from #tmpHealthConsultationDepartment)
					Begin
							 

							DELETE ITADMIN_HCConsulDept_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HCConsulDept_FinalPrice
							(SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,DepartmentId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthConsultationDepartment

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					 
 
						insert into HealthCheckupConsultDept(HCUId, DepartmentId, Sequence, ItemPrice,  OperatorId)
						SELECT  @HealthCheckId,DepartmentId,SNo,Price,@OperatorId
						FROM  #tmpHealthConsultationDepartment

					End
					ELSE
					BEGIN

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					END

					---For HealthProcedure
 					if exists (select * from #tmpHealthCheckupProcedures)
					Begin
						 
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HealthProcedure_FinalPrice
								(SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,ProcedureId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
	
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
			 
							 insert into HealthCheckupProcedures(HCUId, ProcedureId, Sequence, ItemPrice,  OperatorId)
							 SELECT   @HealthCheckId,ProcedureId,SNo ,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
 
					End
					ELSE
					BEGIN
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
					END

End 

	 	
	 END
	 ELSE
	 BEGIN 

 			if exists (select * from #tmpHealthCheckUpHeaderSave)
		Begin
		
						SELECT @Amount = Amount from #tmpHealthCheckUpHeaderSave

						UPDATE a
						 SET a.companyid = b.CompanyId
						 , a.NAME = b.Name
						 ,a.startdatetime = getdate()
						 ,a.Blocked= 0
						 ,a.DepartmentId= b.DepartmentId
						 ,a.Code= b.Code
						 ,a.deleted = 0
						 ,a.OperatorID = b.OperatorId
						from HEALTHCHECKUP a
						inner join #tmpHealthCheckUpHeaderSave b on a.id = b.HealthCheckId
						WHERE a.ID = @HealthCheckId
						
						INSERT INTO OLDOP_P_HCU
						(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						select HCUID,CompanyID,StartdateTime,GETDATE(),deleted,Price,@OperatorId  from OP_P_HCU where HCUId = @HealthCheckId 

						delete from OP_P_HCU where HCUId = @HealthCheckId 
						INSERT INTO OP_P_HCU
						(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						SELECT  @HealthCheckId,CompanyId,GETDATE(),NULL,0,@Amount,OperatorId
						from #tmpHealthCheckUpHeaderSave

 

 				if exists (select * from #tmpHealthInvestigationDetailsSave)
					Begin
	 
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						INSERT INTO ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice
								(Id, TestName, OriginalPrice, Percentage, Price,HealthCheckupId,ServiceId,stationId,Sequence,SampleId)
						SELECT  Id,TestName,OriginalPrice,Percentage,Price,@HealthCheckId,ServiceId,stationId,Id as Sequence,SampleId
						FROM  #tmpHealthInvestigationDetailsSave

						UPDATE a
						set a.hcusampleid= b.SampleId
						from testsample a 
						LEFT JOIN #tmpHealthInvestigationDetailsSave b on a.testid = b.ServiceId
						where a.testid in (select ServiceId from #tmpHealthInvestigationDetailsSave)	

						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
 
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 

						insert into HealthCheckupDetail(hcuid,serviceid,stationid,sequence,SampleID,ItemPrice)
						select @HealthCheckId,ServiceId,stationId,Id,SampleId,Price FROM  #tmpHealthInvestigationDetailsSave
						--select * from HealthCheckupDetail where HCUID = 61
 
 
					end
					ELSE
					BEGIN
						Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) 
						select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = @HealthCheckId
						delete from HealthCheckupDetail where HCUId = @HealthCheckId 
					END			
						
					---For ConsultDept
 					if exists (select * from #tmpHealthConsultationDepartment)
					Begin
							 

							DELETE ITADMIN_HCConsulDept_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HCConsulDept_FinalPrice
							(SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,DepartmentId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthConsultationDepartment

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					 
 
						insert into HealthCheckupConsultDept(HCUId, DepartmentId, Sequence, ItemPrice,  OperatorId)
						SELECT  @HealthCheckId,DepartmentId,SNo,Price,@OperatorId
						FROM  #tmpHealthConsultationDepartment

					End
					ELSE
					BEGIN

						Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) 
						select HCUId, DepartmentId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupConsultDept where HCUId = @HealthCheckId
 
						delete from HealthCheckupConsultDept where HCUId = @HealthCheckId
					END

					---For HealthProcedure
 					if exists (select * from #tmpHealthCheckupProcedures)
					Begin
						 
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId
							DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId

							INSERT INTO dbo.ITADMIN_HealthProcedure_FinalPrice
								(SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
							SELECT  SNo,@HealthCheckId,ProcedureId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
	
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
			 
							 insert into HealthCheckupProcedures(HCUId, ProcedureId, Sequence, ItemPrice,  OperatorId)
							 SELECT   @HealthCheckId,ProcedureId,SNo ,Price,@OperatorId
							FROM  #tmpHealthCheckupProcedures
 
					End
					ELSE
					BEGIN
							Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime)
							select ID, HCUId, ProcedureId, Sequence,  ItemPrice, OperatorID, GetDate() from HealthCheckupProcedures where HCUId = @HealthCheckId
 
							delete from HealthCheckupProcedures where HCUId = @HealthCheckId
					END

End 
 
  	 END	
	 

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpHealthCheckUpHeaderSave
drop table #tmpHealthInvestigationDetailsSave	
drop table #tmpHealthConsultationDepartment	
drop table #tmpHealthCheckupProcedures	

set xact_abort OFF

END

/*
jerome jose july 30 2017
WIPRO based on profiler 
--LIST ALL DASHBOARD

 
select Id,Name from sample where deleted=0 order by name
go
select Id,Name,IsNull(Code,'')Code from company where deleted=0
go
select Id,Name,IsNUll(DeptCode,'') Code from Department where deleted=0 Order By DeptCode
go
select Id,Name,Code from Specialisation where deleted=0 Order By Code
go
select Id, Name,IsNull(Code,'')Code from Test where profile=0 and deleted=0 Order by Code
go
select Id, Name,IsNull(Code,'')Code from OtherProcedures where deleted=0 Order by Code
go 
select a.*,b.code,b.Name as Company from   a, Company b where a.companyid=b.id and a.deleted =0 ORDER BY a.NAME,b.name 
go





--CLICK GENERAL CHECKUP 1
select a.*,b.code,b.Name as Company from healthcheckup a, Company b where a.companyid=b.id and a.deleted =0 ORDER BY a.NAME,b.name 
go
select * from healthcheckup where id = 1
go
select price from OP_P_HCU where hcuid = 1
go
select a.serviceid as testid,IsNull(a.ItemPrice,0) ItemPrice,b.id as tid,b.name as testname,d.id as stnid,d.name as station,f.id as sid
,f.name as sample,a.sequence as seq from healthcheckupdetail a,test b,testlab c,station d,sample f where a.serviceid = b.id and a.hcuid =1 and c.Deleted =0 and b.id=c.testid and d.id=a.stationid and a.sampleid=f.id order by seq
go
select a.DepartmentId,IsNull(a.ItemPrice,0) ItemPrice,b.Name as Deptname,a.Sequence from HealthCheckupConsultDept a,Department b where a.DepartmentId = b.Id and a.hcuid =1 Order By Sequence
go
 select a.ProcedureId,IsNull(a.ItemPrice,0) ItemPrice,b.Code, b.Name, a.Sequence  from HealthCheckupProcedures a,OtherProcedures b where a.ProcedureId = b.Id and  a.hcuid =1 Order By Sequence
go


select * from HealthCheckupDetail


/*********SAVE****/
/*set implicit_transactions on 
go
select * from old_healthcheckup where id = 1
select * from healthcheckup where id = 1
 
 UPDATE HEALTHCHECKUP SET companyid = 1, NAME = 'GENERAL CHECKUP-I',startdatetime = getdate(),Blocked= 0,DepartmentId= 54, Code= 'FMINT-0081' WHERE ID = 1
 
 Insert into oldop_p_hcu (HCUID,CompanyId, Price, Startdatetime, enddatetime, deleted,operatorid)  select HCUID,CompanyId, Price, Startdatetime, enddatetime, deleted, 139 from op_p_hcu  where HCUID=1
go
Delete from Op_P_HCU where HcuId= 1
go
 Insert into op_p_hcu(hcuid,companyid,startdatetime,enddatetime,deleted,price,operatorid) values(1,1,getdate(), null,0,1316, 139 )
go
Insert into CanHealthCheckupDetail(HCUId, ServiceId, StationId, Sequence,  ItemPrice, CanDateTime) select HCUId, ServiceId, StationId, Sequence,  ItemPrice, GetDate() from HealthCheckupDetail where HCUId = 1
go
delete from HealthCheckupDetail where HCUId = 1
go
 insert into HealthCheckupDetail(hcuid,serviceid,stationid,sequence,SampleID,ItemPrice) values(1,23,28,1,26,0)
go
update testsample set hcusampleid=26 where  testid=23
go
Insert into CanHealthCheckupConsultDept(HCUId, DepartmentId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) select HCUId, DepartmentId, Sequence,  ItemPrice, 139, GetDate() from HealthCheckupConsultDept where HCUId = 1
go
delete from HealthCheckupConsultDept where HCUId = 1
go
 insert into HealthCheckupConsultDept(HCUId, DepartmentId, Sequence, ItemPrice,  OperatorId) values(1,120,1,0, 139)
go
Insert into CanHealthCheckupProcedures(ID, HCUId, ProcedureId, Sequence,  ItemPrice, CanOperatorId, CanDateTime) select ID, HCUId, ProcedureId, Sequence,  ItemPrice, 139, GetDate() from HealthCheckupProcedures where HCUId = 1
go
delete from HealthCheckupProcedures where HCUId = 1
go
 insert into HealthCheckupProcedures(HCUId, ProcedureId, Sequence, ItemPrice,  OperatorId) values(1,3268,1,0, 139)
go
IF @@TRANCOUNT > 0 COMMIT TRAN
go
*/
*/




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUpSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[HealthCheckUpSave]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlHealthCheckUpHeaderSave				as xml,
	@xmlHealthInvestigationDetailsSave      as xml,
	@xmlHealthConsulDepart					as xml,
	@xmlHealthCheckupProcedures				as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckUpHeaderSave
SELECT 
Action
,Amount
,CompanyId
,Name
,Deleted
,Blocked
,OperatorId
,DepartmentId
,Code
,HealthCheckId
into #tmpHealthCheckUpHeaderSave


from openxml(@handle, '/DocumentElement/HealthCheckUpHeaderSave',2) with
(
Action int
,Amount decimal(18,2)
,CompanyId int
,Name nvarchar(250)
,Deleted int
,Blocked int
,OperatorId int
,DepartmentId int 
,Code nvarchar(250)
,HealthCheckId int
)
exec sp_xml_removedocument @handle
-----------------Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthInvestigationDetailsSave

select Id,TestName,OriginalPrice,Percentage,Price,HealthCheckUpId,ServiceId,stationid,Sequence,SampleId,testid
into #tmpHealthInvestigationDetailsSave

from openxml(@handle, '/DocumentElement/HealthInvestigationDetailsSave',2) with
(
Id int,TestName varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2),HealthCheckUpId int,ServiceId int,stationid int,Sequence int,SampleId int,testid int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------Consul Department----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthConsulDepart

select SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthConsultationDepartment

from openxml(@handle, '/DocumentElement/ComputeConsultationDepartmentSave',2) with
(
SNo int,HCUId int,DepartmentId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle


----------Health Procedure----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHealthCheckupProcedures

select SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId
into #tmpHealthCheckupProcedures

from openxml(@handle, '/DocumentElement/ComputeHealthProcedureSave',2) with
(
SNo int,HCUId int,ProcedureId int,Sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2), OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @MaxAddID as int
declare @MaxID as int
declare @Amount as decimal(18,2)
declare @myId as int
declare @TestId int
declare @SampleId int
declare @OperatorId int
declare @HealthCheckId int

select @Action = Action,@OperatorId = OperatorId, @HealthCheckId  = HealthCheckId
from   #tmpHealthCheckUpHeaderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		if exists (select * from #tmpHealthCheckUpHeaderSave)
		Begin
			SELECT @MaxAddID = isnull(max(Id),0)+1   from healthcheckup

						SELECT @Amount = Amount from #tmpHealthCheckUpHeaderSave
			
						SELECT @HealthCheckId = HealthCheckupId,@TestId = testid,@SampleId = SampleId from #tmpHealthInvestigationDetailsSave

						UPDATE healthcheckup set enddatetime = getdate(),deleted=1 where id = @HealthCheckId

						INSERT INTO HealthCheckUp
							(ID, companyid, Name, StartDateTime, Deleted, Blocked, OperatorID, DepartmentId, Code)
							SELECT @MaxAddID,CompanyId,Name,GETDATE(),0,0,OperatorId,DepartmentId,Code
							from #tmpHealthCheckUpHeaderSave

				       SELECT @MaxID =  max(Id)  from healthcheckup

						INSERT INTO OP_P_HCU
								(HCUID, CompanyID, StartdateTime, enddatetime, deleted, Price, OperatorId)
						SELECT  @MaxID,CompanyId,GETDATE(),NULL,0,@Amount,OperatorId
						from #tmpHealthCheckUpHeaderSave

				  --select * from ITADMIN_HealthCheckUpDetailInvestigation
				 --  select * from ITADMIN_HCINV_Temp
						
						DELETE ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice WHERE HealthCheckupId = @HealthCheckId
						INSERT INTO ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice
								(Id, TestName, OriginalPrice, Percentage, Price,HealthCheckupId,ServiceId,stationId,Sequence,SampleId)
						SELECT  Id,TestName,OriginalPrice,Percentage,Price,@MaxID,ServiceId,stationId,Id as Sequence,SampleId
						FROM  #tmpHealthInvestigationDetailsSave

						UPDATE a
						set a.hcusampleid= b.SampleId
						from testsample a 
						LEFT JOIN #tmpHealthInvestigationDetailsSave b on a.testid = b.ServiceId
						where a.testid in (select ServiceId from #tmpHealthInvestigationDetailsSave)			

End
	---For ConsultDept
	if exists (select * from #tmpHealthConsultationDepartment)
	Begin
			SELECT @MaxID =  max(Id)  from healthcheckup

			DELETE ITADMIN_HCConsulDept_FinalPrice WHERE HCUId = @HealthCheckId

			INSERT INTO dbo.ITADMIN_HCConsulDept_FinalPrice
								(SNo,HCUId,DepartmentId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
						SELECT  SNo,@MaxID,DepartmentId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
						FROM  #tmpHealthConsultationDepartment
	End
		

---For HealthProcedure
	if exists (select * from #tmpHealthCheckupProcedures)
	Begin
			SELECT @MaxID =  max(Id)  from healthcheckup
			
			DELETE ITADMIN_HealthProcedure_FinalPrice WHERE HCUId = @HealthCheckId

			INSERT INTO dbo.ITADMIN_HealthProcedure_FinalPrice
								(SNo,HCUId,ProcedureId,Sequence,OriginalPrice,Percentage,Price,OperatorId)
						SELECT  SNo,@MaxID,ProcedureId,SNo AS Sequence,OriginalPrice,Percentage,Price,@OperatorId
						FROM  #tmpHealthCheckupProcedures
	
	End
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpHealthCheckUpHeaderSave
drop table #tmpHealthConsultationDepartment	
drop table #tmpHealthCheckupProcedures	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureWithPriceTemp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureWithPriceTemp_SCS]-- 10--10--33-- 0

AS

BEGIN

	SELECT   row_number() over(order by a.Sequence) as SNo
			,a.ProcedureId
			,'0.00' as ItemPrice
			,b.Code
			,b.Name
			,b.Code + '-' + ' ' + b.Name AS CodeName
			,a.Sequence
			,a.OriginalPrice
			,a.Percentage
			,a.Price
			--//note change select * from ITADMIN_HealthCheckUp_Procedure
	FROM     ITADMIN_HCHProced_Temp a
			INNER JOIN OtherProcedures AS b ON a.ProcedureId = b.ID
			ORDER BY a.Sequence


--select * from HealthCheckupProcedures
--SELECT     row_number() over(order by a.Sequence) as SNo,a.ProcedureId, ISNULL(a.ItemPrice, 0) AS ItemPrice, b.Code,b.Name,b.Code + '-' + ' ' + b.Name AS CodeName, a.Sequence,isnull(g.price,0) as  OriginalPrice,'0.00' as Percentage,'0.00' as Price
--FROM         HealthCheckupProcedures AS a 
--			INNER JOIN OtherProcedures AS b ON a.ProcedureId = b.ID
--			LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
--WHERE     (a.HCUId = @HealthCheckId)
--ORDER BY a.Sequence

END




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureWithPrice_SCS]-- 10--10--33-- 0
@HealthCheckId as int = 2
AS

BEGIN


	--SELECT a.SNo
	--	   ,a.ProcedureId
	--	   ,b.Code
	--	   ,b.Name
	--	   ,b.Code + '-' + ' ' + b.Name AS CodeName
	--	   ,a.Sequence
	--	   ,a.OriginalPrice
	--	   ,a.Percentage as Percentage
	--	   ,a.Price
		    
	--FROM ITADMIN_HealthProcedure_FinalPrice a
	--LEFT JOIN OtherProcedures AS b ON a.ProcedureId = b.ID
	--where b.Deleted = 0 and a.HCUId = @HealthCheckId 

	 select 
		a.Sequence as SNo,
		a.ProcedureId
		,b.Code
		,b.Name
		,b.Code + '-' + ' ' + b.Name AS CodeName
		,a.Sequence
		, '0' as OriginalPrice
		, '0' as Percentage
		, '0' as  Price
	  from HealthCheckupProcedures a,OtherProcedures b 
	  where a.ProcedureId = b.Id and  a.hcuid =@HealthCheckId 
	  Order By Sequence

 -- [ITADMIN].[HealthCheckUp_OtherProcedureWithPrice_SCS]

--	SELECT   row_number() over(order by a.Sequence) as SNo
--			,a.ProcedureId
--			,'0.00' as ItemPrice
--			,b.Code
--			,b.Name
--			,b.Code + '-' + ' ' + b.Name AS CodeName
--			,a.Sequence
--			,isnull(g.price,0) as  OriginalPrice
--			,hccondept.Percentage as Percentage
--			,hccondept.Price as Price
--			--//note change select * from ITADMIN_HealthCheckUp_Procedure
--	FROM     HealthCheckupProcedures AS a 
--			INNER JOIN OtherProcedures AS b ON a.ProcedureId = b.ID
--			LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
--			LEFT JOIN dbo.ITADMIN_HCConDept_Temp hccondept ON hccondept.HCUID = a.HCUID
--WHERE     (a.HCUId = @HealthCheckId)
--ORDER BY a.Sequence



END




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_OtherProcedureList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_OtherProcedureList_SCS]-- 0
--@HealthCheckId as int
AS

BEGIN

	SELECT  row_number() over(order by b.code) as SNo,b.id as ProcedureId, ISNULL('', 0) AS ItemPrice
	, b.Code, b.Name,b.Code + '-' + b.Name as CodeName,'0' as Sequence,'0' as OriginalPrice,'0.00' as Percentage,'0.00' as Price
	FROM    OtherProcedures AS b where b.Deleted = 0
ORDER BY b.code

 

END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPriceTempDisplay_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]22
--exec [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting] 22,0
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPriceTempDisplay_SCS]-- 55
AS

BEGIN
			SELECT 
			row_number() over(order by a.Id) as SNo
			,a.testid
			,'0' as ItemPrice
			,a.tid
			,a.TestName as Code
			,a.TestName as testname
			,a.TestName as CodeName
			,a.stnid
			,a.station
			,a.sid--sampleid
			,a.Sample as sample
			,a.Id as seq
			,a.OriginalPrice
			,a.Percentage
			,a.Price
			,a.HealthCheckupId
		 from dbo.ITADMIN_HCINV_Temp a
END




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]22
--exec [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting] 22,0
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting]-- 0
@HealthCheckId as int,
@Amount as decimal
AS

BEGIN

Declare @TotalPrice as DECIMAL(18,2)
Declare @OriginalPrice as DECIMAL(18,2)
Declare @Percentage as DECIMAL(18,2)
Declare @ItemPrice as DECIMAL(18,2)
Declare @PricePerItem as DECIMAL(18,2)
Declare @NumberofItem as DECIMAL(18,2)
Declare @OrignalPrice as DECIMAL(18,2)
Declare @SUMPricePerItem as DECIMAL(18,2)


IF (@Amount = 0) 
	BEGIN
		  -----Total Price for All Package
		 SELECT @TotalPrice =  price from OP_P_HCU where HCUID = @HealthCheckId

		 SELECT @OriginalPrice = price from OP_P_1_Test where id = @HealthCheckId

		 --SELECT @Percentage  = (@OriginalPrice / @TotalPrice) * 100

		 --SELECT @ItemPrice = (@Percentage * @TotalPrice)

		 select  @NumberofItem = max(a.Sequence) from HealthCheckUpDetail a where a.HCUID = @HealthCheckId

		 SELECT @PricePerItem = @TotalPrice / @NumberofItem

		 Select @SUMPricePerItem = sum(@PricePerItem)

		 Select @Percentage = (@PricePerItem /@TotalPrice) * 100

						SELECT  row_number() over(order by a.Sequence) as SNo
								,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice
								, b.ID AS tid,b.Code,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName
								, d.ID AS stnid
								, d.Name AS station
								, f.ID AS sid
								, f.Name AS sample
								, a.Sequence AS seq
								,g.price OriginalPrice
								--,@OrignalPrice as OriginalPrice
								--,sum(g.price) as Percentage
								--,g.price / (sum(g.price) * 100 ) as Percentage
								,@Percentage as Percentage
								,@PricePerItem as Price
						FROM HealthCheckUpDetail AS a 
							INNER JOIN Test AS b ON a.ServiceID = b.ID 
							INNER JOIN TestLab AS c ON b.ID = c.TESTID 
							INNER JOIN Station AS d ON a.stationid = d.ID 
							INNER JOIN Sample AS f ON a.SampleId = f.ID
							LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
			 
				WHERE     (a.HCUID = @HealthCheckId) AND (c.DELETED = 0)
				order by a.Sequence
    END
		ELSE
				BEGIN

								SELECT  row_number() over(order by a.Sequence) as SNo
										,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice
										, b.ID AS tid,b.Code,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName
										, d.ID AS stnid
										, d.Name AS station
										, f.ID AS sid
										, f.Name AS sample
										, a.Sequence AS seq
										,g.price OriginalPrice
										--,sum(g.price) as Percentage
										--,g.price / (sum(g.price) * 100 ) as Percentage
										,'0.00' as Percentage
										,'0.00' as Price
										,a.HCUID as HealthCheckUpId
								FROM HealthCheckUpDetail AS a 
									INNER JOIN Test AS b ON a.ServiceID = b.ID 
									INNER JOIN TestLab AS c ON b.ID = c.TESTID 
									INNER JOIN Station AS d ON a.stationid = d.ID 
									INNER JOIN Sample AS f ON a.SampleId = f.ID
									LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
			 
						WHERE     (a.HCUID = @HealthCheckId) AND (c.DELETED = 0)
						order by a.Sequence
		END
END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTEST2]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]22
--exec [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting] 22,0
cREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTEST2]-- 0
@HealthCheckId as int,
@Amount as decimal
AS

BEGIN

Declare @TotalPrice as DECIMAL(18,2)
Declare @OriginalPrice as DECIMAL(18,2)
Declare @Percentage as DECIMAL(18,2)
Declare @ItemPrice as DECIMAL(18,2)
Declare @PricePerItem as DECIMAL(18,2)
Declare @NumberofItem as DECIMAL(18,2)
Declare @OrignalPrice as DECIMAL(18,2)
Declare @SUMPricePerItem as DECIMAL(18,2)


IF (@Amount = 0) 
	BEGIN
		  -----Total Price for All Package
		 SELECT @TotalPrice =  price from OP_P_HCU where HCUID = @HealthCheckId

		 SELECT @OriginalPrice = price from OP_P_1_Test where id = @HealthCheckId

		 --SELECT @Percentage  = (@OriginalPrice / @TotalPrice) * 100

		 --SELECT @ItemPrice = (@Percentage * @TotalPrice)

		 select  @NumberofItem = max(a.Sequence) from HealthCheckUpDetail a where a.HCUID = @HealthCheckId

		 SELECT @PricePerItem = @TotalPrice / @NumberofItem

		 Select @SUMPricePerItem = sum(@PricePerItem)

		 Select @Percentage = (@PricePerItem /@TotalPrice) * 100

						SELECT  row_number() over(order by a.Sequence) as SNo
								,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice
								, b.ID AS tid,b.Code,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName
								, d.ID AS stnid
								, d.Name AS station
								, f.ID AS sid
								, f.Name AS sample
								, a.Sequence AS seq
								,g.price OriginalPrice
								--,@OrignalPrice as OriginalPrice
								--,sum(g.price) as Percentage
								--,g.price / (sum(g.price) * 100 ) as Percentage
								,@Percentage as Percentage
								,@PricePerItem as Price
						FROM HealthCheckUpDetail AS a 
							INNER JOIN Test AS b ON a.ServiceID = b.ID 
							INNER JOIN TestLab AS c ON b.ID = c.TESTID 
							INNER JOIN Station AS d ON a.stationid = d.ID 
							INNER JOIN Sample AS f ON a.SampleId = f.ID
							LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
			 
				WHERE     (a.HCUID = @HealthCheckId) AND (c.DELETED = 0)
				order by a.Sequence
    END
		ELSE
				BEGIN

								SELECT @Percentage 
				
								SELECT  row_number() over(order by a.Sequence) as SNo
										,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice
										, b.ID AS tid,b.Code,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName
										, d.ID AS stnid
										, d.Name AS station
										, f.ID AS sid
										, f.Name AS sample
										, a.Sequence AS seq
										,g.price OriginalPrice
										--,sum(g.price) as Percentage
										--,g.price / (sum(g.price) * 100 ) as Percentage
										,'0.00' as Percentage
										,'0.00' as Price
								FROM HealthCheckUpDetail AS a 
									INNER JOIN Test AS b ON a.ServiceID = b.ID 
									INNER JOIN TestLab AS c ON b.ID = c.TESTID 
									INNER JOIN Station AS d ON a.stationid = d.ID 
									INNER JOIN Sample AS f ON a.SampleId = f.ID
									LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
			 
						WHERE     (a.HCUID = @HealthCheckId) AND (c.DELETED = 0)
						order by a.Sequence
		END
END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSNew]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]22
--exec [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSTesting] 22,0
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCSNew]-- 55--54,0
@HealthCheckId as int
AS

BEGIN
	    SELECT     
		row_number() over(order by a.Id) as SNo
		,a.ServiceId AS testid
		,b.ID AS tid
		,b.Code
		,b.Name as testname
		,b.Code + '-' + ' ' + b.Name AS CodeName
		,d.ID AS stnid
		,d.Name AS station
		,f.ID AS sid
		,f.Name AS sample
		,a.Sequence AS seq
		,g.price OriginalPrice
		,a.Percentage as Percentage
		,a.Price as Price
		,a.HealthCheckupId as HealthCheckUpId
		FROM dbo.ITADMIN_HealthCheckUpDetail AS a 
		    INNER JOIN Test AS b ON a.ServiceID = b.ID 
			INNER JOIN TestLab AS c ON b.ID = c.TESTID 
			INNER JOIN dbo.Station AS d ON a.stationid = d.ID 
			INNER JOIN Sample AS f ON a.SampleId = f.ID
			LEFT JOIN OP_P_1_Test g ON g.id = a.HealthCheckupId 
		WHERE   (c.DELETED = 0) and a.HealthCheckUpId = @HealthCheckId
		order by a.Id
END		


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




 
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS] 
@HealthCheckId as int = 72

AS

BEGIN

	--SELECT  a.Id as SNo
	--		,a.ServiceId as testid
	--		,'0' AS ItemPrice
	--		,b.ID AS tid
	--		,b.Code
	--		,a.TestName as testname
	--		,b.Code + '-' + ' ' + b.Name AS CodeName
	--		,d.ID AS stnid
	--		,d.Name AS station
	--		,f.ID AS sid
	--		,f.Name AS sample
	--		,a.Sequence AS seq
	--		,a.OriginalPrice
	--		,a.Percentage
	--		,a.Price
	--		,a.HealthCheckupId
	--from  ITADMIN_HealthCheckUpDetailInvestigation_FinalPrice a
	--LEFT JOIN Test AS b ON a.ServiceId = b.ID 
	--LEFT JOIN dbo.Station AS d ON a.stationid = d.ID 
	--LEFT JOIN Sample AS f ON a.SampleId = f.ID
	--LEFT JOIN TestLab AS c ON b.ID = c.TESTID
	-- WHERE     (a.HealthCheckUpId = 63) AND (c.DELETED = 0)


 
 select 
 
 a.sequence as SNo,
a.serviceid as testid,
IsNull(a.ItemPrice,0) ItemPrice
,b.id as tid
,b.Code
,b.name as testname
,b.Code + '-' + ' ' + b.Name AS CodeName
,d.id as stnid
,d.name as station,f.id as sid
,f.name as sample 
,a.sequence as seq
,'' as OriginalPrice
,'' as  Percentage
,'' as  Price
,a.hcuid as  HealthCheckupId

 
 
 from healthcheckupdetail a
 left join test b on b.id = a.ServiceID
 left join TestLab c on c.TESTID = b.ID
 left join his.dbo.station d on a.stationid = d.ID
 left join sample f on f.ID = a.SampleId
   where HCUID = @HealthCheckId and c.DELETED = 0 order by a.sequence

--  [ITADMIN].[HealthCheckUp_InvestigationWithPrice_SCS]  
	--SELECT  Distinct row_number() over(order by a.Sequence) as SNo
	--									,a.ServiceID AS testid
	--									,'0' AS ItemPrice
	--									, b.ID AS tid
	--									,b.Code
	--									,a.TestName as testname
	--									,b.Code + '-' + ' ' + b.Name AS CodeName
	--									, d.ID AS stnid
	--									, d.Name AS station
	--									, f.ID AS sid
	--									, f.Name AS sample
	--									, a.Sequence AS seq
	--									,a.OriginalPrice OriginalPrice
	--									--,sum(g.price) as Percentage
	--									--,g.price / (sum(g.price) * 100 ) as Percentage
	--									--,'0.00' as Percentage
	--									--,'0.00' as Price
	--									,a.Percentage
	--									,a.Price
	--									,a.HealthCheckUpId as HealthCheckUpId
	--							FROM ITADMIN_HealthCheckUpDetailInvestigation AS a 
	--								LEFT JOIN Test AS b ON a.ServiceID = b.ID 
	--								LEFT JOIN TestLab AS c ON b.ID = c.TESTID 
	--								LEFT JOIN Station AS d ON a.stationid = d.ID 
	--								LEFT JOIN Sample AS f ON a.SampleId = f.ID
	--								LEFT JOIN OP_P_1_Test g ON g.id = a.HealthCheckUpId
	--								--LEFT JOIN dbo.ITADMIN_HealthCheckUpDetailInvestigation hcinv ON hcinv.HealthCheckUpId = a.HCUID
	--							--Note Change Table to permanet ITADMIN_HealthCheckUpDetailInvestigation
	--					WHERE     (a.HealthCheckUpId = @HealthCheckId) AND (c.DELETED = 0)

END



GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationList_SCSNew]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationList_SCSNew]-- 0
--@HealthCheckId as int
AS

BEGIN

		SELECT     
		row_number() over(order by a.Sequence) as SNo
		,a.ServiceId AS testid
		,b.ID AS tid
		,b.Code
		,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName
		,d.ID AS stnid
		,d.Name AS station
		,f.ID AS sid
		,f.Name AS sample
		,a.Sequence AS seq
		,g.price OriginalPrice
		,'0.00' as Percentage
		,'0.00' as Price
		,a.HealthCheckupId as HealthCheckUpId
		FROM dbo.ITADMIN_HealthCheckUpDetail AS a 
		    INNER JOIN Test AS b ON a.ServiceID = b.ID 
			INNER JOIN TestLab AS c ON b.ID = c.TESTID 
			INNER JOIN dbo.Station AS d ON a.stationid = d.ID 
			INNER JOIN Sample AS f ON a.SampleId = f.ID
			LEFT JOIN OP_P_1_Test g ON g.id = a.HealthCheckupId
			 
WHERE   (c.DELETED = 0)
order by a.Sequence

END



GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_InvestigationList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_InvestigationList_SCS] 
--@HealthCheckId as int
AS

BEGIN

		--SELECT     row_number() over(order by a.Sequence) as SNo,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice, b.ID AS tid,b.Code
		--,b.Name as testname,b.Code + '-' + ' ' + b.Name AS CodeName, d.ID AS stnid, d.Name AS station, f.ID AS sid, f.Name AS sample, 
  --      a.Sequence AS seq,g.price OriginalPrice,'0.00' as Percentage,'0.00' as Price,a.HCUID as HealthCheckUpId
		--FROM HealthCheckUpDetail AS a 
		--    INNER JOIN Test AS b ON a.ServiceID = b.ID 
		--	INNER JOIN TestLab AS c ON b.ID = c.TESTID 
		--	INNER JOIN dbo.Station AS d ON a.stationid = d.ID 
		--	INNER JOIN Sample AS f ON a.SampleId = f.ID
		--	LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
		--	WHERE  c.DELETED = 0
		--	order by a.Sequence
-- [ITADMIN].[HealthCheckUp_InvestigationList_SCS]
select 
row_number() over(order by b.Code) as SNo 
,b.Id as testid 
, ISNULL(b.COSTPRICE, 0) AS ItemPrice
,b.ID AS tid
,b.Code
,b.Name as testname 
, b.Code + '-' + ' ' +  b.Name AS CodeName
,d.id AS stnid
,d.Name AS station
, '' AS sid
, '' AS sample
,'' AS seq
,'' OriginalPrice
,'0.00' as Percentage
,'0.00' as Price
,'' as HealthCheckUpId
 
from Test b
INNER JOIN TestLab AS c ON b.ID = c.TESTID 
INNER JOIN dbo.Station AS d ON c.stationid = d.ID 

 where b.profile=0 and b.deleted=0 Order by b.Code 

 
END



GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_Investigation_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_Investigation_SCS]-- 0
@HealthCheckId as int
AS

BEGIN

		SELECT     row_number() over(order by a.Sequence) as SNo,a.ServiceID AS testid, ISNULL(a.ItemPrice, 0) AS ItemPrice, b.ID AS tid, b.Name AS testname, d.ID AS stnid, d.Name AS station, f.ID AS sid, f.Name AS sample, 
        a.Sequence AS seq,g.price OriginalPrice,'0.00' as Percentage,'0.00' as Price
		FROM HealthCheckUpDetail AS a 
		    INNER JOIN Test AS b ON a.ServiceID = b.ID 
			INNER JOIN TestLab AS c ON b.ID = c.TESTID 
			INNER JOIN dbo.Station AS d ON a.stationid = d.ID 
			INNER JOIN Sample AS f ON a.SampleId = f.ID
			LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
			 
WHERE     (a.HCUID = @HealthCheckId) AND (c.DELETED = 0)
order by a.Sequence

END


GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_FetchDetails_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_FetchDetails_SCS]-- 57-- 0
@HealthCheckId as int
AS

BEGIN

				 SELECT    a.DepartmentId
						  ,c.Name as DepartmentName
						  ,a.companyid
						  ,b.Name as CompanyName
						  ,a.Code
						  ,a.Name as HealthCheckUpName
						  ,replace(convert(varchar(11),a.StartDateTime,106),' ','-') as Date
						  ,convert(decimal(18,2),d.Price) as Amount
					FROM      HealthCheckUp AS a 
							  INNER JOIN Company AS b ON a.companyid = b.ID
							  LEFT JOIN	Department as c ON c.ID = a.DepartmentId
							  LEFT JOIN OP_P_HCU as d ON  d.HCUID = a.ID 
					WHERE     (a.Deleted = 0) and a.ID = @HealthCheckId
	
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup








GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoardTProcedure_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_DashBoardTProcedure_SCS] --'30-Apr-2016',38164
@Date as Datetime,
@Pin as int
AS

BEGIN


SELECT     
		    row_number() over(order by d.Code) as SNo   
		   ,c.Name AS doctor
		   , a.NoOfDays AS PackDays
		   ,a.PinNo, CONVERT(varchar(30)
		   ,b.Title + ' ' + b.Firstname + ' ' + b.MiddleName + ' ' + b.LastName) AS Patient
		   ,d.ID AS TestId
		   ,d.Code + '' + d.Name AS Package
		   , a.NoOfVisits AS PackVisits
		   , DATEDIFF(d, a.Billdatetime,@Date) AS Days
		   ,a.visitscompleted AS visits
		   ,c.ID AS doctorid
		   ,a.Remarks
FROM         OPProcedureConsultaion AS a 
			INNER JOIN Patient AS b ON a.PinNo = b.Registrationno 
			INNER JOIN Employee AS c ON a.DoctorId = c.ID 
			INNER JOIN OtherProcedures AS d ON a.ItemId = d.ID
WHERE     (a.PinNo = @Pin)
ORDER BY patient, d.Name

END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoardTest_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[HealthCheckUp_DashBoardTest_SCS]-- 0
@Date as Datetime,
@Pin as int
AS

BEGIN

			SELECT 
			 row_number() over(order by d.Code) as SNo   
			,d.ID AS TestId, d.Code + '' + d.Name AS TestName ---as Package
           ,c.Name AS doctor
		   , a.NoOfDays AS PackDays
		   ,a.NoOfVisits AS PackVisits
           ,a.PinNo
		   ,CONVERT(varchar(30), b.Title + ' ' + b.Firstname + ' ' + b.MiddleName + ' ' + b.LastName) AS Patient  
		   ,DATEDIFF(d, a.Billdatetime, @Date) AS Days
		   ,c.ID AS doctorid, a.Remarks
FROM         OPPackageConsultation AS a 
				INNER JOIN Patient AS b ON a.PinNo = b.Registrationno 
				INNER JOIN Employee AS c ON a.DoctorId = c.ID 
				INNER JOIN Test AS d ON a.ItemId = d.ID
WHERE     (a.PinNo = @Pin)
ORDER BY patient, d.Name


END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_DashBoard_SCS]-- 0

AS

BEGIN

		SELECT    row_number() over(order by a.ID) as SNo,
				  a.ID as HealthCheckId, a.Code, a.Name as HealthCheckup,b.Name AS CompanyName,replace(convert(varchar(11),a.StartDateTime,106),' ','-') as StartDateTime
				  , a.DepartmentId, a.instructions, a.companyid, a.EndDateTime, a.Deleted, a.Blocked, a.OperatorID, a.UPLOADED, 
				  b.Code AS Expr1
		FROM      HealthCheckUp AS a 
				  INNER JOIN Company AS b ON a.companyid = b.ID
		WHERE     (a.Deleted = 0)
		ORDER BY SNo,a.StartDateTime desc


END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup








GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPriceTemp_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPriceTemp_SCS]-- 1

AS

BEGIN

 SELECT row_number() over(order by a.Sequence) as SNo
			,a.DepartmentId
			,b.DeptCode + '-' + ' ' + b.Name as NameCode
			,b.Name AS Deptname
			,'0.00' AS ItemPrice
			,a.Sequence
			,a.OriginalPrice
			,a.Percentage
			,a.Price
			--/note change to select * From dbo.ITADMIN_HealthCheckUp_ConsultationDepartment
FROM        ITADMIN_HCConDept_Temp AS a 
			LEft JOIN Department as b on a.DepartmentId = b.ID
ORDER BY a.Sequence


--SELECT row_number() over(order by a.Sequence) as SNo
--			,a.DepartmentId,b.DeptCode + '-' + ' ' + b.Name as NameCode,b.Name AS Deptname, a.Sequence,ISNULL(a.ItemPrice, 0) AS ItemPrice,ISNULL(g.price, 0) as OriginalPrice,'0.00' as Percentage,'0.00' as Price
--FROM        HealthCheckupConsultDept AS a 
--			INNER JOIN Department AS b ON a.DepartmentId = b.ID
--			LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID 
--WHERE     (a.HCUId = 1)
--ORDER BY a.Sequence

END

--select * from employee where Name like '%Carlo%'



GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPrice_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPrice_SCS]-- 1
@HealthCheckId as int = 2
AS

BEGIN

	--SELECT a.SNo
	--	   ,a.DepartmentId
	--	   ,b.DeptCode + '-' + ' ' + b.Name as CodeName
	--	   ,a.Sequence
	--	   ,b.Name AS Deptname
	--	   ,'0.00' AS ItemPrice
	--	   ,a.OriginalPrice
	--	   ,a.Percentage as Percentage
	--	   ,a.Price
		 
	--FROM ITADMIN_HCConsulDept_FinalPrice a
	--LEFT JOIN Department AS b ON b.ID  = a.DepartmentId
	--where b.Deleted = 0 and a.HCUId = @HealthCheckId 
--[ITADMIN].[HealthCheckUp_ConsulatationDeptListWithPrice_SCS] 
 
select
 a.Sequence  as SNo
 , a.DepartmentId
  ,b.DeptCode + '-' + ' ' + b.Name as CodeName
   ,a.Sequence
   ,b.Name as Deptname
,IsNull(a.ItemPrice,0) ItemPrice
  ,'0' as  OriginalPrice
		   ,'0' as  Percentage
		   ,'0' as Price

from HealthCheckupConsultDept a,Department b 
where a.DepartmentId = b.Id and a.hcuid =@HealthCheckId  Order By Sequence
 

-- SELECT row_number() over(order by a.Sequence) as SNo
--			,a.DepartmentId
--			,b.DeptCode + '-' + ' ' + b.Name as CodeName
--			,b.Name AS Deptname
--			,a.Sequence
--			,'0.00' AS ItemPrice
--			,a.Sequence
--			,ISNULL(g.price, 0) as OriginalPrice
--			,'0.00' as Percentage
--			,'0.00' as Price
--			,hccondept.Percentage as Percentage
--			,hccondept.Price as Price
--			--/note change to select * From dbo.ITADMIN_HealthCheckUp_ConsultationDepartment
--FROM        HealthCheckupConsultDept AS a 
--			INNER JOIN Department AS b ON a.DepartmentId = b.ID
--			LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID
--			LEFT JOIN dbo.ITADMIN_HCConDept_Temp hccondept ON hccondept.HCUID = a.HCUID
--			--Note change permanet table to ITADMIN_HealthCheckUp_ConsultationDepartment
--WHERE     (a.HCUId = @HealthCheckId)
--ORDER BY a.Sequence



END




GO

/****** Object:  StoredProcedure [ITADMIN].[HealthCheckUp_ConsulatationDeptList_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[HealthCheckUp_Investigation_SCS] 22
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HealthCheckUp_ConsulatationDeptList_SCS]-- 0
--@HealthCheckId as int
AS

BEGIN

		SELECT row_number() over(order by a.Code) as SNo,a.ID as DepartmentId,b.DeptCode + '-' + ' ' + b.Name as NameCode
		,b.Name AS Deptname,ISNULL('', 0) AS ItemPrice,'0' Sequence,'0.00'  as OriginalPrice,'0.00' as Percentage,'0.00' as Price
		FROM   Specialisation AS a 
				INNER JOIN Department AS b ON a.ID = b.ID
				--LEFT JOIN OP_P_1_Test g ON g.id = a.HCUID 
ORDER BY a.Code

 


END


GO

/****** Object:  StoredProcedure [ITADMIN].[OLDRangeMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 
create PROCEDURE [ITADMIN].[OLDRangeMarkup_DashBoard_SCS]-- 0

AS

BEGIN

SELECT 
		 row_number() over(order by  EndDateTime desc) as SNo  
		,a.MinRange
		,a.MaxRange
		,a.Percentage
		,a.ID 
from oldp_IpCstMarkup a  


END

GO

/****** Object:  StoredProcedure [ITADMIN].[CST_CheckZeroPriceList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[CST_CheckZeroPriceList]
@ipid int = 79640
AS
BEGIN

SET NOCOUNT ON;
 
				SELECT c.FirstName + ' '+c.LastName as PTName,a.IPID,B.ORDERID,A.DISPATCHEDDATETIME,B.SERVICEID ITEMID,B.BATCHID
				,B.PRICE,b.epr,B.DISPATCHQUANTITY,I.ITEMCODE,I.NAME  as ItemName
				FROM DRUGORDER A  
				INNER JOIN DrugOrderDetailSubstitute B ON A.ID=B.ORDERID 
				INNER JOIN ITEM I ON B.SERVICEID=I.ID
				inner join InPatient C on a.IPID = c.IPID
				WHERE  a.IPID in (@ipid)  
				AND PRICE<0.01 and i.CategoryID = 7 --cst items  
				and b.ServiceId not in (select ItemID from FixedCST WHERE ITEMID IS NoT NULL) -- sir jericho list of zero price items
				order by  A.DISPATCHEDDATETIME desc

END
--select ipid as id ,cast(RegistrationNo as varchar)+'-'+FirstName + ' ' + MiddleName + ' '+FamilyName as name,FirstName + ' ' + MiddleName + ' '+FamilyName as text from InPatient 
 
GO

/****** Object:  StoredProcedure [ITADMIN].[CST_CheckZeroPriceListSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[CST_CheckZeroPriceListSave]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlZeroPrice	    as xml = '<DocumentElement> <ZeroPrice> <Action>1</Action> <IpId>193272</IpId> <OperatorID>11503</OperatorID> </ZeroPrice> </DocumentElement>'
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlZeroPrice
SELECT 
 IPID
,Action,OperatorID
into #tmpZeroCSTPriceDT
from openxml(@handle, '/DocumentElement/ZeroPrice',2) with
( 
 IpId int,Action int,OperatorID int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @IPID as int
 
declare @operatorid as int 

select   @IPID = IPID ,@Action = Action ,@operatorid = OperatorID
from   #tmpZeroCSTPriceDT	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   

IF NOT EXISTS(select * from sys.tables where type = 'u' and name = 'CST_ZeroItem_Logs')
 BEGIN 

		 CREATE TABLE [HIS].[dbo].[CST_ZeroItem_Logs](
			[IPID] [int] NOT NULL,
			[OperatorId] [int] NULL,
			[RegistrationNo] [int] NULL,
			[DateCreated] [datetime] NULL
		) ON [MasterFile]

END



if exists(select * FROM DRUGORDER A  
INNER JOIN DrugOrderDetailSubstitute B ON A.ID=B.ORDERID 
INNER JOIN ITEM I ON B.SERVICEID=I.ID
WHERE IPID=@IPID AND PRICE<0.01
and i.CategoryID = 7 --cst items  
		and b.ServiceId not in (select ItemID from FixedCST WHERE ITEMID IS NoT NULL) -- sir carlo/jericho list of zero price items
		)
BEGIN
 
-- [ITADMIN].[CST_CheckZeroPriceListSave] '' 
		insert into [HIS].[dbo].[CST_ZeroItem_Logs] (IPID,OperatorId,DateCreated,[RegistrationNo])
		select @IPID,@operatorid,getdate(),(select RegistrationNo from InPatient where IPID = @IPID)

		update b
		set 
		b.price = 0.01
		,b.epr = 0.01
		,B.BillablePrice= 0.01 
		FROM DRUGORDER A  
		INNER JOIN DrugOrderDetailSubstitute B ON A.ID=B.ORDERID 
		INNER JOIN ITEM I ON B.SERVICEID=I.ID
		WHERE IPID=@IPID AND PRICE<0.01
		and i.CategoryID = 7 --cst items  
		and b.ServiceId not in (select ItemID from FixedCST WHERE ITEMID IS NoT NULL) -- sir carlo/jericho list of zero price items

		SET	@ErrorMessage = '100-Update Successfully.'	

END
else
begin

		SET	@ErrorMessage = '100-No item updated.'
end
-- select * from [HIS].[dbo].[CST_ZeroItem_Logs]
--------------------------------------------			
COMMIT TRAN

    	
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				--UPDATE    OPRevisitPackages
				--SET              NoOfdays = @NoOfDays, NoOfVisits = @NoOfVisits
				--WHERE     (Testid = @TestId) AND (Serviceid = @ServiceId) and deleted = 0


---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Contact IT Administrator'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpZeroCSTPriceDT

set xact_abort OFF

END
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordDaysRemaining_TEST]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CheckUserPasswordDaysRemaining_TEST]  
  @id		as varchar(25) = '11503'
  
AS
BEGIN

SET NOCOUNT ON;
 
 declare @expirydate as datetime

 select @expirydate = EffectivityDate from  ITADMIN.User_Authentication where EmployeeId in (select employeeid from employee where id = @id)  and Active = 1
select @expirydate = DATEADD(day, 130, MAX(@expirydate))   

SELECT  CASE WHEN DATEDIFF(dd, getdate(),@expirydate ) > 90 THEN 90 ELSE DATEDIFF(dd, getdate(),@expirydate )  END  as daysremaining 
--from Employee a  left join ITADMIN.User_Authentication b on b.EmployeeId = Convert(varchar(250),a.EmployeeID) and b.Active = 1 where a.ID = @id    


END

GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCS_OLD2017]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [ITADMIN].[Tariff_Save_SCS_OLD2017]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlTariffSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlTariffSave
SELECT 
Action
,Id
,Name
into #tmpTariffSave

from openxml(@handle, '/DocumentElement/TariffSave',2) with
(
Action int
,Id int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @TariffId as int
declare @MaxTariffId as int
declare @TariffName as varchar(250)
declare @MaxTariff as varchar(250)
declare @ServiceName as varchar(250)
declare @myMaxId as int

select @Action = Action,@TariffId = Id,@TariffName  = Name
from   #tmpTariffSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   Declare @SQL nvarchar(max)
	 --  Declare @ChkExists nvarchar(max)
	   Declare @filename as varchar(max)


	   	if exists(select * from Tariff where Name = @TariffName)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Tariff Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


	  Select @MaxTariffId = max(Id) + 1 from Tariff

		Insert into Tariff(Id, Name , StartDateTime, Deleted) 
				Select  @MaxTariffId,upper(@TariffName),Getdate(),0 
			    from #tmpTariffSave

---------Creating Empty OPTariffPrice
					 Select * into TempOPBService
					 from OPBService where deleted = 0

					 --select * from OP_P_101_Test

						Create Table #TempEmptyOPPrice( 
						ID int NULL,
						Price numeric NULL,
						StartDateTime datetime NULL, 
						Deleted bit NULL,
						EndDateTime datetime NULL
						)

						CREATE TABLE #TempIfDoctor(
						id int NOT NULL,
						Price numeric NULL,
						startdatetime datetime NOT NULL,
						deleted bit NOT NULL,
						enddatetime datetime NULL,
						visittype int NULL,
						RefPrice numeric NULL
						) 

						--select * from IPBService where deleted = 0
						--select * From OPBService where deleted = 0
							--select * into EmptyPrice
							--From SP_HELP OP_P_1_FoodItem
							--Select * From Tariff
							--select * from 
							--delete from EmptyPrice

				Select @MaxTariff = max(Id) from Tariff
				Declare @TypeId as int

		WHILE Exists (Select * from  TempOPBService)
					
			BEGIN 
						Select @MaxTariff = max(Id) from Tariff
					    SELECT top 1 @myMaxId= Id from TempOPBService

						Select @ServiceName = PriceTable from TempOPBService where Id = @myMaxId

						set @filename = 'OP_P_' + cast(@MaxTariff as varchar) + '_' + cast(@ServiceName as varchar) 

						INSERT INTO logTempCreateEmptyOPTariff
							(TableName,CreatedDate)
						Select @filename,Getdate()

						--Delete logTempCreateEmptyOPTariff

						Update a set a.typeid = 2 from logTempCreateEmptyOPTariff a where a.TableName like '%Doctor%'

				IF EXISTS (Select 1 from logTempCreateEmptyOPTariff where typeid = 2)	
								
						     set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@filename as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' Delete from TempOPBService where id = ' + cast(@myMaxId as varchar) +
											   ' END ' +  
											   ' ELSE ' + 
											   ' BEGIN ' +
											   ' SELECT * INTO ' + cast(@filename as nvarchar) +
											   ' from #TempIfDoctor' +
											   ' END '
							ELSE 


							   set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@filename as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' Delete from TempOPBService where id = ' + cast(@myMaxId as varchar) +
											   ' END ' +  
											   ' ELSE ' + 
											   ' BEGIN ' +
											   ' SELECT * INTO ' + cast(@filename as nvarchar) +
											   ' from #TempEmptyOPPrice' +
											   ' END '

							--print @SQL
																												
								
							EXEC (@SQL)

							Delete from TempOPBService  where id = @myMaxId
				END

				--select * from SP_HELP OP_P_101_Test

				--select * from Tariff

--Creating Empty IPTariffPrice
				Create Table #TempEmptyIPPrice( 
					  ID int NULL,
					  Price numeric NULL,
					  Deleted bit NULL, 
					  StartDateTime datetime NULL,
					  EndDateTime datetime NULL,
					  OperatorID int NULL
					 )

					Select * into TempBedTypeId 
					from dbo.BedType where deleted = 0 

					--Select * into  TempBedTypeIdTest
					--from dbo.BedType where deleted = 0

					Select * into TempIPBService
					from IPBService where deleted = 0

					--Select * into TempIPBServiceTest
					--from IPBService where deleted = 0
					 
					--- Select * from IPBService
		Declare @PriceTable as Varchar(250)
		Declare @myBedTypeIdMax as Varchar(250)
		Declare @BedTypeId as varchar(250)

		--For Testing
			--Create Table CreateTableName( 
			--		  TableName varchar(250) NULL
			--		 )

		WHILE Exists (Select * from  TempIPBService)
				BEGIN
			---	Select * from dbo.P_108_1_NoPrice
					--select * from  drop table TempBedTypeIdTest
					--Select * from drop table TempIPBServiceTest
					--Select * from drop table CreateTableName
							  Select @MaxTariff = max(Id) from Tariff
							  SELECT Top 1 @myMaxId= ID from TempIPBService	
							  SELECT Top 1 @myBedTypeIdMax = id from TempBedTypeId

							  Select @PriceTable = PriceTable from TempIPBService where Id = @myMaxId

							----Select @BedTypeId = id from TempBedTypeId where id = @myBedTypeIdMax

							  set @filename = 'P_' + cast(@MaxTariff as varchar) + '_' + cast(@myBedTypeIdMax as varchar) + '_' + cast(@PriceTable as varchar)

							  --Insert into CreateTableName
								 --  (TableName)
							  --Values(@filename)

							  set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@filename as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' Delete from TempBedTypeId where id = ' + cast(@myBedTypeIdMax as varchar) +
											   ' Delete from TempIPBService where id = ' + cast(@myMaxId as varchar) +
											   ' END ' +  
											   ' ELSE ' + 
											   ' BEGIN ' +
											   ' SELECT * INTO ' + cast(@filename as nvarchar) +
											   ' from #TempEmptyIPPrice' +
											   ' SELECT * INTO OLD' + cast(@filename as nvarchar) +
											   ' from #TempEmptyIPPrice' +
											   ' END '
						
							EXEC (@SQL)
							  --set @SQL = ' Select * Into ' + cast(@filename as nvarchar) +
									----' (id,price,startdatetime,deleted,enddatetime) ' +
									----' Select id,price,startdatetime,deleted,enddatetime ' +
									--' from #TempEmptyIPPrice '
							--print @SQL	


							Delete from TempBedTypeId where id = @myBedTypeIdMax
							Delete from TempIPBService  where id = @myMaxId

				END
	

		  Drop table TempOPBService
		  Drop table #TempEmptyOPPrice
		  Drop table #TempEmptyIPPrice
		  Drop table TempIPBService
		  Drop table TempBedTypeId
		  drop table #TempIfDoctor
		---  Drop table EmptyPrice
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Tariff set Name =upper(@TariffName) where id =@TariffId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTariffSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlTariffSave xml, 
set @xmlTariffSave = '<DocumentElement>\r\n  <TariffSave>\r\n    <Action>1</Action>\r\n    <Id> </Id>\r\n    <Name>a</Name>\r\n </TariffSave>\r\n</DocumentElement>'
exec ITADMIN.Tariff_Save_SCSNew @ErrorMessage,@xmlTariffSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[PHACanceDateReceipt_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[PHACanceDateReceipt_Dashboard]
@stDate datetime = '2013-12-05'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

declare  @fromdate datetime ,@todate datetime
SET @fromdate = CONVERT(DATETIME,convert(varchar(10),@stDate,101),101) + ' 00:00:00'
SET @todate = CONVERT(DATETIME,convert(varchar(10),@stDate,101),101) +  ' 03:00:00'  

SELECT distinct opbillid,billno,'0' as selected FROM CANOPCOMPANYBILLDETAIL 
WHERE 
 CANCELDATETIME >=   @fromdate  AND CANCELDATETIME <= @todate  AND
 SERVICEID = 11 AND STATIONID IN (4,103,117) 
 
-- select * from station where id in   (4,103,117) 

/*
SELECT distinct opbillid,billno,'0' as selected,CANCELDATETIME  FROM CANOPCOMPANYBILLDETAIL 
WHERE  SERVICEID = 11 AND STATIONID IN (4,103,117) order by canceldatetime desc 

*/


END
GO

/****** Object:  StoredProcedure [ITADMIN].[PHACanceDateReceipt_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[PHACanceDateReceipt_Save] 
 @ErrorMessage                  as NVARCHAR(max) OUT,  
@Date datetime = '2017-06-01 12:00:00 AM'
,@xmlOpBillList xml = '<DocumentElement> <xmlOpBillList> <opbillid>12771779</opbillid> <billno>PCR1598093</billno> </xmlOpBillList> </DocumentElement>' 
AS
BEGIN

SET NOCOUNT ON;

set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOpBillList
SELECT 
IDENTITY(INT, 1,1) as TableID,
opbillid
,billno  
into #TmpXmlOpBillList
from openxml(@handle, '/DocumentElement/xmlOpBillList',2) with
(
opbillid varchar(max)
,billno varchar(max)
)
exec sp_xml_removedocument @handle
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
  BEGIN TRY 
    
        BEGIN TRAN

		declare @tableId int ,@opbillid varchar(max), @billno varchar(max),@olddate smalldatetime
		declare  @fromdate datetime ,@year int , @month int, @transTable varchar(max),@sql nvarchar(max)
		SET @fromdate = CONVERT(DATETIME,convert(varchar(10),@Date,101),101) + ' 23:59:00.000'
 
 -- select * from dbo.PHACanceDateReceipt_Logs   [ITADMIN].[PHACanceDateReceipt_Save] '' 
			 IF NOT EXISTS( SELECT * FROM sys.tables where name  =  'PHACanceDateReceipt_Logs' )
			 BEGIN

					 CREATE TABLE [dbo].[PHACanceDateReceipt_Logs](
						[Id] [int] IDENTITY(1,1) NOT NULL,
						[CancelDate] [smalldatetime] NULL,
						[CancelChangeDate] [smalldatetime] NULL,
						[OpBill] [nvarchar](max) NULL,
						[BillNo] [nvarchar](max) NULL,
						[CreatedDate] [datetime2](7) NULL
					) ON [MasterFile] TEXTIMAGE_ON [MasterFile]

			END

 
		WHILE EXISTS(select TableId from #TmpXmlOpBillList)
		BEGIN
	
				select @tableId = TableID,@opbillid = opbillid , @billno = billno from #TmpXmlOpBillList 
				select @year = year(canceldatetime), @month = MONTH(canceldatetime),@olddate = canceldatetime   from canopcompanybilldetail  where  billno =  @billno
				set @transTable = 'transorder_'+ cast(@year as varchar(max))+'_'+ cast(@month as varchar(max))

				insert into dbo.PHACanceDateReceipt_Logs (CancelDate,CancelChangeDate,OpBill,BillNo,CreatedDate)
				select @olddate,@fromdate,@opbillid,@billno,getdate()

				update canopcompanybilldetail set canceldatetime =  @fromdate  where billno = @billno  
				update canopbill set canceldatetime = @fromdate  where id= @opbillid  
				update cashissue set canceldate = @fromdate where opbillid= @opbillid 
				SET @sql = N'  UPDATE  '+@transTable + ' set datetime = '''+cast(@fromdate as varchar(max))+ '''  where stationslno =   SUBSTRING( '''+cast(@billno as varchar(max))+''' ,4,10)'
 
  				EXEC sp_executesql @sql  
					 
		delete from #TmpXmlOpBillList where TableID = @tableId
		END

   
        COMMIT TRAN

        SET @ErrorMessage = '100-Changing of Cancel Date is finish!'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 




	END
GO

/****** Object:  StoredProcedure [ITADMIN].[RamadanCutOff_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[RamadanCutOff_Save] 
 @Hours int = 2,
 @Min int = 0 
AS
BEGIN

Drop table dbo.RamadanCutoff
 
Select @Hours as Hrs, @Min as Mins into dbo.RamadanCutoff

 
 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariff_GetServiceListWithDynamicTable]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[IPTariff_GetServiceListWithDynamicTable]
 @Id as varchar(max) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 
  select * into #tmplistservicewithnoprice from ipbservice where pricetype <> 2 and PriceTable <> 'NoPrice' and Deleted = 0
  
 	SELECT A.ID AS id, A.ServiceName  as name, A.ServiceName as text 
	,CASE WHEN A.ID In (select ID from #tmplistservicewithnoprice) THEN 0 ELSE 1 END as Column1
			FROM dbo.IPBservice a
			WHERE A.Deleted = 0
				AND A.OrderType <> 5
				AND A.PriceType <> 1
				AND A.PriceType <> 0
				AND A.ServiceName like '%'+@Id+'%'
			ORDER BY A.ServiceName

	drop table #tmplistservicewithnoprice		


END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariff_GetItemCodePriceNotDynamicTable]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
create PROCEDURE [ITADMIN].[IPTariff_GetItemCodePriceNotDynamicTable] 
	@TariffID INT= 1 ,
	@ServiceID INT = 2,
	@ItemId INT = 0 
AS
BEGIN
 
 --  [ITADMIN].[IPTariff_GetItemCodePriceNotDynamicTable] 
 
					declare @PriceTable varchar(max) , @SQL as nvarchar(max) , @filenameNoDynamcTble varchar(max) 

					select @PriceTable = PriceTable from ipbservice where pricetype <> 2 and PriceTable <> 'NoPrice' and Deleted = 0 and ID = @ServiceID 
  
					SET @filenameNoDynamcTble = 'P_' + cast(@PriceTable as varchar)

					set @SQL = 	N'  select b.name, a.Price,a.StartDateTime,a.BedTypeID,0,0ItemId from  '+ cast(@filenameNoDynamcTble as varchar) +' a   ' + 
					' left join his.dbo.bedType b on a.BedTypeID = b.id   ' +
					'  where a.CategoryId = '+ cast(@TariffID as varchar) +'    and a.deleted = 0 and b.deleted = 0  order by a.BedTypeID   ' 
											 


					print @SQL		
					EXEC sp_executesql @SQL 

	 



END
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_NewItemCodeWithEffectDate]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 
CREATE PROCEDURE [ITADMIN].[Tariff_IP_NewItemCodeWithEffectDate] 
	@TariffID INT =6,
	@ServiceID INT = 6 ,
	@ItemId INT = 9796  -- base sa ItemCode
AS
BEGIN

	DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30), @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max),@OLDfilename as varchar(max)
	Declare @TempBedId as int, @SQLForTable NVARCHAR(max)
	Declare @FileId as int,@TempFiles as varchar(250),@OLDTempFiles as varchar(250),@ctrBedId as int



			declare @TempFilesName as TABLE ( 
					  id int identity (1,1),
					  Name varchar(250) NULL,
					  OLDName varchar(250) NULL,
					  BedTypeId int
					 )	

					create table #TempEmptyIPPriceViewWithEffectdate ( 
					  ID int NULL,
					  Price numeric NULL,
					  Deleted bit NULL, 
					  StartDateTime date NULL,
					  EndDateTime date NULL,
					  OldMaxStartdate date NULL,
					  OldMaxEnddate date NULL,
					  OperatorID int NULL,
					  BedTypeId int NULL
					 )

					SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID
					Select id,name into #TempBedTypeWitheffectdate from dbo.BedType where deleted = 0

				WHILE exists(select top 1 * from #TempBedTypeWitheffectdate)
				BEGIN
						SELECT top 1 @TempBedId = id from #TempBedTypeWitheffectdate
						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
						SET @OLDfilename = 'OLDP_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
						 
						 set @SQLForTable = N' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + '' + cast(@OLDfilename as varchar) + '''' + ')' +
														' BEGIN ' +
														' Create Table dbo.' + cast(@OLDfilename as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' +

														' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + '' + cast(@filename as varchar) + '''' + ')' +
														' BEGIN ' +
														' Create Table dbo.' + cast(@filename as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' 
														
													EXEC sp_executesql @SQLForTable 	
						insert into @TempFilesName (Name,BedTypeId,OLDName) values(@filename,@TempBedId,@OLDfilename);
						delete #TempBedTypeWitheffectdate where id = @TempBedId
				END


				WHILE exists(select top 1 * from @TempFilesName)
				BEGIN
							SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@OLDTempFiles = OLDName from @TempFilesName
						
							set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   --delete DUPLICATE
												 ' with Dups As(select ROW_NUMBER() OVER(PARTITION By id  order by (select 0)) as rn,* ' +
												 ' from '+ cast(@TempFiles as varchar) + ' where deleted = 0  and Id = '+  cast(@ItemId as varchar) +'  )  ' +
												 ' delete from dups where rn > 1  ' +


											   ' INSERT INTO #TempEmptyIPPriceViewWithEffectdate (ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID,OldMaxStartdate,OldMaxEnddate,BedTypeId) ' +
											   ' Select  ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID  '+
											   ',(select ISNULL(Max(StartDateTime), ''01-Jan-''+ cast( year(GETDATE()) as varchar(max)) ) from '+cast(@OLDTempFiles as varchar) + ' where deleted = 0  and Id = ' +  cast(@ItemId as varchar) +'  ) as OldMaxStartdate '+
											   ',(select   ISNULL(Max(EndDateTime),GETDATE())  from '+cast(@OLDTempFiles as varchar) + ' where deleted = 0  and Id = ' +  cast(@ItemId as varchar) +'  ) as OldMaxEnddate '+

											   ','+ cast(@ctrBedId as varchar) + ' from ' + cast(@TempFiles as varchar) + 
											   ' where deleted = 0 ' +
											   ' and Id = ' +  cast(@ItemId as varchar) +
											   ' END '	
											   print @SQL					 							  
						   EXEC sp_executesql @SQL 
					Delete  @TempFilesName where id = @FileId
				END



IF EXISTS (Select * from #TempEmptyIPPriceViewWithEffectdate)
				BEGIN

						Declare @TariffName as  varchar(250),@ServiceName as varchar(250)
				
						Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffId

						Select @ServiceName = ServiceName from IPBService where deleted = 0 and ID = @ServiceID  

						--Delete TempGetIPPriceReports

						--Insert into TempGetIPPriceReports
						--(BedName,Price,StartDateTime,BedTypeId,ID,TariffName,ServiceName)
						--Select b.name as BedName,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId,@TariffName,@ServiceName
						--from #TempEmptyIPPriceViewWithEffectdate a 
						--LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
						--order by a.BedTypeId asc
					 
						Select distinct 1 selected,a.name,ISNULL(convert(decimal(10,2),B.Price),'0.00') as Price,ISNULL(b.OldMaxEnddate,GETDATE()) as startdatetime,a.id as BedTypeId 
						From dbo.BedType a 
						left join #TempEmptyIPPriceViewWithEffectdate b on a.Id = b.BedTypeId
						where a.deleted = 0 
						order by a.Id asc

				END
				
				ELSE
				Select 1 selected,name,'0.00' as Price,Getdate() as startdatetime,id as BedTypeId From dbo.BedType where deleted = 0 order by BedTypeId asc

 --  [ITADMIN].[Tariff_IP_NewItemCodeWithEffectDate]  
drop table #TempBedTypeWitheffectdate
END
 
GO

/****** Object:  StoredProcedure [ITADMIN].[CathLabEmployeeMaster_Dashboard]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [ITADMIN].[CathLabEmployeeMaster_Dashboard]	
 @typeId as int = 2
AS
BEGIN
/*
	WHEN 2 THEN 'Doctors has been save' 
	WHEN 3 THEN 'Technician has been save' 
	WHEN 4 THEN 'Anaesthetist has been save' 
	WHEN 5 THEN 'Scrub Nurse has been save'
*/
SET NOCOUNT ON;


SELECT   DISTINCT  b.TypeID
into #TmpCathLabEmployeeMaster_Dashboard
FROM          CathEmployee AS b 
WHERE     (b.Type = @typeId) AND (b.Deleted = 0) 
	
	-- [ITADMIN].[CathLabEmployeeMaster_Dashboard]	
 
 select 
   row_number() over( order by a.ID desc ) as SNo,
   a.Id,a.Name,a.EmployeeID,b.Name as DeptName
 ,case when a.Id in (select TypeID from #TmpCathLabEmployeeMaster_Dashboard) then 1 else 0 end as  isExist
 
  from employee a left join dbo.Department b on a.DepartmentID = b.ID
 where  a.Deleted = 0  
-- and a.ID in (select TypeID  from #TmpCathLabEmployeeMaster_Dashboard )
 order by isExist desc
  

 drop table #TmpCathLabEmployeeMaster_Dashboard

END





GO

/****** Object:  StoredProcedure [ITADMIN].[CathLabEmployeeMaster_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [ITADMIN].[CathLabEmployeeMaster_Save] 
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
	@typeid varchar(20)
	,@type varchar(20)
	,@Action varchar(20)
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
IF (@Action= '1') -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			delete from dbo.OldCathEmployee where TypeID = @typeid and Type = @type
			insert into dbo.OldCathEmployee (Type,TypeID,Deleted)
			select @type,@typeid,1

 
			delete from dbo.CathEmployee where TypeID = @typeid and Type = @type

			insert into dbo.CathEmployee (Type,TypeID,Deleted)
			select @type,@typeid,0
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action='2') -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

	 
 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH    
	            
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action='3') -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN

			 
			delete from dbo.OldCathEmployee where TypeID = @typeid and Type = @type
			insert into dbo.OldCathEmployee (Type,TypeID,Deleted)
			select @type,@typeid,1

 
			delete from dbo.CathEmployee where TypeID = @typeid and Type = @type

			--insert into dbo.CathEmployee (Type,TypeID,Deleted)
			--select @type,@typeid,0
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

 

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/

---select * from Rooms
--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[CopyOPTariffSave_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--alter PROCEDURE [ITADMIN].[CopyOPTariffSave_SCS_march292017]  
CREATE PROCEDURE [ITADMIN].[CopyOPTariffSave_2017]  
	
    @ErrorMessage							as NVARCHAR(max) OUT,
     @xmlCopyOPTariffHeaderSave				as xml = '<DocumentElement> <CopyOPTariffHeaderSave> <Action>1</Action> <OperatorId>139</OperatorId> <fromTariffId>1</fromTariffId> <toTariffId>104</toTariffId> <percentage>10</percentage> <Effecdate>28-Mar-2017</Effecdate> </CopyOPTariffHeaderSave> </DocumentElement>',
	@xmlCopyOPTariffServiceDetailsSave      as xml = '<DocumentElement> <CopyOPTariffServiceDetailsSave> <serviceId>18</serviceId>    </CopyOPTariffServiceDetailsSave>  <CopyOPTariffServiceDetailsSave> <serviceId>14</serviceId>    </CopyOPTariffServiceDetailsSave> <CopyOPTariffServiceDetailsSave> <serviceId>2</serviceId>    </CopyOPTariffServiceDetailsSave> </DocumentElement>'

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyOPTariffHeaderSave
SELECT 
Action
,OperatorId
,fromTariffId
,toTariffId
,percentage
,Effecdate
into #tmpCopyTariffHeaderSave


from openxml(@handle, '/DocumentElement/CopyOPTariffHeaderSave',2) with
(
Action int
,OperatorId varchar(10)
,fromTariffId varchar(4)
,toTariffId varchar(4)
,percentage varchar(10)
,Effecdate varchar(25)
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyOPTariffServiceDetailsSave

select serviceId,ROW_NUMBER() over(order by serviceId) i
into #tmpCopyOPTariffServiceDetailsSave

from openxml(@handle, '/DocumentElement/CopyOPTariffServiceDetailsSave',2) with
(
serviceId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @fromTariffId as VARCHAR(4)
declare @toTariffId as VARCHAR(4)
--declare @Percentage as decimal(18,2)
declare @OperatorId as varchar(10)
declare @Percentage  VARCHAR(10)
declare @Name VARCHAR(255)
Declare @DestinationTable VARCHAR(255)
Declare @SQL NVARCHAR(MAX)
Declare @TableTEXT NVARCHAR(MAX)
Declare @EmptySQL NVARCHAR(MAX)
Declare @DeleteSQL NVARCHAR(MAX)
Declare @UpdateSQL NVARCHAR(MAX)
Declare @TestTable as varchar(250)
Declare @NurseTable as varchar(250)
Declare @CrossMatchTable as varchar(250)
Declare @DateToday as varchar(250)

SELECT @Action = Action,@fromTariffId = fromTariffId,@toTariffId = toTariffId,@Percentage = percentage,@OperatorId = OperatorId,@DateToday = Effecdate
from   #tmpCopyTariffHeaderSave	

--Select @DateToday  = Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					Create Table #CreateTableName( 
						ID	int IDENTITY(1,1) PRIMARY KEY,
						TableID  int NULL,
						TableName varchar(250) NULL,
						ServiceId varchar(250) NULL
						)

					select * into #tmpCopyOPTariffServiceDetailsSaveCHECKER  from  #tmpCopyOPTariffServiceDetailsSave

						declare @servideID  VARCHAR(10)
						declare @PriceTable  VARCHAR(150)

						WHILE Exists (Select top 1 * from #tmpCopyOPTariffServiceDetailsSaveCHECKER ) 
						BEGIN
											Select @servideID = serviceId from #tmpCopyOPTariffServiceDetailsSaveCHECKER
											Select @PriceTable = PriceTable from opbservice where id = @servideID
							
										INSERT INTO #CreateTableName
										(TableName,TableID)
										select Name,Id from sysobjects where name like 'OP[_]P[_]' + @fromTariffId + '[_]'+@PriceTable+'%' and type = 'U'
										delete from  #tmpCopyOPTariffServiceDetailsSaveCHECKER where serviceId =  @servideID
						END

					Update a set a.ServiceId = 2 from #CreateTableName a where a.TableName  like '%Doctor%'
					Update a set a.ServiceId = 0 from  #CreateTableName a where a.TableName not like '%Doctor%'

		
					Declare @Top as int
					Declare @PercentageAmount as varchar(20)
					Declare @PramDate as varchar(20)


					SET	@TableTEXT	= N' '
					SET	@SQL	= N' '
			WHILE Exists (Select * from #CreateTableName where ServiceId =0) 

				BEGIN 
							SELECT top 1 @Top = ID from #CreateTableName where ServiceId =0
							Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave
							Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave
							Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =0
							select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')
							INSERT INTO LogCopyOpTriff (ID,TableName,DestinationTable,ProcessDate,ServiceId)
							SELECT ID,TableName,@DestinationTable,Getdate(),ServiceId from #CreateTableName where ID = @Top

						 
								/*******************VALIDATION***********************/
						/*	SET @SQL = @SQL+'	 IF  EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
								' BEGIN  ' +
								'	IF  EXISTS (Select * from  ' + @DestinationTable +  ')  '+
									' BEGIN  ' +
											'    ' +
											'  Select @countItem = count(*) from   ' + @DestinationTable +  '    ' +
											'  IF ( @countItem >= ''0'' ) '+
												' BEGIN  ' + 
																	' COMMIT TRAN ' + 
																	' SET  @ErrorMessage = ''Items already exist in  ' + cast(@DestinationTable as varchar) +'   '' ' + 
																	' '+
																	--' SET @ERROR_SEVERITY = ERROR_SEVERITY() '+
																	--' SET @ERROR_STATE = ERROR_STATE() '+
																	--' RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    '+     
																	' RAISERROR (@ErrorMessage,16,1);    '+     
																	' return; '+
											' END '+
										' END '+
								' END '
								*/
								/*******************VALIDATION***********************/
					 
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
					-- SET @SQL =  @SQL +'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime' + 
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
 
						-- [ITADMIN].[CopyOPTariffSave_2017]   ''
							SET	@TableTEXT	= @TableTEXT + '+TBL'+cast(@Top as varchar)  +'-' + cast(@DestinationTable as varchar) + ''

								--print (@SQL) 
						execute sp_executesql @SQL

						Delete from #CreateTableName where ID = @Top and ServiceId =0
				 END			 	
					
					 

					 
----For Doctor Price
	   	WHILE Exists (Select * from #CreateTableName where ServiceId =2) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName where ServiceId =2

						
						 Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave
						Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave
						Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =2
						select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')	
							
						 
						INSERT INTO LogCopyOpTriff (ID,TableName,DestinationTable,ProcessDate,ServiceId)
							SELECT ID,TableName,@DestinationTable,Getdate(),ServiceId from #CreateTableName where ID = @Top

							
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime,visittype,RefPrice)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime,' + '1' + ',RefPrice' +
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
									
	SET	@TableTEXT	= @TableTEXT + '+TBL'+cast(@Top as varchar)  +'-' + cast(@DestinationTable as varchar) + ''
	 
				 	execute sp_executesql @SQL

						Delete from #CreateTableName where ID = @Top and ServiceId =2
				 END

				 -- [ITADMIN].[CopyOPTariffSave_2017]   ''
					--execute sp_executesql @SQL 
					 
						-- ,    @ERROR_STATE AS INT  

--START BASED ON WIPRO IT ADMIN SQL PROFILER [ITADMIN].[CopyOPTariffSave_SCS_march292017] ''
 
					--Select PriceTable from opbservice where id = 18
					--Select Id from sysobjects where name='OP_P_101_BloodIssueMaster' and Type='U' 

--END BASED ON WIPRO IT ADMIN SQL PROFILER





/*  [ITADMIN].[CopyOPTariffSave_SCS_march292017] ''

Create Table #CreateTableName( 
						ID	int IDENTITY(1,1) PRIMARY KEY,
						TableName varchar(250) NULL,
						ServiceId varchar(250) NULL
						)

				 INSERT INTO #CreateTableName
				  (TableName)
				  select (Name) from sys.objects where name like 'OP[_]P[_]' + @fromTariffId + '[_]%' and type = 'U'
					
				Update a set a.ServiceId = 2 from #CreateTableName a where a.TableName  like '%Doctor%'
				Update a set a.ServiceId = 0 from  #CreateTableName a where a.TableName not like '%Doctor%'

				 INSERT INTO LogCopyOpTriff
				  (ID,TableName,ProcessDate,ServiceId)
				  SELECT ID,TableName,Getdate(),ServiceId
					from #CreateTableName


					if not exists(select @Name)
						begin
							COMMIT TRAN
							SET       @ErrorMessage = 'No data available'
							SET @ERROR_SEVERITY = ERROR_SEVERITY()
							SET @ERROR_STATE = ERROR_STATE()
							RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
							return;
					end

					Declare @Top as int
					Declare @PercentageAmount as varchar(20)
					Declare @PramDate as varchar(20)

--Normal Process
		WHILE Exists (Select * from #CreateTableName where ServiceId =0) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName where ServiceId =0

						
						 Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave

						----Select * from Tariff

						Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave


						Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =0
							
						select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')	
							
						Update a set a.DestinationTable = @DestinationTable,a.ProcessDate = Getdate() from LogCopyOpTriff a where a.ID = @Top and ServiceId = 0
							
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime' + 
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
									

						EXEC (@SQL)

						Delete from #CreateTableName where ID = @Top and ServiceId =0
				 END	
*/

----For Doctor Price
/*	   	WHILE Exists (Select * from #CreateTableName where ServiceId =2) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName where ServiceId =2

						
						 Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave

						----Select * from Tariff

						Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave


						Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =2
							
						select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')	
							
						Update a set a.DestinationTable = @DestinationTable,a.ProcessDate = Getdate() from LogCopyOpTriff a where a.ID = @Top and ServiceId = 2
							
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime,visittype,RefPrice)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime,' + '1' + ',RefPrice' +
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
									

						EXEC (@SQL)

						Delete from #CreateTableName where ID = @Top and ServiceId =2
				 END	
*/
				 --Select * from OP_P_48_test  where ID not in (Select ID from OP_P_101_test)
								 -- INSERT INTO dbo.OP_P_101_OtherProcedure
								 --SELECT ID,Case when 0= 0 then PRICE ELSE  PRICE * 0 END, DELETED, ' 01-Nov-2016' , null  
								 --FROM dbo.OP_P_48_OtherProcedure where ID not in(Select ID from OP_P_101_OtherProcedure)

                               -- -Select * From OP_P_48_Doctor
								--DECLARE @tesT AS NVARCHAR(MAX)
								--DECLARE @PercentageAmount AS VARCHAR(250)
								--DECLARE @Name AS VARCHAR(250)
								--DECLARE @DestinationTable AS VARCHAR(250)
								--declare @DateToday  VARCHAR(250)
								--sELECT @PercentageAmount = 1.06
								--sELECT @DateToday = '17-Oct-2016'
								--sELECT @Name = 'OP_P_48_TEST'
								--sELECT @DestinationTable = 'dbo.OP_P_101_TEST' 
								--set @tesT = 'INSERT INTO dbo.' + @DestinationTable + 
								--			' (ID,Price,startdatetime,DELETED,enddatetime,visittype,RefPrice)' +
								--			' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime,' + '1' + ',RefPrice' +
								--			'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' 
								--PRINT @tesT
				
				

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Copying New IP Tariff Completed.'+@TableTEXT		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

drop table #tmpCopyTariffHeaderSave
drop table #tmpCopyOPTariffServiceDetailsSave	
drop table #CreateTableName	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  

--[dbo].[OP_P_101_OtherProcedure]
--Select * from Tariff

--Select  * From OP_P_48_OtherProcedure
--Select * from [dbo].[OP_P_48_TEST]
--Select * from [dbo].[OP_P_48_PTPROCEDURE]

---Select * From Tariff where ID = 48
---Select * From Tariff where ID = 101

----Select * from Tariff where name = '1452' 
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_BloodCrossMatch]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
create PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_BloodCrossMatch] --1,25,0
	@TariffID INT,
	@ServiceID INT,
	@ItemId INT-- base sa ItemCode
AS
BEGIN

	 
			--	Select name,'No Price123' as Price,Getdate() as startdatetime,0 as BedTypeId,0,0ItemId From dbo.BedType where deleted = 0
 
select b.name, a.Price,a.StartDateTime,a.BedTypeID,0,0ItemId from P_CrossMatch a
left join his.dbo.bedType b on a.BedTypeID = b.id
 where a.CategoryId = @TariffID  and a.deleted = 0 and b.deleted = 0  order by a.BedTypeID


 --select * from P_CrossMatch

END
--select * from TempGetItemNameReports
--select * from TempGetIPPriceReports
GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_ShowAll]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[FoodItem_ShowAll]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
 select f.id,f.name,f.code,c.name as categoryname ,f.StartDateTime,f.CategoryID
 from fooditem f,foodcategory c where f.categoryid = c.id and f.deleted=0 order by f.Code desc 

END

GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[FoodItem_Save]
(@ErrorMessage                  as NVARCHAR(max) OUT 
	,@FoodItemSaveXML as XML = '<DocumentElement> <FoodItemSaveXML> <id>0</id> <action>1</action> <name>namee</name> <code>codee</code> <categoryid>12</categoryid> </FoodItemSaveXML> </DocumentElement>'
	)
 as
BEGIN

SET NOCOUNT ON;
set xact_abort on


DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

----------------------------------------------------------------------------------------------------
/*
 <FoodItemSaveXML>
    <id>0</id>
    <action>1</action>
    <name>fbimtre</name>
    <code>code123</code>
  </FoodItemSaveXML>
*/
EXEC sp_xml_preparedocument @handle OUTPUT, @FoodItemSaveXML
SELECT 
IDENTITY(INT, 1,1) as TableID,
id
,action
,name
,code
,categoryid
into #tmpFoodItemSaveXML
from openxml(@handle, '/DocumentElement/FoodItemSaveXML',2) with
(
id int
,action int
,name varchar(max)
,code varchar(max)
,categoryid int
)
exec sp_xml_removedocument @handle
-----------------------------------------------------------------------------------------------------
declare @action as int
declare @id as int
declare @name as varchar(max)
 
 

	select @action = [Action] ,@name = name,@id = id
            from   #tmpFoodItemSaveXML
If(@action = 1)
BEGIN
	  BEGIN TRY 
			BEGIN TRAN
 --  [ITADMIN].[FoodItem_Save] '' 

		 if exists( select * from FoodItem where name = @name )
		 BEGIN	
								COMMIT TRAN
								SET @ErrorMessage = 'Food Already Exist'     
								SET @ERROR_SEVERITY = ERROR_SEVERITY()
								SET @ERROR_STATE = ERROR_STATE()        
								RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
								return;
		 END
										/*
										Select max(id) from FoodItem
										Insert into FoodItem (name,startdatetime,categoryid,code,departmentid,deleted) values('test','3/21/2017 4:49:02 PM',35,'test',53,0)
										insert into p_fbitem (id,price,startdatetime,DELETED) values (752,0,'3/21/2017 4:49:02 PM',0)
										*/
					Insert into FoodItem (name,startdatetime,categoryid,code,departmentid,deleted) 
					 ( select [name],getdate(),categoryid,code,'53','0'  from #tmpFoodItemSaveXML ) 
 
 -- select * from FoodItem
 

						COMMIT TRAN

						SET @ErrorMessage = '100-Saved Food Item...'     
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

					END TRY
					BEGIN CATCH  
						ROLLBACK TRANSACTION   
						SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
					END CATCH; 

END

If(@action = 2)
BEGIN
	  BEGIN TRY 
			BEGIN TRAN
 --  [ITADMIN].[FoodItem_Save] '' 

		 if exists( select * from FoodItem where name = @name and id != @id  )
		 BEGIN	
								COMMIT TRAN
								SET @ErrorMessage = 'Food Item name already exist..'     
								SET @ERROR_SEVERITY = ERROR_SEVERITY()
								SET @ERROR_STATE = ERROR_STATE()        
								RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
								return;
		 END
										-- update  from wipro
										--Update FoodItem set name='DINNER PLATES',code = 'SNO583', categoryid = 1,startdatetime='3/21/2017 4:48:53 PM' where id=594
 
					 update FoodItem set
					 name = (select name from #tmpFoodItemSaveXML )
					 ,code = (select code from #tmpFoodItemSaveXML ) 
					 ,categoryid = (select categoryid from #tmpFoodItemSaveXML )
					 ,StartDateTime = GETDATE()
					 where id = @id

						COMMIT TRAN

						SET @ErrorMessage = '100-Update Food Item...'     
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

					END TRY
					BEGIN CATCH  
						ROLLBACK TRANSACTION   
						SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
					END CATCH; 

END

If(@action = 3)
BEGIN
	  BEGIN TRY 
			BEGIN TRAN
 --  [ITADMIN].[FoodItem_Save] '' 

		 if not exists( select * from FoodItem where id = @id )
		 BEGIN	
								COMMIT TRAN
								SET @ErrorMessage = 'Food Item not Exist..'     
								SET @ERROR_SEVERITY = ERROR_SEVERITY()
								SET @ERROR_STATE = ERROR_STATE()        
								RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
								return;
		 END
										-- update  from wipro
										--Update FoodItem set name='DINNER PLATES',code = 'SNO583', categoryid = 1,startdatetime='3/21/2017 4:48:53 PM' where id=594

					 
					 update FoodItem set
						Deleted = 1
					 ,StartDateTime = GETDATE()
					 where id = @id

						COMMIT TRAN

						SET @ErrorMessage = '100-Removed Food Item....'     
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

					END TRY
					BEGIN CATCH  
						ROLLBACK TRANSACTION   
						SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
					END CATCH; 

END




drop table  #tmpFoodItemSaveXML
END

GO

/****** Object:  StoredProcedure [ITADMIN].[FoodItem_CategorySave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[FoodItem_CategorySave]
(@ErrorMessage                  as NVARCHAR(max) OUT 
	,@FoodItemCategorySaveXML as XML )
 as
BEGIN

SET NOCOUNT ON;
set xact_abort on


DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

----------------------------------------------------------------------------------------------------

EXEC sp_xml_preparedocument @handle OUTPUT, @FoodItemCategorySaveXML
SELECT 
IDENTITY(INT, 1,1) as TableID
,action
,name
 
into #tmpFoodItemCategorySaveXML
from openxml(@handle, '/DocumentElement/FoodItemCategorySaveXML',2) with
(
action int
,name varchar(max)

)
exec sp_xml_removedocument @handle
-----------------------------------------------------------------------------------------------------
declare @action as int
 declare @id as int
declare @name as varchar(max)
 
	select @action = [Action] ,@name = name 
            from   #tmpFoodItemCategorySaveXML

If(@action = 1)
BEGIN
	  BEGIN TRY 
			BEGIN TRAN
 --  [ITADMIN].[FoodItem_Save] ''   select *  from foodcategory  where deleted = 0 order by id desc
 
		 if exists( select * from foodcategory where name = @name and deleted = 0 )
		 BEGIN	
								COMMIT TRAN
								SET @ErrorMessage = 'Food Category Already Exist'     
								SET @ERROR_SEVERITY = ERROR_SEVERITY()
								SET @ERROR_STATE = ERROR_STATE()        
								RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
								return;
		 END
							 
							
							 select @id = max(id) from foodcategory
							  set @id = @id + 1
							 print(@id)
							 insert into foodcategory(id,name,deleted) values (@id,@name,0) 
 
 

						COMMIT TRAN

						SET @ErrorMessage = '100-Saved Food Item Category...'     
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

					END TRY
					BEGIN CATCH  
						ROLLBACK TRANSACTION   
						SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()        
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
					END CATCH; 

END

 



drop table  #tmpFoodItemCategorySaveXML
END

GO

/****** Object:  StoredProcedure [ITADMIN].[MMSReportsMapping_Save]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[MMSReportsMapping_Save]
    @ErrorMessage               as NVARCHAR(max) OUT,
    @xmlMmsReportHeader			as xml,
    @xmlMmsReportHeaderDetails	as xml
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Declare @tmpMMSReportHeader as TABLE (ID INT IDENTITY, StationID Int,OperatorID INT)

EXEC sp_xml_preparedocument @handle OUTPUT, @xmlMmsReportHeader
INSERT INTO @tmpMMSReportHeader (StationID,OperatorID)
SELECT 
StationID
,OperatorID
from openxml(@handle, '/DocumentElement/xmlMmsReportHeader',2) with
(
StationID int
,OperatorID int

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlMmsReportHeaderDetails
SELECT 
ReportID
into #tmpMMSReportDetails
from openxml(@handle, '/DocumentElement/xmlMmsReportHeaderDetails',2) with
(
ReportID int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @StationID as int
declare @OperatorID as int
declare @ReportID as int
--declare @EmpName as varchar(150)
--declare @EmployeeId as varchar(250)


			 
			select @StationID = StationID,@OperatorID =  OperatorID
			from   @tmpMMSReportHeader	

			SELECT  top 1 @ReportID = ReportID FROM #tmpMMSReportDetails

   BEGIN TRY 
       BEGIN TRAN
			-- select *  from MMSRPTMAP where Stationid=214
					Delete From MMSRPTMAP where Stationid=@StationID
					 
					 If(@ReportID <> 0)
					 BEGIN
								INSERT INTO MMSRPTMAP
											(ReportID,StationID,OperatorID,StartDateTime)
								SELECT 	ReportID,@StationID,@OperatorID,GETDATE()
											FROM #tmpMMSReportDetails
					END
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


 
drop table #tmpMMSReportDetails


set xact_abort OFF

END

GO

/****** Object:  StoredProcedure [ITADMIN].[MMS_ReportsMapping]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[MMS_ReportsMapping]
@stationid as int
AS
BEGIN


SELECT B.ID,B.NAME,ISNULL(A.STATIONID,0) as StnID,ISNULL(A.STATIONID,0) as chkbox from MMSRPTMAP A,MMSREPORTS B 
where A.REPORTID =* B.ID AND B.PARENTID<>0  and A.STATIONID= @stationid
/*
SELECT B.ID,B.NAME,ISNULL(A.STATIONID,0) as StnID,ISNULL(A.STATIONID,0) as chkbox from MMSRPTMAP A,MMSREPORTS B 
where A.REPORTID =* B.ID AND B.PARENTID<>0  and A.STATIONID= 53
*/
	 
			 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS_2017]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[OPTariffSave_SCS_2017]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlOPTariffHeaderSave			as xml = '<DocumentElement> <OPTariffHeaderSave> <Action>1</Action> <Deleted>0</Deleted> <TariffID>1</TariffID> <ServiceID>7</ServiceID> </OPTariffHeaderSave></DocumentElement>',
	@xmlOPTariffDetails				as xml = '<DocumentElement> <OPTariffDetails> <Id>1951</Id> <Price>455</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1952</Id> <Price>1070</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1953</Id> <Price>675</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1954</Id> <Price>150</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1955</Id> <Price>455</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1956</Id> <Price>230</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1958</Id> <Price>455</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1959</Id> <Price>455</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1960</Id> <Price>455</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1961</Id> <Price>440</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1962</Id> <Price>100</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>1963</Id> <Price>145</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>7039</Id> <Price>440</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>7542</Id> <Price>605</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>7653</Id> <Price>6870</Price> <RefPrice>0</RefPrice> </OPTariffDetails> <OPTariffDetails> <Id>7659</Id> <Price>965</Price> <RefPrice>0</RefPrice> </OPTariffDetails></DocumentElement>',
	@xmlOPTariffDetailsNotSelectedItem as xml = '<DocumentElement> <OPTariffDetailsNotSelectedItem> <Id>1957</Id> <Price>150</Price> <RefPrice>0</RefPrice> </OPTariffDetailsNotSelectedItem> <OPTariffDetailsNotSelectedItem> <Id>1950</Id> <Price>110</Price> <RefPrice>0</RefPrice> </OPTariffDetailsNotSelectedItem></DocumentElement>'

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffHeaderSave
SELECT 
Action
,Deleted
,TariffID
,ServiceID

into #tmpOPTariffHeaderSave
from openxml(@handle, '/DocumentElement/OPTariffHeaderSave',2) with
(
Action int
,Deleted int
,TariffID int
,ServiceID int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffDetails
select Id,Price,RefPrice,ROW_NUMBER() over(order by Id) i
into #tmpOPTariffDetails
from openxml(@handle, '/DocumentElement/OPTariffDetails',2) with
(
Id int,Price DECIMAL(10,2),RefPrice DECIMAL(10,2)
)
exec sp_xml_removedocument @handle 

 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffDetailsNotSelectedItem
select Id,Price,RefPrice,ROW_NUMBER() over(order by Id) i
into #tmpOPTariffDetailsNotSelectedItem
from openxml(@handle, '/DocumentElement/OPTariffDetailsNotSelectedItem',2) with
(
Id int,Price DECIMAL(10,2),RefPrice DECIMAL(10,2)
)
exec sp_xml_removedocument @handle 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Declare @Action as int
Declare @Deleted as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @ItemID as int
DECLARE @NewPrice as int
Declare @GetDate as Datetime

SELECT @Action = Action,@Deleted = Deleted, @TariffID = TariffID, @ServiceID = ServiceID
from #tmpOPTariffHeaderSave


select @GetDate = GetDate()


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
	   Declare @SQL nvarchar(max)
	   Declare @filename as varchar(max)

	
		--SELECT PriceTable
		--			FROM  OPBService a
		--	WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = 7


	   
			SELECT  @ServiceName = PriceTable
					FROM  OPBService a
			WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID

	
	      ---Select * from OPBService a WHERE  (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID
		   --Create Table LogTemptblOPCreate( 
					--  Id int NULL,
					--  Price decimal NULL,
					--  LogDate datetime,
					--  PriceTableName varchar(250) NULL
					-- )


			SELECT @ItemID = Id,@NewPrice = Price
			from #tmpOPTariffDetails

					SELECT * INTO CreateOPDetails 
			from #tmpOPTariffDetails  where Id not in ( select Id from #tmpOPTariffDetailsNotSelectedItem)
			---Select * from LogTemptblOPCreate

			---//Format select * From Op_P_2_OtherProcedure where price = 10
			
			   set @filename = 'OP_P_' + cast(@TariffID as varchar) + '_' + cast(@ServiceName as varchar)

					Insert into LogTemptblOPCreate
					(Id,Price,RefPrice,LogDate,PriceTableName)
					Select Id,Price,RefPrice,Getdate(),@filename
					from #tmpOPTariffDetails

				 Update a set a.typeid = 2 from LogTemptblOPCreate a where PriceTableName like '%Doctor%'

				 Declare @TypeId as int

				 
				Select top 1 @TypeId = typeid  from LogTemptblOPCreate where Id in (Select Id from #tmpOPTariffDetails) order by LogDate desc
	
				---Select * from LogTemptblOPCreate
				---select * from OP_P_1_Test where id = 3384
				begin

				IF  (@TypeId = 2)

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
					' where Id in (Select Id from CreateOPDetails)' +
					' Insert Into ' + cast(@filename as nvarchar) +
					' (id,price,startdatetime,deleted,enddatetime,visittype,RefPrice) ' +
					' Select Id,Price,GetDate(),0,NULL,1,RefPrice ' +
					' from CreateOPDetails ' +
							' delete from  ' + cast(@filename as nvarchar) +
							' where id in (select Id from #tmpOPTariffDetailsNotSelectedItem ) '
			
				ELSE

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
							' where Id in (Select Id from CreateOPDetails)' +
							' Insert Into ' + cast(@filename as nvarchar) +
							' (id,price,startdatetime,deleted,enddatetime) ' +
							' Select Id,Price,GetDate(),0,NULL ' +
							' from CreateOPDetails ' +
							' delete from  ' + cast(@filename as nvarchar) +
							' where id in (select Id from #tmpOPTariffDetailsNotSelectedItem ) '

		
		--  [ITADMIN].[OPTariffSave_SCS_2017] ''
			--	select * from #tmpOPTariffDetailsNotSelectedItem				
		--select * from CreateOPDetails				
				
		--		print @SQL

		 EXEC (@SQL)


		       END


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN
	
    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPTariffHeaderSave
drop table #tmpOPTariffDetails
drop table #tmpOPTariffDetailsNotSelectedItem
drop table CreateOPDetails
--drop table @@TABLENAME@@
--drop table backtest
set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlOPTariffHeaderSave xml
declare @xmlOPTariffDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlOPTariffHeaderSave = '<DocumentElement>\r\n  <OPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <Deleted>0</Deleted>\r\n    <TariffID>2</TariffID>\r\n    <ServiceID>7</ServiceID>\r\n  </OPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlOPTariffDetails = '<DocumentElement>\r\n  <OPTariffDetails>\r\n    <Id>7126</Id>\r\n    <Price>20</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7127</Id>\r\n    <Price>35</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7128</Id>\r\n    <Price>25</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7129</Id>\r\n    <Price>25</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7130</Id>\r\n    <Price>45</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7131</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7132</Id>\r\n    <Price>45</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7133</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7368</Id>\r\n    <Price>10</Price>\r\n  </OPTariffDetails>\r\n</DocumentElement>'
exec ITADMIN.OPTariffSave_SCS @ErrorMessage,@xmlOPTariffHeaderSave,@xmlOPTariffDetails
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/


--Select * from OP_P_1_Doctor where Id = 4187
GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordDaysRemaining]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CheckUserPasswordDaysRemaining]  
  @id		as varchar(25) = '11503'
  
AS
BEGIN

SET NOCOUNT ON;
 
 SELECT 90 as daysremaining  
  /*comment this to test if this caused the multiple popup change password Aug212017 JFJ

 declare @expirydate as datetime

 select @expirydate = EffectivityDate from  ITADMIN.User_Authentication where EmployeeId in (select employeeid from employee where id = @id)  and Active = 1

 
 
select @expirydate = DATEADD(day, 100, MAX(@expirydate))   
SELECT DATEDIFF(dd, getdate(),@expirydate ) as daysremaining  
 
 */

 

END

GO

/****** Object:  StoredProcedure [ITADMIN].[PasswordChange_ExceptionEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jerome Jose>
-- Create date: <Feb -8- 2017>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[PasswordChange_ExceptionEmployee] 
 	 @ErrorMessage as NVARCHAR(max) OUT, 
	 @Action as int = 3,
	 @userid as   NVARCHAR(max) = '311'
	 
AS
BEGIN
	SET NOCOUNT ON;
	set xact_abort on


DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
 
 IF (@Action=1) -- addnew
BEGIN

  BEGIN TRY 
    
        BEGIN TRAN

		if exists(select * from his.itadmin.EmployeePasswordExpiryException where userid = @userid)
		begin
		COMMIT TRAN
		SET @ErrorMessage = 'Employee already exist!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

		insert into his.itadmin.EmployeePasswordExpiryException (userid,empid,name,created_date) VALUES 
		(@userid,(select EmployeeID from employee where id = @userid),(select name from employee where id = @userid),GETDATE())


        COMMIT TRAN

        SET @ErrorMessage = '100-Save Successfully.'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 

END

 IF (@Action=3) -- delete
BEGIN

  BEGIN TRY 
    
        BEGIN TRAN

		if not exists(select * from his.itadmin.EmployeePasswordExpiryException where userid = @userid)
		begin
		COMMIT TRAN
		SET @ErrorMessage = 'Employee not exist!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 
	 delete his.itadmin.EmployeePasswordExpiryException where userid = @userid
 
  
        COMMIT TRAN

        SET @ErrorMessage = '100-Delete Successfully.'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 

END


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Login_SaveEmpinUserAuthTable]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[Login_SaveEmpinUserAuthTable] 
	-- Add the parameters for the stored procedure here
		@id as varchar(max)  = '11503'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @EmployeeId as varchar(250)
	select @EmployeeId = EmployeeId from Employee where ID = @Id



  IF NOT EXISTS(select * FROM ITADMIN.User_Authentication where EmployeeId = @EmployeeId and Active = 1 )
		BEGIN
		-- [ITADMIN].[Login_SaveEmpinUserAuthTable] 
		select * into #tmpEmpTableLogin from employee where EmployeeId = @EmployeeId 
 
 
 Declare @CTRMax1 as int
		Declare @CTR1 as int

	 	

	     Select @CTRMax1  = Max(CTR) from ITADMIN.User_Authentication where EmployeeID = @EmployeeId --and Active = 1

		 if exists(  select CTR from ITADMIN.User_Authentication where EmployeeID = @EmployeeId )
		 begin
	     Select @CTR1  = Max(CTR) + 1 from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and CTR = @CTRMax1
		 end
		 else
		 begin
		 Select @CTR1  = 1
		 end

	 INSERT INTO ITADMIN.User_Authentication(
											 EmployeeId
											,Name
											,Password
											,EffectivityDate
											,Mobile
											,Email
											,IsVerified
											,IsAdminReset
											,CounterAtempt
											,Question1
											,Question2
											,SecAnswer1
											,SecAnswer2
											,Active
											,CTR
											,OperatorId
											,IPAddress
											,Pass_key
						)
						SELECT
											 EmployeeID
											,Name
											,Password
											,GETDATE()
											,CellNo
											,EMail
											,0
											,0
											,3
											,''
											,''
											,''
											,''
											,1
											,@CTR1
											,''
											,''
											,''
											 from #tmpEmpTableLogin

	drop table #tmpEmpTableLogin;
		END
	 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS_NoUserAuth]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--select * from Employee where EmployeeId = '1738369'
CREATE PROCEDURE [ITADMIN].[GetUserInfo_SCS_NoUserAuth]  -- 192 --11503 -- 11503 --219--1412 --'20160803001'-- 10554--4374  --4374--5-- 46
@Id as int = '139'
AS
BEGIN
	
		
					SELECT  
					a.EmployeeId  as id
					,a.EmployeeID + '-' + a.Name as name
					,a.Name as EmpName
					,case when (a.Password = 'EXPIRED') then '3fZ93[$U3PW!3k:D3\373U5e3fZN' else
					isnull(a.Password,'3fZ93[$U3PW!3k:D3\373U5e3fZN') end  as Password
					--,'5MXg2AqXrPQ=' as Password
					,b.EffectivityDate
					,b.Question1
					,b.Question2
					,b.SecAnswer1
					,b.SecAnswer2
					,b.Mobile
					,b.Email
				 
			from Employee a 
			--INNER
			left  join ITADMIN.User_Authentication b on b.EmployeeId = Convert(varchar(250),a.EmployeeID)  and b.Active = 1 --active
			where  -- a.Deleted = 0 and 
			a.Id = @Id   

			 
			 
END


			


GO

/****** Object:  StoredProcedure [ITADMIN].[Login_ChangePasswordSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*

declare @xmlChangePasswordSave as xml
set @xmlChangePasswordSave = N'<DocumentElement> <ChangePasswordSave> <Action>1</Action> <id>139</id> <password>3}mA''3tU3j+33D{23ud93lHm3}m]</password> <pass_key>EXPIRED</pass_key> </ChangePasswordSave> </DocumentElement>'
 exec ITADMIN.Login_ChangePasswordSave '',@xmlChangePasswordSave

*/


CREATE PROCEDURE [ITADMIN].[Login_ChangePasswordSave]
	
    @ErrorMessage				    as NVARCHAR(max) OUT,
    @xmlChangePasswordSave		as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 /*
  public string Action { get; set; }
        public string id { get; set; }
        public string password { get; set; }
 */
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlChangePasswordSave
SELECT
Action
,id
,password
,pass_key
into #tmpUserRegSave

from openxml(@handle, '/DocumentElement/ChangePasswordSave',2) with
(
Action int
,id varchar(250)
,password varchar(250)
,pass_key varchar(250)
 
)
exec sp_xml_removedocument @handle

 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action			 as int
declare @EmployeeId as varchar(250)
declare @Id as varchar(250)
declare @Pass_key as varchar(250)
declare @Password as varchar(250)

SElect @Action = Action,@Id = Id,@Pass_key = convert(VARCHAR(MAX), HASHBYTES('MD5',pass_key),2)  ,@Password = password  from #tmpUserRegSave
select @EmployeeId = EmployeeId from Employee where ID = @Id


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
--update a  set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN' from Employee a where a.Id = @Id
--update a set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN',a.IsAdminReset = 1,a.ResetDate = Getdate() from ITADMIN.User_Authentication a where a.EmployeeId = @EmployeeId

	--select top5 latest password 
		select top  5   *  into #tmpFivePass from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId   order by ID desc
		 select * into #tmpOldActiveUserAuth from ITADMIN.User_Authentication where  EmployeeID = @EmployeeId and active = 1 

		if exists(  select * from #tmpFivePass where  EmployeeId =@EmployeeId and Pass_key = @Pass_key  )
		begin
		COMMIT TRAN
		SET       @ErrorMessage = 'You cannot use your last 5 password(s)!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


		Declare @CTRMax1 as int
		Declare @CTR1 as int
	--	Select * from ITADMIN.User_Authentication


	     Select @CTRMax1  = Max(CTR) from ITADMIN.User_Authentication where EmployeeID = @EmployeeId --and Active = 1

		 if exists(  select CTR from ITADMIN.User_Authentication where EmployeeID = @EmployeeId )
		 begin
	     Select @CTR1  = Max(CTR) + 1 from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and CTR = @CTRMax1
		 end
		 else
		 begin
		 Select @CTR1  = 1
		 end

	IF EXISTS(select * FROM ITADMIN.User_Authentication where EmployeeId = @EmployeeId and Active = 1 )
	BEGIN
						update ITADMIN.User_Authentication set Active = 0  where EmployeeID = @EmployeeId and active = 1 
						Update a set a.Password = @Password,PWD_SET_DATE = GETDATE() from Employee a where a.ID = @Id 

							  INSERT INTO ITADMIN.User_Authentication(
											 EmployeeId
											,Name
											,Password
											,EffectivityDate
											,Mobile
											,Email
											,IsVerified
											,IsAdminReset
											,CounterAtempt
											,Question1
											,Question2
											,SecAnswer1
											,SecAnswer2
											,Active
											,CTR
											,OperatorId
											,IPAddress
											,Pass_key
						)
						SELECT
											 EmployeeId
											,Name
											,@Password
											,GETDATE()
											,Mobile
											,Email
											,0
											,0
											,3
											,Question1
											,Question2
											,SecAnswer1
											,SecAnswer2
											,1
											,@CTR1
											,OperatorId
											,IPAddress
											,@Pass_key
								FROM #tmpOldActiveUserAuth


	END
	ELSE
	BEGIN
						Update a set a.Password = @Password,PWD_SET_DATE = GETDATE() from Employee a where a.ID = @Id 

							  INSERT INTO ITADMIN.User_Authentication(
											 EmployeeId
											,Name
											,Password
											,EffectivityDate
											,Mobile
											,Email
											,IsVerified
											,IsAdminReset
											,CounterAtempt
											,Question1
											,Question2
											,SecAnswer1
											,SecAnswer2
											,Active
											,CTR
											,OperatorId
											,IPAddress
											,Pass_key
						)
						SELECT
											 @EmployeeId
											,(select Name from Employee where employeeId = @EmployeeId)
											,@Password
											,GETDATE()
											,''
											,''
											,0
											,0
											,3
											,''
											,''
											,''
											,''
											,1
											,@CTR1
											,''
											,''
											,@Pass_key
							 

	END

  

	if NOT exists( SELECT * FROM sys.tables where name = 'Employee_ResetPasswordLog' ) begin 
CREATE TABLE [dbo].[Employee_ResetPasswordLog]( [Id] [int] IDENTITY(1,1) NOT NULL, [EmployeeID][varchar](max) NOT NULL, [EmpID] [int] NOT NULL, [CreatedDateTime] [datetime] NOT NULL, )ON [MasterFile] 
		end	
--select * from Employee_ResetPasswordLog order by CreatedDateTime desc
 
 insert into dbo.Employee_ResetPasswordLog (EmployeeID,EmpID,CreatedDateTime)
  select @EmployeeId,@Id,GETDATE()
						 

 
 

  
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-User Successfully Saved.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

 
drop table #tmpOldActiveUserAuth
drop table #tmpFivePass
drop table #tmpUserRegSave	
 
 
set xact_abort OFF

END


--select * from #tmpRegularEmployeeDetails ---use to break---
--drop table #tmpRegularEmployeeDetails 
--return;



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

set @xmDetails = '<>'
set @xmlheader = '<DocumentElement>\r\n  <InfoHeader>\r\n    <Id>10528</Id>\r\n    <Empid>1412</Empid>\r\n    <givenid>10554</givenid>\r\n    <CurrentMonth>2014-12-11T21:09:11+03:00</CurrentMonth>\r\n    <StartDateTime>2014-12-01T00:00:00+03:00</StartDateTime>\r\n    <Deleted>false</Deleted>\r\n    <Operatorid>1412</Operatorid>\r\n  </InfoHeader>\r\n</DocumentElement>'
set @xmldetail = '<DocumentElement>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>14</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>uu</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>10</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>ccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>5</PenaltyId>\r\n    <NoOfTimes>2</NoOfTimes>\r\n    <Total>1032.26</Total>\r\n    <Remarks>cccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>1</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>test</Remarks>\r\n    <PenaltyDate>2014-12-18T00:00:00+03:00</PenaltyDate>\r\n    <Refund>true</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-18T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n</DocumentElement>'
set @xmlRegularEmployeeDetails = <''>
exec HRPAYROLL.MonthlHoldPersonSave '', 2, @xmlheader, @xmldetail

*/

GO

/****** Object:  StoredProcedure [ITADMIN].[Login_UserFormSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[Login_UserFormSave]
	
    @ErrorMessage				    as NVARCHAR(max) OUT,
    @xmlUserFormSave		as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUserFormSave
SELECT
Action
,txtQuestion1
,txtQuestion2
,txtAnswer1
,txtAnswer2
,email
,mobile
,EmpId
 
into #tmpUserRegSave

from openxml(@handle, '/DocumentElement/UserRegistrationSave',2) with
(
Action int
,txtQuestion1 varchar(250)
,txtQuestion2 varchar(250)
,txtAnswer1 varchar(250)
,txtAnswer2 varchar(250)
,email varchar(50)
,mobile varchar(15)
,EmpId varchar(250)
)
exec sp_xml_removedocument @handle

 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action			 as int
declare @Question1 as varchar(250)
declare @Question2 as varchar(250)
declare @SecAnswer1 as varchar(250)
declare @SecAnswer2 as varchar(250)
declare @Mobile as varchar(250)
declare @Email as varchar(250)
declare @EmployeeId as varchar(250)


 

select	@Action = Action, 
		@Question1 = txtQuestion1,
		@Question2 = txtQuestion2,
		@SecAnswer1 = txtAnswer1,
		@SecAnswer2 = txtAnswer2,
		@Mobile = mobile,
		@Email = email,
		@EmployeeId = EmpId
from   #tmpUserRegSave
	
	 
--		select @EmployeeId = EmployeeId from Employee where ID = @Id

DECLARE @IP_Address varchar(255); SELECT @IP_Address = client_net_address FROM sys.dm_exec_connections WHERE Session_id = @@SPID;

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   --select * from ITADMIN.User_Authentication
	   -- delete from ITADMIN.User_Authentication where EmployeeId = '13231'

 
	   /*  if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Active = 1)
		 begin

		COMMIT TRAN
		SET       @ErrorMessage = 'You have Already Access!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


		if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Password = @Password and Active = 0)
		 begin

		COMMIT TRAN
		SET       @ErrorMessage = 'You cannot use the old password!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end */

		/* <DocumentElement> <UserRegistrationSave> <Action>1</Action> <txtQuestion1>In what city were you born?</txtQuestion1> <txtQuestion2>In what city or town was your first job?</txtQuestion2> <txtAnswer1>3333</txtAnswer1> <txtAnswer2>4444</txtAnswer2> <email>1111</email> <mobile>2222</mobile> <EmpId>13231</EmpId> </UserRegistrationSave> </DocumentElement>
 
 select * from ITADMIN.User_Authentication

declare @xmlUserFormSave as xml

set @xmlUserFormSave = '<DocumentElement> <UserRegistrationSave> <Action>1</Action> <txtQuestion1>In what city were you born?</txtQuestion1> <txtQuestion2>In what city or town was your first job?</txtQuestion2> <txtAnswer1>3333</txtAnswer1> <txtAnswer2>4444</txtAnswer2> <email>1111</email> <mobile>2222</mobile> <EmpId>13231</EmpId> </UserRegistrationSave> </DocumentElement>'
 
exec ITADMIN.Login_UserFormSave '',@xmlUserFormSave 

*/

		Select * into #tmpUserformEmployeetbl from Employee where employeeId = @EmployeeId



  
INSERT INTO [ITADMIN].[User_Authentication]
           ([CTR],[EmployeeId],[Name],[Password],[EffectivityDate]
           ,[Mobile],[Email],[IPAddress],[OperatorId],[IsVerified]
           ,[IsAdminReset],[CounterAtempt],[Question1],[Question2],[Image]
           ,[IsSuperUser],[SecAnswer1],[SecAnswer2],[Active],[ResetDate]
           ,[pass_key]
			)
          select 1,b.EmployeeID,b.Name,b.Password,getdate(),a.mobile,a.email,@IP_Address,0,0,0,3,a.txtQuestion1,a.txtQuestion2,null,null,a.txtAnswer1,a.txtAnswer2,1,getdate(),b.Password
 from #tmpUserRegSave a join #tmpUserformEmployeetbl b on a.EmpId = b.EmployeeID

     /*   INSERT INTO ITADMIN.User_Authentication(
							 EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
		)
		SELECT
							 @EmployeeId
							,@EmpName
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,0
							,0
							,3
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,1
							,0
							,@IP_Address
				FROM #tmpUserRegSave */

			 

 
			--	Update a set a.Password = @Password from Employee a where a.ID = @Id
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-User Successfully Saved.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

 
 
drop table #tmpUserRegSave	
drop table #tmpUserformEmployeetbl
set xact_abort OFF

END


--select * from #tmpRegularEmployeeDetails ---use to break---
--drop table #tmpRegularEmployeeDetails 
--return;



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

set @xmDetails = '<>'
set @xmlheader = '<DocumentElement>\r\n  <InfoHeader>\r\n    <Id>10528</Id>\r\n    <Empid>1412</Empid>\r\n    <givenid>10554</givenid>\r\n    <CurrentMonth>2014-12-11T21:09:11+03:00</CurrentMonth>\r\n    <StartDateTime>2014-12-01T00:00:00+03:00</StartDateTime>\r\n    <Deleted>false</Deleted>\r\n    <Operatorid>1412</Operatorid>\r\n  </InfoHeader>\r\n</DocumentElement>'
set @xmldetail = '<DocumentElement>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>14</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>uu</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>10</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>ccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>5</PenaltyId>\r\n    <NoOfTimes>2</NoOfTimes>\r\n    <Total>1032.26</Total>\r\n    <Remarks>cccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>1</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>test</Remarks>\r\n    <PenaltyDate>2014-12-18T00:00:00+03:00</PenaltyDate>\r\n    <Refund>true</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-18T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n</DocumentElement>'
set @xmlRegularEmployeeDetails = <''>
exec HRPAYROLL.MonthlHoldPersonSave '', 2, @xmlheader, @xmldetail

*/

GO

/****** Object:  StoredProcedure [ITADMIN].[CheckInUserAuthentication]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CheckInUserAuthentication]  
  @id		as varchar(25) = '1391'
  
AS
BEGIN

SET NOCOUNT ON;
 
 
 select Name from  ITADMIN.User_Authentication where EmployeeId in (select employeeid from employee where id = @id)  and Active = 1




END

GO

/****** Object:  StoredProcedure [ITADMIN].[CheckUserPasswordExpiryDate]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CheckUserPasswordExpiryDate]  
  @id		as varchar(25) = '11503'
  
AS
BEGIN

SET NOCOUNT ON;

 select 'NOT EXPIRED'
 /*comment this to test if this caused the multiple popup change password Aug212017 JFJ

 declare @expirydate as datetime

 select @expirydate = EffectivityDate from  ITADMIN.User_Authentication where EmployeeId in (select employeeid from employee where id = @id)  and Active = 1
 
 

 if(DATEADD(day, 100, MAX(@expirydate)) < getdate())
 BEGIN 
 SELECT Top 0 1; -- null 
 END
 ELSE
 BEGIN 
 select 'NOT EXPIRED'
 END
  */
END

GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListOPTariff]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListOPTariff] --10
@TariffID int = 1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

declare  @SQL NVARCHAR(max),@RowNum int, @CustId nchar(5), @Name1 nchar(25),@PriceTables as varchar(max), @ServiceIDs as int, @filename as varchar(max) 

select @CustId=MAX(id) from  his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --start with the highest ID
Select @RowNum = Count(*) from his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --get total number of records
 
 set @SQL= ''
		--WHILE @RowNum > 0                          --loop until no more records
		--BEGIN   
 

		--	 select @Name1 = name from his.dbo.BedType where id= @CustId and  deleted=0    --get other info from that row
		
		--				--Select Name,Id from  Tariff  cast(@CustId as varchar) 
		--				Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  
						SET @filename = 'his.dbo.op_p_' + cast(@TariffID as varchar)-- + '_' +LTRIM(RTRIM(@CustId)) -- + '_Anaesthesia'  
						
		  -- select cast(@filename as varchar) 
		--   Select Name,Id from  his.dbo.Tariff   select * from dbo.IPBService  SELECT ID,NAME FROM HIS..TARIFF ORDER BY NAME
		
		-- ' + cast(@filename as varchar) + '
		 set @SQL = N' Select ''OP'' xGroup,x.Department,x.Code,x.Name,x.Price,x.arabicname,x.ID,x.ServiceID,isnull(x.StartDateTime,0) StartDateTime  from
					(select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,a.id,3 Serviceid,b.StartDateTime  from  ' + cast(@filename as varchar) + '_test a left join test b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,a.id,7 Serviceid,b.StartDateTime  from  ' + cast(@filename as varchar) + '_otherprocedure a left join otherprocedures b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,a.id,14 Serviceid,b.StartDateTime from  ' + cast(@filename as varchar) + '_FoodItem a left join FoodItem b on a.id = b.id  left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,a.id,5 Serviceid,b.StartDateTime from  ' + cast(@filename as varchar) + '_PTProcedure a left join ptprocedure b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 ) x 
					Group By x.Department,x.Code,x.Name,x.Price,x.arabicname,x.ID,x.ServiceID,x.StartDateTime order by x.StartDateTime      '
 print(@SQL)
 EXEC sp_executesql @SQL 
 
 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRegistrationSave_User_Authentication]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
declare @xmlQualificationDetailsTable as xml
-- 3 set @xmlQualificationDetailsTable =  '<DocumentElement> <UserRegistrationSave> <Action>3</Action> <Id>139</Id> <Password>3RuX3&gt;#j3gmU3E!)3&lt;qx3h}&amp;3Jh]3U4]4"&amp;Y#4"%K:3q%W3_]!</Password> <OperatorId>139</OperatorId> <IPAddress>130.1.8.239</IPAddress> <Pass_key>Ramons123456</Pass_key> </UserRegistrationSave> </DocumentElement>'
--1 set @xmlQualificationDetailsTable = '<DocumentElement> <UserRegistrationSave> <Action>1</Action> <Id>139</Id> <Password>3r7t3glx3YsS3oy;3dA63[&amp;B3|]23G;l3q&amp;(3q%n3_]33N7_</Password> <Email>Ramons123456</Email> <Mobile>Ramons123456</Mobile> <Question1>In what city were you born?</Question1> <Question2>In what city or town was your first job?</Question2> <SecAnswer1>qc</SecAnswer1> <SecAnswer2>qc</SecAnswer2> <EffectivityDate>23-Jan-2017</EffectivityDate> <OperatorId>139</OperatorId> <IPAddress>130.1.8.239</IPAddress> <Pass_key>Ramons123456</Pass_key> </UserRegistrationSave> </DocumentElement>'
 set @xmlQualificationDetailsTable = '<DocumentElement> <UserRegistrationSave> <Action>2</Action> <Id>139</Id> <Password>3c-g3vsv3M*Z3^O|3F.W3_^83Kwl3N9`3u`f3fY|3a{Y</Password> <Question1>In what city were you born?</Question1> <Question2>In what city or town was your first job?</Question2> <EffectivityDate>23-Jan-2017</EffectivityDate> <OperatorId>139</OperatorId> <IPAddress>130.1.8.239</IPAddress> <Pass_key>EXPIRED_139</Pass_key> </UserRegistrationSave> </DocumentElement>'
exec [ITADMIN].[UserRegistrationSave_User_Authentication] '',@xmlQualificationDetailsTable

*/
CREATE PROCEDURE [ITADMIN].[UserRegistrationSave_User_Authentication]
	
    @ErrorMessage				    as NVARCHAR(max) OUT,
    @xmlUserRegistrationSave		as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUserRegistrationSave
SELECT
Action
,Id
,Name
,Password
,Email
,Mobile
,Question1
,Question2
,SecAnswer1
,SecAnswer2
,EffectivityDate
,OperatorId
,IPAddress
,Pass_key
into #tmpUserRegSave

from openxml(@handle, '/DocumentElement/UserRegistrationSave',2) with
(
Action int
,Id int
,Name varchar(250)
,Password varchar(250)
,Email varchar(50)
,Mobile varchar(15)
,Question1 varchar(250)
,Question2 varchar(250)
,SecAnswer1 varchar(250)
,SecAnswer2 varchar(250)
,EffectivityDate datetime
,OperatorId int
,IPAddress varchar(250)
,Pass_key varchar(250)
)
exec sp_xml_removedocument @handle

--select * from #tmpTaxmasterListSave	 ---use to break---
--drop table #tmpTaxmasterListSave
--        SET	@ErrorMessage = '100-Successful.'		
--        SET @ERROR_SEVERITY = ERROR_SEVERITY()
--        SET @ERROR_STATE = ERROR_STATE()		
--        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
--return;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action			 as int
declare @Id				 as int
declare @OperatorId      as int
declare @CTR as int
declare @Password as varchar(250)
declare @EmpName as varchar(250)
declare @IPAddress as varchar(250)
declare @EmployeeId as varchar(250)
declare @Pass_key as varchar(250)

select @Action = Action, @OperatorId = OperatorId,@Id = Id,@Password = Password,@IPAddress = IPAddress,@Pass_key =  convert(VARCHAR(MAX), HASHBYTES('MD5',Pass_key),2)  
from   #tmpUserRegSave
	
		select @EmployeeId = EmployeeId from Employee where ID = @Id

		--select top5 latest password 
		select top  5   *  into #tmpFivePass from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId  order by ID desc



		
		Declare @CTRMax1 as int
		Declare @CTR1 as int
	--	Select * from ITADMIN.User_Authentication


	     Select @CTRMax1  = Max(CTR) from ITADMIN.User_Authentication where EmployeeID = @EmployeeId --and Active = 1

		 if exists(  select CTR from ITADMIN.User_Authentication where EmployeeID = @EmployeeId )
		 begin
	     Select @CTR1  = Max(CTR) + 1 from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and CTR = @CTRMax1
		 end
		 else
		 begin
		 Select @CTR1  = 1
		 end

		 

		Select @EmpName =  Name from Employee where ID= @Id
		SELECT @EmployeeId  = EmployeeId from Employee where ID = @Id


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   --select * from ITADMIN.User_Authentication


	     if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Active = 1)
		 begin

		COMMIT TRAN
		SET       @ErrorMessage = 'You have Already Access!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


		if exists(  select * from #tmpFivePass where  EmployeeId =@EmployeeId and Pass_key = @Pass_key  )
		begin
		COMMIT TRAN
		SET       @ErrorMessage = 'You cannot use the old password!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end



		


 
        INSERT INTO ITADMIN.User_Authentication(
							 EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
							,Pass_key
		)
		SELECT
							 @EmployeeId
							,@EmpName
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,0
							,0
							,3
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,@CTR1
							,@OperatorId
							,IPAddress
							,@Pass_key
				FROM #tmpUserRegSave

 
				Update a set a.Password = @Password from Employee a where a.ID = @Id 
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-User Successfully Saved.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT--RESET
BEGIN	

    BEGIN TRY 	
    
        BEGIN TRAN
					--update a  set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN' from Employee a where a.Id = @Id

					update a  set a.Password = @Password from Employee a where a.Id = @Id
update a set a.Password =@Password ,a.IsAdminReset = 1,a.ResetDate = Getdate(),Active = 0,Pass_key = @Pass_key  from ITADMIN.User_Authentication a where a.EmployeeId = @EmployeeId and Active = 1
					
				--	update a set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN',a.IsAdminReset = 1,a.ResetDate = Getdate(),Active = 0  from ITADMIN.User_Authentication a where a.EmployeeId = @EmployeeId and Active = 1
					
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-User Information has been successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) --Change pass
BEGIN

   BEGIN TRY 
       BEGIN TRAN

			Declare @CTRMax as int
 
			Select @CTRMax  = Max(CTR) from ITADMIN.User_Authentication where EmployeeID = @EmployeeId --and Active = 1

			Select @CTR  = Max(CTR) + 1 from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and CTR = @CTRMax
		
		IF(@CTR is null)
		BEGIN
		select @CTR  = 1
		END

			 
		--if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Pass_key = @Pass_key and Active = 0)
		if exists(  select * from #tmpFivePass where  EmployeeId =@EmployeeId and Pass_key = @Pass_key  )
		begin
		COMMIT TRAN
		SET       @ErrorMessage = 'You cannot use the old password!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


		
		Update a set a.Password = @Password from Employee a where a.ID = @Id


		
		IF EXISTS(select * FROM ITADMIN.User_Authentication where EmployeeId = @EmployeeId and Active = 1 )
		BEGIN

		 INSERT INTO ITADMIN.User_Authentication(
							EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
							,pass_key
		)
		SELECT
							 EmployeeId
							,Name
							,@Password
							,Getdate()
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,@CTR
							,OperatorId
							,@IPAddress
							,@Pass_key
				FROM ITADMIN.User_Authentication where EmployeeId = @EmployeeId and Active = 1 

				Update a set a.Active = 0,a.ResetDate = GETDATE() from ITADMIN.User_Authentication  a where a.CTR = @CTRMax and EmployeeId =@EmployeeId
		END

		ELSE
		BEGIN

		 

 


		  INSERT INTO ITADMIN.User_Authentication(
							 EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
							,Pass_key
		)
		SELECT
							 @EmployeeId
							,@EmpName
							,Password
							,GETDATE()
							,Mobile
							,Email
							,0
							,0
							,3
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,@CTR
							,@OperatorId
							,IPAddress
							,@Pass_key
				FROM #tmpUserRegSave





		END
				


		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Password Successfully Reset.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END



drop table #tmpFivePass
drop table #tmpUserRegSave	

set xact_abort OFF

END


--select * from #tmpRegularEmployeeDetails ---use to break---
--drop table #tmpRegularEmployeeDetails 
--return;



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

set @xmDetails = '<>'
set @xmlheader = '<DocumentElement>\r\n  <InfoHeader>\r\n    <Id>10528</Id>\r\n    <Empid>1412</Empid>\r\n    <givenid>10554</givenid>\r\n    <CurrentMonth>2014-12-11T21:09:11+03:00</CurrentMonth>\r\n    <StartDateTime>2014-12-01T00:00:00+03:00</StartDateTime>\r\n    <Deleted>false</Deleted>\r\n    <Operatorid>1412</Operatorid>\r\n  </InfoHeader>\r\n</DocumentElement>'
set @xmldetail = '<DocumentElement>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>14</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>uu</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>10</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>ccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>5</PenaltyId>\r\n    <NoOfTimes>2</NoOfTimes>\r\n    <Total>1032.26</Total>\r\n    <Remarks>cccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>1</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>test</Remarks>\r\n    <PenaltyDate>2014-12-18T00:00:00+03:00</PenaltyDate>\r\n    <Refund>true</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-18T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n</DocumentElement>'
set @xmlRegularEmployeeDetails = <''>
exec HRPAYROLL.MonthlHoldPersonSave '', 2, @xmlheader, @xmldetail

*/

GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave] '','<DocumentElement><UpdateDoctorsCodeSave><cboEmployee>31</cboEmployee><cboCategory>1</cboCategory><cboStatus>1</cboStatus><txtDoctorCode>111</txtDoctorCode><txtEmail>22</txtEmail></UpdateDoctorsCodeSave></DocumentElement>'
 
create PROCEDURE [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave] 
  @ErrorMessage				as NVARCHAR(max)  ='' OUT,
  @xmlUpdateDoctorsCodeSave	as xml = '<DocumentElement> <UpdateDoctorsCodeSave> <cboEmployee>75</cboEmployee> <cboCategory>1</cboCategory> <cboStatus>1</cboStatus> <txtDoctorCode>1111</txtDoctorCode> <txtEmail>2222</txtEmail> <txtPhysiotherapist>0</txtPhysiotherapist> </UpdateDoctorsCodeSave> </DocumentElement>'

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUpdateDoctorsCodeSave
SELECT 
 --public string cboEmployee { get; set; }
 --       public string cboCategory { get; set; }
 --       public string cboStatus { get; set; }
 --       public string txtDoctorCode { get; set; }
 --       public string txtEmail { get; set; }
 --       public string txtPhysiotherapist { get; set; }

cboEmployee
,cboCategory
,cboStatus
,txtDoctorCode
,txtEmail
,txtPhysiotherapist

into #tmpTariffSave

from openxml(@handle, '/DocumentElement/UpdateDoctorsCodeSave',2) with
(
cboEmployee varchar(250)
,cboCategory varchar(250)
,cboStatus varchar(250)
,txtDoctorCode varchar(250)
,txtEmail varchar(250)
,txtPhysiotherapist varchar(250)

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 
declare @ID as varchar(250)
declare @cboCategory as varchar(250)
declare @Deleted as varchar(250)
declare @EmpCode as varchar(250)
declare @email as varchar(250)
declare @IsPT as varchar(250)
 

select @ID = cboEmployee, @cboCategory = cboCategory,@Deleted  = cboStatus , @EmpCode  = txtDoctorCode ,@email  = txtEmail ,@IsPT  =  txtPhysiotherapist 
from   #tmpTariffSave	


  BEGIN TRY 
       BEGIN TRAN
		
		-- [ITADMIN].[SghUtilities_UpdateDoctorsCodeSave] 

	IF(@IsPT = 1)
	BEGIN 			
				IF EXISTS (SELECT * FROM HIS..PTEMPLOYEE WHERE TYPEID= @ID)
					BEGIN
						UPDATE HIS..PTEMPLOYEE SET TYPE=2,DELETED=0 WHERE TYPEID=@ID
					END
				ELSE
					BEGIN
						INSERT INTO HIS..PTEMPLOYEE VALUES(2,@ID,0)
					END
    END
	ELSE
	BEGIN
				IF EXISTS (SELECT * FROM HIS..PTEMPLOYEE WHERE TYPEID= @ID)
					BEGIN
						UPDATE HIS..PTEMPLOYEE SET TYPE=2,DELETED=1 WHERE TYPEID=@ID
					END
				ELSE
					BEGIN
						INSERT INTO HIS..PTEMPLOYEE VALUES(2,@ID,1)
					END


	END

	UPDATE HIS..EMPLOYEE SET CATEGORYID=@cboCategory, EMPCODE=@EmpCode, DELETED=@Deleted,email=@email where ID = @ID
	 
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Sucessfully Saved.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    

    END CATCH; 

END
GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS_dec31_2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--select * from Employee where EmployeeId = '1738369'
create PROCEDURE [ITADMIN].[GetUserInfo_SCS_dec31_2016] --219--1412 --'20160803001'-- 10554--4374  --4374--5-- 46
@Id as int
AS
BEGIN
	
		
					SELECT  
					a.EmployeeId  as id
					,a.EmployeeID + '-' + a.Name as name
					,a.Name as EmpName
					,isnull(a.Password,'3fZ93[$U3PW!3k:D3\373U5e3fZN') as Password
					--,'5MXg2AqXrPQ=' as Password
					,b.EffectivityDate
					,b.Question1
					,b.Question2
					,b.SecAnswer1
					,b.SecAnswer2
					,b.Mobile
					,b.Email
			from Employee a 
			INNER join ITADMIN.User_Authentication b on b.EmployeeId = Convert(varchar(250),a.EmployeeID)
			where  a.Deleted = 0 and a.Id = @Id
END



			


GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS_dec_31_2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--[ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS] 1,2,54,0
CREATE PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS_dec_31_2016]-- 1,7,83,0
	@TariffID INT,
	@ServiceID INT,
	@DepartmentID INT,
	@TableExists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(60), @PriceTable VARCHAR(30), @SQL NVARCHAR(2000),@Id nvarchar(50)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable,@Id = Id  FROM dbo.OPBservice WHERE ID = @ServiceID

		Insert into TempOPBILLSERVICE
				(Id,Name,StartDate)
		Select	@Id,@PriceTable,Getdate()

		Declare @RefName as varchar(250)
		Select @RefName = ',0 RefPrice'



	IF  EXISTS(SELECT 1 FROM TempOPBILLSERVICE where Id = 2)


	SET @SQL = N' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' + ',b.RefPrice' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is not NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END
				---' ORDER BY a.EmpCode '

	ELSE


		SET @SQL = N' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is not NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END
				--' ORDER BY  Case when '+ cast(@ServiceID as varchar) + ' = 2 then  a.empcode  else  a.code  END'


		--		print @SQL
		declare @IsDoctor  as int

		Select @IsDoctor = id From TempOPBILLSERVICE where id = 2
		print(@sql)
		If (@IsDoctor = 2)	
			BEGIN
			Delete TempGetOPTariffReports
			Insert into TempGetOPTariffReports
			(Id,Name,Code,Price,RefPrice)
			EXEC sp_executesql @sql, N'@TableExists BIT OUT', @TableExists = @TableExists OUT
			END

			ELSE
				BEGIN
				Delete TempGetOPTariffReports
				Insert into TempGetOPTariffReports
				(Id,Name,Code,Price)
				EXEC sp_executesql @sql, N'@TableExists BIT OUT', @TableExists = @TableExists OUT

				END

			Declare @TariffName as varchar(250)
			Declare @ServiceName as varchar(250)
			Declare @Department as varchar(250)

			Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffID
			Select  @ServiceName = Name from dbo.OPBservice where deleted = 0 and ID =  @ServiceID
			Select @Department = Name from dbo.Department where deleted = 0 and ID = @DepartmentID
			

			update a set a.TariffName = @TariffName,a.ServiceName = @ServiceName,a.DepartmentName = @Department  from TempGetOPTariffReports a


		EXEC sp_executesql @SQL, N'@TableExists BIT OUT', @TableExists = @TableExists OUT

	
	Delete TempOPBILLSERVICE	
END

			--INSERT INTO TempGetOPTariffReports
			--(Id,Name,Code,Price)
			--Select Id,Name,Code,Price from sp_executesql @SQL
			

		--Create Table TempGetOPTariffReports( 
		--						  Id int NULL,
		--						  Name varchar(250),
		--						  Code varchar(250),
		--						  Price	[numeric](18, 0) NULL,
		--						  RefPrice [numeric](18, 0) NULL,
		--						  TariffName varchar(250),
		--						  ServiceName varchar(250),
		--						  DepartmentName varchar(250)
		--						  )	

		---Select * from  TempGetOPTariffReports


--Select * from TempGetOPTariffReports 
--Select * from OPBService where MasterTable = 'Test'
--select * From Department where Name like '%Lab%'

--Select * From OP_P_1_Test where deleted = 0

GO

/****** Object:  StoredProcedure [ITADMIN].[SecurityAdmin_CopyStationToStation]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jerome Jose>
-- Create date: <Dec 27 2016 10:46AM >
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [ITADMIN].[SecurityAdmin_CopyStationToStation] 
	 @ErrorMessage                  as NVARCHAR(max) OUT
	,@origStationID int = '4'
	,@copyStationID int = '237'
 
AS
BEGIN
 
	SET NOCOUNT ON;
 
 
	set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
 
   BEGIN TRY 
    
        BEGIN TRAN
 

							CREATE TABLE #temptableRoleFeatureOrigStation
							(
							ID INT IDENTITY(1, 1) primary key ,
							Role_Id int,
							Module_Id int,
							Feature_Id int,
							Deleted int,

							);
							insert into #temptableRoleFeatureOrigStation select Role_Id,Module_Id,Feature_Id,Deleted from l_rolefeatures where Station_Id = @origStationID group by Role_Id,Module_Id,Feature_Id,Deleted

							 
							insert into l_rolefeatures (Role_Id,Module_Id,Feature_Id,Deleted,Station_Id,StartDateTime)  
							select a.Role_Id,a.Module_Id,a.Feature_Id,a.Deleted,@copyStationID,GETDATE() from #temptableRoleFeatureOrigStation a 
							 where  a.Role_Id not in (select Role_Id from l_rolefeatures where Station_Id = @copyStationID )
							and a.Module_Id not in (select Module_Id from l_rolefeatures where Station_Id = @copyStationID )
							and a.Feature_Id not in (select Feature_Id from l_rolefeatures where Station_Id = @copyStationID )
							 


							/***FOR ROLE FUNCTIONs */
						 CREATE TABLE #temptableRoleFUNCTIONOrigStation
							(
							 
							Role_Id int,
							Module_Id int,
							Feature_Id int,
							Function_Id int,
							Deleted int,

							);
							--  [ITADMIN].[SecurityAdmin_CopyStationToStation]  '' 
							 insert into #temptableRoleFUNCTIONOrigStation select Role_Id,Module_Id,Feature_Id,Function_Id,Deleted from l_rolefunctions where Station_Id = @origStationID group by  Role_Id,Module_Id,Feature_Id,Function_Id,Deleted

 

							   insert into l_rolefunctions (Role_Id,Module_Id,Feature_Id,Function_Id,Deleted,Station_Id,StartDatetime)
							 select a.Role_Id,a.Module_Id,a.Feature_Id,a.Function_Id,a.Deleted ,@copyStationID,GETDATE()
							 from #temptableRoleFUNCTIONOrigStation a 
							 where  a.Role_Id not in (select Role_Id from l_rolefunctions where Station_Id = @copyStationID group by Role_Id )
							 and a.Module_Id not in (select Module_Id from l_rolefunctions where Station_Id = @copyStationID  group by Module_Id )
							 and a.Feature_Id not in (select Feature_Id from l_rolefunctions where Station_Id = @copyStationID group by Feature_Id )
							  --and a.Function_Id not in (select Function_Id from l_rolefunctions where Station_Id = @copyStationID  group by Function_Id )
							 group by a.Role_Id,a.Module_Id,a.Feature_Id,a.Function_Id,a.Deleted
 

							drop table #temptableRoleFeatureOrigStation
							drop table #temptableRoleFUNCTIONOrigStation

COMMIT TRAN

SET @ErrorMessage = '100-Contact IT Administrator.'     
SET @ERROR_SEVERITY = ERROR_SEVERITY()
SET @ERROR_STATE = ERROR_STATE()        
RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

END TRY
BEGIN CATCH  
ROLLBACK TRANSACTION   
SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
SET @ERROR_SEVERITY = ERROR_SEVERITY()
SET @ERROR_STATE = ERROR_STATE()        
RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
END CATCH; 



 
 ENd



GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_ArDataEod]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jerome Jose>
-- Create date: <Dec 15 2016>
-- Description:	<Description,, [dbo].[SP_OP_POSTARCOMPANYBILLDETAILS] >
-- =============================================
CREATE PROCEDURE [ITADMIN].[SghUtilities_ArDataEod] 
    @ErrorMessage					as NVARCHAR(max) OUT,	
	 @action int = 1,
	 @from datetime = '05-Dec-2016'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	set xact_abort on

	DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 

 
	declare @to datetime = CAST(CONVERT(DATE, DATEADD(DAY, 1, @from)) AS DATETIME)
	 

	 IF (@action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

 	       
INSERT INTO ARCOMPANYBILLDETAIL        
(IssueAuthorityCode,RegistrationNo,OpBillId,BillNo,CategoryId,        
CompanyId,GradeId,DoctorId,ServiceId,ItemId,DiscountType,Deductable,BillAmount,        
PaidAmount,Discount,Balance,BillDateTime,DepartmentId,Quantity,BillTypeId,OperatorId,        
StationId,AuthorityId,Posted,InvoiceId,InvoiceBillNo,InvoiceDateTime,IOperatorId,      
AIssueAuthorityCode,ARegistrationNo,ACategoryId,ACompanyId,AGradeId,ADoctorId,ABillAmount,APaidAmount,        
ADiscount,ABalance,AQuantity,AAuthorityid,AInvoiceId,AInvoiceBillNo,AInvoiceDateTime,ModifiedOperatorId,        
ModifiedDateTime,ABillDateTime,RejectionAmount,ReceiptAmount,PatientToPayAmount,BillingOfficerId,HasCompanyLetter,        
CompanyLetterId,IsSettled,SettlingDateTime,BatchId,ReasonForModifyId,ModifyTypeId,SettlingOperatorId,InvoiceAmount,        
MedIDNumber,ITEMCODE,ITEMNAME,POLICYNO,ISSUEQTY,IssueUnit,SUBPOLICY,ActualDate)        
  
SELECT A.IssueAuthorityCode, A.REGISTRATIONNO RegistrationNo, A.OpBillId, A.BillNo, A.CategoryId, A.CompanyId,       
A.GradeId, A.DoctorId, A.ServiceId, A.ItemId, A.DiscountType, A.Deductable,       
CASE A.ServiceID WHEN 2 THEN       
 CASE WHEN (IsNull(C.InvoiceConFee,0) > 0 OR IsNull(D.InvoiceConFee,0) > 0)       
   THEN CASE WHEN IsNull(D.InvoiceConFee,0) > 0       
       THEN D.InvoiceConFee       
       ELSE C.InvoiceConFee       
     END      
   ELSE A.BillAmount       
 END       
ELSE A.BillAmount END AS BillAmount,      
A.PAIDAMOUNT, A.Discount,       
--A.Balance,       
CASE A.ServiceID WHEN 2 THEN       
 CASE WHEN (IsNull(C.InvoiceConFee,0) > 0 OR IsNull(D.InvoiceConFee,0) > 0)       
   THEN CASE WHEN IsNull(D.InvoiceConFee,0) > 0       
       THEN D.InvoiceConFee       
       ELSE C.InvoiceConFee       
     END      
   ELSE A.BillAmount       
 END       
ELSE A.BillAmount END - A.PaidAmount - A.Discount AS Balance,      
A.BillDateTime, A.DepartmentId, A.Quantity, A.BillTypeId, A.OperatorId,       
A.StationId, A.AuthorityId, 1 Posted, NULL InvoiceId, NULL InvoiceBillNo, NULL InvoiceDateTime, NULL IOperatorId,      
A.IssueAuthorityCode AIssueAuthorityCode, A.REGISTRATIONNO ARegistrationNo, A.CATEGORYID ACategoryId,       
A.COMPANYID ACompanyId, A.GRADEID AGradeId, A.DOCTORID ADoctorId,       
CASE A.ServiceID WHEN 2 THEN       
 CASE WHEN (IsNull(C.InvoiceConFee,0) > 0 OR IsNull(D.InvoiceConFee,0) > 0)       
   THEN CASE WHEN IsNull(D.InvoiceConFee,0) > 0       
       THEN D.InvoiceConFee       
       ELSE C.InvoiceConFee       
     END      
   ELSE A.BillAmount       
 END       
ELSE A.BillAmount END AS ABillAmount,      
A.PAIDAMOUNT APaidAmount, A.DISCOUNT ADiscount,       
CASE A.ServiceID WHEN 2 THEN       
 CASE WHEN (IsNull(C.InvoiceConFee,0) > 0 OR IsNull(D.InvoiceConFee,0) > 0)       
   THEN CASE WHEN IsNull(D.InvoiceConFee,0) > 0       
       THEN D.InvoiceConFee       
       ELSE C.InvoiceConFee       
     END      
   ELSE A.BillAmount       
 END       
ELSE A.BillAmount END - A.PaidAmount - A.Discount AS ABalance,       
A.Quantity AQuantity,       
A.AuthorityId AAuthorityid, NULL AInvoiceId, NULL AInvoiceBillNo, NULL AInvoiceDateTime, NULL ModifiedOperatorId,       
NULL ModifiedDateTime, A.BillDATETIME ABillDateTime, NULL RejectionAmount, NULL ReceiptAmount, NULL PatientToPayAmount,       
(SELECT BillingOfficerID FROM Company WHERE ID = A.CompanyId) BillingOfficerId, 0 HasCompanyLetter,       
0 CompanyLetterId, 0 ISSETTLED, NULL SettlingDateTime, A.BatchId, NULL ReasonForModifyId,         
NULL ModifyTypeId, NULL SettlingOperatorId, NULL InvoiceAmount,        
B.MedIDNumber, A.ITEMCODE, A.ITEMNAME, B.POLICYNO,         
A.ISSUEQTY,A.IssueUnit,A.SUBPOLICY,A.ActualDate        
        
FROM OPCompanyBillDetail A
left join PATIENT B on A.REGISTRATIONNO = B.REGISTRATIONNO
left join COMPANY C on A.CompanyID = C.ID
left join GRADE D on A.GradeID = D.ID      
WHERE        
A.Billdatetime >= @from AND A.Billdatetime < @to  
--AND A.CategoryID = D.CategoryID AND A.CompanyID = D.CompanyID AND     
AND (A.Posted = 0 or a.posted is null)      
AND A.BillAmount <> 0      
AND A.BillTypeID = 2      
       
--Update OPCompanyBIllDetail  
 
UPDATE OPCompanyBIllDetail SET Posted = 1 FROM OPCompanyBillDetail A, PATIENT B, COMPANY C, GRADE D      
WHERE A.REGISTRATIONNO = B.REGISTRATIONNO       
AND A.Billdatetime >= @from AND A.Billdatetime < @to  
AND A.CompanyID = C.ID       
AND A.CategoryID = D.CategoryID AND A.CompanyID = D.CompanyID AND A.GradeID = D.ID      
AND (A.Posted = 0 or a.Posted is null)      
AND A.BillAmount <> 0      
AND A.BillTypeID = 2     


 COMMIT TRAN

    SET	@ErrorMessage = '100-Prepare OP EOD completed Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Dec12_2016_last]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [ITADMIN].[IPTariffSave_SCS_Dec12_2016_last]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlIPTariffHeaderSave			as xml,
	@xmlIPTariffDetailsSave			as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffHeaderSave
SELECT 
Action
,TariffId
,ServiceId
,ItemId
,OperatorId

into #tmpIPTariffHeaderSave
from openxml(@handle, '/DocumentElement/IPTariffHeaderSave',2) with
(
Action int
,TariffId int
,ServiceId int
,ItemId int
,OperatorId int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffDetailsSave
select BedTypeId,Price,StartDate,ROW_NUMBER() over(order by BedTypeId) i
into #tmpIPTariffDetailsSave
from openxml(@handle, '/DocumentElement/IPTariffDetailsSave',2) with
(
BedTypeId int,Price DECIMAL(10,2),StartDate Datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @NewPrice as int
Declare @OperatorId as int
Declare @ItemId as int



--SELECT 
--from #tmpIPTariffDetailsSave

--SELECT @ItemId = ItemId
--from #tmpIPTariffDetailsSave
--select @GetDate = GetDate()
SELECT @Action = Action,@ItemId = ItemId,@OperatorId = OperatorId,@ServiceID  = ServiceId,@TariffID =  TariffId 
from #tmpIPTariffHeaderSave

	
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
		DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
		, @PriceTable VARCHAR(max), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

		---SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID

		Create Table #CombHeaderDetailsItemId( 
					    id int identity (1,1),
						BedTypeId int,
						StartDate datetime,
						Price DECIMAL(10,2),
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,
					 )
		--select * from TestHeaderDetailsItemId
		--select * from TestHeaderDetailsItemId
		---drop table #CombHeaderDetailsItemId
		---drop table TestHeaderDetailsItemId
		insert into #CombHeaderDetailsItemId
		(BedTypeId,StartDate,Price)
		SELECT BedTypeId,StartDate,Price from #tmpIPTariffDetailsSave
		
		Update a set a.ItemId = @ItemId,a.TariffId = @TariffID,a.ServiceId =@ServiceID  from #CombHeaderDetailsItemId a

		Select BedTypeId,Price,StartDate,ItemId,TariffId,ServiceId into #TempBedType
		from #CombHeaderDetailsItemId

	---	Drop table #TempBedType
			Declare @TempBedId as int,@MaxID as int,@StartDate datetime,@TempPrice DECIMAL(10,2)

				Create Table #TempFilesName( 
					    id int identity (1,1),
				     	Name varchar(250) NULL, 
						BedTypeId int,
						StartDate datetime,
						Price DECIMAL(10,2),
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,

					 )	

					
				Create Table #TempEmptyFilesName( 
					    ID int,
				     	Price numeric, 
						Deleted bit,
						StartDateTime datetime,
						EndDateTime datetime,
						OperatorID int


					 )	


					-- CREATE TABLE #TempEmptyFilesName(
					--	[ID] [int] NOT NULL,
					--	[Price] [numeric](10, 2) NOT NULL,
					--	[Deleted] [bit] NOT NULL,
					--	[StartDateTime] [datetime] NOT NULL,
					--	[EndDateTime] [datetime] NULL,
					--	[OperatorID] [int] NOT NULL
					--) ON [MasterFile]

	--sp_help P_1_
	--select * from  P_1_1_Anaesthesia
		
	 --   Select id,name into #TempBedType
		--from dbo.BedType where deleted = 0
		declare @TariffIDs as int, @ServiceIDs as int,@PriceTables as varchar(max)
	   WHILE exists(select top 1 * from #TempBedType)
			BEGIN

					SELECT top 1 @TempBedId = BedTypeId,@StartDate = StartDate,@TempPrice = Price,@ItemId = ItemId,@TariffIDs = TariffId,@ServiceIDs = ServiceId  from #TempBedType

					Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  

					SET @filename = 'P_' + cast(@TariffIDs as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTables as varchar)
						
				    Insert into #TempFilesName (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId) values(@filename,@TempBedId,@StartDate,@TempPrice,@ItemId,@TariffIDs,@ServiceIDs);
						
				
					delete #TempBedType where BedTypeId = @TempBedId
			END

				   --select * into   testtcheckTempFileName
					-- from #TempFilesName

					 Insert into LogsTempTariffTable (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,DateProcess) 
					 Select 	Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,Getdate()
					 from #TempFilesName

					 --select * from  testtcheckTempFileName

					 ---Select * from LogsTempTariffTable

					 	--Create Table  LogsTempTariffTable(     
							--  Name	varchar(250) NULL,
							--  BedTypeId varchar(250) NULL,
							--  StartDate varchar(250) NULL,
							--  Price varchar(250) NULL,
							--  ItemId varchar(250) NULL,
							--  TariffId varchar(250) NULL,
							--  ServiceId varchar(250) NULL,
							--  DateProcess datetime NULL

							-- )


			---sp_who2
   Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int,@Deleted as int ,@GetDate as datetime,@temPrice DECIMAL(10,2),@tempItemId int,@test as int
   Select @Deleted = 0 
   --Select @GetDate = StartDate from  #TempFilesName
   select @test = 20
   
				WHILE exists(select top 1 * from #TempFilesName)

						BEGIN

									SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId,@GetDate = StartDate from #TempFilesName

									---select * from P_1_1_Anaesthesia where ID = 88
									set @SQL =  N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
												' BEGIN ' +

												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')' +

														' BEGIN ' +
														' Create Table dbo.OLD' + cast(@TempFiles as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' + 
													--' IF EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													--		' BEGIN ' +
													--		' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
													--		' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													--		' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
													--		' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													--		' where ID = ' + cast(@tempItemId as varchar) +
													--	' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													' BEGIN ' +
													' INSERT INTO  dbo.' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
												' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ')' +
														' BEGIN ' +
															' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
															' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
															' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
													' END ' +
													' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
													--' from ' + cast(@TempFiles as varchar) +
													--' UPDATE dbo.OLD' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,EndDateTime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													--' where ID = ' + cast(@tempItemId as varchar) +
													' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													' where ID = ' + cast(@tempItemId as varchar) +
												' END ' +
												' ELSE ' +
											    ' BEGIN ' +
												' Create Table dbo.' + cast(@TempFiles as varchar) + '( 
													[ID] [int] NOT NULL,
													[Price] [numeric](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
												 )	' + 
												' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												' END '
															
												EXEC sp_executesql @SQL 	
												Delete  #TempFilesName where id = @FileId
			END
												--' @ErrorMessage =  INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												--' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												--' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												--' from ' + cast(@TempFiles as varchar) +
												--'SET @ERROR_SEVERITY ='+ ERROR_SEVERITY()+
												--'SET @ERROR_STATE = '+ERROR_STATE()+
												--'RAISERROR ('+@ErrorMessage+','+ @ERROR_SEVERITY+','+ @ERROR_STATE+')'+ 	
	
				---	sp_who2 'active'
		
				---Print @SQL 		
			 ---drop table #TempEmptyIPPriceView		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #TempBedType
drop table #TempFilesName
drop table #tmpIPTariffHeaderSave
drop table #tmpIPTariffDetailsSave
drop table #CombHeaderDetailsItemId
drop table #TempEmptyFilesName
--drop table @@TABLENAME@@
--drop table backtest

set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlIPTariffHeaderSave	 xml
declare @xmlIPTariffDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlIPTariffHeaderSave = '<DocumentElement>\r\n  <IPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <TariffId>1</TariffId>\r\n    <ServiceId>20</ServiceId>\r\n    <ItemId>85</ItemId>\r\n    <OperatorId>139</OperatorId>\r\n  </IPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlIPTariffDetailsSave = '<DocumentElement>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>15</BedTypeId>\r\n    <Price>100.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>17</BedTypeId>\r\n    <Price>200.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>18</BedTypeId>\r\n    <Price>300.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.IPTariffSave_SCS @ErrorMessage,@xmlIPTariffHeaderSave,@xmlIPTariffDetailsSave
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/

---///drop table testtcheckTempFileName 
---//drop table checkTempFileName
--select * from testtcheckTempFileName
--select * from P_66_28_Anaesthesia
---select * from P_66_2_Anaesthesia
--select * from P_84_2_Anaesthesia

---select * drop table P_84_28_Anaesthesia
-- Select * from LogsTempTariffTable  where StartDate = 'Oct  1 2016 12:39PM'
--select * from P_1_2_Test    where Id =3973
--Selct * from 

--Insert into P_1_28_Test
--(ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
--Select Itemid,Price,0,StartDate,NULL,10268
--From LogsTempTariffTable where BedTypeId = 28
GO

/****** Object:  StoredProcedure [ITADMIN].[Sync_MMS_ROLES]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Jerome Jose>
-- Create date: <for MMS ROLES >
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[Sync_MMS_ROLES] --'1'
@userId int = '1'
 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--select * from employee where id = 1
	--delete from l_userroles where User_Id = 1
	--select * from l_userroles where User_Id = 1
 
 select 'comment for now dec 13 2016'

 /*START
 
CREATE TABLE #temptableSyncMMsRoles
(
ID INT IDENTITY(1, 1) primary key ,
role_id int
);

insert into #temptableSyncMMsRoles (role_id) Values 
(111),(135),(136),(162),(163),(208),(209),(210),(211),(212),(213),(236),(237),(238),(239),(240),(241),(254),(255),(256),(257),(258),(259),(260),(261),(279),(280),(290),(291),(299),(305),(308),(309),(365),(366),(367),(368),(369),(370),(371),(372),(373),(374),(375),(376),(380),(381),(382),(383),(384),(385),(386),(387),(389),(390),(391),(392),(393),(394),(395),(396),(397),(398),(399),(413),(416),(417),(418),(419),(420),(440),(442),(453),(454),(463),(486),(524),(525),(526),(528),(529),(532),(534),(543),(545),(615),(616),(685),(686),(687),(688),(689),(692),(693),(694),(695),(696),(697),(698),(699),(700),(701),(702),(703),(704),(705),(706),(708),(709),(710),(711),(712),(713),(716),(717),(720),(723),(725),(726),(727),(728),(730),(731),(732),(734),(735),(736),(737),(738),(739),(741),(787),(792),(794),(795),(797),(798),(799),(800),(801),(802),(803),(804),(805),(806),(807),(808),(809),(810),(811),(827),(837),(841),(842),(843),(844),(845),(846),(847),(848),(849),(850),(851),(852),(853)
,(854),(855),(856),(857),(858),(859),(860),(861),(862),(863),(864),(865),(866),(867),(868),(869),(870),(871),(872),(873),(874),(875),(876),(877),(878),(879)
,(880),(881),(882),(883),(884),(885),(886),(887),(888),(889),(890),(891),(892),(893),(894),(895),(896),(897),(898),(899),(900),(901),(902),(903),(904),(905)
,(906),(907),(908),(909),(910),(911),(912),(913),(914),(915),(916),(917),(918),(919),(920),(921),(922),(923),(924),(925),(926),(927),(928),(929),(930),(931),(932),(933),(934),(935),(936),(937),(938),(939),(940),(941),(942),(943),(944),(945),(946),(947),(948),(949),(950),(951),(952),(953),(954),(955),(956),(957),(958),(959),(960),(961),(962),(963),(964),(965),(966),(967),(968),(969),(970),(971),(972),(973),(974),(975),(976),(977),(978),(979),(980),(981),(982),(983),(984),(985),(986),(987),(988),(989),(990),(991),(992),(993),(994),(995),(996),(997),(998),(999),(1000),(1001),(1002),(1003),(1004),(1005),(1006),(1007),(1008),(1009),(1010),(1011),(1012),(1013),(1014),(1015),(1016),(1017),(1018),(1019),(1020),(1021),(1022),(1023),(1024),(1025),(1026),(1027),(1028),(1029),(1030),(1031),(1032),(1033),(1034),(1035),(1036),(1037),(1038),(1039),(1040),(1041),(1042),(1043),(1044),(1045),(1046),(1047),(1048),(1049),(1050),(1051),(1052),(1053),(1054),(1055),(1056),(1057),(1058),(1059),(1060),(1061)
,(1062),(1063),(1064),(1072),(1080),(1081),(1082),(1083),(1084),(1085),(1086),(1092),(1140),(1171),(1237),(1337)

 
 INSERT INTO l_userroles 
SELECT ROLE_ID,@userId,SYSDATETIME(),NULL,NULL ,0 
FROM #temptableSyncMMsRoles WHERE ROLE_ID IN (SELECT ROLE_ID FROM L_ROLEFEATURES WHERE MODULE_ID =103 GROUP BY ROLE_ID)  
and role_id 
not in (
select Role_Id FROM l_userroles WHERE USER_ID in (@userId) and Role_id  In ( select role_id from #temptableSyncMMsRoles   )
    )

drop table #temptableSyncMMsRoles
 

 ENd*/













/*

NOTES ONLY
if(@option = '1')
BEGIN

INSERT INTO l_userroles (Role_Id,User_Id,Startdatetime,EndDateTime,OperatorID,Deleted) values
(111,@userId,SYSDATETIME(),NULL,@operatorID,0),
(135,@userId,SYSDATETIME(),NULL,@operatorID,0),
(136,@userId,SYSDATETIME(),NULL,@operatorID,0),
(162,@userId,SYSDATETIME(),NULL,@operatorID,0),
(163,@userId,SYSDATETIME(),NULL,@operatorID,0),
(208,@userId,SYSDATETIME(),NULL,@operatorID,0),
(209,@userId,SYSDATETIME(),NULL,@operatorID,0),
(210,@userId,SYSDATETIME(),NULL,@operatorID,0),
(211,@userId,SYSDATETIME(),NULL,@operatorID,0),
(212,@userId,SYSDATETIME(),NULL,@operatorID,0),
(213,@userId,SYSDATETIME(),NULL,@operatorID,0),
(236,@userId,SYSDATETIME(),NULL,@operatorID,0),
(237,@userId,SYSDATETIME(),NULL,@operatorID,0),
(238,@userId,SYSDATETIME(),NULL,@operatorID,0),
(239,@userId,SYSDATETIME(),NULL,@operatorID,0),
(240,@userId,SYSDATETIME(),NULL,@operatorID,0),
(241,@userId,SYSDATETIME(),NULL,@operatorID,0),
(254,@userId,SYSDATETIME(),NULL,@operatorID,0),
(255,@userId,SYSDATETIME(),NULL,@operatorID,0),
(256,@userId,SYSDATETIME(),NULL,@operatorID,0),
(257,@userId,SYSDATETIME(),NULL,@operatorID,0),
(258,@userId,SYSDATETIME(),NULL,@operatorID,0),
(259,@userId,SYSDATETIME(),NULL,@operatorID,0),
(260,@userId,SYSDATETIME(),NULL,@operatorID,0),
(261,@userId,SYSDATETIME(),NULL,@operatorID,0),
(279,@userId,SYSDATETIME(),NULL,@operatorID,0),
(280,@userId,SYSDATETIME(),NULL,@operatorID,0),
(290,@userId,SYSDATETIME(),NULL,@operatorID,0),
(291,@userId,SYSDATETIME(),NULL,@operatorID,0),
(299,@userId,SYSDATETIME(),NULL,@operatorID,0),
(305,@userId,SYSDATETIME(),NULL,@operatorID,0),
(308,@userId,SYSDATETIME(),NULL,@operatorID,0),
(309,@userId,SYSDATETIME(),NULL,@operatorID,0),
(365,@userId,SYSDATETIME(),NULL,@operatorID,0),
(366,@userId,SYSDATETIME(),NULL,@operatorID,0),
(367,@userId,SYSDATETIME(),NULL,@operatorID,0),
(368,@userId,SYSDATETIME(),NULL,@operatorID,0),
(369,@userId,SYSDATETIME(),NULL,@operatorID,0),
(370,@userId,SYSDATETIME(),NULL,@operatorID,0),
(371,@userId,SYSDATETIME(),NULL,@operatorID,0),
(372,@userId,SYSDATETIME(),NULL,@operatorID,0),
(373,@userId,SYSDATETIME(),NULL,@operatorID,0),
(374,@userId,SYSDATETIME(),NULL,@operatorID,0),
(375,@userId,SYSDATETIME(),NULL,@operatorID,0),
(376,@userId,SYSDATETIME(),NULL,@operatorID,0),
(380,@userId,SYSDATETIME(),NULL,@operatorID,0),
(381,@userId,SYSDATETIME(),NULL,@operatorID,0),
(382,@userId,SYSDATETIME(),NULL,@operatorID,0),
(383,@userId,SYSDATETIME(),NULL,@operatorID,0),
(384,@userId,SYSDATETIME(),NULL,@operatorID,0),
(385,@userId,SYSDATETIME(),NULL,@operatorID,0),
(386,@userId,SYSDATETIME(),NULL,@operatorID,0),
(387,@userId,SYSDATETIME(),NULL,@operatorID,0),
(389,@userId,SYSDATETIME(),NULL,@operatorID,0),
(390,@userId,SYSDATETIME(),NULL,@operatorID,0),
(391,@userId,SYSDATETIME(),NULL,@operatorID,0),
(392,@userId,SYSDATETIME(),NULL,@operatorID,0),
(393,@userId,SYSDATETIME(),NULL,@operatorID,0),
(394,@userId,SYSDATETIME(),NULL,@operatorID,0),
(395,@userId,SYSDATETIME(),NULL,@operatorID,0),
(396,@userId,SYSDATETIME(),NULL,@operatorID,0),
(397,@userId,SYSDATETIME(),NULL,@operatorID,0),
(398,@userId,SYSDATETIME(),NULL,@operatorID,0),
(399,@userId,SYSDATETIME(),NULL,@operatorID,0),
(413,@userId,SYSDATETIME(),NULL,@operatorID,0),
(416,@userId,SYSDATETIME(),NULL,@operatorID,0),
(417,@userId,SYSDATETIME(),NULL,@operatorID,0),
(418,@userId,SYSDATETIME(),NULL,@operatorID,0),
(419,@userId,SYSDATETIME(),NULL,@operatorID,0),
(420,@userId,SYSDATETIME(),NULL,@operatorID,0),
(440,@userId,SYSDATETIME(),NULL,@operatorID,0),
(442,@userId,SYSDATETIME(),NULL,@operatorID,0),
(453,@userId,SYSDATETIME(),NULL,@operatorID,0),
(454,@userId,SYSDATETIME(),NULL,@operatorID,0),
(463,@userId,SYSDATETIME(),NULL,@operatorID,0),
(486,@userId,SYSDATETIME(),NULL,@operatorID,0),
(524,@userId,SYSDATETIME(),NULL,@operatorID,0),
(525,@userId,SYSDATETIME(),NULL,@operatorID,0),
(526,@userId,SYSDATETIME(),NULL,@operatorID,0),
(528,@userId,SYSDATETIME(),NULL,@operatorID,0),
(529,@userId,SYSDATETIME(),NULL,@operatorID,0),
(532,@userId,SYSDATETIME(),NULL,@operatorID,0),
(534,@userId,SYSDATETIME(),NULL,@operatorID,0),
(543,@userId,SYSDATETIME(),NULL,@operatorID,0),
(545,@userId,SYSDATETIME(),NULL,@operatorID,0),
(615,@userId,SYSDATETIME(),NULL,@operatorID,0),
(616,@userId,SYSDATETIME(),NULL,@operatorID,0),
(685,@userId,SYSDATETIME(),NULL,@operatorID,0),
(686,@userId,SYSDATETIME(),NULL,@operatorID,0),
(687,@userId,SYSDATETIME(),NULL,@operatorID,0),
(688,@userId,SYSDATETIME(),NULL,@operatorID,0),
(689,@userId,SYSDATETIME(),NULL,@operatorID,0),
(692,@userId,SYSDATETIME(),NULL,@operatorID,0),
(693,@userId,SYSDATETIME(),NULL,@operatorID,0),
(694,@userId,SYSDATETIME(),NULL,@operatorID,0),
(695,@userId,SYSDATETIME(),NULL,@operatorID,0),
(696,@userId,SYSDATETIME(),NULL,@operatorID,0),
(697,@userId,SYSDATETIME(),NULL,@operatorID,0),
(698,@userId,SYSDATETIME(),NULL,@operatorID,0),
(699,@userId,SYSDATETIME(),NULL,@operatorID,0),
(700,@userId,SYSDATETIME(),NULL,@operatorID,0),
(701,@userId,SYSDATETIME(),NULL,@operatorID,0),
(702,@userId,SYSDATETIME(),NULL,@operatorID,0),
(703,@userId,SYSDATETIME(),NULL,@operatorID,0),
(704,@userId,SYSDATETIME(),NULL,@operatorID,0),
(705,@userId,SYSDATETIME(),NULL,@operatorID,0),
(706,@userId,SYSDATETIME(),NULL,@operatorID,0),
(708,@userId,SYSDATETIME(),NULL,@operatorID,0),
(709,@userId,SYSDATETIME(),NULL,@operatorID,0),
(710,@userId,SYSDATETIME(),NULL,@operatorID,0),
(711,@userId,SYSDATETIME(),NULL,@operatorID,0),
(712,@userId,SYSDATETIME(),NULL,@operatorID,0),
(713,@userId,SYSDATETIME(),NULL,@operatorID,0),
(716,@userId,SYSDATETIME(),NULL,@operatorID,0),
(717,@userId,SYSDATETIME(),NULL,@operatorID,0),
(720,@userId,SYSDATETIME(),NULL,@operatorID,0),
(723,@userId,SYSDATETIME(),NULL,@operatorID,0),
(725,@userId,SYSDATETIME(),NULL,@operatorID,0),
(726,@userId,SYSDATETIME(),NULL,@operatorID,0),
(727,@userId,SYSDATETIME(),NULL,@operatorID,0),
(728,@userId,SYSDATETIME(),NULL,@operatorID,0),
(730,@userId,SYSDATETIME(),NULL,@operatorID,0),
(731,@userId,SYSDATETIME(),NULL,@operatorID,0),
(732,@userId,SYSDATETIME(),NULL,@operatorID,0),
(734,@userId,SYSDATETIME(),NULL,@operatorID,0),
(735,@userId,SYSDATETIME(),NULL,@operatorID,0),
(736,@userId,SYSDATETIME(),NULL,@operatorID,0),
(737,@userId,SYSDATETIME(),NULL,@operatorID,0),
(738,@userId,SYSDATETIME(),NULL,@operatorID,0),
(739,@userId,SYSDATETIME(),NULL,@operatorID,0),
(741,@userId,SYSDATETIME(),NULL,@operatorID,0),
(787,@userId,SYSDATETIME(),NULL,@operatorID,0),
(792,@userId,SYSDATETIME(),NULL,@operatorID,0),
(794,@userId,SYSDATETIME(),NULL,@operatorID,0),
(795,@userId,SYSDATETIME(),NULL,@operatorID,0),
(797,@userId,SYSDATETIME(),NULL,@operatorID,0),
(798,@userId,SYSDATETIME(),NULL,@operatorID,0),
(799,@userId,SYSDATETIME(),NULL,@operatorID,0),
(800,@userId,SYSDATETIME(),NULL,@operatorID,0),
(801,@userId,SYSDATETIME(),NULL,@operatorID,0),
(802,@userId,SYSDATETIME(),NULL,@operatorID,0),
(803,@userId,SYSDATETIME(),NULL,@operatorID,0),
(804,@userId,SYSDATETIME(),NULL,@operatorID,0),
(805,@userId,SYSDATETIME(),NULL,@operatorID,0),
(806,@userId,SYSDATETIME(),NULL,@operatorID,0),
(807,@userId,SYSDATETIME(),NULL,@operatorID,0),
(808,@userId,SYSDATETIME(),NULL,@operatorID,0),
(809,@userId,SYSDATETIME(),NULL,@operatorID,0),
(810,@userId,SYSDATETIME(),NULL,@operatorID,0),
(811,@userId,SYSDATETIME(),NULL,@operatorID,0),
(827,@userId,SYSDATETIME(),NULL,@operatorID,0),
(837,@userId,SYSDATETIME(),NULL,@operatorID,0),
(841,@userId,SYSDATETIME(),NULL,@operatorID,0),
(842,@userId,SYSDATETIME(),NULL,@operatorID,0),
(843,@userId,SYSDATETIME(),NULL,@operatorID,0),
(844,@userId,SYSDATETIME(),NULL,@operatorID,0),
(845,@userId,SYSDATETIME(),NULL,@operatorID,0),
(846,@userId,SYSDATETIME(),NULL,@operatorID,0),
(847,@userId,SYSDATETIME(),NULL,@operatorID,0),
(848,@userId,SYSDATETIME(),NULL,@operatorID,0),
(849,@userId,SYSDATETIME(),NULL,@operatorID,0),
(850,@userId,SYSDATETIME(),NULL,@operatorID,0),
(851,@userId,SYSDATETIME(),NULL,@operatorID,0),
(852,@userId,SYSDATETIME(),NULL,@operatorID,0),
(853,@userId,SYSDATETIME(),NULL,@operatorID,0),
(854,@userId,SYSDATETIME(),NULL,@operatorID,0),
(855,@userId,SYSDATETIME(),NULL,@operatorID,0),
(856,@userId,SYSDATETIME(),NULL,@operatorID,0),
(857,@userId,SYSDATETIME(),NULL,@operatorID,0),
(858,@userId,SYSDATETIME(),NULL,@operatorID,0),
(859,@userId,SYSDATETIME(),NULL,@operatorID,0),
(860,@userId,SYSDATETIME(),NULL,@operatorID,0),
(861,@userId,SYSDATETIME(),NULL,@operatorID,0),
(862,@userId,SYSDATETIME(),NULL,@operatorID,0),
(863,@userId,SYSDATETIME(),NULL,@operatorID,0),
(864,@userId,SYSDATETIME(),NULL,@operatorID,0),
(865,@userId,SYSDATETIME(),NULL,@operatorID,0),
(866,@userId,SYSDATETIME(),NULL,@operatorID,0),
(867,@userId,SYSDATETIME(),NULL,@operatorID,0),
(868,@userId,SYSDATETIME(),NULL,@operatorID,0),
(869,@userId,SYSDATETIME(),NULL,@operatorID,0),
(870,@userId,SYSDATETIME(),NULL,@operatorID,0),
(871,@userId,SYSDATETIME(),NULL,@operatorID,0),
(872,@userId,SYSDATETIME(),NULL,@operatorID,0),
(873,@userId,SYSDATETIME(),NULL,@operatorID,0),
(874,@userId,SYSDATETIME(),NULL,@operatorID,0),
(875,@userId,SYSDATETIME(),NULL,@operatorID,0),
(876,@userId,SYSDATETIME(),NULL,@operatorID,0),
(877,@userId,SYSDATETIME(),NULL,@operatorID,0),
(878,@userId,SYSDATETIME(),NULL,@operatorID,0),
(879,@userId,SYSDATETIME(),NULL,@operatorID,0),
(880,@userId,SYSDATETIME(),NULL,@operatorID,0),
(881,@userId,SYSDATETIME(),NULL,@operatorID,0),
(882,@userId,SYSDATETIME(),NULL,@operatorID,0),
(883,@userId,SYSDATETIME(),NULL,@operatorID,0),
(884,@userId,SYSDATETIME(),NULL,@operatorID,0),
(885,@userId,SYSDATETIME(),NULL,@operatorID,0),
(886,@userId,SYSDATETIME(),NULL,@operatorID,0),
(887,@userId,SYSDATETIME(),NULL,@operatorID,0),
(888,@userId,SYSDATETIME(),NULL,@operatorID,0),
(889,@userId,SYSDATETIME(),NULL,@operatorID,0),
(890,@userId,SYSDATETIME(),NULL,@operatorID,0),
(891,@userId,SYSDATETIME(),NULL,@operatorID,0),
(892,@userId,SYSDATETIME(),NULL,@operatorID,0),
(893,@userId,SYSDATETIME(),NULL,@operatorID,0),
(894,@userId,SYSDATETIME(),NULL,@operatorID,0),
(895,@userId,SYSDATETIME(),NULL,@operatorID,0),
(896,@userId,SYSDATETIME(),NULL,@operatorID,0),
(897,@userId,SYSDATETIME(),NULL,@operatorID,0),
(898,@userId,SYSDATETIME(),NULL,@operatorID,0),
(899,@userId,SYSDATETIME(),NULL,@operatorID,0),
(900,@userId,SYSDATETIME(),NULL,@operatorID,0),
(901,@userId,SYSDATETIME(),NULL,@operatorID,0),
(902,@userId,SYSDATETIME(),NULL,@operatorID,0),
(903,@userId,SYSDATETIME(),NULL,@operatorID,0),
(904,@userId,SYSDATETIME(),NULL,@operatorID,0),
(905,@userId,SYSDATETIME(),NULL,@operatorID,0),
(906,@userId,SYSDATETIME(),NULL,@operatorID,0),
(907,@userId,SYSDATETIME(),NULL,@operatorID,0),
(908,@userId,SYSDATETIME(),NULL,@operatorID,0),
(909,@userId,SYSDATETIME(),NULL,@operatorID,0),
(910,@userId,SYSDATETIME(),NULL,@operatorID,0),
(911,@userId,SYSDATETIME(),NULL,@operatorID,0),
(912,@userId,SYSDATETIME(),NULL,@operatorID,0),
(913,@userId,SYSDATETIME(),NULL,@operatorID,0),
(914,@userId,SYSDATETIME(),NULL,@operatorID,0),
(915,@userId,SYSDATETIME(),NULL,@operatorID,0),
(916,@userId,SYSDATETIME(),NULL,@operatorID,0),
(917,@userId,SYSDATETIME(),NULL,@operatorID,0),
(918,@userId,SYSDATETIME(),NULL,@operatorID,0),
(919,@userId,SYSDATETIME(),NULL,@operatorID,0),
(920,@userId,SYSDATETIME(),NULL,@operatorID,0),
(921,@userId,SYSDATETIME(),NULL,@operatorID,0),
(922,@userId,SYSDATETIME(),NULL,@operatorID,0),
(923,@userId,SYSDATETIME(),NULL,@operatorID,0),
(924,@userId,SYSDATETIME(),NULL,@operatorID,0),
(925,@userId,SYSDATETIME(),NULL,@operatorID,0),
(926,@userId,SYSDATETIME(),NULL,@operatorID,0),
(927,@userId,SYSDATETIME(),NULL,@operatorID,0),
(928,@userId,SYSDATETIME(),NULL,@operatorID,0),
(929,@userId,SYSDATETIME(),NULL,@operatorID,0),
(930,@userId,SYSDATETIME(),NULL,@operatorID,0),
(931,@userId,SYSDATETIME(),NULL,@operatorID,0),
(932,@userId,SYSDATETIME(),NULL,@operatorID,0),
(933,@userId,SYSDATETIME(),NULL,@operatorID,0),
(934,@userId,SYSDATETIME(),NULL,@operatorID,0),
(935,@userId,SYSDATETIME(),NULL,@operatorID,0),
(936,@userId,SYSDATETIME(),NULL,@operatorID,0),
(937,@userId,SYSDATETIME(),NULL,@operatorID,0),
(938,@userId,SYSDATETIME(),NULL,@operatorID,0),
(939,@userId,SYSDATETIME(),NULL,@operatorID,0),
(940,@userId,SYSDATETIME(),NULL,@operatorID,0),
(941,@userId,SYSDATETIME(),NULL,@operatorID,0),
(942,@userId,SYSDATETIME(),NULL,@operatorID,0),
(943,@userId,SYSDATETIME(),NULL,@operatorID,0),
(944,@userId,SYSDATETIME(),NULL,@operatorID,0),
(945,@userId,SYSDATETIME(),NULL,@operatorID,0),
(946,@userId,SYSDATETIME(),NULL,@operatorID,0),
(947,@userId,SYSDATETIME(),NULL,@operatorID,0),
(948,@userId,SYSDATETIME(),NULL,@operatorID,0),
(949,@userId,SYSDATETIME(),NULL,@operatorID,0),
(950,@userId,SYSDATETIME(),NULL,@operatorID,0),
(951,@userId,SYSDATETIME(),NULL,@operatorID,0),
(952,@userId,SYSDATETIME(),NULL,@operatorID,0),
(953,@userId,SYSDATETIME(),NULL,@operatorID,0),
(954,@userId,SYSDATETIME(),NULL,@operatorID,0),
(955,@userId,SYSDATETIME(),NULL,@operatorID,0),
(956,@userId,SYSDATETIME(),NULL,@operatorID,0),
(957,@userId,SYSDATETIME(),NULL,@operatorID,0),
(958,@userId,SYSDATETIME(),NULL,@operatorID,0),
(959,@userId,SYSDATETIME(),NULL,@operatorID,0),
(960,@userId,SYSDATETIME(),NULL,@operatorID,0),
(961,@userId,SYSDATETIME(),NULL,@operatorID,0),
(962,@userId,SYSDATETIME(),NULL,@operatorID,0),
(963,@userId,SYSDATETIME(),NULL,@operatorID,0),
(964,@userId,SYSDATETIME(),NULL,@operatorID,0),
(965,@userId,SYSDATETIME(),NULL,@operatorID,0),
(966,@userId,SYSDATETIME(),NULL,@operatorID,0),
(967,@userId,SYSDATETIME(),NULL,@operatorID,0),
(968,@userId,SYSDATETIME(),NULL,@operatorID,0),
(969,@userId,SYSDATETIME(),NULL,@operatorID,0),
(970,@userId,SYSDATETIME(),NULL,@operatorID,0),
(971,@userId,SYSDATETIME(),NULL,@operatorID,0),
(972,@userId,SYSDATETIME(),NULL,@operatorID,0),
(973,@userId,SYSDATETIME(),NULL,@operatorID,0),
(974,@userId,SYSDATETIME(),NULL,@operatorID,0),
(975,@userId,SYSDATETIME(),NULL,@operatorID,0),
(976,@userId,SYSDATETIME(),NULL,@operatorID,0),
(977,@userId,SYSDATETIME(),NULL,@operatorID,0),
(978,@userId,SYSDATETIME(),NULL,@operatorID,0),
(979,@userId,SYSDATETIME(),NULL,@operatorID,0),
(980,@userId,SYSDATETIME(),NULL,@operatorID,0),
(981,@userId,SYSDATETIME(),NULL,@operatorID,0),
(982,@userId,SYSDATETIME(),NULL,@operatorID,0),
(983,@userId,SYSDATETIME(),NULL,@operatorID,0),
(984,@userId,SYSDATETIME(),NULL,@operatorID,0),
(985,@userId,SYSDATETIME(),NULL,@operatorID,0),
(986,@userId,SYSDATETIME(),NULL,@operatorID,0),
(987,@userId,SYSDATETIME(),NULL,@operatorID,0),
(988,@userId,SYSDATETIME(),NULL,@operatorID,0),
(989,@userId,SYSDATETIME(),NULL,@operatorID,0),
(990,@userId,SYSDATETIME(),NULL,@operatorID,0),
(991,@userId,SYSDATETIME(),NULL,@operatorID,0),
(992,@userId,SYSDATETIME(),NULL,@operatorID,0),
(993,@userId,SYSDATETIME(),NULL,@operatorID,0),
(994,@userId,SYSDATETIME(),NULL,@operatorID,0),
(995,@userId,SYSDATETIME(),NULL,@operatorID,0),
(996,@userId,SYSDATETIME(),NULL,@operatorID,0),
(997,@userId,SYSDATETIME(),NULL,@operatorID,0),
(998,@userId,SYSDATETIME(),NULL,@operatorID,0),
(999,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1000,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1001,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1002,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1003,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1004,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1005,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1006,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1007,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1008,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1009,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1010,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1011,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1012,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1013,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1014,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1015,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1016,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1017,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1018,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1019,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1020,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1021,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1022,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1023,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1024,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1025,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1026,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1027,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1028,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1029,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1030,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1031,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1032,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1033,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1034,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1035,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1036,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1037,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1038,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1039,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1040,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1041,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1042,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1043,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1044,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1045,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1046,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1047,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1048,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1049,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1050,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1051,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1052,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1053,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1054,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1055,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1056,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1057,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1058,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1059,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1060,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1061,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1062,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1063,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1064,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1072,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1080,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1081,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1082,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1083,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1084,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1085,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1086,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1092,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1140,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1171,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1237,@userId,SYSDATETIME(),NULL,@operatorID,0),
(1337,@userId,SYSDATETIME(),NULL,@operatorID,0)

END

*/
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_MedicalSuperVision]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
CREATE PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_MedicalSuperVision]-- 1,2,0
	@TariffID INT,
	@ServiceID INT,
	@ItemId INT-- base sa ItemCode
AS
BEGIN

	 
			--	Select name,'No Price123' as Price,Getdate() as startdatetime,0 as BedTypeId,0,0ItemId From dbo.BedType where deleted = 0
 
select b.name, a.Price,a.StartDateTime,a.BedTypeID,0,0ItemId from P_Nurse a
left join his.dbo.bedType b on a.BedTypeID = b.id
 where a.CategoryId = @TariffID  and a.deleted = 0 and b.deleted = 0  order by a.BedTypeID



END
--select * from TempGetItemNameReports
--select * from TempGetIPPriceReports
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_Save_SCS_Dec7-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Bed_Save_SCS_Dec7-2016]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlBedSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlBedSave
SELECT 
Action
,bedid
,BedName
,ExtensionNo
,BedTypeID
,StationId
,RoomId
,StatusId
,DepartmentID
,OperatorId
into #tmpBedSave

from openxml(@handle, '/DocumentElement/BedSave',2) with
(
Action int
,bedid int
,BedName varchar(250)
,ExtensionNo varchar(250)
,BedTypeID int
,StationId int
,RoomId int
,StatusId int
,DepartmentID int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @bedid as int
declare @BedName as varchar(250)
declare @ExtensionNo as varchar(250)
declare @BedTypeID as int
declare @StationId as int
declare @RoomId as int
declare @StatusId as int
declare @DepartmentID as int
declare @OperatorId as int
declare @MaxId as int



select @Action = Action,@bedid = bedid,@OperatorId = OperatorId,@BedTypeID = BedTypeID,@StationId = StationId,@StatusId = StatusId,@ExtensionNo = ExtensionNo
from   #tmpBedSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   		if exists(select * from dbo.Bed where Name = @BedName)
				begin
			COMMIT TRAN
			SET       @ErrorMessage = 'Bed Name Already Exists!'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end


			--select count(*) as no from bed where deleted=0 and upper(name) = 'ASSSS'

			Insert into dbo.Bed (name,BedTypeID,stationid,extensionno,startdatetime,deleted,status,ipid,Roomid,Departmentid) 
			Select BedName,BedTypeID,StationId,ExtensionNo,getdate(),0,StatusId,0,RoomId,DepartmentID
			from #tmpBedSave

			select @MaxId =  max(id) + 1  from dbo.Bed 
			Insert into BedOperator(BedId,Operatorid,status,date) 
			Select @MaxId,OperatorId,'A',Getdate()
			from #tmpBedSave



			--Insert into BedOperator(@MaxId,@OperatorId,status,date) values (491,1412,'A',getdate())
			
			--values('assss',30,171,23213,getdate(),0,1,0 ,1,24)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
			UPDATE    Bed
			SET       ExtensionNo = @ExtensionNo, RoomId = @RoomId, DeptCode = a.DeptCode, DepartmentID = a.ID, BedTypeID = 1, StationID = @StationId
			FROM       Bed CROSS JOIN Department AS a
			WHERE     (a.ID = @DepartmentID) AND (Bed.ID = @bedid)

			update beddetail set deleted =1 where parentbedid = @bedid

			Insert into BedOperator(BedId,Operatorid,status,date) 
			SELECT BedId,OperatorId,'M',Getdate()
			FROM #tmpBedSave

		

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN

			update bed  set deleted=1,enddatetime=getdate() where id=@bedid

			Insert into BedOperator(BedId,Operatorid,status,date) 
						SELECT @bedid,OperatorId,'D',GETDATE()
						FROM #tmpBedSave
		
		--Update StationType set deleted =1,ModifiedDateTime=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpBedSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/

---select * from Rooms
--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_RoomAndBoard]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
create PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_RoomAndBoard]-- 1,2,0
	@TariffID INT,
	@ServiceID INT,
	@ItemId INT-- base sa ItemCode
AS
BEGIN

	 
			--	Select name,'No Price123' as Price,Getdate() as startdatetime,0 as BedTypeId,0,0ItemId From dbo.BedType where deleted = 0
 
select b.name, a.Price,a.StartDateTime,a.BedTypeID,0,0ItemId from P_Rent a
left join his.dbo.bedType b on a.BedTypeID = b.id
 where a.CategoryId = @TariffID  and a.deleted = 0 and b.deleted = 0  order by a.BedTypeID




END
--select * from TempGetItemNameReports
--select * from TempGetIPPriceReports
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS_testJerome]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85

--test for room and board
CREATE PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS_testJerome]-- 1,2,0
	@TariffID INT,
	@ServiceID INT,
	@ItemId INT-- base sa ItemCode
AS
BEGIN
 

	DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
	, @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID
	---SELECT @ItemCode = '', @ItemName = ''
	

---Create Temp file name
			Create Table #TempFilesName( 
					  id int identity (1,1),
					  Name varchar(250) NULL,
					  BedTypeId int
					 )	

	Select @PriceTable = PriceTable from dbo.IPBService where Id = @ServiceID 
	print(@PriceTable)
		Select id,name into #TempBedType
		from dbo.BedType where deleted = 0

		Declare @TempBedId as int

	WHILE exists(select top 1 * from #TempBedType)
					BEGIN
						SELECT top 1 @TempBedId = id from #TempBedType

						if(@serviceId = '2') --room and board
						Begin
						SET @filename = 'P_'  + cast(@PriceTable as varchar)
						end
						else
						begin 
						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
						end

						
				
							print(@filename)
						insert into #TempFilesName (Name,BedTypeId) values(@filename,@TempBedId);
						

						delete #TempBedType where id = @TempBedId
				END

	Create Table #TempEmptyIPPriceView( 
					  ID int NULL,
					  Price numeric NULL,
					  Deleted bit NULL, 
					  StartDateTime datetime NULL,
					  EndDateTime datetime NULL,
					  OperatorID int NULL,
					  BedTypeId int NULL
					 )
	Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int

	---select * from BedType where deleted = 0
	WHILE exists(select top 1 * from #TempFilesName)
				BEGIN
							SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId from #TempFilesName
						
							if(@serviceId = '2') --room and board
						Begin

											set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' INSERT INTO #TempEmptyIPPriceView ' +
											   ' Select *,'+ cast(@ctrBedId as varchar) + ' from ' + cast(@TempFiles as varchar) + 
											   ' where deleted = 0 ' +
											   ' and CategoryId = ' +  cast(@ItemId as varchar) +
												' END '	
							
						end
						else
						begin 
											set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' INSERT INTO #TempEmptyIPPriceView ' +
											   ' Select *,'+ cast(@ctrBedId as varchar) + ' from ' + cast(@TempFiles as varchar) + 
											   ' where deleted = 0 ' +
											   ' and Id = ' +  cast(@ItemId as varchar) +
												' END '	
												
						end

		
									print(@SQL)								  
						  EXEC sp_executesql @SQL 
				---	Select id as ID,name as BedTypeName,'0.00' as Price,startdatetime From BEdType where deleted = 0 
					Delete  #TempFilesName where id = @FileId
				END

			IF EXISTS (Select * from #TempEmptyIPPriceView)
				BEGIN

				Declare @TariffName as  varchar(250),@ServiceName as varchar(250)
				
				Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffId

				Select @ServiceName = ServiceName from IPBService where deleted = 0 and ID = @ServiceID  

				Delete TempGetIPPriceReports

				Insert into TempGetIPPriceReports
				(BedName,Price,StartDateTime,BedTypeId,ID,TariffName,ServiceName)
	      Select b.name as BedName,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId,@TariffName,@ServiceName
			    from #TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc



			--	CREATE TABLE [dbo].[TempGetIPPriceReports](
			--	[ID] [int] NULL,
			--	[Price] [numeric](18, 0) NULL,
			--	[Deleted] [bit] NULL,
			--	[StartDateTime] [datetime] NULL,
			--	[EndDateTime] [datetime] NULL,
			--	[OperatorID] [int] NULL,
			--	[BedTypeId] [int] NULL,
			--	[BedName] [varchar](250) NULL,
			--	[TariffName] [varchar](250) NULL,
			--	[ServiceName] [varchar](250) NULL,
			--	[ItemCodeName] [varchar](250) NULL
			--) ON [MasterFile]

				


				Select b.name,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId from #TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc
				END
				
				ELSE
				Select name,'No Price' as Price,Getdate() as startdatetime,0 as BedTypeId,0,0ItemId From dbo.BedType where deleted = 0

			
			  --Insert into TempItemCodetbl
			 -- EXEC sp_executesql @sql 
			 --select * from BEdType
			 drop table #TempBedType
			 drop table #TempFilesName
			 drop table #TempEmptyIPPriceView


END
--select * from TempGetItemNameReports
--select * from TempGetIPPriceReports
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS-Dec04-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
create PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS-Dec04-2016]-- 1,20,85
	@TariffID INT,
	@ServiceID INT,
	@ItemId INT-- base sa ItemCode
AS
BEGIN

	DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
	, @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID
	---SELECT @ItemCode = '', @ItemName = ''
	

---Create Temp file name
			Create Table #TempFilesName( 
					  id int identity (1,1),
					  Name varchar(250) NULL,
					  BedTypeId int
					 )	

	Select @PriceTable = PriceTable from dbo.IPBService where Id = @ServiceID 

		Select id,name into #TempBedType
		from dbo.BedType where deleted = 0

		Declare @TempBedId as int

	WHILE exists(select top 1 * from #TempBedType)
					BEGIN
						SELECT top 1 @TempBedId = id from #TempBedType

						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
				
						
						insert into #TempFilesName (Name,BedTypeId) values(@filename,@TempBedId);
						

						delete #TempBedType where id = @TempBedId
				END

	Create Table #TempEmptyIPPriceView( 
					  ID int NULL,
					  Price numeric NULL,
					  Deleted bit NULL, 
					  StartDateTime datetime NULL,
					  EndDateTime datetime NULL,
					  OperatorID int NULL,
					  BedTypeId int NULL
					 )
	Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int

	---select * from BedType where deleted = 0
	WHILE exists(select top 1 * from #TempFilesName)
				BEGIN
							SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId from #TempFilesName
						
							set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
											   ' BEGIN ' +
											   ' INSERT INTO #TempEmptyIPPriceView ' +
											   ' Select *,'+ cast(@ctrBedId as varchar) + ' from ' + cast(@TempFiles as varchar) + 
											   ' where deleted = 0 ' +
											   ' and Id = ' +  cast(@ItemId as varchar) +
												' END '									  
						  EXEC sp_executesql @SQL 
				---	Select id as ID,name as BedTypeName,'0.00' as Price,startdatetime From BEdType where deleted = 0 
					Delete  #TempFilesName where id = @FileId
				END

			IF EXISTS (Select * from #TempEmptyIPPriceView)
				BEGIN

				Declare @TariffName as  varchar(250),@ServiceName as varchar(250)
				
				Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffId

				Select @ServiceName = ServiceName from IPBService where deleted = 0 and ID = @ServiceID  

				Delete TempGetIPPriceReports

				Insert into TempGetIPPriceReports
				(BedName,Price,StartDateTime,BedTypeId,ID,TariffName,ServiceName)
	      Select b.name as BedName,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId,@TariffName,@ServiceName
			    from #TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc



			--	CREATE TABLE [dbo].[TempGetIPPriceReports](
			--	[ID] [int] NULL,
			--	[Price] [numeric](18, 0) NULL,
			--	[Deleted] [bit] NULL,
			--	[StartDateTime] [datetime] NULL,
			--	[EndDateTime] [datetime] NULL,
			--	[OperatorID] [int] NULL,
			--	[BedTypeId] [int] NULL,
			--	[BedName] [varchar](250) NULL,
			--	[TariffName] [varchar](250) NULL,
			--	[ServiceName] [varchar](250) NULL,
			--	[ItemCodeName] [varchar](250) NULL
			--) ON [MasterFile]

				


				Select b.name,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId from #TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc
				END
				
				ELSE
				Select name,'No Price' as Price,Getdate() as startdatetime,0 as BedTypeId,0,0ItemId From dbo.BedType where deleted = 0

			
			  --Insert into TempItemCodetbl
			 -- EXEC sp_executesql @sql 
			 --select * from BEdType
			 drop table #TempBedType
			 drop table #TempFilesName
			 drop table #TempEmptyIPPriceView


END
--select * from TempGetItemNameReports
--select * from TempGetIPPriceReports
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCSNEW_Dec04-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





---[ITADMIN].[Tariff_IP_SearchItem_SCSNEW]4,2,''
---SELECT * FROM dbo.IPBservice
create PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCSNEW_Dec04-2016]-- 20,1,1
	@ServiceID INT,
	@SearchByCode int,
	@SearchText VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

	--	if NOT EXISTS (select * from dbo.TempItemCodetbl)
	--	BEGIN
	--			Create Table TempItemCodetbl( 
	--				  ID int NULL,
	--				  Code varchar(250) NULL,
	--				  Name varchar(250) NULL,
	--			END
	--ELSE
	---SELECT * FROM dbo.IPBservice
	

	DECLARE @MasterTable VARCHAR(30), @SQL NVARCHAR(2000), @SearchBy VARCHAR(10),@srcbycode varchar(50),@srctext varchar(50)

		Select @srcbycode = ''
		Select @srctext = ''


	SELECT @MasterTable = MasterTable FROM dbo.IPBservice WHERE ID = @ServiceID	
	
	IF @ServiceID != 15
		BEGIN
			SET @SearchBy = CASE WHEN @srcbycode = 1 THEN ' Code ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''' + @srctext + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END
	ELSE
		BEGIN
			SET @SearchBy = CASE WHEN @srcbycode = 1 THEN ' EmpCode ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, EmpCode AS Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''' + @srctext + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END

		if  EXISTS (select * from dbo.TempItemCodetbl)
			BEGIN
			  Delete TempItemCodetbl
		
			end

				  Insert into TempItemCodetbl
				  EXEC sp_executesql @sql 

			Delete TempGetItemNameReports 

			Insert into TempGetItemNameReports
			(ID,Code)
			select ID as id,Code + '-' + Name as Code from TempItemCodetbl
				


			select ID as id,Code + '-' + Name as name from TempItemCodetbl

					--Create Table TempGetItemNameReports( 
					--			  ID int NULL,
					--			  Code varchar(250)
					--			  )	

END



---Select * From Delete TempGetItemNameReports





	--Create Table TempGetItemNameReports( 
	--							  ID int NULL,
	--							  Code varchar(250)
	--							  )	

GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_GetAllInPatient]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[SghUtilities_GetAllInPatient]  
	

AS
BEGIN
 






set xact_abort on


DECLARE @ERROR_SEVERITY AS INT , @ErrorMessage   as NVARCHAR(max)
DECLARE @ERROR_STATE AS INT 
 
  BEGIN TRY 
    
        BEGIN TRAN
 

      Select p.categoryid, p.companyid,p.ipid,p.Title,cast(p.RegistrationNo as varchar(10))+'-'+p.FirstName + ' '+ p.MiddleName + ' '+ p.LastName as Name,p.AdmitDateTime,getdate() as now,cast(p.Age  as varchar(20))+'-'+ a.name as age , s.name as sex ,e.employeeid,e.name as doctor
,b.Name as bedname,b.ID as bedId , bt.name as BedType 
 , st.Name as station,st.id as stationid
from InPatient p
left join sex s on  p.sex =s.id 
left join employee e on p.doctorid=e.id
left join agetype a on  p.agetype=a.id 
left join Bed b on b.IPID = p.ipid 
left join his.dbo.BedType   as bt on bt.id = b.BedTypeID
 left join his.dbo.station st on b.StationID = st.ID
-- where  registrationno = '1468894'

 
 --exec sp_help BedType
        
        COMMIT TRAN

        SET @ErrorMessage = '100-Contact IT Administrator.'     
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
       RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
        ROLLBACK TRANSACTION   
        SET @ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();       
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()        
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 

	END
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_SaveForceInpatientTransferBed]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*
 
declare @ipid  varchar(20), @bedId  varchar(20)
declare @ErrorMessage nvarchar(max)
set @ipid =   '2'
set @bedId = '1'
exec ITADMIN.SghUtilities_SaveForceInpatientTransferBed @ErrorMessage,@ipid, @bedId
print (@ErrorMessage)

*/

create PROCEDURE [ITADMIN].[SghUtilities_SaveForceInpatientTransferBed]
  @ErrorMessage				as NVARCHAR(max) OUT
  ,@ipid varchar(20)
 ,@bedId varchar(20)
AS
BEGIN


SET NOCOUNT ON;

set xact_abort on


DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
 
  BEGIN TRY 
    
        BEGIN TRAN
 

		 Update bed set status=5,ipid= @ipid where id = @bedId
 
 		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH  
		ROLLBACK TRANSACTION   
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);   
    END CATCH; 


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetRoleList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[Security_GetRoleList] 
@DeptID as varchar(250) = 134
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--Declare @EMPNAME as varchar(max)

--SELECT 
--@EMPNAME = a.Name
--,@DeptID = a.ID
--from Department a 
--where a.Id = 15

--SELECT 
--a.Name + ',' + a.City  as Header
--,@EMPNAME as Name
--,@DeptID as EmployeeID
--from OrganisationDetails a


-- select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName 
-- --,'' as FeatureName 
--,c.Name  as FeatureName
--  from his.dbo.department dept
-- left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
-- left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
-- left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
-- left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
-- left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
--   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 AND dept.ID = @DeptID

--	group by   emp.EmployeeID,emp.Name,a.ModuleName
--	,c.Name
--   order by emp.Name ,a.ModuleName
--   ,c.Name
 

 /*
 select * from (
  select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,c.Name as FeatureName,'' as RoleName--  cr.Name as RoleName
 from his.dbo.department dept
 left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
 left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
 left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
 left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
 left join  HIS.HISGLOBAL.ACCESS_USERROLES	ur on ur.User_Id = emp.ID 
 left join  HISGLOBAL.ACCESS_ROLES cr on ur.Role_Id = cr.RoleID 
   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 and cr.Deleted = 0 and ur.Deleted = 0 
    AND dept.ID = @DeptID
  
	group by   emp.EmployeeID,emp.Name,a.ModuleName,c.Name -- ,cr.Name
 --  order by emp.Name ,a.ModuleName,c.Name

    union all

 select distinct  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,mf.Name as FeatureName  ,'' as RoleName--mr.Name as RoleName
 from his.dbo.department dept
 inner join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.dbo.l_userroles ur on ur.User_Id = emp.ID
 inner join his.dbo.m_roles mr on ur.Role_Id = mr.Id
 left join his.dbo.l_rolefeatures lr on lr.Role_Id = ur.Role_Id 
  inner join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
  inner join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 where dept.ID = @DeptID group by  emp.EmployeeID,emp.Name,a.ModuleName,mf.Name--,mr.Name

 ) x  group by  x.EmployeeID,x.EmpName,x.FeatureName,x.ModuleName,x.RoleName
   order by  x.EmployeeID,x.EmpName,x.ModuleName,x.FeatureName
 --,x.RoleName

 */


 /*
 SELECT  mr.Name as RoleName,a.ModuleName,mf.Name as FName,mr.Id
  FROM  his.dbo.m_roles mr
LEFT JOIN his.dbo.l_rolefeatures lr ON mr.Id = lr.Role_Id 
  left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
 left  join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 left join his.dbo.Station st on lr.Station_Id = st.ID
 left join  his.dbo.department dept on st.DepartmentId = dept.Id
 where   a.Deleted = 0  
 and (@DeptID = '0' OR dept.Id = @DeptID) 
 group by  mr.Name,a.ModuleName,mf.Name,mr.Id
 order by  mr.Id,mr.Name,a.ModuleName,mf.Name
 */

 
 SELECT  mr.Name as RoleName,a.ModuleName,mf.Name as FName,mr.Id
  FROM  his.dbo.m_roles mr
LEFT JOIN his.dbo.l_rolefeatures lr ON mr.Id = lr.Role_Id 
  left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
 left  join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 left join his.dbo.Station st on lr.Station_Id = st.ID
 left join  his.dbo.department dept on st.DepartmentId = dept.Id
 where   a.Deleted = 0  
-- and (@DeptID = '0' OR dept.Id = @DeptID) 
  
 and 

  mr.Id IN (
					 select x.RoleID from
							 (
 
								 select distinct  mr.Id as RoleID
									 from his.dbo.department dept
									 inner join his.dbo.Employee emp on dept.ID = emp.DepartmentID
									 left join his.dbo.l_userroles ur on ur.User_Id = emp.ID
									 inner join his.dbo.m_roles mr on ur.Role_Id = mr.Id
									 left join his.dbo.l_rolefeatures lr on lr.Role_Id = ur.Role_Id 
									  inner join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
									  inner join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
									 where   a.Deleted = 0    and emp.Deleted = 0 
									  and (@DeptID = '0' OR dept.Id = @DeptID) 
									 group by mr.Id
								 )x group by x.RoleID --order by x.RoleID
  
  ) 

   group by  mr.Name,a.ModuleName,mf.Name,mr.Id
 order by  mr.Id,mr.Name,a.ModuleName,mf.Name




END
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDeptListBYROLE]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[Security_GetDeptListBYROLE] 
@DeptID as varchar(250) = 66
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--Declare @EMPNAME as varchar(max)

--SELECT 
--@EMPNAME = a.Name
--,@DeptID = a.ID
--from Department a 
--where a.Id = 15

--SELECT 
--a.Name + ',' + a.City  as Header
--,@EMPNAME as Name
--,@DeptID as EmployeeID
--from OrganisationDetails a


-- select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName 
-- --,'' as FeatureName 
--,c.Name  as FeatureName
--  from his.dbo.department dept
-- left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
-- left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
-- left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
-- left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
-- left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
--   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 AND dept.ID = @DeptID

--	group by   emp.EmployeeID,emp.Name,a.ModuleName
--	,c.Name
--   order by emp.Name ,a.ModuleName
--   ,c.Name
 

 /*
 select * from (
  select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,c.Name as FeatureName,'' as RoleName--  cr.Name as RoleName
 from his.dbo.department dept
 left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
 left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
 left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
 left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
 left join  HIS.HISGLOBAL.ACCESS_USERROLES	ur on ur.User_Id = emp.ID 
 left join  HISGLOBAL.ACCESS_ROLES cr on ur.Role_Id = cr.RoleID 
   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 and cr.Deleted = 0 and ur.Deleted = 0 
    AND dept.ID = @DeptID
  
	group by   emp.EmployeeID,emp.Name,a.ModuleName,c.Name -- ,cr.Name
 --  order by emp.Name ,a.ModuleName,c.Name

    union all

 select distinct  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,mf.Name as FeatureName  ,'' as RoleName--mr.Name as RoleName
 from his.dbo.department dept
 inner join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.dbo.l_userroles ur on ur.User_Id = emp.ID
 inner join his.dbo.m_roles mr on ur.Role_Id = mr.Id
 left join his.dbo.l_rolefeatures lr on lr.Role_Id = ur.Role_Id 
  inner join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
  inner join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 where dept.ID = @DeptID group by  emp.EmployeeID,emp.Name,a.ModuleName,mf.Name--,mr.Name

 ) x  group by  x.EmployeeID,x.EmpName,x.FeatureName,x.ModuleName,x.RoleName
   order by  x.EmployeeID,x.EmpName,x.ModuleName,x.FeatureName
 --,x.RoleName

 */

 

 SELECT mr.Name,a.ModuleName,mf.Name
  FROM  his.dbo.m_roles mr
LEFT JOIN his.dbo.l_rolefeatures lr ON mr.Id = lr.Role_Id 
  left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
 left  join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 left join his.dbo.Station st on lr.Station_Id = st.ID
 left join  his.dbo.department dept on st.DepartmentId = dept.Id
 where dept.Id = @DeptID 
 and  a.Deleted = 0 
 group by  mr.Name,a.ModuleName,mf.Name
 order by  mr.Name,a.ModuleName,mf.Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS_nov21-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
create PROCEDURE [ITADMIN].[TransactionInv_View_SCS_nov21-2016]-- 1-- 0
@Id as int
AS

BEGIN  

	CREATE TABLE #temp1(
			[selected] int NULL,
			[Id] int NULL,
			[Name] [varchar](250) NULL,
			[MaxId] int NULL,
			[stationid] int NULL,
		)

	
	INSERT INTO #temp1		
	SELECT DISTINCT 1 selected,b.slno as Id,a.TranName AS Name,b.maxId,b.stationid --c.Name AS Station
	FROM         TransactionSlNo AS a 
				INNER JOIN InvMax AS b ON a.slNo = b.slno 
				INNER JOIN dbo.Station AS c ON b.stationid = c.ID
	WHERE     (b.stationid = @Id)

	INSERT INTO #temp1
	SELECT     0 selected,slNo as Id, TranName AS Name, 0 maxId, 0 stationId 
	FROM         TransactionSlNo a
	where a.slNo not in (select Id from #temp1)
	ORDER BY TranName 


	Select * from #temp1

	DROP TABLE #temp1

END


GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInventorySave_SCS_nov21-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





create PROCEDURE [ITADMIN].[TransactionInventorySave_SCS_nov21-2016]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlListTransSaveHeaderModel			as xml,
	@xmlListTransSaveDetailsModel			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListTransSaveHeaderModel
SELECT 
Action
,StationId
into #tmpTransactInventoryHeaderSave


from openxml(@handle, '/DocumentElement/ListTransSaveHeaderModel',2) with
(
Action int
,StationId int
)
exec sp_xml_removedocument @handle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListTransSaveDetailsModel

select Id,maxId,stationid
into #tmpTransactInvetoryDetailsSave

from openxml(@handle, '/DocumentElement/ListTransSaveDetailsModel',2) with
(
Id int,maxId int,stationid int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @StationId as int
declare @SlNo as int



SELECT @Action = Action,@StationId = StationId
from   #tmpTransactInventoryHeaderSave	

--SELECT @Id = Id
--from   #tmpTransactInvetoryDetailsSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


	   	CREATE TABLE #temp1(
			[selected] int NULL,
			[Id] int NULL,
			[Name] [varchar](250) NULL,
			[MaxId] int NULL,
			[stationid] int NULL,
		)
					---	1	31	Departmental Order	4295	81		
					INSERT INTO #temp1		
					SELECT DISTINCT 1 selected,b.slno as Id,a.TranName AS Name,b.maxId,b.stationid --c.Name AS Station
					FROM         TransactionSlNo AS a 
								INNER JOIN InvMax AS b ON a.slNo = b.slno 
								INNER JOIN Station AS c ON b.stationid = c.ID
					WHERE     (b.stationid = @StationId) and maxId <> 0

					--update a set a.maxId = b.MaxId 
					--from #tmpTransactInvetoryDetailsSave a 
					--LEFT JOIN #temp1 b on b.Id = a.Id
					--where a.Id = b.id and a.stationid = b.stationid
			
					  Delete from invMax where stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave)

					  INSERT INTO invMax (slno,maxId,stationid)
													SELECT Id,0,@StationId 
													FROM   #tmpTransactInvetoryDetailsSave

						Update a set a. maxid = b.MaxId 
						from invMax a
						Inner JOIN  #temp1  b on b.Id = a.slno where a.stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave)
				--select * from InvMax

					--note Id = SlNo
				--if exists(select * from invMax where stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave))
				--			BEGIN
						
				--					COMMIT TRAN
				--					SET @ErrorMessage = 'Station Already Transaction Exists!'
				--					SET @ERROR_SEVERITY = ERROR_SEVERITY()
				--					SET @ERROR_STATE = ERROR_STATE()
				--					RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				--					return;
				--			END

				--			ELSE 
				--					BEGIN
				--							INSERT INTO invMax (slno,maxId,stationid)
				--							SELECT Id,0,@StationId 
				--							FROM   #tmpTransactInvetoryDetailsSave
				--					END
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Transaction Added.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTransactInventoryHeaderSave
drop table #tmpTransactInvetoryDetailsSave	
DROP TABLE #temp1

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDept]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE  [ITADMIN].[Security_GetDept] 
@DeptID as varchar(250) = 15
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

Declare @EMPNAME as varchar(max)

SELECT 
@EMPNAME = a.Name
,@DeptID = a.ID
from Department a 
where a.Id = @DeptID

SELECT 
a.Name + ',' + UPPER( a.City ) as Header
,@EMPNAME as Name
,@DeptID as EmployeeID
from OrganisationDetails a


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Security_GetDeptList]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [ITADMIN].[Security_GetDeptList] 
@DeptID as varchar(250) = 134
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--Declare @EMPNAME as varchar(max)

--SELECT 
--@EMPNAME = a.Name
--,@DeptID = a.ID
--from Department a 
--where a.Id = 15

--SELECT 
--a.Name + ',' + a.City  as Header
--,@EMPNAME as Name
--,@DeptID as EmployeeID
--from OrganisationDetails a


-- select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName 
-- --,'' as FeatureName 
--,c.Name  as FeatureName
--  from his.dbo.department dept
-- left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
-- left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
-- left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
-- left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
-- left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
--   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 AND dept.ID = @DeptID

--	group by   emp.EmployeeID,emp.Name,a.ModuleName
--	,c.Name
--   order by emp.Name ,a.ModuleName
--   ,c.Name
 

 /*
 select * from (
  select  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,c.Name as FeatureName,'' as RoleName--  cr.Name as RoleName
 from his.dbo.department dept
 left join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.HISGLOBAL.ACCESS_USERFEATURES d on  emp.ID = d.USERID  
 left join his.HISGLOBAL.HIS_MODULES a on a.ModuleID = d.Module_Id 
 left join his.HISGLOBAL.ACCESS_MODULEFEATURES b on a.ModuleID = b.ModuleId and b.FeatureId = d.Feature_Id
 left join his.HISGLOBAL.MENU_ACCESS c on b.FeatureId = c.FeatureID
 left join  HIS.HISGLOBAL.ACCESS_USERROLES	ur on ur.User_Id = emp.ID 
 left join  HISGLOBAL.ACCESS_ROLES cr on ur.Role_Id = cr.RoleID 
   where  a.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 and emp.Deleted = 0 and cr.Deleted = 0 and ur.Deleted = 0 
    AND dept.ID = @DeptID
  
	group by   emp.EmployeeID,emp.Name,a.ModuleName,c.Name -- ,cr.Name
 --  order by emp.Name ,a.ModuleName,c.Name

    union all

 select distinct  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,mf.Name as FeatureName  ,'' as RoleName--mr.Name as RoleName
 from his.dbo.department dept
 inner join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.dbo.l_userroles ur on ur.User_Id = emp.ID
 inner join his.dbo.m_roles mr on ur.Role_Id = mr.Id
 left join his.dbo.l_rolefeatures lr on lr.Role_Id = ur.Role_Id 
  inner join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
  inner join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 where dept.ID = @DeptID group by  emp.EmployeeID,emp.Name,a.ModuleName,mf.Name--,mr.Name

 ) x  group by  x.EmployeeID,x.EmpName,x.FeatureName,x.ModuleName,x.RoleName
   order by  x.EmployeeID,x.EmpName,x.ModuleName,x.FeatureName
 --,x.RoleName

 */

 
 select distinct  emp.EmployeeID,emp.Name as EmpName,a.ModuleName,'' as FeatureName  --mf.Name as FeatureName  
 ,mr.Name as RoleName,mr.Id
 from his.dbo.department dept
 inner join his.dbo.Employee emp on dept.ID = emp.DepartmentID
 left join his.dbo.l_userroles ur on ur.User_Id = emp.ID
 inner join his.dbo.m_roles mr on ur.Role_Id = mr.Id
 left join his.dbo.l_rolefeatures lr on lr.Role_Id = ur.Role_Id 
  inner join his.HISGLOBAL.HIS_MODULES a on a.ModuleID =  lr.Module_Id
  inner join  his.dbo.m_features mf on lr.Feature_Id = mf.Id 
 where dept.ID = @DeptID   and a.Deleted = 0    and emp.Deleted = 0 
 group by  emp.EmployeeID,emp.Name,a.ModuleName--,mf.Name
 ,mr.Name,mr.Id

 

END

 
GO

/****** Object:  StoredProcedure [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]
@TariffID int =1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
declare  @SQL nvarchar(max),@RowNum int, @CustId nchar(5), @Name1 nchar(25),@PriceTables as varchar(max), @ServiceIDs as int, @filename as varchar(max) 
select @CustId=MAX(id) from  his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --start with the highest ID
Select @RowNum = Count(*) from his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)     --get total number of records
 
 
  set @SQL  = N'  ' 

		WHILE @RowNum > 0                          --loop until no more records
		BEGIN   
			 select @Name1 = name from his.dbo.BedType where id= @CustId and  deleted=0    --get other info from that row
		
						--Select Name,Id from  Tariff  cast(@CustId as varchar) 
						Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  
						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' +LTRIM(RTRIM(@CustId)) -- + '_Anaesthesia'  
						
		  --  [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]
		--   Select Name,Id from  his.dbo.Tariff   select * from dbo.IPBService  SELECT ID,NAME FROM HIS..TARIFF ORDER BY NAME
		set @SQL  = N'  '+@SQL+ N'
					 Select ' + '''' + cast(@Name1 as varchar) + '''' + '   xGroup,x.Department,x.Code,x.Name,x.Price,x.arabicname,isnull(x.StartDateTime,0) StartDateTime from 
					(
					
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_Anaesthesia' +' a left join Anaesthesia b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_BBOtherProcedure' +'   a left join BBOtherProcedures b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_BedSideProcedure' +' a left join BedSideProcedure b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_BloodComponent' +'  a left join bloodcomponent b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_Issue' +'   a left join BloodIssueMaster b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_pt' +'  a left join ptprocedure b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_cathprocedure' +'  a left join cathprocedure b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_test' +'  a left join test b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_LaundryItem' +'  a left join LaundryItem b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0 
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_Surgery' +'   a left join surgery b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0
					Union All 
					select c.name Department,b.code,b.name,a.price,d.arabic_name arabicname,b.StartDateTime from ' + cast(@filename as varchar) + '_FBItem' +'   a left join FoodItem b on a.id = b.id left join department c on b.departmentid = c.id left join ARABIC_ITM_CODE d on b.code = d.code where b.code is not null and b.deleted=0
					 ) x 
					Group By x.Department,x.Code,x.Name,x.Price,x.arabicname,x.StartDateTime   UNION ALL'
-- [ITADMIN].[SghUtilities_DownloadCompPriceListIPTariff]	

   select top 1 @CustId=id  from his.dbo.BedType where deleted=0 and id in (1,2,3,10,11)  and id < @CustID order by id desc  --get the next one
     set @RowNum = @RowNum - 1                               --decrease count
END

declare @sqlNew nvarchar(max)
set @sqlNew = LEFT(@SQL, LEN(@SQL) -9 ) 
 
 print(@sqlNew);
if(@RowNum = 0)
BEGIN
 execute sp_executesql @sqlNew 
--EXECUTE(@SQL);
END

END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Nov152016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [ITADMIN].[IPTariffSave_SCS_Nov152016]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlIPTariffHeaderSave			as xml,
	@xmlIPTariffDetailsSave			as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffHeaderSave
SELECT 
Action
,TariffId
,ServiceId
,ItemId
,OperatorId

into #tmpIPTariffHeaderSave
from openxml(@handle, '/DocumentElement/IPTariffHeaderSave',2) with
(
Action int
,TariffId int
,ServiceId int
,ItemId int
,OperatorId int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffDetailsSave
select BedTypeId,Price,StartDate,ROW_NUMBER() over(order by BedTypeId) i
into #tmpIPTariffDetailsSave
from openxml(@handle, '/DocumentElement/IPTariffDetailsSave',2) with
(
BedTypeId int,Price DECIMAL,StartDate Datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @NewPrice as int
Declare @OperatorId as int
Declare @ItemId as int



--SELECT 
--from #tmpIPTariffDetailsSave

--SELECT @ItemId = ItemId
--from #tmpIPTariffDetailsSave
--select @GetDate = GetDate()
SELECT @Action = Action,@ItemId = ItemId,@OperatorId = OperatorId,@ServiceID  = ServiceId,@TariffID =  TariffId 
from #tmpIPTariffHeaderSave

	
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
		DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
		, @PriceTable VARCHAR(max), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

		---SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID

		Create Table #CombHeaderDetailsItemId( 
					    id int identity (1,1),
						BedTypeId int,
						StartDate datetime,
						Price decimal,
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,
					 )
		--select * from TestHeaderDetailsItemId
		--select * from TestHeaderDetailsItemId
		---drop table #CombHeaderDetailsItemId
		---drop table TestHeaderDetailsItemId
		insert into #CombHeaderDetailsItemId
		(BedTypeId,StartDate,Price)
		SELECT BedTypeId,StartDate,Price from #tmpIPTariffDetailsSave
		
		Update a set a.ItemId = @ItemId,a.TariffId = @TariffID,a.ServiceId =@ServiceID  from #CombHeaderDetailsItemId a

		Select BedTypeId,Price,StartDate,ItemId,TariffId,ServiceId into #TempBedType
		from #CombHeaderDetailsItemId

	---	Drop table #TempBedType
			Declare @TempBedId as int,@MaxID as int,@StartDate datetime,@TempPrice Decimal

				Create Table #TempFilesName( 
					    id int identity (1,1),
				     	Name varchar(250) NULL, 
						BedTypeId int,
						StartDate datetime,
						Price decimal,
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,

					 )	

					
				Create Table #TempEmptyFilesName( 
					    ID int,
				     	Price numeric, 
						Deleted bit,
						StartDateTime datetime,
						EndDateTime datetime,
						OperatorID int


					 )	


					-- CREATE TABLE #TempEmptyFilesName(
					--	[ID] [int] NOT NULL,
					--	[Price] [numeric](10, 2) NOT NULL,
					--	[Deleted] [bit] NOT NULL,
					--	[StartDateTime] [datetime] NOT NULL,
					--	[EndDateTime] [datetime] NULL,
					--	[OperatorID] [int] NOT NULL
					--) ON [MasterFile]

	--sp_help P_1_
	--select * from  P_1_1_Anaesthesia
		
	 --   Select id,name into #TempBedType
		--from dbo.BedType where deleted = 0
		declare @TariffIDs as int, @ServiceIDs as int,@PriceTables as varchar(max)
	   WHILE exists(select top 1 * from #TempBedType)
			BEGIN

					SELECT top 1 @TempBedId = BedTypeId,@StartDate = StartDate,@TempPrice = Price,@ItemId = ItemId,@TariffIDs = TariffId,@ServiceIDs = ServiceId  from #TempBedType

					Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  

					SET @filename = 'P_' + cast(@TariffIDs as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTables as varchar)
						
				    Insert into #TempFilesName (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId) values(@filename,@TempBedId,@StartDate,@TempPrice,@ItemId,@TariffIDs,@ServiceIDs);
						
				
					delete #TempBedType where BedTypeId = @TempBedId
			END

				   --select * into   testtcheckTempFileName
					-- from #TempFilesName

					 Insert into LogsTempTariffTable (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,DateProcess) 
					 Select 	Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,Getdate()
					 from #TempFilesName

					 --select * from  testtcheckTempFileName

					 ---Select * from LogsTempTariffTable

					 	--Create Table  LogsTempTariffTable(     
							--  Name	varchar(250) NULL,
							--  BedTypeId varchar(250) NULL,
							--  StartDate varchar(250) NULL,
							--  Price varchar(250) NULL,
							--  ItemId varchar(250) NULL,
							--  TariffId varchar(250) NULL,
							--  ServiceId varchar(250) NULL,
							--  DateProcess datetime NULL

							-- )


			---sp_who2
   Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int,@Deleted as int ,@GetDate as datetime,@temPrice decimal,@tempItemId int,@test as int
   Select @Deleted = 0 
   --Select @GetDate = StartDate from  #TempFilesName
   select @test = 20
   
				WHILE exists(select top 1 * from #TempFilesName)

						BEGIN

									SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId,@GetDate = StartDate from #TempFilesName

									---select * from P_1_1_Anaesthesia where ID = 88
									set @SQL =  N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
												' BEGIN ' +

												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')' +

														' BEGIN ' +
														' Create Table dbo.OLD' + cast(@TempFiles as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' + 
													--' IF EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													--		' BEGIN ' +
													--		' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
													--		' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													--		' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
													--		' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													--		' where ID = ' + cast(@tempItemId as varchar) +
													--	' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													' BEGIN ' +
													' INSERT INTO  dbo.' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
												' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ')' +
														' BEGIN ' +
															' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
															' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
															' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
													' END ' +
													' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
													--' from ' + cast(@TempFiles as varchar) +
													--' UPDATE dbo.OLD' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,EndDateTime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													--' where ID = ' + cast(@tempItemId as varchar) +
													' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													' where ID = ' + cast(@tempItemId as varchar) +
												' END ' +
												' ELSE ' +
											    ' BEGIN ' +
												' Create Table dbo.' + cast(@TempFiles as varchar) + '( 
													[ID] [int] NOT NULL,
													[Price] [numeric](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
												 )	' + 
												' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												' END '
															
												EXEC sp_executesql @SQL 	
												Delete  #TempFilesName where id = @FileId
			END
												--' @ErrorMessage =  INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												--' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												--' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												--' from ' + cast(@TempFiles as varchar) +
												--'SET @ERROR_SEVERITY ='+ ERROR_SEVERITY()+
												--'SET @ERROR_STATE = '+ERROR_STATE()+
												--'RAISERROR ('+@ErrorMessage+','+ @ERROR_SEVERITY+','+ @ERROR_STATE+')'+ 	
	
				---	sp_who2 'active'
		
				---Print @SQL 		
			 ---drop table #TempEmptyIPPriceView		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #TempBedType
drop table #TempFilesName
drop table #tmpIPTariffHeaderSave
drop table #tmpIPTariffDetailsSave
drop table #CombHeaderDetailsItemId
drop table #TempEmptyFilesName
--drop table @@TABLENAME@@
--drop table backtest

set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlIPTariffHeaderSave	 xml
declare @xmlIPTariffDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlIPTariffHeaderSave = '<DocumentElement>\r\n  <IPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <TariffId>1</TariffId>\r\n    <ServiceId>20</ServiceId>\r\n    <ItemId>85</ItemId>\r\n    <OperatorId>139</OperatorId>\r\n  </IPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlIPTariffDetailsSave = '<DocumentElement>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>15</BedTypeId>\r\n    <Price>100.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>17</BedTypeId>\r\n    <Price>200.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>18</BedTypeId>\r\n    <Price>300.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.IPTariffSave_SCS @ErrorMessage,@xmlIPTariffHeaderSave,@xmlIPTariffDetailsSave
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/

---///drop table testtcheckTempFileName 
---//drop table checkTempFileName
--select * from testtcheckTempFileName
--select * from P_66_28_Anaesthesia
---select * from P_66_2_Anaesthesia
--select * from P_84_2_Anaesthesia

---select * drop table P_84_28_Anaesthesia
-- Select * from LogsTempTariffTable  where StartDate = 'Oct  1 2016 12:39PM'
--select * from P_1_2_Test    where Id =3973
--Selct * from 

--Insert into P_1_28_Test
--(ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
--Select Itemid,Price,0,StartDate,NULL,10268
--From LogsTempTariffTable where BedTypeId = 28
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS_backup_nov14-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




create PROCEDURE [ITADMIN].[OPTariffSave_SCS_backup_nov14-2016]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlOPTariffHeaderSave			as xml,
	@xmlOPTariffDetails				as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffHeaderSave
SELECT 
Action
,Deleted
,TariffID
,ServiceID

into #tmpOPTariffHeaderSave
from openxml(@handle, '/DocumentElement/OPTariffHeaderSave',2) with
(
Action int
,Deleted int
,TariffID int
,ServiceID int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffDetails
select Id,Price,RefPrice,ROW_NUMBER() over(order by Id) i
into #tmpOPTariffDetails
from openxml(@handle, '/DocumentElement/OPTariffDetails',2) with
(
Id int,Price DECIMAL(10,2),RefPrice DECIMAL(10,2)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
Declare @Deleted as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @ItemID as int
DECLARE @NewPrice as int
Declare @GetDate as Datetime

SELECT @Action = Action,@Deleted = Deleted, @TariffID = TariffID, @ServiceID = ServiceID
from #tmpOPTariffHeaderSave


select @GetDate = GetDate()


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
	   Declare @SQL nvarchar(max)
	   Declare @filename as varchar(max)

	
		--SELECT PriceTable
		--			FROM  OPBService a
		--	WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = 7


	   
			SELECT  @ServiceName = PriceTable
					FROM  OPBService a
			WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID

	
	      ---Select * from OPBService a WHERE  (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID
		   --Create Table LogTemptblOPCreate( 
					--  Id int NULL,
					--  Price decimal NULL,
					--  LogDate datetime,
					--  PriceTableName varchar(250) NULL
					-- )


			SELECT @ItemID = Id,@NewPrice = Price
			from #tmpOPTariffDetails

					SELECT * INTO CreateOPDetails 
			from #tmpOPTariffDetails  
			---Select * from LogTemptblOPCreate

			---//Format select * From Op_P_2_OtherProcedure where price = 10
			
			   set @filename = 'OP_P_' + cast(@TariffID as varchar) + '_' + cast(@ServiceName as varchar)

					Insert into LogTemptblOPCreate
					(Id,Price,RefPrice,LogDate,PriceTableName)
					Select Id,Price,RefPrice,Getdate(),@filename
					from #tmpOPTariffDetails

				 Update a set a.typeid = 2 from LogTemptblOPCreate a where PriceTableName like '%Doctor%'

				 Declare @TypeId as int

				 Select @TypeId = typeid  from LogTemptblOPCreate where Id in (Select Id from #tmpOPTariffDetails)
	
				---Select * from LogTemptblOPCreate
				---select * from OP_P_1_Test where id = 3384
				begin

				IF  (@TypeId = 2)

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
					' where Id in (Select Id from CreateOPDetails)' +
					' Insert Into ' + cast(@filename as nvarchar) +
					' (id,price,startdatetime,deleted,enddatetime,visittype,RefPrice) ' +
					' Select Id,Price,GetDate(),0,NULL,1,RefPrice ' +
					' from CreateOPDetails '
			
				ELSE

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
							' where Id in (Select Id from CreateOPDetails)' +
							' Insert Into ' + cast(@filename as nvarchar) +
							' (id,price,startdatetime,deleted,enddatetime) ' +
							' Select Id,Price,GetDate(),0,NULL ' +
							' from CreateOPDetails '
		
								

				--print @SQL

				EXEC (@SQL)


		       END


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN
	
    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPTariffHeaderSave
drop table #tmpOPTariffDetails
drop table CreateOPDetails
--drop table @@TABLENAME@@
--drop table backtest
set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlOPTariffHeaderSave xml
declare @xmlOPTariffDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlOPTariffHeaderSave = '<DocumentElement>\r\n  <OPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <Deleted>0</Deleted>\r\n    <TariffID>2</TariffID>\r\n    <ServiceID>7</ServiceID>\r\n  </OPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlOPTariffDetails = '<DocumentElement>\r\n  <OPTariffDetails>\r\n    <Id>7126</Id>\r\n    <Price>20</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7127</Id>\r\n    <Price>35</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7128</Id>\r\n    <Price>25</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7129</Id>\r\n    <Price>25</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7130</Id>\r\n    <Price>45</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7131</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7132</Id>\r\n    <Price>45</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7133</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7368</Id>\r\n    <Price>10</Price>\r\n  </OPTariffDetails>\r\n</DocumentElement>'
exec ITADMIN.OPTariffSave_SCS @ErrorMessage,@xmlOPTariffHeaderSave,@xmlOPTariffDetails
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/


--Select * from OP_P_1_Doctor where Id = 4187
GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Backup_nov14-2016]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[IPTariffSave_SCS_Backup_nov14-2016]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlIPTariffHeaderSave			as xml,
	@xmlIPTariffDetailsSave			as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffHeaderSave
SELECT 
Action
,TariffId
,ServiceId
,ItemId
,OperatorId

into #tmpIPTariffHeaderSave
from openxml(@handle, '/DocumentElement/IPTariffHeaderSave',2) with
(
Action int
,TariffId int
,ServiceId int
,ItemId int
,OperatorId int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffDetailsSave
select BedTypeId,Price,StartDate,ROW_NUMBER() over(order by BedTypeId) i
into #tmpIPTariffDetailsSave
from openxml(@handle, '/DocumentElement/IPTariffDetailsSave',2) with
(
BedTypeId int,Price DECIMAL,StartDate Datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @NewPrice as int
Declare @OperatorId as int
Declare @ItemId as int



--SELECT 
--from #tmpIPTariffDetailsSave

--SELECT @ItemId = ItemId
--from #tmpIPTariffDetailsSave
--select @GetDate = GetDate()
SELECT @Action = Action,@ItemId = ItemId,@OperatorId = OperatorId,@ServiceID  = ServiceId,@TariffID =  TariffId 
from #tmpIPTariffHeaderSave

	
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
		DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
		, @PriceTable VARCHAR(max), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

		---SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID

		Create Table #CombHeaderDetailsItemId( 
					    id int identity (1,1),
						BedTypeId int,
						StartDate datetime,
						Price decimal,
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,
					 )
		--select * from TestHeaderDetailsItemId
		--select * from TestHeaderDetailsItemId
		---drop table #CombHeaderDetailsItemId
		---drop table TestHeaderDetailsItemId
		insert into #CombHeaderDetailsItemId
		(BedTypeId,StartDate,Price)
		SELECT BedTypeId,StartDate,Price from #tmpIPTariffDetailsSave
		
		Update a set a.ItemId = @ItemId,a.TariffId = @TariffID,a.ServiceId =@ServiceID  from #CombHeaderDetailsItemId a

		Select BedTypeId,Price,StartDate,ItemId,TariffId,ServiceId into #TempBedType
		from #CombHeaderDetailsItemId

	---	Drop table #TempBedType
			Declare @TempBedId as int,@MaxID as int,@StartDate datetime,@TempPrice Decimal

				Create Table #TempFilesName( 
					    id int identity (1,1),
				     	Name varchar(250) NULL, 
						BedTypeId int,
						StartDate datetime,
						Price decimal,
						ItemId int,
						TariffId int,
						ServiceId int,
					  --id int identity (1,1),
					  --BedTypeId int,
					  --Price int,
					  --StartDate datetime,
					  --OperatorId int,

					 )	

					
				Create Table #TempEmptyFilesName( 
					    ID int,
				     	Price numeric, 
						Deleted bit,
						StartDateTime datetime,
						EndDateTime datetime,
						OperatorID int


					 )	


					-- CREATE TABLE #TempEmptyFilesName(
					--	[ID] [int] NOT NULL,
					--	[Price] [numeric](10, 2) NOT NULL,
					--	[Deleted] [bit] NOT NULL,
					--	[StartDateTime] [datetime] NOT NULL,
					--	[EndDateTime] [datetime] NULL,
					--	[OperatorID] [int] NOT NULL
					--) ON [MasterFile]

	--sp_help P_1_
	--select * from  P_1_1_Anaesthesia
		
	 --   Select id,name into #TempBedType
		--from dbo.BedType where deleted = 0
		declare @TariffIDs as int, @ServiceIDs as int,@PriceTables as varchar(max)
	   WHILE exists(select top 1 * from #TempBedType)
			BEGIN

					SELECT top 1 @TempBedId = BedTypeId,@StartDate = StartDate,@TempPrice = Price,@ItemId = ItemId,@TariffIDs = TariffId,@ServiceIDs = ServiceId  from #TempBedType

					Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  

					SET @filename = 'P_' + cast(@TariffIDs as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTables as varchar)
						
				    Insert into #TempFilesName (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId) values(@filename,@TempBedId,@StartDate,@TempPrice,@ItemId,@TariffIDs,@ServiceIDs);
						
				
					delete #TempBedType where BedTypeId = @TempBedId
			END

				   --select * into   testtcheckTempFileName
					-- from #TempFilesName

					 Insert into LogsTempTariffTable (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,DateProcess) 
					 Select 	Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,Getdate()
					 from #TempFilesName

					 --select * from  testtcheckTempFileName

					 ---Select * from LogsTempTariffTable

					 	--Create Table  LogsTempTariffTable(     
							--  Name	varchar(250) NULL,
							--  BedTypeId varchar(250) NULL,
							--  StartDate varchar(250) NULL,
							--  Price varchar(250) NULL,
							--  ItemId varchar(250) NULL,
							--  TariffId varchar(250) NULL,
							--  ServiceId varchar(250) NULL,
							--  DateProcess datetime NULL

							-- )


			---sp_who2
   Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int,@Deleted as int ,@GetDate as datetime,@temPrice decimal,@tempItemId int,@test as int
   Select @Deleted = 0 
   --Select @GetDate = StartDate from  #TempFilesName
   select @test = 20
   
				WHILE exists(select top 1 * from #TempFilesName)

						BEGIN

									SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId,@GetDate = StartDate from #TempFilesName

									---select * from P_1_1_Anaesthesia where ID = 88
									set @SQL =  N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
												' BEGIN ' +

												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')' +

														' BEGIN ' +
														' Create Table dbo.OLD' + cast(@TempFiles as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' + 
													' IF EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
															' BEGIN ' +
															' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
															' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
															' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
															' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
															' where ID = ' + cast(@tempItemId as varchar) +
														' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													' BEGIN ' +
													' INSERT INTO  dbo.' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
												' END' +
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ')' +
														' BEGIN ' +
															' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
															' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
															' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
													' END ' +
													' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
													' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',' + '''' +  cast(@GetDate as varchar) + '''' + 
													--' from ' + cast(@TempFiles as varchar) +
													--' UPDATE dbo.OLD' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,EndDateTime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													--' where ID = ' + cast(@tempItemId as varchar) +
													' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
													' where ID = ' + cast(@tempItemId as varchar) +
												' END ' +
												' ELSE ' +
											    ' BEGIN ' +
												' Create Table dbo.' + cast(@TempFiles as varchar) + '( 
													[ID] [int] NOT NULL,
													[Price] [numeric](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
												 )	' + 
												' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												' END '
															
												EXEC sp_executesql @SQL 	
												Delete  #TempFilesName where id = @FileId
			END
												--' @ErrorMessage =  INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												--' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												--' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												--' from ' + cast(@TempFiles as varchar) +
												--'SET @ERROR_SEVERITY ='+ ERROR_SEVERITY()+
												--'SET @ERROR_STATE = '+ERROR_STATE()+
												--'RAISERROR ('+@ErrorMessage+','+ @ERROR_SEVERITY+','+ @ERROR_STATE+')'+ 	
	
				---	sp_who2 'active'
		
				---Print @SQL 		
			 ---drop table #TempEmptyIPPriceView		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #TempBedType
drop table #TempFilesName
drop table #tmpIPTariffHeaderSave
drop table #tmpIPTariffDetailsSave
drop table #CombHeaderDetailsItemId
drop table #TempEmptyFilesName
--drop table @@TABLENAME@@
--drop table backtest

set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlIPTariffHeaderSave	 xml
declare @xmlIPTariffDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlIPTariffHeaderSave = '<DocumentElement>\r\n  <IPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <TariffId>1</TariffId>\r\n    <ServiceId>20</ServiceId>\r\n    <ItemId>85</ItemId>\r\n    <OperatorId>139</OperatorId>\r\n  </IPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlIPTariffDetailsSave = '<DocumentElement>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>15</BedTypeId>\r\n    <Price>100.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>17</BedTypeId>\r\n    <Price>200.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>18</BedTypeId>\r\n    <Price>300.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.IPTariffSave_SCS @ErrorMessage,@xmlIPTariffHeaderSave,@xmlIPTariffDetailsSave
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/

---///drop table testtcheckTempFileName 
---//drop table checkTempFileName
--select * from testtcheckTempFileName
--select * from P_66_28_Anaesthesia
---select * from P_66_2_Anaesthesia
--select * from P_84_2_Anaesthesia

---select * drop table P_84_28_Anaesthesia
-- Select * from LogsTempTariffTable  where StartDate = 'Oct  1 2016 12:39PM'
--select * from P_1_2_Test    where Id =3973
--Selct * from 

--Insert into P_1_28_Test
--(ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
--Select Itemid,Price,0,StartDate,NULL,10268
--From LogsTempTariffTable where BedTypeId = 28
GO

/****** Object:  StoredProcedure [ITADMIN].[MenuSync_DynamicCreationTable]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<JeromeJose>
-- Create date: <Nov 9 2016>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [ITADMIN].[MenuSync_DynamicCreationTable]
 @table_name SYSNAME   = 'HISGLOBAL.HIS_MODULES'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


--DECLARE @table_name SYSNAME
--SELECT @table_name = 'HISGLOBAL.HIS_MODULES'

DECLARE 
      @object_name SYSNAME
    , @object_id INT

SELECT 
      @object_name = '[' + s.name + '].[' + o.name + ']'
    , @object_id = o.[object_id]
FROM sys.objects o WITH (NOWAIT)
JOIN sys.schemas s WITH (NOWAIT) ON o.[schema_id] = s.[schema_id]
WHERE s.name + '.' + o.name = @table_name
    AND o.[type] = 'U'
    AND o.is_ms_shipped = 0

DECLARE @SQL NVARCHAR(MAX) = ''

;WITH index_column AS 
(
    SELECT 
          ic.[object_id]
        , ic.index_id
        , ic.is_descending_key
        , ic.is_included_column
        , c.name
    FROM sys.index_columns ic WITH (NOWAIT)
    JOIN sys.columns c WITH (NOWAIT) ON ic.[object_id] = c.[object_id] AND ic.column_id = c.column_id
    WHERE ic.[object_id] = @object_id
),
fk_columns AS 
(
     SELECT 
          k.constraint_object_id
        , cname = c.name
        , rcname = rc.name
    FROM sys.foreign_key_columns k WITH (NOWAIT)
    JOIN sys.columns rc WITH (NOWAIT) ON rc.[object_id] = k.referenced_object_id AND rc.column_id = k.referenced_column_id 
    JOIN sys.columns c WITH (NOWAIT) ON c.[object_id] = k.parent_object_id AND c.column_id = k.parent_column_id
    WHERE k.parent_object_id = @object_id
)
SELECT @SQL = 'CREATE TABLE ' + @object_name + CHAR(13) + '(' + CHAR(13) + STUFF((
    SELECT CHAR(9) + ', [' + c.name + '] ' + 
        CASE WHEN c.is_computed = 1
            THEN 'AS ' + cc.[definition] 
            ELSE UPPER(tp.name) + 
                CASE WHEN tp.name IN ('varchar', 'char', 'varbinary', 'binary', 'text')
                       THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE CAST(c.max_length AS VARCHAR(5)) END + ')'
                     WHEN tp.name IN ('nvarchar', 'nchar', 'ntext')
                       THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE CAST(c.max_length / 2 AS VARCHAR(5)) END + ')'
                     WHEN tp.name IN ('datetime2', 'time2', 'datetimeoffset') 
                       THEN '(' + CAST(c.scale AS VARCHAR(5)) + ')'
                     WHEN tp.name = 'decimal' 
                       THEN '(' + CAST(c.[precision] AS VARCHAR(5)) + ',' + CAST(c.scale AS VARCHAR(5)) + ')'
                    ELSE ''
                END +
                CASE WHEN c.collation_name IS NOT NULL THEN ' COLLATE ' + c.collation_name ELSE '' END +
                CASE WHEN c.is_nullable = 1 THEN ' NULL' ELSE ' NOT NULL' END +
                CASE WHEN dc.[definition] IS NOT NULL THEN ' DEFAULT' + dc.[definition] ELSE '' END + 
                CASE WHEN ic.is_identity = 1 THEN ' IDENTITY(' + CAST(ISNULL(ic.seed_value, '0') AS CHAR(1)) + ',' + CAST(ISNULL(ic.increment_value, '1') AS CHAR(1)) + ')' ELSE '' END 
        END + CHAR(13)
    FROM sys.columns c WITH (NOWAIT)
    JOIN sys.types tp WITH (NOWAIT) ON c.user_type_id = tp.user_type_id
    LEFT JOIN sys.computed_columns cc WITH (NOWAIT) ON c.[object_id] = cc.[object_id] AND c.column_id = cc.column_id
    LEFT JOIN sys.default_constraints dc WITH (NOWAIT) ON c.default_object_id != 0 AND c.[object_id] = dc.parent_object_id AND c.column_id = dc.parent_column_id
    LEFT JOIN sys.identity_columns ic WITH (NOWAIT) ON c.is_identity = 1 AND c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id
    WHERE c.[object_id] = @object_id
    ORDER BY c.column_id
    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, CHAR(9) + ' ')
    + ISNULL((SELECT CHAR(9) + ', CONSTRAINT [' + k.name + '] PRIMARY KEY (' + 
                    (SELECT STUFF((
                         SELECT ', [' + c.name + '] ' + CASE WHEN ic.is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END
                         FROM sys.index_columns ic WITH (NOWAIT)
                         JOIN sys.columns c WITH (NOWAIT) ON c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id
                         WHERE ic.is_included_column = 0
                             AND ic.[object_id] = k.parent_object_id 
                             AND ic.index_id = k.unique_index_id     
                         FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ''))
            + ')' + CHAR(13)
            FROM sys.key_constraints k WITH (NOWAIT)
            WHERE k.parent_object_id = @object_id 
                AND k.[type] = 'PK'), '') + ')'  + CHAR(13)
    + ISNULL((SELECT (
        SELECT CHAR(13) +
             'ALTER TABLE ' + @object_name + ' WITH' 
            + CASE WHEN fk.is_not_trusted = 1 
                THEN ' NOCHECK' 
                ELSE ' CHECK' 
              END + 
              ' ADD CONSTRAINT [' + fk.name  + '] FOREIGN KEY(' 
              + STUFF((
                SELECT ', [' + k.cname + ']'
                FROM fk_columns k
                WHERE k.constraint_object_id = fk.[object_id]
                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')
               + ')' +
              ' REFERENCES [' + SCHEMA_NAME(ro.[schema_id]) + '].[' + ro.name + '] ('
              + STUFF((
                SELECT ', [' + k.rcname + ']'
                FROM fk_columns k
                WHERE k.constraint_object_id = fk.[object_id]
                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')
               + ')'
            + CASE 
                WHEN fk.delete_referential_action = 1 THEN ' ON DELETE CASCADE' 
                WHEN fk.delete_referential_action = 2 THEN ' ON DELETE SET NULL'
                WHEN fk.delete_referential_action = 3 THEN ' ON DELETE SET DEFAULT' 
                ELSE '' 
              END
            + CASE 
                WHEN fk.update_referential_action = 1 THEN ' ON UPDATE CASCADE'
                WHEN fk.update_referential_action = 2 THEN ' ON UPDATE SET NULL'
                WHEN fk.update_referential_action = 3 THEN ' ON UPDATE SET DEFAULT'  
                ELSE '' 
              END 
            + CHAR(13) + 'ALTER TABLE ' + @object_name + ' CHECK CONSTRAINT [' + fk.name  + ']' + CHAR(13)
        FROM sys.foreign_keys fk WITH (NOWAIT)
        JOIN sys.objects ro WITH (NOWAIT) ON ro.[object_id] = fk.referenced_object_id
        WHERE fk.parent_object_id = @object_id
        FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)')), '')
    + ISNULL(((SELECT
         CHAR(13) + 'CREATE' + CASE WHEN i.is_unique = 1 THEN ' UNIQUE' ELSE '' END 
                + ' NONCLUSTERED INDEX [' + i.name + '] ON ' + @object_name + ' (' +
                STUFF((
                SELECT ', [' + c.name + ']' + CASE WHEN c.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END
                FROM index_column c
                WHERE c.is_included_column = 0
                    AND c.index_id = i.index_id
                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')'  
                + ISNULL(CHAR(13) + 'INCLUDE (' + 
                    STUFF((
                    SELECT ', [' + c.name + ']'
                    FROM index_column c
                    WHERE c.is_included_column = 1
                        AND c.index_id = i.index_id
                    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')', '')  + CHAR(13)
        FROM sys.indexes i WITH (NOWAIT)
        WHERE i.[object_id] = @object_id
            AND i.is_primary_key = 0
            AND i.[type] = 2
        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')
    ), '')

SELECT @SQL as sqlstatements


END
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTriffPrice_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
Create PROCEDURE [ITADMIN].[OPTriffPrice_REPORTS_SCS]-- 0--1--- 0-- 4-- 11
@Id as int
AS

BEGIN

Declare @Name as varchar(250)
Declare @ItemName as varchar(250)

Select @Name = Name + ' ' + City from OrganisationDetails

		Select Id,Name,Code,Price,TariffName,ServiceName,DepartmentName,@Name  as CompanyName
		from 	TempGetOPTariffReports 
	

END



GO

/****** Object:  StoredProcedure [ITADMIN].[IPTriffPrice_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
Create PROCEDURE [ITADMIN].[IPTriffPrice_REPORTS_SCS] --1-- 4-- 11
@ItemId as int
AS

BEGIN

Declare @Name as varchar(250)
Declare @ItemName as varchar(250)

Select @Name = Name + ' ' + City from OrganisationDetails

	
		
			--select * from TempGetItemNameReports
			--select * from TempGetIPPriceReports

			Select @ItemName = Code from TempGetItemNameReports where ID = @ItemId

			Update a set a.ItemCodeName = @ItemName from  TempGetIPPriceReports a


			Select TariffName,ServiceName,ItemCodeName,BedName,Price,BedTypeId,StartDateTime,@Name as CompanyName from TempGetIPPriceReports

	--SELECT  a.ID,a.code
	--,a.Name,a.arabiccode,a.arabicname
	--,a.departmentid
	--,b.Name as DepartmentName
	--,a.costprice
	--,a.startdatetime,a.enddatetime,a.StatusType,
	--(Case when a.deleted = 0 then 'Active' else 'Deleted' end) as Status
	--,@Name as Orgname
	--FROM BedsideProcedure a
	--LEFT JOIN Department b on b.ID = a.departmentid
	--where a.ID = @Id

END



GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminUtilities_REPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[NursingAdminUtilities_REPORTS_SCS]-- 11
@Id as int 
AS

BEGIN

Declare @Name as varchar(250)

Select @Name = Name + ' ' + City from OrganisationDetails

	SELECT  a.ID,a.code
	,a.Name,a.arabiccode,a.arabicname
	,a.departmentid
	,b.Name as DepartmentName
	,a.costprice
	,a.startdatetime,a.enddatetime,a.StatusType,
	(Case when a.deleted = 0 then 'Active' else 'Deleted' end) as Status
	,@Name as Orgname
	FROM BedsideProcedure a
	LEFT JOIN Department b on b.ID = a.departmentid
	where a.ID = @Id

END




--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85




--select * from Category
--select * from Company


GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminUtilities_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[NursingAdminUtilities_DashBoard_SCS]-- 0
AS

BEGIN
			--SP_HELP BedsideProcedure
		SELECT      row_number() over(order by deleted) as SNo, code + ' - ' + name AS Name,convert(varchar(250),(Case when Deleted = 0 then 'Active' else 'Deleted' END) ) as Status,ID as Id
		FROM         BedsideProcedure
	---	WHERE     (deleted = 0)
		ORDER BY deleted asc 




END




--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85




--select * from Category
--select * from Company


GO

/****** Object:  StoredProcedure [ITADMIN].[OrganizationDetailsV2]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[OrganizationDetailsV2] --10554
@EmployeeID as varchar(250)
AS
BEGIN

Declare @EMPNAME as varchar(max)

SELECT 
@EMPNAME = a.Name
,@EmployeeID = a.EmployeeID
from employee a 
where a.Id = @EmployeeID

SELECT 
a.Name + ',' + a.City  as Header
,@EMPNAME as Name
,@EmployeeID as EmployeeID
from OrganisationDetails a


END






GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Employee_SCSV2]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

CREATE PROCEDURE [ITADMIN].[Select2_Employee_SCSV2]


AS
BEGIN
--SELECT 
--ID = -1, '<ALL Employee>' as NAME
--union ALL
--SELECT
--ID
--,NAME 
--FROM Employee 
--WHERE DELETED=0 
--ORDER BY id
Select ID,EmployeeId + ' - ' + Name as Name from Employee where deleted = 0 order by Id



END



GO

/****** Object:  StoredProcedure [ITADMIN].[OrganizationDetails]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





cREATE PROCEDURE [ITADMIN].[OrganizationDetails]
@ID as int
AS
BEGIN

Declare @EMPNAME as varchar(max)
Declare @EmployeeID as varchar(max)

SELECT 
@EMPNAME = a.Name
,@EmployeeID = a.EmployeeID
from employee a 
where a.ID = @ID

SELECT 
a.Name + ',' + a.City  as Header
,@EMPNAME as Name
,@EmployeeID as EmployeeID
from OrganisationDetails a


END






GO

/****** Object:  StoredProcedure [ITADMIN].[FinalAttenaftermgrcd_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--- exec PAYROLL.MONTHLYPUNCHINREPORTS_SCS '1738369','15-Aug-2015','16-Sep-2015'
CREATE PROC [ITADMIN].[FinalAttenaftermgrcd_SCS]--- 10554,'15-Aug-2015','16-Sep-2015'
@EmployeeID as varchar(20),
@FromDate as datetime,
@ToDate as datetime
AS
BEGIN
Declare @EmpsId as varchar(20)


Select @EmpsId = a.EmployeeID From dbo.Employee a where a.ID = @EmployeeID

declare @CONST_ALLOWANCE_LATE int
set @CONST_ALLOWANCE_LATE=6


declare @sql varchar(max)
declare @AttenF varchar(20), @AttenT varchar(20)



	set @AttenF =  'Atten_' + right('0' + cast(month(@FromDate) as varchar),2) + cast(year(@FromDate) as varchar(4))
	set @AttenT =  'Atten_' + right('0' + cast(month(@ToDate) as varchar),2) + cast(year(@ToDate) as varchar(4))
	--set @sql = 'insert into Atten_dump  ' +
	--		   'select * from ' + @AttenF + ' where EMPID=''' + @EmployeeID + ''' union ' +
	--		   'select * from ' + @AttenT + ' where EMPID=' + @EmployeeID
	set @sql = 'insert into Atten_dump  ' +
			   'select * from ' + @AttenF + ' union ' +
			   'select * from ' + @AttenT 

	select		 e.Name, e.EmployeeID EMPID
				,cast(cast(year(b.CurrentMonth) as varchar) + '-' + cast(month(b.CurrentMonth) as varchar) + '-' + cast(c.ShiftDay as varchar) as datetime) as ToDate
				,b.CurrentMonth			
				,c.ShiftID, c.InTime, c.OutTime, c.InTime1, c.OutTime1
				,d.Name ShiftName
	into		#tmpInOut
	FROM		dbo.AllotShift AS b 
	INNER JOIN	dbo.AllotShiftDetail AS c ON b.ID = c.AllotID 
	INNER JOIN	dbo.Shift AS d ON c.ShiftID = d.ID
	inner JOIN	dbo.Employee e on e.Id=b.EmpID
	WHERE		(b.CurrentMonth >= '01-' + left(DATENAME(month,@FromDate),3) + '-' + cast(year(@FromDate) as varchar)
		and		 b.CurrentMonth <= cast(day(@ToDate) as varchar) + '-' + left(DATENAME(month,@ToDate),3) + '-' + cast(year(@ToDate) as varchar))
		AND		d.Deleted = 0
		AND		c.Deleted = 0
		AND		b.Deleted = 0		

	delete from Atten_dump
	exec(@sql)

	select DATEADD(day, a.ctr, @FromDate-1) ToDate 
	into #tmpAdd
	from (
			select 1 + (i1.i + i2.i + i3.i + i4.i + i5.i + i6.i) ctr
			from (select 0 as i union select 1) as i1, 
				 (select 0 as i union select 2) as i2, 
				 (select 0 as i union select 4) as i3, 
				 (select 0 as i union select 8) as i4, 
				 (select 0 as i union select 16) as i5,
				 (select 0 as i union select 32) as i6
		) a
	order by a.ctr

	select		a.*
	into		#tmp_atten_dump
	from		Atten_dump a
	--where		a.EMPID in ('1741511'
	--						,'967608'
	--						,'1105133'
	--						,'571557'
	--						,'939958'
	--						,'1807945'
	--						,'1417225'
	--						,'1808501'
	--						,'641627'
	--						,'1396933'
	--						,'1520262'
	--						,'1427025'
	--						,'1063416'
	--						,'45561'
	--						,'1808016'
	--						--,'428668'
	--						,'117926'
	--						,'123212'
	--						,'140717'
	--						,'1080142'
	--						,'1238550'
	--							--,'1200925' -- relative
	--						,'1732116'
	--						--,'1370549'
	--						--,'1796531'
	--						)


	select		distinct 
				a.ToDate ToDateFinal, c.*
	into		#tmpShift
	from		#tmpAdd a
	left join	#tmp_atten_dump b on 1=1
	left join	#tmpInOut c on c.EMPID=b.EMPID and c.ToDate=a.ToDate
	left join	#tmp_atten_dump d on d.EMPID=b.EMPID and d.ToDate=b.ToDate
	where		a.ToDate >= @FromDate and a.ToDate <= @ToDate	
	order by	c.EMPID, a.ToDate


	select		 a.Name + ' - ' + a.EMPID Name
				,case 
				 when a.ShiftID is null then 100
				 when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN -2
				 when b.InTime is null and b.OutTime is null and b.InTime1 is null and b.OutTime1 is null then 0
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is null and b.OutTime is not null then 1
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is not null and b.OutTime is null then 2
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is null and b.OutTime1 is not null then 3
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is not null and b.OutTime1 is null then 4
				 when b.InTime > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 5
				 when b.InTime1 > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 6
				 when b.OutTime < a.OutTime then 7
				 when b.OutTime1 < a.OutTime1 then 8
				 else -1
				 end ErrCode
				,a.ToDateFinal, a.EMPID EmployeeID
				,b.InTime InTimeA, b.OutTime OutTimeA, b.InTime1 InTime1A, b.OutTime1 OutTime1A
				,a.InTime InTimeS, a.OutTime OutTimeS, a.InTime1 InTime1S, a.OutTime1 OutTime1S
				,a.ShiftName
	into		#finale
	from		#tmpShift a
	left join	#tmp_atten_dump b on b.EMPID=a.EMPID and b.ToDate=a.ToDate

	select		 case 
				 when exists(select aa.* 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE) then 
							 (select top 1 cc.Name --+ case when aa.LeaveID=2 then ' w/pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE
							 )
				 when exists(select aa.* 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE) then 
							 (select top 1 cc.Name --+ case when aa.LeaveID=2 then ' w/o pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE)
				 when a.ErrCode=100 then 'NO SCHEDULE'
				 when a.ErrCode=-2 then a.ShiftName
				 when a.ErrCode=-1 then ''
				 when a.ErrCode=0 then 'ABSENT'
				 when a.ErrCode=1 then 'No Time In'
				 when a.ErrCode=2 then 'No Time Out'
				 when a.ErrCode=3 then 'No Time In On Second Shift'
				 when a.ErrCode=4 then 'No Time Out On Second Shift'
				 when a.ErrCode=5 then 'Late'
				 when a.ErrCode=6 then 'Late On Second Shift'
				 when a.ErrCode=7 then 'Undertime'
				 when a.ErrCode=8 then 'Undertime On Second Shift'
				 end ErrName
				,a.*
	from		#finale a
	left join	Employee z on z.EmployeeID=a.EmployeeID
	where		1=1
		--and		ErrCode >=0
		and		a.EmployeeID is not null
		and		(case when @EmpsId=-1 then -1 else a.EmployeeID end) = @EmpsId
	order by	a.Name, a.ToDateFinal
	
	

	drop table #finale
	drop table #tmpInOut
	drop table #tmpAdd
	drop table #tmp_atten_dump
	drop table #tmpShift


END





GO

/****** Object:  StoredProcedure [ITADMIN].[AttendanceMonitoring_Descripancy_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--- exec PAYROLL.AttendanceMonitoring_SCS '1738369','16-Dec-2015','06-Jan-2015'
Create PROC [ITADMIN].[AttendanceMonitoring_Descripancy_SCS] --'1738369','15-Aug-2016','16-Sep-2016'
@EmployeeID as varchar(20),
@FromDate as datetime,
@ToDate as datetime
AS
BEGIN




declare @CONST_ALLOWANCE_LATE int
set @CONST_ALLOWANCE_LATE=6


declare @sql varchar(max)
declare @AttenF varchar(20), @AttenT varchar(20)



	set @AttenF =  'Atten_' + right('0' + cast(month(@FromDate) as varchar),2) + cast(year(@FromDate) as varchar(4))
	set @AttenT =  'Atten_' + right('0' + cast(month(@ToDate) as varchar),2) + cast(year(@ToDate) as varchar(4))
	set @sql = 'insert into Atten_dump  ' +
			   'select * from ' + @AttenF + ' union ' +
			   'select * from ' + @AttenT 

	select		 e.Name, e.EmployeeID EMPID
				,cast(cast(year(b.CurrentMonth) as varchar) + '-' + cast(month(b.CurrentMonth) as varchar) + '-' + cast(c.ShiftDay as varchar) as datetime) as ToDate
				,b.CurrentMonth			
				,c.ShiftID, c.InTime, c.OutTime, c.InTime1, c.OutTime1
				,d.Name ShiftName
	into		#tmpInOut
	FROM		dbo.AllotShift AS b 
	INNER JOIN	dbo.AllotShiftDetail AS c ON b.ID = c.AllotID 
	INNER JOIN	dbo.Shift AS d ON c.ShiftID = d.ID
	inner JOIN	dbo.Employee e on e.Id=b.EmpID
	WHERE		(b.CurrentMonth >= '01-' + left(DATENAME(month,@FromDate),3) + '-' + cast(year(@FromDate) as varchar)
		and		 b.CurrentMonth <= cast(day(@ToDate) as varchar) + '-' + left(DATENAME(month,@ToDate),3) + '-' + cast(year(@ToDate) as varchar))
		AND		d.Deleted = 0
		AND		c.Deleted = 0
		AND		b.Deleted = 0		

	delete from Atten_dump
	exec(@sql)

	select DATEADD(day, a.ctr, @FromDate-1) ToDate 
	into #tmpAdd
	from (
			select 1 + (i1.i + i2.i + i3.i + i4.i + i5.i + i6.i) ctr
			from (select 0 as i union select 1) as i1, 
				 (select 0 as i union select 2) as i2, 
				 (select 0 as i union select 4) as i3, 
				 (select 0 as i union select 8) as i4, 
				 (select 0 as i union select 16) as i5,
				 (select 0 as i union select 32) as i6
		) a
	order by a.ctr

	select		a.*
	into		#tmp_atten_dump
	from		Atten_dump a
	where		a.EMPID in ('1741511'
							,'967608'
							---,'1105133'RUDWAN	KHALID	BATTERJEE
							---,'571557' SURAYA	MOHY ELLDIN	NAZER
							,'939958'
							,'1807945'
							,'1417225'
							,'1808501'
							,'641627'
							,'1396933'
							,'1520262'
							,'1427025'
							,'1063416'
							,'45561'
							,'1808016'
							--,'428668'
							,'117926'
							,'123212'
							,'140717'
							,'1080142'
							,'1238550'
								--,'1200925' -- relative
							,'1732116'
							--,'1370549'
							--,'1796531'
							)


	select		distinct 
				a.ToDate ToDateFinal, c.*
	into		#tmpShift
	from		#tmpAdd a
	left join	#tmp_atten_dump b on 1=1
	left join	#tmpInOut c on c.EMPID=b.EMPID and c.ToDate=a.ToDate
	left join	#tmp_atten_dump d on d.EMPID=b.EMPID and d.ToDate=b.ToDate
	where		a.ToDate >= @FromDate and a.ToDate <= @ToDate	
	order by	c.EMPID, a.ToDate


	select		 a.Name + ' - ' + a.EMPID Name
				,case
				 when exists(select aa.ID
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EMPID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE) then -100
				 when exists(select aa.ID 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EMPID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE) then -101
				 when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN -2
				 when b.InTime is null and b.OutTime is null and b.InTime1 is null and b.OutTime1 is null then 0
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is null and b.OutTime is not null then 1
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is not null and b.OutTime is null then 2
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is null and b.OutTime1 is not null then 3
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is not null and b.OutTime1 is null then 4
				 when b.InTime > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 5
				 when b.InTime1 > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 6
				 when b.OutTime < a.OutTime then 7
				 when b.OutTime1 < a.OutTime1 then 8
				 else -1
				 end ErrCode
				,a.ToDateFinal, a.EMPID EmployeeID
				,b.InTime InTimeA, b.OutTime OutTimeA, b.InTime1 InTime1A, b.OutTime1 OutTime1A
				,a.InTime InTimeS, a.OutTime OutTimeS, a.InTime1 InTime1S, a.OutTime1 OutTime1S
				,a.ShiftName
	into		#finale
	from		#tmpShift a
	left join	#tmp_atten_dump b on b.EMPID=a.EMPID and b.ToDate=a.ToDate

	select		 case 
				 when a.ErrCode=-100 then 
							 (select top 1 '-100' --cc.Name --+ case when aa.LeaveID=2 then ' w/pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE
							 )
				 when a.ErrCode=-101 then 
							 (select top 1 '-101' --  cc.Name --+ case when aa.LeaveID=2 then ' w/o pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE)
				 when a.ErrCode=-2 then a.ShiftName
				 when a.ErrCode=-1 then ''
				 when a.ErrCode=0 then 'ABSENT'
				 when a.ErrCode=1 then 'No Time In'
				 when a.ErrCode=2 then 'No Time Out'
				 when a.ErrCode=3 then 'No Time In On Second Shift'
				 when a.ErrCode=4 then 'No Time Out On Second Shift'
				 when a.ErrCode=5 then 'Late'
				 when a.ErrCode=6 then 'Late On Second Shift'
				 when a.ErrCode=7 then 'Undertime'
				 when a.ErrCode=8 then 'Undertime On Second Shift'
				 end ErrName
				,a.*
	into		#finalecd
	from		#finale a
	left join	Employee z on z.EmployeeID=a.EmployeeID
	where		1=1
		and		a.ErrCode >=0
		and		a.EmployeeID is not null
		and		(case when @EmployeeID=-1 then -1 else a.EmployeeID end) = @EmployeeID
	order by	a.Name, a.ToDateFinal

	select * from #finalecd where ErrName<> '-100'
	
	drop table #finale
	drop table #tmpInOut
	drop table #tmpAdd
	drop table #tmp_atten_dump
	drop table #tmpShift
	drop table #finalecd

END

	
GO

/****** Object:  StoredProcedure [ITADMIN].[MONTHLYPUNCHINREPORTS_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--- exec PAYROLL.MONTHLYPUNCHINREPORTS_SCS '1796531','16-Dec-2015','06-Jan-2016'
cREATE PROC [ITADMIN].[MONTHLYPUNCHINREPORTS_SCS]
@EmployeeID as varchar(20),
@FromDate as datetime,
@ToDate as datetime
AS
BEGIN



declare @CONST_ALLOWANCE_LATE int
set @CONST_ALLOWANCE_LATE=6


declare @sql varchar(max)
declare @AttenF varchar(20), @AttenT varchar(20)



	set @AttenF =  'Atten_' + right('0' + cast(month(@FromDate) as varchar),2) + cast(year(@FromDate) as varchar(4))
	set @AttenT =  'Atten_' + right('0' + cast(month(@ToDate) as varchar),2) + cast(year(@ToDate) as varchar(4))
	--set @sql = 'insert into Atten_dump  ' +
	--		   'select * from ' + @AttenF + ' where EMPID=''' + @EmployeeID + ''' union ' +
	--		   'select * from ' + @AttenT + ' where EMPID=' + @EmployeeID
	set @sql = 'insert into Atten_dump  ' +
			   'select * from ' + @AttenF + ' union ' +
			   'select * from ' + @AttenT 

	select		 e.Name, e.EmployeeID EMPID
				,cast(cast(year(b.CurrentMonth) as varchar) + '-' + cast(month(b.CurrentMonth) as varchar) + '-' + cast(c.ShiftDay as varchar) as datetime) as ToDate
				,b.CurrentMonth			
				,c.ShiftID, c.InTime, c.OutTime, c.InTime1, c.OutTime1
				,d.Name ShiftName
	into		#tmpInOut
	FROM		dbo.AllotShift AS b 
	INNER JOIN	dbo.AllotShiftDetail AS c ON b.ID = c.AllotID 
	INNER JOIN	dbo.Shift AS d ON c.ShiftID = d.ID
	inner JOIN	dbo.Employee e on e.Id=b.EmpID
	WHERE		(b.CurrentMonth >= '01-' + left(DATENAME(month,@FromDate),3) + '-' + cast(year(@FromDate) as varchar)
		and		 b.CurrentMonth <= cast(day(@ToDate) as varchar) + '-' + left(DATENAME(month,@ToDate),3) + '-' + cast(year(@ToDate) as varchar))
		AND		d.Deleted = 0
		AND		c.Deleted = 0
		AND		b.Deleted = 0		

	delete from Atten_dump
	exec(@sql)

	select DATEADD(day, a.ctr, @FromDate-1) ToDate 
	into #tmpAdd
	from (
			select 1 + (i1.i + i2.i + i3.i + i4.i + i5.i + i6.i) ctr
			from (select 0 as i union select 1) as i1, 
				 (select 0 as i union select 2) as i2, 
				 (select 0 as i union select 4) as i3, 
				 (select 0 as i union select 8) as i4, 
				 (select 0 as i union select 16) as i5,
				 (select 0 as i union select 32) as i6
		) a
	order by a.ctr

	select		a.*
	into		#tmp_atten_dump
	from		Atten_dump a
	--where		a.EMPID in ('1741511'
	--						,'967608'
	--						,'1105133'
	--						,'571557'
	--						,'939958'
	--						,'1807945'
	--						,'1417225'
	--						,'1808501'
	--						,'641627'
	--						,'1396933'
	--						,'1520262'
	--						,'1427025'
	--						,'1063416'
	--						,'45561'
	--						,'1808016'
	--						--,'428668'
	--						,'117926'
	--						,'123212'
	--						,'140717'
	--						,'1080142'
	--						,'1238550'
	--							--,'1200925' -- relative
	--						,'1732116'
	--						--,'1370549'
	--						--,'1796531'
	--						)


	select		distinct 
				a.ToDate ToDateFinal, c.*
	into		#tmpShift
	from		#tmpAdd a
	left join	#tmp_atten_dump b on 1=1
	left join	#tmpInOut c on c.EMPID=b.EMPID and c.ToDate=a.ToDate
	left join	#tmp_atten_dump d on d.EMPID=b.EMPID and d.ToDate=b.ToDate
	where		a.ToDate >= @FromDate and a.ToDate <= @ToDate	
	order by	c.EMPID, a.ToDate


	select		 a.Name + ' - ' + a.EMPID Name
				,case 
				 when a.ShiftID is null then 100
				 when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN -2
				 when b.InTime is null and b.OutTime is null and b.InTime1 is null and b.OutTime1 is null then 0
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is null and b.OutTime is not null then 1
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is not null and b.OutTime is null then 2
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is null and b.OutTime1 is not null then 3
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is not null and b.OutTime1 is null then 4
				 when b.InTime > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 5
				 when b.InTime1 > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 6
				 when b.OutTime < a.OutTime then 7
				 when b.OutTime1 < a.OutTime1 then 8
				 else -1
				 end ErrCode
				,a.ToDateFinal, a.EMPID EmployeeID
				,b.InTime InTimeA, b.OutTime OutTimeA, b.InTime1 InTime1A, b.OutTime1 OutTime1A
				,a.InTime InTimeS, a.OutTime OutTimeS, a.InTime1 InTime1S, a.OutTime1 OutTime1S
				,a.ShiftName
	into		#finale
	from		#tmpShift a
	left join	#tmp_atten_dump b on b.EMPID=a.EMPID and b.ToDate=a.ToDate

	select		 case 
				 when exists(select aa.* 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE) then 
							 (select top 1 cc.Name --+ case when aa.LeaveID=2 then ' w/pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE
							 )
				 when exists(select aa.* 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE) then 
							 (select top 1 cc.Name --+ case when aa.LeaveID=2 then ' w/o pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE)
				 when a.ErrCode=100 then 'NO SCHEDULE'
				 when a.ErrCode=-2 then a.ShiftName
				 when a.ErrCode=-1 then ''
				 when a.ErrCode=0 then 'ABSENT'
				 when a.ErrCode=1 then 'No Time In'
				 when a.ErrCode=2 then 'No Time Out'
				 when a.ErrCode=3 then 'No Time In On Second Shift'
				 when a.ErrCode=4 then 'No Time Out On Second Shift'
				 when a.ErrCode=5 then 'Late'
				 when a.ErrCode=6 then 'Late On Second Shift'
				 when a.ErrCode=7 then 'Undertime'
				 when a.ErrCode=8 then 'Undertime On Second Shift'
				 end ErrName
				,a.*
	from		#finale a
	left join	Employee z on z.EmployeeID=a.EmployeeID
	where		1=1
		--and		ErrCode >=0
		and		a.EmployeeID is not null
		and		(case when @EmployeeID=-1 then -1 else a.EmployeeID end) = @EmployeeID
	order by	a.Name, a.ToDateFinal
	
	

	drop table #finale
	drop table #tmpInOut
	drop table #tmpAdd
	drop table #tmp_atten_dump
	drop table #tmpShift


END





GO

/****** Object:  StoredProcedure [ITADMIN].[AttendanceMonitoring_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--- exec PAYROLL.AttendanceMonitoring_SCS '-1','16-Dec-2015','06-Jan-2016'
CREATE PROC [ITADMIN].[AttendanceMonitoring_SCS]
@EmployeeID as varchar(20),
@FromDate as datetime,
@ToDate as datetime
AS
BEGIN




declare @CONST_ALLOWANCE_LATE int
set @CONST_ALLOWANCE_LATE=6


declare @sql varchar(max)
declare @AttenF varchar(20), @AttenT varchar(20)



	set @AttenF =  'Atten_' + right('0' + cast(month(@FromDate) as varchar),2) + cast(year(@FromDate) as varchar(4))
	set @AttenT =  'Atten_' + right('0' + cast(month(@ToDate) as varchar),2) + cast(year(@ToDate) as varchar(4))
	set @sql = 'insert into Atten_dump  ' +
			   'select * from ' + @AttenF + ' union ' +
			   'select * from ' + @AttenT 

	select		 e.Name, e.EmployeeID EMPID
				,cast(cast(year(b.CurrentMonth) as varchar) + '-' + cast(month(b.CurrentMonth) as varchar) + '-' + cast(c.ShiftDay as varchar) as datetime) as ToDate
				,b.CurrentMonth			
				,c.ShiftID, c.InTime, c.OutTime, c.InTime1, c.OutTime1
				,d.Name ShiftName
	into		#tmpInOut
	FROM		dbo.AllotShift AS b 
	INNER JOIN	dbo.AllotShiftDetail AS c ON b.ID = c.AllotID 
	INNER JOIN	dbo.Shift AS d ON c.ShiftID = d.ID
	inner JOIN	dbo.Employee e on e.Id=b.EmpID
	WHERE		(b.CurrentMonth >= '01-' + left(DATENAME(month,@FromDate),3) + '-' + cast(year(@FromDate) as varchar)
		and		 b.CurrentMonth <= cast(day(@ToDate) as varchar) + '-' + left(DATENAME(month,@ToDate),3) + '-' + cast(year(@ToDate) as varchar))
		AND		d.Deleted = 0
		AND		c.Deleted = 0
		AND		b.Deleted = 0		

	delete from Atten_dump
	exec(@sql)

	select DATEADD(day, a.ctr, @FromDate-1) ToDate 
	into #tmpAdd
	from (
			select 1 + (i1.i + i2.i + i3.i + i4.i + i5.i + i6.i) ctr
			from (select 0 as i union select 1) as i1, 
				 (select 0 as i union select 2) as i2, 
				 (select 0 as i union select 4) as i3, 
				 (select 0 as i union select 8) as i4, 
				 (select 0 as i union select 16) as i5,
				 (select 0 as i union select 32) as i6
		) a
	order by a.ctr

	select		a.*
	into		#tmp_atten_dump
	from		Atten_dump a
	--where		a.EMPID in ('1741511'
	--						,'967608'
	--						---,'1105133'RUDWAN	KHALID	BATTERJEE
	--						---,'571557' SURAYA	MOHY ELLDIN	NAZER
	--						,'939958'
	--						,'1807945'
	--						,'1417225'
	--						,'1808501'
	--						,'641627'
	--						,'1396933'
	--						,'1520262'
	--						,'1427025'
	--						,'1063416'
	--						,'45561'
	--						,'1808016'
	--						--,'428668'
	--						,'117926'
	--						,'123212'
	--						,'140717'
	--						,'1080142'
	--						,'1238550'
	--							--,'1200925' -- relative
	--						,'1732116'
	--						--,'1370549'
	--						--,'1796531'
	--						)


	select		distinct 
				a.ToDate ToDateFinal, c.*
	into		#tmpShift
	from		#tmpAdd a
	left join	#tmp_atten_dump b on 1=1
	left join	#tmpInOut c on c.EMPID=b.EMPID and c.ToDate=a.ToDate
	left join	#tmp_atten_dump d on d.EMPID=b.EMPID and d.ToDate=b.ToDate
	where		a.ToDate >= @FromDate and a.ToDate <= @ToDate	
	order by	c.EMPID, a.ToDate


	select		 a.Name + ' - ' + a.EMPID Name
				,case
				 when exists(select aa.ID
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EMPID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE) then -100
				 when exists(select aa.ID 
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 where bb.EmployeeID=a.EMPID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE) then -101
				 when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN -2
				 when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN -2 
				 when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN -2
				 when b.InTime is null and b.OutTime is null and b.InTime1 is null and b.OutTime1 is null then 0
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is null and b.OutTime is not null then 1
				 when b.InTime1 is null and b.OutTime1 is null and b.InTime is not null and b.OutTime is null then 2
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is null and b.OutTime1 is not null then 3
				 when b.InTime is not null and b.OutTime is not null and b.InTime1 is not null and b.OutTime1 is null then 4
				 when b.InTime > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 5
				 when b.InTime1 > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 6
				 when b.OutTime < a.OutTime then 7
				 when b.OutTime1 < a.OutTime1 then 8
				 else -1
				 end ErrCode
				,a.ToDateFinal, a.EMPID EmployeeID
				,b.InTime InTimeA, b.OutTime OutTimeA, b.InTime1 InTime1A, b.OutTime1 OutTime1A
				,a.InTime InTimeS, a.OutTime OutTimeS, a.InTime1 InTime1S, a.OutTime1 OutTime1S
				,a.ShiftName
	into		#finale
	from		#tmpShift a
	left join	#tmp_atten_dump b on b.EMPID=a.EMPID and b.ToDate=a.ToDate

	select		 case 
				 when a.ErrCode=-100 then 
							 (select top 1 '-100' --cc.Name --+ case when aa.LeaveID=2 then ' w/pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WP_FROMDATE and a.ToDateFinal<=aa.FIN_WP_TODATE
							 )
				 when a.ErrCode=-101 then 
							 (select top 1 '-101' --  cc.Name --+ case when aa.LeaveID=2 then ' w/o pay' else '' end
							 from LeaveApplication aa
							 left join Employee bb on bb.ID=aa.EmpID
							 left join Leave cc on cc.ID=aa.LeaveID
							 where bb.EmployeeID=a.EmployeeID 
							 and   a.ToDateFinal>=aa.FIN_WOP_FROMDATE and a.ToDateFinal<=aa.FIN_WOP_TODATE)
				 when a.ErrCode=-2 then a.ShiftName
				 when a.ErrCode=-1 then ''
				 when a.ErrCode=0 then 'ABSENT'
				 when a.ErrCode=1 then 'No Time In'
				 when a.ErrCode=2 then 'No Time Out'
				 when a.ErrCode=3 then 'No Time In On Second Shift'
				 when a.ErrCode=4 then 'No Time Out On Second Shift'
				 when a.ErrCode=5 then 'Late'
				 when a.ErrCode=6 then 'Late On Second Shift'
				 when a.ErrCode=7 then 'Undertime'
				 when a.ErrCode=8 then 'Undertime On Second Shift'
				 end ErrName
				,a.*
	into		#finalecd
	from		#finale a
	left join	Employee z on z.EmployeeID=a.EmployeeID
	where		1=1
		and		a.ErrCode >=0
		and		a.EmployeeID is not null
		and		(case when @EmployeeID=-1 then -1 else a.EmployeeID end) = @EmployeeID
	order by	a.Name, a.ToDateFinal

	select * from #finalecd where ErrName<> '-100'
	
	drop table #finale
	drop table #tmpInOut
	drop table #tmpAdd
	drop table #tmp_atten_dump
	drop table #tmpShift
	drop table #finalecd

END

	
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Department_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

Create PROCEDURE [ITADMIN].[Select2_Department_SCS]


AS
BEGIN


select ID,Name from Department where deleted  =0 

--SELECT 
--ID = -1, '<ALL Department>' as NAME
--union ALL
--SELECT
--ID
--,NAME 
--FROM Department 
--WHERE DELETED=0 
--ORDER BY id

END



GO

/****** Object:  StoredProcedure [ITADMIN].[SP_GET_StraightDutyEmployee]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create Procedure [ITADMIN].[SP_GET_StraightDutyEmployee] 
(@DeptID int)   
As      

If @DeptID=0
	Select Tab1.Employeeid,Tab1.Name,Tab1.DeptCode,Tab1.Department,Tab1.Category,Tab1.TimeIn,Tab1.TimeOut      
	from      
	(select c.employeeid Employeeid ,c.name Name,d.deptcode DeptCode,d.name Department,e.name Category,      
	convert(nvarchar,b.intime,114) TimeIn,       
	convert(nvarchar,b.outtime,114) TimeOut       
	 from allotshift a       
	left join allotshiftdetail b on a.id=b.allotid      
	left join employee c on a.empid=c.id      
	left join department d on c.departmentid = d.id      
	left join hrcategory e on c.categoryid = e.id      
	where month(a.currentmonth)=month(getdate()) and year(a.currentmonth)=year(getdate())      
	and b.shiftday=day(getdate()) and b.intime1 is null and intime is not null      
	and e.name <> 'NURSES' --and c.departmentid in (92,62,46,90,41,65,110,60)      
	Union ALL      
	select c.employeeid Employeeid ,c.name Name,d.deptcode DeptCode,d.name Department,e.name Category,      
	convert(nvarchar,b.intime,114) TimeIn,       
	convert(nvarchar,b.outtime,114) TimeOut       
	 from allotshift a       
	left join allotshiftdetail b on a.id=b.allotid      
	left join employee c on a.empid=c.id      
	left join department d on c.departmentid = d.id      
	left join hrcategory e on c.categoryid = e.id      
	where month(a.currentmonth)=month(getdate()) and year(a.currentmonth)=year(getdate())      
	and b.shiftday=day(getdate()) and b.intime1 is null and intime is not null      
	and e.name = 'DOCTORS' and c.departmentid not in (62)) Tab1      
	group by Tab1.Employeeid,Tab1.Name,Tab1.DeptCode,Tab1.Department,Tab1.Category,Tab1.TimeIn,Tab1.TimeOut  
	order by Tab1.Department      
Else
	Select Tab1.Employeeid,Tab1.Name,Tab1.DeptCode,Tab1.Department,Tab1.Category,Tab1.TimeIn,Tab1.TimeOut      
	from      
	(select c.employeeid Employeeid ,c.name Name,d.deptcode DeptCode,d.name Department,e.name Category,      
	convert(nvarchar,b.intime,114) TimeIn,       
	convert(nvarchar,b.outtime,114) TimeOut       
	 from allotshift a       
	left join allotshiftdetail b on a.id=b.allotid      
	left join employee c on a.empid=c.id      
	left join department d on c.departmentid = d.id      
	left join hrcategory e on c.categoryid = e.id      
	where month(a.currentmonth)=month(getdate()) and year(a.currentmonth)=year(getdate())      
	and b.shiftday=day(getdate()) and b.intime1 is null and intime is not null      
	and e.name <> 'NURSES' --and c.departmentid in (92,62,46,90,41,65,110,60)      
	and c.departmentid = @DeptID
	Union ALL      
	select c.employeeid Employeeid ,c.name Name,d.deptcode DeptCode,d.name Department,e.name Category,      
	convert(nvarchar,b.intime,114) TimeIn,       
	convert(nvarchar,b.outtime,114) TimeOut       
	 from allotshift a       
	left join allotshiftdetail b on a.id=b.allotid      
	left join employee c on a.empid=c.id      
	left join department d on c.departmentid = d.id      
	left join hrcategory e on c.categoryid = e.id      
	where month(a.currentmonth)=month(getdate()) and year(a.currentmonth)=year(getdate())      
	and b.shiftday=day(getdate()) and b.intime1 is null and intime is not null      
	and e.name = 'DOCTORS' and c.departmentid not in (62) and c.DepartmentID = @DeptID) Tab1      
	group by Tab1.Employeeid,Tab1.Name,Tab1.DeptCode,Tab1.Department,Tab1.Category,Tab1.TimeIn,Tab1.TimeOut  
	order by Tab1.Department      	


GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Employee_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

CREATE PROCEDURE [ITADMIN].[Select2_Employee_SCS]


AS
BEGIN
--SELECT 
--ID = -1, '<ALL Employee>' as NAME
--union ALL
--SELECT
--ID
--,NAME 
--FROM Employee 
--WHERE DELETED=0 
--ORDER BY id
Select ID,EmployeeId + ' - ' + Name AS Name from Employee where deleted = 0 order by Id



END



GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorClinicSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




Create PROCEDURE [ITADMIN].[DoctorClinicSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlOPDoctorClinicHeaderSave			as xml,
	@xmlOPDoctorClinicDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPDoctorClinicHeaderSave
SELECT 
Action
,DepartmentId
into #tmpOPDoctorClinicHeaderSave

from openxml(@handle, '/DocumentElement/OPDoctorClinicHeaderSave',2) with
(
Action int
,DepartmentId int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPDoctorClinicDetailsSave

select DoctorId,ClinicName,WaitTime,Sequence,DepartmentId,SqNumber--,OrderDateTime
into #tmpOPDoctorClinicDetailsSave

from openxml(@handle, '/DocumentElement/OPDoctorClinicDetailsSave',2) with
(
DoctorId int
,ClinicName varchar(250)
,WaitTime int
,Sequence int
,DepartmentId int
,SqNumber int
)
exec sp_xml_removedocument @handle


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DepartmentId as int
declare @DoctorId as int

SELECT @Action = Action,@DepartmentId = DepartmentId
from   #tmpOPDoctorClinicHeaderSave	

SELECT @DoctorId = DoctorId
from   #tmpOPDoctorClinicDetailsSave	

--select * from  backuptest
--from #tmpOPDoctorClinicDetailsSave
					
					--select * into  backuptest
					--from #tmpOPDoctorClinicDetailsSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					
					--select * into Drop table backuptest
					--from #tmpOPDoctorClinicDetailsSave

		
					delete DoctorClinic where doctorId in (Select doctorId from #tmpOPDoctorClinicDetailsSave)

					INSERT INTO dbo.DoctorClinic
					(DoctorId,ClinicName,WaitTime,Sequence,DepartmentId,OrderDateTime,SqNumber)
			  Select DoctorId,ClinicName,WaitTime,Sequence,@DepartmentId,Getdate(),Sequence
					FROM #tmpOPDoctorClinicDetailsSave 

					---Delete DoctorClinic where DoctorId in (9251,9774,8604)

					---Select * from DoctorClinic
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Clinic Name Added.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN

		--Select * From BackUptest

		--Select * into BackUptest
		--from #tmpOPDoctorClinicDetailsSave

						--UPDATE a 
						--set a.ClinicName = b.ClinicName
						--	,a.WaitTime = b.WaitTime
						--    ,a.Sequence = b.Sequence
						--	,a.DepartmentId = @DepartmentId
						--	,a.SqNumber = b.Sequence
						--	From dbo.DoctorClinic a
						--	LEFT JOIN #tmpOPDoctorClinicDetailsSave b on b.DoctorId = a.DoctorId
						--	and a.DepartmentId =@DepartmentId 

		--			Select  b.DoctorId
		--					,b.ClinicName
		--					,b.WaitTime
		--				   ,b.Sequence
		--				    --,a.DepartmentId = @DepartmentId
		--					,b.Sequence
		--					From dbo.DoctorClinic a
		--					INNER JOIN BackUptest b on b.DoctorId = a.DoctorId
		--					WHERE a.doctorId in (Select DoctorId from BackUptest)
		--					and a.DepartmentId =158 
							

	--Select * from BackUptest a where departmentID = 158
	--LEFT JOIN BackUptest b on b.DoctorId = a.DoctorId where a.DepartmentId = 106

	--select * from DoctorClinic where D = 106
	--sELECT * FROM BackUptest
	--Select * from Specialisation where Name like '%Vascular%'
--							select * from #tmpOPDoctorClinicDetailsSave ---use to break---
--drop table #tmpOPDoctorClinicDetailsSave
--        SET	@ErrorMessage = '100-Successful.'		
--        SET @ERROR_SEVERITY = ERROR_SEVERITY()
--        SET @ERROR_STATE = ERROR_STATE()		
--        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
--return;


									 
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Clinic Details has been Updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPDoctorClinicHeaderSave
drop table #tmpOPDoctorClinicDetailsSave	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlOPDoctorClinicHeaderSave xml, @xmlOPDoctorClinicDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlOPDoctorClinicHeaderSave = '<DocumentElement>\r\n  <ListTransSaveHeaderModel>\r\n    <Action>1</Action>\r\n    <DepartmentId>158</DepartmentId>\r\n  </ListTransSaveHeaderModel>\r\n</DocumentElement>'
set @xmlOPDoctorClinicDetailsSave = '<DocumentElement>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>9251</DoctorId>\r\n    <ClinicName>200</ClinicName>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>1</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>8054</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>8044</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>9774</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>8644</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n <DoctorId>8592</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>2970</DoctorId>\r\n    <ClinicName>570</ClinicName>\r\n    <WaitTime>30</WaitTime>\r\n    <Sequence>6</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>9846</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n  <OPDoctorClinicDetailsSave>\r\n    <DoctorId>8604</DoctorId>\r\n    <WaitTime>5</WaitTime>\r\n    <Sequence>0</Sequence>\r\n    <SqNumber>0</SqNumber>\r\n  </OPDoctorClinicDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.DoctorClinicSave_SCS @ErrorMessage,@xmlOPDoctorClinicHeaderSave, @xmlOPDoctorClinicDetailsSave
print (@ErrorMessage)

*/  



GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DoctorMapping_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Select2_DoctorMapping_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

SELECT ID as id,EmpCode + ' - '+ Name as Name
from Employee where CategoryID in (1,2) and Deleted = 0

END





GO

/****** Object:  StoredProcedure [ITADMIN].[DailyTimeRecordsInDetails]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--Select  * From Department
---Select * From EmpPunchingDetails where todate >= '01-Sep-2016' and todate <= '30-Sep-2016'
--select * from EmpPunchingDetails where todate >= '01-Sep-2016' and todate <= '30-Sep-2016' and empid like '%9000%'
-- [HRPayroll].[DailyTimeRecordsInDetails] '01-Sep-2016', '30-Sep-2016', -1
CREATE PROCEDURE [ITADMIN].[DailyTimeRecordsInDetails] ---'01-Sep-2015', '15-Sep-2015','1738369'--,19,-1
	@FromDateLog datetime
	,@ToDateLog datetime
	,@EmpId varchar(250)
	--,@DepartmentId  int
	--,@EmpsId  int
AS
BEGIN

-- Set the allowance to tag as LATE
declare @CONST_ALLOWANCE_LATE int, @EmployeeIds as varchar(50)
set @CONST_ALLOWANCE_LATE=6

Select @EmployeeIds = EmployeeId from Employee where ID = @EmpId

----Count The Percentage of Absence--------
Declare @DayCount int = DATEDIFF(DAY, @FromDateLog, @ToDateLog) + 1

--Declare @TotalDayOff as int
--Declare @TotalAbsence as int
--Declare @PercentageofAbsense as int

-----PRINT DATEDIFF(DAY, '01/FEB/2016', '15/FEB/2016') + 1
--   SELECT @DayCount = DATEDIFF(DAY, @FromDateLog, @ToDateLog) + 1
--   SELECT @TotalDayOff = 'TotalDayof with in the range'
--   SELECT @TotalAbsence = 'Total Absense'
--   SELECT @PercentageofAbsense  = @TotalAbsence / (@DayCount - @TotalDayOff) * 100

select	a.ID, a.EmployeeID, a.Name + '-' + ' ' + b.Name as Name into #tmpEmployee 
from	Employee a 
left join Department b on b.ID = a.DepartmentID
where	a.Deleted=0
	and (case when @EmployeeIds='-1' then '-1' else a.EmployeeID end) = @EmployeeIds

select DATEADD(day, a.ctr, @FromDateLog-1) ToDate, b.EmployeeID, b.Name
into #tmpDateTemplate
from (
		select 1 + (i1.i + i2.i + i3.i + i4.i + i5.i + i6.i) ctr
		from (select 0 as i union select 1) as i1, 
				(select 0 as i union select 2) as i2, 
				(select 0 as i union select 4) as i3, 
				(select 0 as i union select 8) as i4, 
				(select 0 as i union select 16) as i5,
				(select 0 as i union select 32) as i6
	) a
left join	#tmpEmployee b on 1=1
where	DATEADD(day, a.ctr, @FromDateLog-1) <= @ToDateLog
order by a.ctr

select		 e.EmployeeID, e.Name
			,cast(cast(year(b.CurrentMonth) as varchar) + '-' + cast(month(b.CurrentMonth) as varchar) + '-' + cast(c.ShiftDay as varchar) as datetime) as ToDate
			,c.InTime, c.OutTime
			,c.InTime1, c.OutTime1
			,c.ShiftID,d.Name ShiftName
into		#tmpShifting
from		dbo.AllotShift AS b 
inner join	dbo.AllotShiftDetail AS c ON b.ID = c.AllotID 
inner join	dbo.Shift AS d ON c.ShiftID = d.ID
inner join	dbo.Employee e on e.Id=b.EmpID
where		(b.CurrentMonth >= '01-' + left(DATENAME(month,@FromDateLog),3) + '-' + cast(year(@FromDateLog) as varchar)
	and		 b.CurrentMonth <= cast(day(@ToDateLog) as varchar) + '-' + left(DATENAME(month,@ToDateLog),3) + '-' + cast(year(@ToDateLog) as varchar))
	and		d.Deleted = 0
	and		c.Deleted = 0
	and		b.Deleted = 0	
	and		e.ID in (select ID from #tmpEmployee)
order by	e.EmployeeID, [ToDate]

select		row_number() over(order by	a.empid, a.todate, (case when a.outtime is null then 0 else 1 end), a.intime) ctr, a.*,b.Name
into		#tmpEmpPunchingDetails
from		EmpPunchingDetails a
left join	Employee b on b.EmployeeID=a.empid
where		a.todate>=@FromDateLog and a.todate<=@ToDateLog
	and		b.ID in (select ID from #tmpEmployee)
order by	a.empid, a.todate, (case when a.outtime is null then 0 else 1 end), a.intime

select a.*
into #tmpEmpPunchingDetailsFinale
from (
	select 1 t, a.empid, a.todate, a.intime dtr from #tmpEmpPunchingDetails a where a.intime is not null union all
	select 2 t, a.empid, a.todate, a.outtime dtr from #tmpEmpPunchingDetails a where a.outtime is not null
	) a
order by a.empid, a.todate, a.dtr


CREATE TABLE [#tmpInOutFixing](
	[EmployeeID] [varchar](50) NULL,
	[Name] [varchar](200) NULL,
	[ToDate] [datetime] NULL,
	[InTime] [datetime] NULL,
	[OutTime] [datetime] NULL,
	[InTime1] [datetime] NULL,
	[OutTime1] [datetime] NULL,
	[ShiftID] [int] NULL,
	[ShiftName] [varchar](50) NULL,
	[InTimeActual] [datetime] NULL,
	[OutTimeActual] [datetime] NULL,
	[InTime1Actual] [datetime] NULL,
	[OutTime1Actual] [datetime] NULL,
	[ctr] [int] NULL
)
insert into #tmpInOutFixing
select		a.EmployeeID, a.Name + ' (' + a.EmployeeID + ')', a.ToDate, b.InTime, b.OutTime, b.InTime1, b.OutTime1, b.ShiftId, b.ShiftName, null, null, null, null,row_number() over(order by	a.EmployeeID, a.ToDate)
from		#tmpDateTemplate a
left join	#tmpShifting b on b.EmployeeID=a.EmployeeID and b.ToDate=a.ToDate


declare @ctr int, @d int, @ShiftID int
declare @EmployeeID varchar(50), @ToDate datetime, @InTime datetime, @OutTime datetime, @InTime1 datetime, @OutTime1 datetime
set @ctr=1

while (@ctr <= (select count(*) from #tmpInOutFixing))
begin
	select @EmployeeID=a.EmployeeID, @ToDate=a.ToDate, @InTime=a.InTime, @OutTime=a.OutTime, @InTime1=a.InTime1, @OutTime1 =a.OutTime1, @ShiftID=a.ShiftID
	from #tmpInOutFixing a where a.ctr=@ctr

	-- No schedule
	if (@ShiftID is null)
	begin
		update aa set aa.InTimeActual=bb.dtr
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, min(a.dtr) dtr 
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
				group by	a.empid, a.todate
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID	
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.OutTimeActual=bb.dtr
		from #tmpInOutFixing aa
		inner join (		
				select		a.empid, a.todate, max(a.dtr) dtr 
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
					--and		a.dtr>=@OutTime and a.dtr<=@InTime1 
				group by	a.empid, a.todate			
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID			
	end
	-- split duty
	else if (@InTime is not null and @OutTime is not null and @InTime1 is not null and @OutTime1 is not null)
	begin
		update aa set aa.InTimeActual=bb.dtr
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, min(a.dtr) dtr 
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
				group by	a.empid, a.todate
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID	
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.OutTimeActual=bb.dtr	
		from #tmpInOutFixing aa
		inner join (		
				select		a.empid, a.todate, min(a.dtr) dtr 
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
					and		a.dtr>=@OutTime and a.dtr<=@InTime1 
				group by	a.empid, a.todate			
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID	
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.InTime1Actual=bb.dtr
		from #tmpInOutFixing aa
		inner join (		
				select		a.empid, a.todate, max(a.dtr) dtr 
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
					and		a.dtr>=@OutTime and a.dtr<=@InTime1 
				group by	a.empid, a.todate			
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID	
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.OutTime1Actual=bb.dtr
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, max(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate 
				group by	a.empid, a.todate
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.InTimeActual=case when bb.t=1 then bb.dtr else null end
					, aa.OutTimeActual=case when bb.t=2 then bb.dtr else null end
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, a.t, max(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate 
				group by	a.empid, a.todate,a.t
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
			and	aa.InTimeActual=aa.OutTimeActual
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.OutTime1Actual=null
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, a.t, max(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate 
				group by	a.empid, a.todate,a.t
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
			and	aa.InTimeActual=aa.OutTime1Actual
		-----------------------------------------------------------------------------------------------------------------------------
	end
	-- straight duty
	else if (@InTime is not null and @OutTime is not null and @InTime1 is null and @OutTime1 is null)
	begin
		update aa set aa.InTimeActual=bb.dtr
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, min(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate
				group by	a.empid, a.todate
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.OutTimeActual=bb.dtr
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, max(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate 
				group by	a.empid, a.todate
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
		-----------------------------------------------------------------------------------------------------------------------------
		update aa set aa.InTimeActual=case when bb.t=1 then bb.dtr else null end
					, aa.OutTimeActual=case when bb.t=2 then bb.dtr else null end
		from #tmpInOutFixing aa
		inner join (
				select		a.empid, a.todate, a.t, max(a.dtr) dtr
				from		#tmpEmpPunchingDetailsFinale a 
				where		a.empid=@EmployeeID and a.todate=@ToDate 
				group by	a.empid, a.todate,a.t
					) bb on bb.empid=aa.EmployeeID and bb.todate=aa.ToDate
		where	aa.EmployeeID=@EmployeeID
			and	aa.InTimeActual=aa.OutTimeActual
		-----------------------------------------------------------------------------------------------------------------------------
	end

	set @ctr=@ctr+1
end

select		 a.* 
			,case
				when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN -2
				when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN -1
				when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN -1
				when a.ShiftID is null then 0
				when a.InTime is not null and a.InTimeActual is null and a.OutTimeActual is null and a.InTime1Actual is null and a.OutTime1Actual is null then 1--'ABSENT'
				when a.InTimeActual > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 6--'Late'
				when a.InTime1Actual > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 7--'Late On Second Shift'
				when a.InTime is not null and a.InTimeActual is null then 2--'No Time In'
				when a.InTime is not null and a.OutTimeActual is null then 3--'No Time Out'
				when a.InTime1 is not null and a.InTime1Actual is null then 4--'No Time In On Second Shift'
				when a.InTime1 is not null and a.OutTime1Actual is null then 5--'No Time Out On Second Shift'				 
				when a.OutTimeActual < a.OutTime then 8--'Undertime'
				when a.OutTime1Actual < a.OutTime1 then 9--'Undertime On Second Shift'
				else 100
				end ErrCode
			,case
				when patindex('%OFF%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%LEAVE%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%VACATION%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%TRIP%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%MARRIAGE%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%OVERTIME%',upper(a.ShiftName)) > 0 THEN a.ShiftName 
				when patindex('%EMERGENCY%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%TRAINING%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when patindex('%HOLIDAY%',upper(a.ShiftName)) > 0 THEN a.ShiftName
				when a.ShiftID is null then 'NO SCHEDULE'
				when a.InTime is not null and a.InTimeActual is null and a.OutTimeActual is null and a.InTime1Actual is null and a.OutTime1Actual is null then 'ABSENT'
				when a.InTimeActual > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime) then 'Late'
				when a.InTime1Actual > dateadd(minute, @CONST_ALLOWANCE_LATE, a.InTime1) then 'Late On Second Shift'
				when a.InTime is not null and a.InTimeActual is null then 'No Time In'
				when a.InTime is not null and a.OutTimeActual is null then 'No Time Out'
				when a.InTime1 is not null and a.InTime1Actual is null then 'No Time In On Second Shift'
				when a.InTime1 is not null and a.OutTime1Actual is null then 'No Time Out On Second Shift'				 
				when a.OutTimeActual < a.OutTime then 'Undertime'
				when a.OutTime1Actual < a.OutTime1 then 'Undertime On Second Shift'
				else ''
				end Remarks
into		#tmpInOutFixingFinale
from		#tmpInOutFixing a


select		 a.EmployeeID
			,sum(case when a.ErrCode=-2 then 1.00 else 0 end) TotalDayOff
			,sum(case when a.ErrCode=1 then 1.00 else 0 end) TotalAbsent
into		#tmpGetParameter
from		#tmpInOutFixingFinale a
group by	a.EmployeeID

--Declare @AbsentPercentage as decimal

Select    


			--,TotalAbsent
			--,@DayCount * 100 as DayCount
		 --   ,TotalDayOff
			-- ,AbsentPercentage = ( TotalAbsent * 1.00 / Case when (@DayCount*1.00-TotalDayOff *1.00) = 0 then 1.00 Else (@DayCount*1.00-TotalDayOff *1.00) END) * 100.00
			a.EmployeeID
			,a.Name
			,a.ToDate ToDate
			,a.InTime
			,a.OutTime
			,a.InTime1
			,a.OutTime1
			,a.InTimeActual
			,a.OutTimeActual
			,a.InTime1Actual
			,a.OutTime1Actual
			,e.Name as Department
			,a.Remarks
			,a.ErrCode
from		#tmpInOutFixingFinale a
left join	#tmpGetParameter b on b.EmployeeID=a.EmployeeID
LEFT JOIN Employee c on c.EmployeeID = a.EmployeeID
LEFT JOIN Department e on e.ID = c.DepartmentID
--where (case when  @DepartmentId  = -1 then -1 else @DepartmentId END) = @DepartmentId
--and (case when @EmployeeIds = -1 then -1 else @EmployeeIds END) = @EmployeeIds



--where (case when  @DepartmentID  = -1 then -1 else a.DepartmentID END) = @DepartmentID
--and   (case when @DoctorId = -1 then -1 else a.DoctorId END) = @DoctorId
--Select		a.*
--			,TotalAbsent
--			,@DayCount * 100 as DayCount
--			,TotalDayOff
--			,AbsentPercentage = ( (case when TotalAbsent = 0.00 then 1.00 else TotalAbsent END) / ((Case when @DayCount = 0.00 then 1.00 else @DayCount END)-(Case when TotalDayOff = 0.00 then 1.00 else TotalDayOff END))) * 100.00
--from		#tmpInOutFixingFinale a
--left join	#tmpGetParameter b on b.EmployeeID=a.EmployeeID


--select		 a.*
--			,AbsentPercentage = Convert(decimal,( TotalAbsent * 1.00 / (case when @DayCount = null then  1.00 else @DayCount END) *1.00- (case when TotalDayOff = null then 1.00 else TotalDayOff END)  *1.00) * 100.00)
--from		#tmpInOutFixingFinale a
--left join	#tmpGetParameter b on b.EmployeeID=a.EmployeeID


drop table #tmpEmployee
drop table #tmpDateTemplate
drop table #tmpShifting
drop table #tmpEmpPunchingDetails
drop table #tmpEmpPunchingDetailsFinale
drop table #tmpInOutFixing
drop table #tmpInOutFixingFinale

END


--select dateadd(minute,(60*3)*-1, '2016-03-04 07:00:00.000')
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DepartmentAll_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

Create PROCEDURE [ITADMIN].[Select2_DepartmentAll_SCS]


AS
BEGIN
SELECT 
ID = -1, '<ALL Department>' as NAME
union ALL
SELECT
ID
,NAME 
FROM Department 
WHERE DELETED=0 
ORDER BY id

END



GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_EmployeeAll_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

CREATE PROCEDURE [ITADMIN].[Select2_EmployeeAll_SCS]


AS
BEGIN
SELECT 
ID = -1, '<ALL Employee>' as NAME
union ALL
SELECT
ID
,NAME 
FROM Employee 
WHERE DELETED=0 
ORDER BY id

END



GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_DepartmentAll]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

Create PROCEDURE [ITADMIN].[Select2_DepartmentAll]


AS
BEGIN
SELECT 
ID = -1, '<ALL Employee>' as NAME
union ALL
SELECT
ID
,NAME 
FROM Employee 
WHERE DELETED=0 
ORDER BY id

END



GO

/****** Object:  StoredProcedure [ITADMIN].[AuditTrailAttendance_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'GIS')
--BEGIN
--    EXEC('CREATE SCHEMA GIS')
--END

-- [GIS].[OPD_CENSUS_SCS] '01-Mar-2016','01-Mar-2016',-1,-1
CREATE PROCEDURE [ITADMIN].[AuditTrailAttendance_SCS] ---'01-Sep-2015','30-Sep-2015',-1,10554
@FromDate as datetime,
@ToDate as datetime,
@DepartmentId as int,
@EmpId as int

AS

---Select * from Employee where EmployeeID = '1738369'


BEGIN

SELECT     c.EmployeeID AS EmployeeNo, c.Name AS EmployeeName, CONVERT(datetime, REPLICATE('0', 2 - LEN(CONVERT(Varchar(2), b.ShiftDay))) + CONVERT(Varchar(2), 
                      b.ShiftDay) + '-' + SUBSTRING(CONVERT(nvarchar, a.CurrentMonth, 106), 4, 3) + '-' + CONVERT(nvarchar, YEAR(a.CurrentMonth)), 105) AS ToDate, 
                      CONVERT(nvarchar(10), b.InTime, 114) AS InTime, CONVERT(nvarchar(10), b.OutTime, 114) AS OutTime, CONVERT(nvarchar(10), b.InTime1, 114) AS InTime1, 
                      CONVERT(nvarchar(10), b.OutTime1, 114) AS OutTime1, CASE WHEN d .id IN (103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 135, 136, 192, 195, 196, 197, 219) 
                      THEN d .name ELSE '' END AS Shiftname
FROM         AllotShift AS a 
				LEFT JOIN AllotShiftDetail AS b ON a.ID = b.AllotID 
				LEFT  JOIN Employee AS c ON a.EmpID = c.ID 
				LEFT  JOIN Shift AS d ON b.ShiftID = d.ID
WHERE     (MONTH(a.CurrentMonth) = MONTH(@FromDate)) AND (YEAR(a.CurrentMonth) = YEAR(@ToDate))
and (case when  @DepartmentID  = -1 then -1 else c.DepartmentID END) = @DepartmentID and (case when  @EmpId  = -1 then -1 else a.EmpID END) = @EmpId
and       (b.ShiftDay = DAY(@ToDate))
			
END 


--DROP TABLE #temp1
--DROP TABLE #temp2



--Select g.Name as Department, f.EmpCode, f.Name as Doctor, b.ItemID as DoctorId,Sum(Case when (b.CategoryID =1 and b.billamount>0) then 1 else 0 end) Cash,Sum(Case when (b.CategoryID<>1 and b.CompanyID <> 4611 and b.billamount>0) then 1 else 0 end) Charge,Sum(Case when (b.CompanyId =4611 and b.billamount>0) then 1 else 0 end) SGHInsurance,Sum(Case when (b.billamount=0) then 1 else 0 end) FreeRevisit,Sum(Case When  datediff(day,a.regdatetime, b.billdatetime) = 0 then 1 else 0 end) NewPIN,Sum(Case When  datediff(day,a.regdatetime, b.billdatetime) > 0 then 1 else 0 end) OldPIN
-- from patient a, opcompanybilldetail b, Doctor f, Department g Where 1 = 1 and a.issueauthoritycode = b.issueauthoritycode and a.registrationno = b.registrationno 
-- and b.billdatetime >= '03-01-2015' and b.billdatetime <  '03-02-2015' and b.serviceid = 2 and b.itemid = f.id and f.DepartmentId = g.id group by b.itemid,g.Name,f.EmpCode,f.Name



-- Select g.Name as Department, ds.EmpCode, ds.Name as Doctor,c.Doctorid,Sum(case c.scheduleid when 0 then 0 else 1 end) as Appointment,Sum(case c.scheduleid when 0 then 1 else 0 end) as WalkIn 
-- from OPBill a, opdoctororder b, OPdoctororderdetail c,Doctor ds,Department g where a.Id = b.OPBillID and b.Id = c.OpDoctorOrderID and ds.id = c.doctorid and g.id = ds.DepartmentId 
-- and a.DateTime >='03-01-2015' and a.DateTime < '03-02-2015' group by g.Name,c.doctorid, ds.Name, ds.EmpCode 
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBedClearanceSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[ReleaseBedClearanceSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlReleaseBedHeaderSave				as xml,
	@xmlReleaseBedDetaisSave				as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseBedHeaderSave
SELECT 
Action
,OperatorId
into #tmpReleaseBedHeaderSave


from openxml(@handle, '/DocumentElement/ReleaseBedHeaderSave',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseBedDetaisSave

select BedId,ROW_NUMBER() over(order by BedId) i
into #tmpReleaseBedDetaisSave

from openxml(@handle, '/DocumentElement/ReleaseBedDetaisSave',2) with
(
BedId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
Declare @OperatorId as int
declare @BedId as int

SELECT @Action = Action,@OperatorId = OperatorId
from   #tmpReleaseBedHeaderSave	

SELECT @BedId = BedId
from   #tmpReleaseBedDetaisSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			Declare @i as int
			---Release Employee from Vacation
			WHILE EXISTS (Select * From #tmpReleaseBedDetaisSave) 

				BEGIN 

					Select top 1 @i = i, @BedId = BedId from #tmpReleaseBedDetaisSave

						 Update bed set status=1 ,ForCleaning = 0 where id = @BedId

						 Update cleanbedrelease set HouseKeepingApproveID = @OperatorId, HouseKeepingDateTime=getdate(), SafetyApproveID=@OperatorId,SafetyDateTime=getdate(),MaintenanceApprove=@OperatorId,MaintenanceDateTime=getdate(),FinalApproveID=@OperatorId,FinalDateTime=getdate()
						 where bedid = @BedId and FinalApproveID is null and FinalDateTime is null

						Delete #tmpReleaseBedDetaisSave where i = @i
			   END
			
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Room Release for Vacancy Successfully'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReleaseBedHeaderSave
drop table #tmpReleaseBedDetaisSave	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseBed_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[ReleaseBed_DashBoard_SCS]-- 0
AS

BEGIN  
			
	
SELECT     0 selected, a.Name as Room, b.Startdatetime as IntimationDate, c.DischargeDateTime, b.HouseKeepingDateTime, CASE WHEN a.IPID = 0 THEN 'FOR CLEANING' ELSE 'OCCUPIED' END AS FinalApproval 
            ,a.ID,b.FinalDateTime
FROM         Bed AS a 
			RIGHT OUTER JOIN CleanBedRelease AS b ON a.ID = b.bedid AND b.FinalApproveID IS NULL 
			LEFT OUTER JOIN AllInpatients AS c ON b.IPID = c.IPID
WHERE     (b.FinalApproveID IS NULL)


END


GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseHISEmployeeVacation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[ReleaseHISEmployeeVacation_DashBoard_SCS] 
AS

BEGIN  
			
	SELECT 
		DISTINCT 
		0 selected
		,a.LeaveID
		,CONVERT(varchar(max), c.EmployeeID) AS EmployeeID
		,c.Name
		,d.DeptCode AS DPT
		,convert(varchar(12),b.FromDate,9) as FromDate
		,convert(varchar(12),b.ToDate,9) as ToDate
		FROM        L_USERROLES_VACATION AS a 
					LEFT OUTER JOIN LeaveApplication AS b ON a.LeaveID = b.ID 
					LEFT OUTER JOIN Employee AS c ON b.EmpID = c.ID 
					LEFT OUTER JOIN Department AS d ON c.DepartmentID = d.ID
		WHERE     (a.Released = 0) AND (c.Deleted = 0)
		ORDER BY EmployeeID



END
GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseEmployeeVacationSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[ReleaseEmployeeVacationSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlReleaseEmpVacationHeaderSave		as xml,
	@xmlReleaseEmpVacationDetails			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseEmpVacationHeaderSave
SELECT 
Action
into #tmpReleaseEmpVacationHeaderSave


from openxml(@handle, '/DocumentElement/ReleaseEmpVacationHeaderSave',2) with
(
Action int
)
exec sp_xml_removedocument @handle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseEmpVacationDetails

select LeaveID,ROW_NUMBER() over(order by LeaveID) i
into #tmpReleaseEmpVacationDetails

from openxml(@handle, '/DocumentElement/ReleaseEmpVacationDetails',2) with
(
LeaveID int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @UserId as int
declare @RoleId as int
declare @LeaveID as int

SELECT @Action = Action
from   #tmpReleaseEmpVacationHeaderSave	

SELECT @LeaveID = LeaveID
from   #tmpReleaseEmpVacationDetails	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	
	
		
			Declare @i as int
			---Release Employee from Vacation
			WHILE EXISTS (Select * From #tmpReleaseEmpVacationDetails) 

				BEGIN 

					Select top 1 @i = i, @LeaveID = LeaveID from #tmpReleaseEmpVacationDetails

						Select distinct  @RoleId = b.Role_ID, @UserId = b.User_ID
						from leaveapplication a 
						right join L_USERROLES_VACATION b on (a.EmpID = b.user_id and a.ID = b.leaveid)
						where b.LeaveID=@LeaveID and b.released=0 


						--Delete dbo.L_USERROLES  where USER_ID = @UserId  --and Role_Id = @RoleId
		
						----For Wipro
						--Insert into dbo.L_USERROLES  
						--select distinct b.Role_ID,b.User_ID,b.StartDateTime,b.EndDateTime,b.OperatorID,b.Deleted
						--from leaveapplication a 
						--right join L_USERROLES_VACATION b on (a.EmpID = b.user_id and a.ID = b.leaveid)
						--where b.LeaveID=@LeaveID and b.released=0 


						Delete HISGLOBAL.ACCESS_USERROLES  where USER_ID = @UserId and User_ID = @RoleId

						Insert into HISGLOBAL.ACCESS_USERROLES  
						select distinct b.Role_ID,b.User_ID,b.StartDateTime,b.EndDateTime,b.OperatorID,b.Deleted
						from leaveapplication a 
						right join L_USERROLES_VACATION b on (a.EmpID = b.user_id and a.ID = b.leaveid)
						where b.LeaveID=@LeaveID and b.released=0 

				
						Update L_USERROLES_VACATION Set released=1,ReleasedDateTime=GETDATE()
						where LeaveID =@LeaveID

						Delete #tmpReleaseEmpVacationDetails where i = @i
			   END


			
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Employee Release from Vacation'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReleaseEmpVacationHeaderSave
drop table #tmpReleaseEmpVacationDetails	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceiptMappingSave_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CancelOPReceiptMappingSave_SCS]
	
    @ErrorMessage											as NVARCHAR(max) OUT,
    @xmlCancelOpReceiptMappingSaveHeader					as xml,
	@xmlCancelOpReceiptMappingDetailsSave					as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelOpReceiptMappingSaveHeader
SELECT 
Action
into #tmpCancelOpReceiptMappingSaveHeader


from openxml(@handle, '/DocumentElement/CancelOpReceiptMappingSaveHeader',2) with
(
Action int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelOpReceiptMappingDetailsSave

select OPBillId,ReIssueBillNo,tagId 
into #tmpCancelOpReceiptMappingDetailsSave

from openxml(@handle, '/DocumentElement/CancelOpReceiptMappingDetailsSave',2) with
(
OPBillId int,ReIssueBillNo varchar(250),tagId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ReIssueBillNo as varchar(250) 

SELECT @Action = Action
from   #tmpCancelOpReceiptMappingSaveHeader	

Select @ReIssueBillNo = ReIssueBillNo 
from #tmpCancelOpReceiptMappingDetailsSave


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
						
					

						IF not exists(select * from dbo.Canopbill where Id in (Select OPBillId from  #tmpCancelOpReceiptMappingDetailsSave))
							begin
									COMMIT TRAN
									SET       @ErrorMessage = 'No Out Patient Cancellation Receipt Mapping!'
									SET @ERROR_SEVERITY = ERROR_SEVERITY()
									SET @ERROR_STATE = ERROR_STATE()
									RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
									return;
						end

						Update a set a.ReIssueBillNo = b.ReIssueBillNo 
						from dbo.Canopbill a 
						INNER JOIN  #tmpCancelOpReceiptMappingDetailsSave b on b.OPBillId = a.id
						where b.tagId = 1
						---Update Canopbill set ReIssueBillNo = 

		--For Checking
		--drop table TestCanoBIll
		---Select * into TestCanoBIll  From Canopbill where datetime >= '12-Oct-2016' and datetime <= '13-Oct-2016'
				--Select * from TestCanoBIll	
				----select * from Canopbill
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	
			
    BEGIN TRY 
				
        BEGIN TRAN
					
					--IF exists(select * from Surgerystation where surgeryid =@SurgeryId and DeptId in (select surgerysationId from #tmpSurgeryDetailsSave ))
					--	begin
					--COMMIT TRAN
					--SET       @ErrorMessage = 'Already Exists!'
					--SET @ERROR_SEVERITY = ERROR_SEVERITY()
					--SET @ERROR_STATE = ERROR_STATE()
					--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
					--return;
					--end
					
					--UPDATE a
					--SET a.Name = b.SurgeryName
					--	,a.ArabicName = '"'
					--	,a.ArabicCode = b.Code
					--	,a.Costprice = b.Costprice
					--	,a.Instructions = b.Instructions
					--	,a.Modifieddatetime = GetDate()	
					--	,a.Modifiedby = @OperatorId
					--	,a.Code = b.Code
					--	,a.DepartmentID = b.DepartmentId
					--from Surgery a
					--INNER JOIN #tmpSurgerySaveHeader b
					--ON b.SurgeryId = a.Id
					--WHERE a.Id = @SurgeryId

					--	--Insert into surgerystation(SurgeryId,DeptId)
					--	--				Select  @SurgeryId,surgerysationId
					--	--				FROM #tmpSurgeryDetailsSave
							
					--		--SELECT * from SP_HElp SurgeryStation

					--UPDATE a
					--SET  a.DeptId = @surgerysationId
					--from dbo.SurgeryStation a
					--where a.SurgeryId = @SurgeryId

					

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update Surgery set  deleted=1,modifiedby=@OperatorId,enddatetime=getdate()  where ID =@SurgeryId
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCancelOpReceiptMappingSaveHeader
drop table #tmpCancelOpReceiptMappingDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_ReceiptMapping_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
--[ITADMIN].[CancelOPReceipts_ReceiptMapping_SCS] '10/11/2016 12:00:00 AM','11-Oct-2016',1491981,11,12586431,8,'sadsadqw'
CREATE PROCEDURE [ITADMIN].[CancelOPReceipts_ReceiptMapping_SCS]
@FromDate as datetime,
@ToDate as varchar(20),
@RegNo as int,
@Service as int,
@opbillid as int,
@SNO as int,
@BillNo as varchar(250)

AS

BEGIN

Declare @ISSUEAut as varchar(10)

Select @ISSUEAut = a.IssueAuthorityCode from OrganisationDetails a
		

					---  ID varchar(250) Identity(1,1) Primary NULL,
	--Create Table  CreateCancelReceiptMapping(     
	--						  PIN	varchar(250) NULL,
	--						  billno varchar(250) NULL,
	--						  ServiceName varchar(250) NULL,
	--						  billdatetime varchar(250) NULL,
	--						  BillAmount varchar(250) NULL,
	--						  Cancelreason varchar(250) NULL,
	--						  serviceid varchar(250) NULL,
	--						  ReIssueBillNo  nvarchar(250) NULL,
	--						  canceldatetime varchar(250) NULL,
	--						  opbillid varchar(250) NULL,
	--						  registrationno  varchar(250) NULL,
	--						  ID varchar(250) NULL,
	--						  tagingId varchar(250) NULL
	--						 )
							
		IF not exists (Select * from CreateCancelReceiptMapping)
			BEGIN 
							INSERT INTO CreateCancelReceiptMapping
							(PIN,billno,ServiceName,billdatetime,BillAmount,Cancelreason,serviceid,ReIssueBillNo,canceldatetime,opbillid,registrationno,ID)
							SELECT      
									
									@ISSUEAut + '.'+ REPLICATE('0',(10-LEN(a.RegistrationNo))) + CONVERT(varchar,a.RegistrationNo) as PIN
									--@ISSUEAut + REPLICATE('0', 10 - LEN(CONVERT(Varchar(10),a.registrationno))) + CONVERT(Varchar(10),a.registrationno) AS PIN
								   ,a.billno
								   ,c.Name AS ServiceName
								   ,a.billdatetime
								   ,SUM(a.billamount) AS BillAmount
								   ,e.NAME AS Cancelreason
								   ,a.serviceid
								   ,b.ReIssueBillNo
								   ,a.canceldatetime
								   ,a.opbillid
								   ,a.registrationno
								   ,ROW_NUMBER() over(order by a.canceldatetime) as SNO
						FROM         CanOPCompanyBillDetail AS a 
									LEFT OUTER JOIN CanOPBill AS b ON a.opbillid = b.id 
									LEFT OUTER JOIN OPBService AS c ON a.serviceid = c.Id 
									LEFT OUTER JOIN Employee AS d ON a.doctorid = d.ID 
									LEFT OUTER JOIN CANCELBILLREASON AS e ON b.CancelType = e.ID
						WHERE     (a.canceldatetime >= @FromDate) AND (a.canceldatetime < CONVERT(datetime, @ToDate) + 1) AND (b.CancelType IN
												  (SELECT ID FROM CANCELBILLREASON WHERE     (REISSUE = 1)))
						GROUP BY a.opbillid, @ISSUEAut + '.'+ REPLICATE('0',(10-LEN(a.RegistrationNo))) + CONVERT(varchar,a.RegistrationNo), a.billno, a.serviceid, c.Name, 
											  a.billdatetime, b.ReIssueBillNo, e.NAME, a.canceldatetime,a.registrationno
						ORDER BY a.canceldatetime,SNO DESC
			END

	
					--Declare @BillNo as nvarchar(250)
					--		select @BillNo = a.billno
					--				from opcompanybilldetail a
					--				left join opbservice b on a.serviceid = b.id
					--				left join employee c on a.doctorid = c.id 
					--				left join category d on a.categoryid = d.id 
					--				where a.billdatetime >= @FromDate
					--				and a.registrationno= @RegNo and a.ServiceId = @Service
					--				group by a.billno,b.name ,c.empcode ,d.code ,a.billdatetime
					--				order by a.billdatetime 



		Update a set a.ReIssueBillNo = @BillNo, a.tagingId = 1
        from CreateCancelReceiptMapping a where a.registrationno = @RegNo and opbillid = @opbillid and ID = @SNO
					
		Select  PIN,billno,ServiceName,billdatetime,BillAmount,Cancelreason,serviceid,ReIssueBillNo,canceldatetime,opbillid,registrationno,ID as SNO,tagingId as tagId
		from CreateCancelReceiptMapping
	--	where registrationno = @RegNo
		ORDER BY canceldatetime DESC		
	
END

---select * From  CreateCancelReceiptMapping

----Update Canopbill set ReIssueBillNo = '" & ListView1.ListItems.Item(Y).SubItems(8) & "' where id = " & ListView1.ListItems.Item(Y).Text
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_View_SCS]    Script Date: 12/5/2018 1:39:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[CancelOPReceipts_View_SCS]---'10-Oct-2016','994201',2
@FromDate as datetime,
@RegNo as int,
@Service as int

AS

BEGIN

			
			select a.billno,b.name Servicename,c.empcode DocCode,d.code category,a.billdatetime,a.registrationno,a.serviceId,a.Id,
            sum(billamount) Amount
            from opcompanybilldetail a
            left join opbservice b on a.serviceid = b.id
            left join employee c on a.doctorid = c.id 
            left join category d on a.categoryid = d.id 
            where a.billdatetime >= @FromDate
            and a.registrationno= @RegNo and a.ServiceId = @Service
            group by a.billno,b.name ,c.empcode ,d.code ,a.billdatetime,a.registrationno,a.ServiceId,a.Id
            order by a.billdatetime 
			
		

END



GO

/****** Object:  StoredProcedure [ITADMIN].[CancelOPReceipts_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[CancelOPReceipts_DashBoard_SCS] --'11-Oct-2016','11-Oct-2016'-- 0
@FromDate as datetime,
@ToDate as datetime
AS

BEGIN

Declare @ISSUEAut as varchar(10)

Select @ISSUEAut = a.IssueAuthorityCode from OrganisationDetails a


---ROW_NUMBER() OVER(ORDER BY SalesYTD DESC) AS Row,

			 SELECT     

						@ISSUEAut + '.'+ REPLICATE('0',(10-LEN(a.RegistrationNo))) + CONVERT(varchar,a.RegistrationNo) as PIN
						--@ISSUEAut + REPLICATE('0', 10 - LEN(CONVERT(Varchar(10),a.registrationno))) + CONVERT(Varchar(10),a.registrationno) AS PIN
					   ,a.billno
					   ,c.Name AS ServiceName
					   ,a.billdatetime
					   ,SUM(a.billamount) AS BillAmount
					   ,e.NAME AS Cancelreason
					   ,a.serviceid
					   ,b.ReIssueBillNo
					   ,a.canceldatetime
					   ,a.opbillid
					   ,a.registrationno
					   ,ROW_NUMBER() over(order by a.canceldatetime) as SNO
			FROM         CanOPCompanyBillDetail AS a 
						LEFT OUTER JOIN CanOPBill AS b ON a.opbillid = b.id 
						LEFT OUTER JOIN OPBService AS c ON a.serviceid = c.Id 
						LEFT OUTER JOIN Employee AS d ON a.doctorid = d.ID 
						LEFT OUTER JOIN CANCELBILLREASON AS e ON b.CancelType = e.ID
			WHERE     (a.canceldatetime >= @FromDate) AND (a.canceldatetime < CONVERT(datetime, @ToDate) + 1) AND (b.CancelType IN
									  (SELECT ID FROM CANCELBILLREASON WHERE     (REISSUE = 1)))
			GROUP BY a.opbillid, @ISSUEAut + '.'+ REPLICATE('0',(10-LEN(a.RegistrationNo))) + CONVERT(varchar,a.RegistrationNo), a.billno, a.serviceid, c.Name, 
								  a.billdatetime, b.ReIssueBillNo, e.NAME, a.canceldatetime,a.registrationno
			ORDER BY a.canceldatetime,SNO DESC
			
	delete  CreateCancelReceiptMapping

END


GO

/****** Object:  StoredProcedure [ITADMIN].[Rooms_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Rooms_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Rooms
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Rooms_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Rooms_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Rooms
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Room_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Room_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlRoomsSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlRoomsSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpRoomsSave

from openxml(@handle, '/DocumentElement/RoomsSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpRoomsSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Rooms where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'City Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Rooms
	  Insert into Rooms(Name ,ArabicName,StartDateTime, Deleted) 
				Select  upper(@Name),'"',Getdate(),0
				from #tmpRoomsSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from City

				Update  Rooms set Name = upper(@Name)--,ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpRoomsSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_View]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Bed_View]-- 6-- 0
@Id as int
AS

BEGIN
		 
		

			SELECT  b.Name as BedName,c.name as BedType,b.BedTypeID,isnull(d.name,' ') as RoomName,b.RoomId
		   ,ExtensionNo,Status as StatusId,e.Name as BedStatusName,b.DepartmentID,f.Name as DepartmentName,s.Name as Stationname,s.ID as StationId,b.ID as bedid
			FROM  Bed AS b 
			LEFT JOIN dbo.Station AS s ON b.StationID = s.ID
			LEFT JOIN dbo.BedType c on c.id = b.BedTypeID
			LEFT JOIN Rooms d on d.id = b.RoomId
			LEFT JOIN bedstatus e on e.id  = b.Status
			LEFT JOIN Department f on f.ID = b.DepartmentID
			WHERE     b.Deleted = 0 and b.ID = @Id


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Bed_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlBedSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlBedSave
SELECT 
Action
,bedid
,BedName
,ExtensionNo
,BedTypeID
,StationId
,RoomId
,StatusId
,DepartmentID
,OperatorId
into #tmpBedSave

from openxml(@handle, '/DocumentElement/BedSave',2) with
(
Action int
,bedid int
,BedName varchar(250)
,ExtensionNo varchar(250)
,BedTypeID int
,StationId int
,RoomId int
,StatusId int
,DepartmentID int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @bedid as int
declare @BedName as varchar(250)
declare @ExtensionNo as varchar(250)
declare @BedTypeID as int
declare @StationId as int
declare @RoomId as int
declare @StatusId as int
declare @DepartmentID as int
declare @OperatorId as int
declare @MaxId as int



select @Action = Action,@bedid = bedid,@OperatorId = OperatorId,@BedTypeID = BedTypeID,@StationId = StationId,@StatusId = StatusId,@ExtensionNo = ExtensionNo
,@DepartmentID = DepartmentID,@RoomId = RoomId,@BedName = RTRIM(LTRIM(BedName))   -- included jerome dec7 2016
from   #tmpBedSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   		 
			if exists(select * from dbo.Bed where RTRIM(LTRIM(Name))  = RTRIM(LTRIM(@BedName)) and deleted = 0 )
				begin
			COMMIT TRAN
			SET       @ErrorMessage = 'Bed Name Already Exists!'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end


			--select count(*) as no from bed where deleted=0 and upper(name) = 'ASSSS'

			Insert into dbo.Bed (name,BedTypeID,stationid,extensionno,startdatetime,deleted,status,ipid,Roomid,Departmentid) 
			Select BedName,BedTypeID,StationId,ExtensionNo,getdate(),0,StatusId,0,RoomId,DepartmentID
			from #tmpBedSave

			select @MaxId =  max(id) + 1  from dbo.Bed 
			Insert into BedOperator(BedId,Operatorid,status,date) 
			Select @MaxId,OperatorId,'A',Getdate()
			from #tmpBedSave



			--Insert into BedOperator(@MaxId,@OperatorId,status,date) values (491,1412,'A',getdate())
			
			--values('assss',30,171,23213,getdate(),0,1,0 ,1,24)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
	 
		if exists(select * from dbo.Bed where RTRIM(LTRIM(Name))  = RTRIM(LTRIM(@BedName)) and Id <> @bedid  and deleted = 0  )
		--if exists(select * from dbo.Bed where Name = @BedName and Id <> @bedid )
				begin
			COMMIT TRAN
			SET       @ErrorMessage = 'Bed Name Already Exists!'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end



		----sp_Help  MaritalStatus
		declare @statusoldid int 
		select @statusoldid = status from dbo.Bed where   Id <> @bedid 
		
	 	if( @statusoldid in (6,8,1))--underrepair,inactive,vacant
		BEGIN
	 
		 	UPDATE    Bed
			SET      Name = @BedName , ExtensionNo = @ExtensionNo,  DeptCode = a.DeptCode, DepartmentID = a.ID, BedTypeID = @BedTypeID, StationID = @StationId,RoomId = @RoomId  ,Status = @StatusId --bedstatus 6 and 8
			FROM       Bed CROSS JOIN Department AS a

			WHERE     (a.ID = @DepartmentID) AND (Bed.ID = @bedid)
		END
		ELSE
		BEGIN

			UPDATE    Bed
			SET      Name = @BedName , ExtensionNo = @ExtensionNo,  DeptCode = a.DeptCode, DepartmentID = a.ID, BedTypeID = @BedTypeID, StationID = @StationId,RoomId = @RoomId --,Status = @StatusId
			FROM       Bed CROSS JOIN Department AS a
			WHERE     (a.ID = @DepartmentID) AND (Bed.ID = @bedid)

		END

		

			update beddetail set deleted =1 where parentbedid = @bedid

			Insert into BedOperator(BedId,Operatorid,status,date) 
			SELECT BedId,OperatorId,'M',Getdate()
			FROM #tmpBedSave

		

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN


	   if exists(select * from dbo.Bed where id = @bedid and IPID <> 0 and deleted = 0  )
		 begin
			COMMIT TRAN
			SET       @ErrorMessage = 'Bed Cannot Remove because Patient Exists!Please proceed with the proper bed process'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end

			update bed  set deleted=1,enddatetime=getdate() where id=@bedid

			Insert into BedOperator(BedId,Operatorid,status,date) 
						SELECT @bedid,OperatorId,'D',GETDATE()
						FROM #tmpBedSave
		
		--Update StationType set deleted =1,ModifiedDateTime=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpBedSave


set xact_abort OFF

END
 
GO

/****** Object:  StoredProcedure [ITADMIN].[Bed_DashBoard]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Bed_DashBoard]-- 0

AS

BEGIN
		 
		

			SELECT  row_number() over (order by b.ID desc)as Slno,s.Name AS Station, b.Name,b.ID as BedId
			FROM  Bed AS b 
			INNER JOIN dbo.Station AS s ON b.StationID = s.ID
			WHERE     (b.Deleted = 0)
			ORDER BY b.ID desc

END
GO

/****** Object:  StoredProcedure [ITADMIN].[WardPharmacy_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[WardPharmacy_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlListWardSaveModel	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListWardSaveModel
SELECT 
Action
,WardStationID
,PharmacyStationID
into #tmpWardPharmacy

from openxml(@handle, '/DocumentElement/ListWardSaveModel',2) with
(
Action int
,WardStationID int
,PharmacyStationID int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int,@WardStationID as int,@PharmacyStationID as int

select @Action = Action,@WardStationID = WardStationID,@PharmacyStationID = PharmacyStationID
from   #tmpWardPharmacy	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
				if exists(select * from PharmacyStation where WardStationID = @WardStationID and  PharmacyStationID = @PharmacyStationID)
				BEGIN
						
						COMMIT TRAN
						SET       @ErrorMessage = 'Mapping Station Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
				END

							Insert into PharmacyStation 
							(WardStationID,PharmacyStationID)
							Select WardStationID,PharmacyStationID
							from #tmpWardPharmacy
				

	
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				if exists(select * from PharmacyStation where WardStationID = @WardStationID and  PharmacyStationID = @PharmacyStationID)
				BEGIN
						
						COMMIT TRAN
						SET       @ErrorMessage = 'Mapping Station Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
				END

				UPDATE a
				SET a.PharmacyStationID = b.PharmacyStationID
				from PharmacyStation a
				INNER JOIN #tmpWardPharmacy b
				ON b.WardStationID = a.WardStationID
			
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		delete from PharmacyStation where WardStationID= @WardStationID and  PharmacyStationID = @PharmacyStationID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Delete Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpWardPharmacy


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[WardPhar_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[SubStore_View_SCS] 138
CREATE PROCEDURE [ITADMIN].[WardPhar_View_SCS] --81
@WardStationId as int
AS


BEGIN

	   if not exists(SELECT isnull(a.PharmacyStationID,'0')  as PharmacyStationID,isnull(b.Name,'') as PharmacyStation
		FROM dbo.PharmacyStation a 
		LEFT JOIN dbo.Station b on b.ID = a.PharmacyStationID 
		where WardStationID= @WardStationId)
			BEGIN
			
					SELECT top 1 0 as PharmacyStationID,'' as PharmacyStation
					FROM dbo.PharmacyStation a 
					LEFT JOIN dbo.Station b on b.ID = a.PharmacyStationID 
			END
			else
		BEGIN
			SELECT isnull(a.PharmacyStationID,'0')  as PharmacyStationID,isnull(b.Name,'') as PharmacyStation
			FROM dbo.PharmacyStation a 
			LEFT JOIN dbo.Station b on b.ID = a.PharmacyStationID 
			where WardStationID= @WardStationId
		END
END
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRolesSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[UserRolesSave_SCS]
	
    @ErrorMessage										as NVARCHAR(max) OUT,
    @xmlUserRolesHeaderSave								as xml,
	@xmlUserRolesDetailsSave						    as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUserRolesHeaderSave
SELECT 
Action
,UserId
,RoleId
,ModuleId
,RoleName
,OperatorId
,StationId
into #tmpUserRolesHeaderSave


from openxml(@handle, '/DocumentElement/UserRolesHeaderSave',2) with
(
Action int
,UserId int
,RoleId int 
,ModuleId int
,RoleName varchar(250)
,OperatorId int
,StationId int
)
exec sp_xml_removedocument @handle


-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUserRolesDetailsSave

select FeatureId,ROW_NUMBER() over(order by FeatureId) i--,FunctionId
into #tmpUserRolesDetailsSave	

from openxml(@handle, '/DocumentElement/UserRolesDetailsSave',2) with
(
FeatureId int--,FunctionId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @FeatureId as int 
declare @MaxIdMF as int
declare @MaxIdUF as int
declare @UserId as int
declare @ModuleId as int
declare @Roleid as int
declare @RoleName as varchar(250)
Declare  @IdLoop as int
Declare @OperatorId as int
Declare @StationId as int


SELECT @Action = Action,@ModuleId = ModuleId,@RoleId = RoleId,@UserId = UserId,@RoleName =RoleName,@OperatorId = OperatorId,@StationId = StationId
from   #tmpUserRolesHeaderSave	


SELECT @FeatureId = FeatureId--, @FunctionId = FunctionId
from   #tmpUserRolesDetailsSave	


--Select Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   if exists(select *  from HIS.HISGLOBAL.ACCESS_USERROLES a LEFT JOIN HISGLOBAL.ACCESS_ROLES b on a.Role_Id = b.RoleID where b.Name = @RoleName)
			begin
			COMMIT TRAN
			SET       @ErrorMessage = 'Role Name Already Exists!'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end

			     Declare @MaxRoleId int
			     Select @MaxRoleId = Max(Id) from [HISGLOBAL].[ACCESS_ROLES]

					INSERT INTO HIS.[HISGLOBAL].[ACCESS_ROLES] 
					(RoleID,Name,Startdatetime,Deleted,OperatorID)
					SELECT @MaxRoleId,@RoleName,Getdate(),0,@OperatorId
					From #tmpUserRolesHeaderSave 

					--Select * from HIS.HISGLOBAL.ACCESS_USERROLES
					INSERT INTO HIS.HISGLOBAL.ACCESS_USERROLES
					(Role_Id,User_Id,Startdatetime,Deleted,OperatorID)
					SELECT @MaxRoleId,@UserId,Getdate(),0,@OperatorId
					from #tmpUserRolesHeaderSave

		---select * from #tmpRegularEmployeeDetails ---use to break---
		--drop table #tmpRegularEmployeeDetails
		--        SET	@ErrorMessage = '100-Test.'		
		--        SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--        SET @ERROR_STATE = ERROR_STATE()		
		--        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
		--return;

	WHILE exists(select top 1 * from #tmpUserRolesDetailsSave)

			BEGIN
				
				--SELECT @MaxIdMF = Max(ID) + 1  from HISGLOBAL.ACCESS_MODULEFEATURES 
				--SELECT @MaxIdUF = Max(ID) + 1  from HISGLOBAL.ACCESS_USERFEATURES 

				 select top 1 @IdLoop=i from #tmpUserRolesDetailsSave
				--Select * From  HISGLOBAL.ACCESS_USERFEATURES

					INSERT INTO  HISGLOBAL.ACCESS_USERFEATURES
								(USERID,Module_Id,Feature_Id,Deleted,StartDateTime,Station_Id,OperatorId)
					SELECT      @UserId,@ModuleId,FeatureId,0,GETDATE(),@StationId,@OperatorId
					FROM #tmpUserRolesDetailsSave where i = @IdLoop

					--INSERT INTO HISGLOBAL.ACCESS_MODULEFEATURES 
					--		  (ID,ModuleId,FeatureId,Deleted)
					--SELECT @MaxIdMF,@ModuleId,FeatureId,0
					--		from #tmpUserRolesDetailsSave where i = @IdLoop



				---	Select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES
					INSERT INTO HIS.HISGLOBAL.ACCESS_ROLEFEATURES
					(Role_Id,Station_Id,Module_Id,Feature_Id,OperatorId,Deleted,StartDateTime)
					SELECT @MaxRoleId,@StationId,@ModuleId,FeatureId,@OperatorId,0,Getdate()
					From #tmpUserRolesDetailsSave where i = @IdLoop
			
					Delete #tmpUserRolesDetailsSave where i = @IdLoop
			END

			-- Select * from Max(ID)
			---	    select * delete from [HISGLOBAL].[ACCESS_ROLES] where Id = 1128
		---select * from HIS.HISGLOBAL.ACCESS_ROLES 


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				WHILE exists(select top 1 * from #tmpUserRolesDetailsSave)
			 BEGIN

			  select top 1 @IdLoop=i from #tmpUserRolesDetailsSave

			  --select * from  HIS.HISGLOBAL.ACCESS_USERFEATURES
		     --SELECT @MaxIdMF = Max(ID) + 1  from HISGLOBAL.ACCESS_MODULEFEATURES 
			---SELECT @MaxIdUF = Max(ID) + 1 Select *  from HISGLOBAL.ACCESS_USERFEATURES 

				INSERT INTO  HIS.HISGLOBAL.ACCESS_USERFEATURES
							(USERID,Module_Id,Feature_Id,Deleted,StartDateTime,Station_Id,OperatorId)
				SELECT       @UserId,@ModuleId,FeatureId,0,GETDATE(),@StationId,@OperatorId
				FROM #tmpUserRolesDetailsSave where i = @IdLoop


				Delete #tmpUserRolesDetailsSave where i = @IdLoop

			END
			---Select * from HIS.HISGLOBAL.ACCESS_USERROLES

					INSERT INTO HIS.HISGLOBAL.ACCESS_USERROLES
					(Role_Id,User_Id,Startdatetime,Deleted,OperatorID)
				    SELECT RoleId,@UserId,Getdate(),0,@OperatorId
					from #tmpUserRolesHeaderSave
	
		
		---Select * from HISGLOBAL.ACCESS_USERFEATURES		
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Role Mapping Sucessfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpUserRolesHeaderSave
drop table #tmpUserRolesDetailsSave

set xact_abort OFF

END

/*
declare @xmlChangeTransferDepositTypeHeaderSave xml, @xmlChangeTypeDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlChangeTransferDepositTypeHeaderSave = '<DocumentElement>\r\n  <ChangeTransferDepositTypeHeaderSave>\r\n    <Action>1</Action>\r\n    <IPID>62336</IPID>\r\n    <OperatorId>139</OperatorId>\r\n    <CancelReasonId>1</CancelReasonId>\r\n  </ChangeTransferDepositTypeHeaderSave>\r\n</DocumentElement>'
set @xmlChangeTypeDetailsSave = '<DocumentElement>\r\n  <ChangeTypeDetailsSave>\r\n    <ReceiptNo>221980</ReceiptNo>\r\n    <Type>2</Type>\r\n    <OldTypeId>1</OldTypeId>\r\n  </ChangeTypeDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.ChangeTransferDepositTypeSave_SCS @ErrorMessage,@xmlChangeTransferDepositTypeHeaderSave, @xmlChangeTypeDetailsSave
print (@ErrorMessage)

*/  

--select Password,Name from Employee  where ID = 9496
--update a set Password = NULL from Employee a where a.ID = 10554
----select * From hisglobal.ACCESS_USERFEATURES 
----select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES	where Feature_Id = 1914
----select * From Company  where Name like 'Makkah'
--select * from Employee where EmployeeID = '1526359'

--select Password,* from Employee where name like '%JOnas%'
--Update a set a.Password = Null from employee a where a.ID = 10564

---Select * From ACCESS_USERFEATURES
GO

/****** Object:  StoredProcedure [ITADMIN].[UserRegistrationSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[UserRegistrationSave_SCS]
	
    @ErrorMessage				    as NVARCHAR(max) OUT,
    @xmlUserRegistrationSave		as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlUserRegistrationSave
SELECT
Action
,Id
,Name
,Password
,Email
,Mobile
,Question1
,Question2
,SecAnswer1
,SecAnswer2
,EffectivityDate
,OperatorId
,IPAddress
into #tmpUserRegSave

from openxml(@handle, '/DocumentElement/UserRegistrationSave',2) with
(
Action int
,Id int
,Name varchar(250)
,Password varchar(250)
,Email varchar(50)
,Mobile varchar(15)
,Question1 varchar(250)
,Question2 varchar(250)
,SecAnswer1 varchar(250)
,SecAnswer2 varchar(250)
,EffectivityDate datetime
,OperatorId int
,IPAddress varchar(250)
)
exec sp_xml_removedocument @handle

--select * from #tmpTaxmasterListSave	 ---use to break---
--drop table #tmpTaxmasterListSave
--        SET	@ErrorMessage = '100-Successful.'		
--        SET @ERROR_SEVERITY = ERROR_SEVERITY()
--        SET @ERROR_STATE = ERROR_STATE()		
--        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);  
--return;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action			 as int
declare @Id				 as int
declare @OperatorId      as int
declare @CTR as int
declare @Password as varchar(250)
declare @EmpName as varchar(250)
declare @IPAddress as varchar(250)
declare @EmployeeId as varchar(250)

select @Action = Action, @OperatorId = OperatorId,@Id = Id,@Password = Password,@IPAddress = IPAddress
from   #tmpUserRegSave
	
		select @EmployeeId = EmployeeId from Employee where ID = @Id

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   --select * from ITADMIN.User_Authentication


	     if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Active = 1)
		 begin

		COMMIT TRAN
		SET       @ErrorMessage = 'You have Already Access!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


		if exists(select * from ITADMIN.User_Authentication where  EmployeeId =@EmployeeId and Password = @Password and Active = 0)
		 begin

		COMMIT TRAN
		SET       @ErrorMessage = 'You cannot use the old password!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

		Select @EmpName =  Name from Employee where ID= @Id
		SELECT @EmployeeId  = EmployeeId from Employee where ID = @Id
		--Select * from ITADMIN.User_Authentication where EmployeeID = @Id
		---select * from ITADMIN.User_Authentication
        INSERT INTO ITADMIN.User_Authentication(
							 EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
		)
		SELECT
							 @EmployeeId
							,@EmpName
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,0
							,0
							,3
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,1
							,@OperatorId
							,IPAddress
				FROM #tmpUserRegSave

 
				Update a set a.Password = @Password from Employee a where a.ID = @Id
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-User Successfully Saved.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 	
    
        BEGIN TRAN
					update a  set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN' from Employee a where a.Id = @Id

					update a set a.Password = '3fZ93[$U3PW!3k:D3\373U5e3fZN',a.IsAdminReset = 1,a.ResetDate = Getdate() from ITADMIN.User_Authentication a where a.EmployeeId = @EmployeeId
					
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-User Information has been successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) --(Reset) DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		Update a set a.Password = @Password from Employee a where a.ID = @Id


		Declare @CTRMax as int
	--	Select * from ITADMIN.User_Authentication


	     Select @CTRMax  = Max(CTR) from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and Active = 1

	     Select @CTR  = Max(CTR) + 1 from ITADMIN.User_Authentication where EmployeeID = @EmployeeId and CTR = @CTRMax
		


		 INSERT INTO ITADMIN.User_Authentication(
							EmployeeId
							,Name
							,Password
							,EffectivityDate
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,Active
							,CTR
							,OperatorId
							,IPAddress
		)
		SELECT
							 EmployeeId
							,Name
							,@Password
							,Getdate()
							,Mobile
							,Email
							,IsVerified
							,IsAdminReset
							,CounterAtempt
							,Question1
							,Question2
							,SecAnswer1
							,SecAnswer2
							,1
							,@CTR
							,OperatorId
							,@IPAddress
				FROM ITADMIN.User_Authentication where EmployeeId = @EmployeeId and Active = 1 

				Update a set a.Active = 0,a.ResetDate = GETDATE() from ITADMIN.User_Authentication  a where a.CTR = @CTRMax and EmployeeId =@EmployeeId
				
				


		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Password Successufly Reset.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpUserRegSave	

set xact_abort OFF

END


--select * from #tmpRegularEmployeeDetails ---use to break---
--drop table #tmpRegularEmployeeDetails 
--return;



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

set @xmDetails = '<>'
set @xmlheader = '<DocumentElement>\r\n  <InfoHeader>\r\n    <Id>10528</Id>\r\n    <Empid>1412</Empid>\r\n    <givenid>10554</givenid>\r\n    <CurrentMonth>2014-12-11T21:09:11+03:00</CurrentMonth>\r\n    <StartDateTime>2014-12-01T00:00:00+03:00</StartDateTime>\r\n    <Deleted>false</Deleted>\r\n    <Operatorid>1412</Operatorid>\r\n  </InfoHeader>\r\n</DocumentElement>'
set @xmldetail = '<DocumentElement>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>14</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>uu</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>10</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>ccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>5</PenaltyId>\r\n    <NoOfTimes>2</NoOfTimes>\r\n    <Total>1032.26</Total>\r\n    <Remarks>cccc</Remarks>\r\n    <PenaltyDate>2014-12-11T00:00:00+03:00</PenaltyDate>\r\n    <Refund>false</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-11T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n  <InfoDetails>\r\n    <EmpPenaltyId>-1</EmpPenaltyId>\r\n    <PenaltyId>1</PenaltyId>\r\n    <NoOfTimes>1</NoOfTimes>\r\n    <Total>516.13</Total>\r\n    <Remarks>test</Remarks>\r\n    <PenaltyDate>2014-12-18T00:00:00+03:00</PenaltyDate>\r\n    <Refund>true</Refund>\r\n    <LeaveAppId>false</LeaveAppId>\r\n    <RefundDate>2014-12-18T00:00:00+03:00</RefundDate>\r\n  </InfoDetails>\r\n</DocumentElement>'
set @xmlRegularEmployeeDetails = <''>
exec HRPAYROLL.MonthlHoldPersonSave '', 2, @xmlheader, @xmldetail

*/

GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInventorySave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[TransactionInventorySave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlListTransSaveHeaderModel			as xml,
	@xmlListTransSaveDetailsModel			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListTransSaveHeaderModel
SELECT 
Action
,StationId
into #tmpTransactInventoryHeaderSave


from openxml(@handle, '/DocumentElement/ListTransSaveHeaderModel',2) with
(
Action int
,StationId int
)
exec sp_xml_removedocument @handle
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListTransSaveDetailsModel

select Id,maxId,stationid
into #tmpTransactInvetoryDetailsSave

from openxml(@handle, '/DocumentElement/ListTransSaveDetailsModel',2) with
(
Id int,maxId int,stationid int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @StationId as int
declare @SlNo as int



SELECT @Action = Action,@StationId = StationId
from   #tmpTransactInventoryHeaderSave	

--SELECT @Id = Id
--from   #tmpTransactInvetoryDetailsSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


	   	CREATE TABLE #temp1(
			[selected] int NULL,
			[Id] int NULL,
			[Name] [varchar](250) NULL,
			[MaxId] int NULL,
			[stationid] int NULL,
		)
					---	1	31	Departmental Order	4295	81		
					INSERT INTO #temp1		
					SELECT DISTINCT 1 selected,b.slno as Id,a.TranName AS Name,b.maxId,b.stationid --c.Name AS Station
					FROM         TransactionSlNo AS a 
								INNER JOIN InvMax AS b ON a.slNo = b.slno 
								INNER JOIN his.dbo.Station AS c ON b.stationid = c.ID
					WHERE     (b.stationid = @StationId) and maxId <> 0

					--update a set a.maxId = b.MaxId 
					--from #tmpTransactInvetoryDetailsSave a 
					--LEFT JOIN #temp1 b on b.Id = a.Id
					--where a.Id = b.id and a.stationid = b.stationid
			
					  Delete from invMax where stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave)

					  INSERT INTO invMax (slno,maxId,stationid)
													SELECT Id,0,@StationId 
													FROM   #tmpTransactInvetoryDetailsSave

						Update a set a. maxid = b.MaxId 
						from invMax a
						Inner JOIN  #temp1  b on b.Id = a.slno where a.stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave)
				--select * from InvMax

					--note Id = SlNo
				--if exists(select * from invMax where stationid = @StationId and slno in (Select Id as slno from #tmpTransactInvetoryDetailsSave))
				--			BEGIN
						
				--					COMMIT TRAN
				--					SET @ErrorMessage = 'Station Already Transaction Exists!'
				--					SET @ERROR_SEVERITY = ERROR_SEVERITY()
				--					SET @ERROR_STATE = ERROR_STATE()
				--					RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				--					return;
				--			END

				--			ELSE 
				--					BEGIN
				--							INSERT INTO invMax (slno,maxId,stationid)
				--							SELECT Id,0,@StationId 
				--							FROM   #tmpTransactInvetoryDetailsSave
				--					END
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Transaction Added.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTransactInventoryHeaderSave
drop table #tmpTransactInvetoryDetailsSave	
DROP TABLE #temp1

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS_New]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[TransactionInv_View_SCS_New]-- 0
@Id as int
AS

BEGIN  

	CREATE TABLE #temp1(
			[selected] int NULL,
			[Id] int NULL,
			[Name] [varchar](250) NULL,
			[MaxId] int NULL,
			[stationid] int NULL,
		)

	
	INSERT INTO #temp1		
	SELECT DISTINCT 1 selected,b.slno as Id,a.TranName AS Name,b.maxId,b.stationid --c.Name AS Station
	FROM         TransactionSlNo AS a 
				INNER JOIN InvMax AS b ON a.slNo = b.slno 
				INNER JOIN Station AS c ON b.stationid = c.ID
	WHERE     (b.stationid = @Id)

	INSERT INTO #temp1
	SELECT     0 selected,slNo as Id, TranName AS Name, 0 maxId, 0 stationId 
	FROM         TransactionSlNo a
	where a.slNo not in (select Id from #temp1)
	ORDER BY TranName 


	Select * from #temp1

	DROP TABLE #temp1

END


GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[TransactionInv_View_SCS]-- 1-- 0
@Id as int
AS

BEGIN  

	CREATE TABLE #temp1(
			[selected] int NULL,
			[Id] int NULL,
			[Name] [varchar](250) NULL,
			[MaxId] int NULL,
			[stationid] int NULL,
		)

	
	INSERT INTO #temp1		
	SELECT DISTINCT 1 selected,b.slno as Id,a.TranName AS Name,b.maxId,b.stationid --c.Name AS Station
	FROM         TransactionSlNo AS a 
				INNER JOIN InvMax AS b ON a.slNo = b.slno 
				INNER JOIN dbo.Station AS c ON b.stationid = c.ID
	WHERE     (b.stationid = @Id)

	INSERT INTO #temp1
	SELECT     0 selected,slNo as Id, TranName AS Name, 0 maxId, 0 stationId 
	FROM         TransactionSlNo a
	where a.slNo not in (select Id from #temp1)
	ORDER BY TranName 


	Select * from #temp1

	DROP TABLE #temp1

END


GO

/****** Object:  StoredProcedure [ITADMIN].[TransactionInv_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[TransactionInv_DashBoard_SCS]-- 0
AS

BEGIN  
			
		SELECT     0 selected,slNo as Id, TranName AS Name, 0 maxId, 0 stationId  -- not this is discription
		FROM         TransactionSlNo a
		ORDER BY TranName




END
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Title_View_SCS]--15 -- 0
@Id as int
AS

BEGIN
		SELECT    a.Name, a.Id as Id,a.Id as MaritalId,b.Name as MaritalName,a.Id as SexId,c.NAME as SexName
		FROM      Title a 
		LEFT JOIN MaritalStatus b on b.Id = a.Maritalstatus
		LEFT JOIN Sex c on c.ID = a.Sex		
		WHERE     (a.ID = @Id)
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Title_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlTitleSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlTitleSave
SELECT 
Action
,Id
,OperatorId
,Name
,MaritalId
,SexId
into #tmpTitleSave

from openxml(@handle, '/DocumentElement/TitleSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
,MaritalId int
,SexId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int
declare @MaritalId as int
declare @SexId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId,@MaritalId = MaritalId,@SexId = SexId
from   #tmpTitleSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Title where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Title Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into Title(Name ,ArabicName,StartDateTime, Deleted,Maritalstatus,Sex) 
				Select  upper(@Name),'"',Getdate(),0,MaritalId,SexId
				from #tmpTitleSave

			Select * from Title
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from Nationality

				Update  a set a.Name = upper(@Name),a.Maritalstatus = @MaritalId,a.Sex = @SexId
				from Title a--,ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where a.ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTitleSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Title_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Title_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Title
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Tariff_View_SCS]-- 0
@Tariffid as int
AS

BEGIN

		Select Name,Id
		from  Tariff where Id = @Tariffid 


END





GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCSOriginal]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Tariff_Save_SCSOriginal]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlTariffSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlTariffSave
SELECT 
Action
,Id
,Name
into #tmpTariffSave

from openxml(@handle, '/DocumentElement/TariffSave',2) with
(
Action int
,Id int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @TariffId as int
declare @MaxTariffId as int
declare @TariffName as varchar(250)




select @Action = Action,@TariffId = Id,@TariffName  = Name
from   #tmpTariffSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Tariff where Name = @TariffName)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Tariff Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


	  Select @MaxTariffId = max(Id) + 1 from Tariff


	  Insert into Tariff(Id, Name , StartDateTime, Deleted) 
				Select  @MaxTariffId,upper(@TariffName),Getdate(),0 
			    from #tmpTariffSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Tariff set Name =upper(@TariffName) where id =@TariffId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTariffSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCSNew]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_Save_SCSNew]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlTariffSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlTariffSave
SELECT 
Action
,Id
,Name
into #tmpTariffSave

from openxml(@handle, '/DocumentElement/TariffSave',2) with
(
Action int
,Id int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @TariffId as int
declare @MaxTariffId as int
declare @TariffName as varchar(250)
declare @MaxTariff as varchar(250)
declare @ServiceName as varchar(250)
declare @myMaxId as int

select @Action = Action,@TariffId = Id,@TariffName  = Name
from   #tmpTariffSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   Declare @SQL nvarchar(max)
	   Declare @filename as varchar(max)


	   	if exists(select * from Tariff where Name = @TariffName)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Tariff Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


	  Select @MaxTariffId = max(Id) + 1 from Tariff


		Insert into Tariff(Id, Name , StartDateTime, Deleted) 
				Select  @MaxTariffId,upper(@TariffName),Getdate(),0 
			    from #tmpTariffSave

			 Select * into TempIPBService
			 from OPBService where deleted = 0
			--select * from IPBService where deleted = 0
			--select * From OPBService where deleted = 0

				--Select * From Tariff
				--select * from 
					
					 
		--WHILE Exists (Select * from TempIPBService)
		--			Select @MaxTariff = max(Id) from Tariff
		--	BEGIN 

		--			    SELECT top 1 @myMaxId= Id from TempIPBService

		--				Select @ServiceName = PriceTable from TempIPBService where Id = @myMaxId

		--				set @filename = 'OP_P_' + cast(@MaxTariff as varchar) + '_' + cast(@ServiceName as varchar) 
											
						
		--			    	set @SQL = ' Insert Into ' + cast(@filename as nvarchar) +
		--							' (id,price,startdatetime,deleted,enddatetime) ' +
		--							' Select NULL as id,NULL as price,NULL as startdatetime,NULL as deleted,NULL as enddatetime '
		
		--					--print @SQL	
		--					EXEC (@SQL)


		--			    Delete from TempIPBService  where id = @myMaxId
		--  END
		--  delete Tariff where id = 100
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Tariff set Name =upper(@TariffName) where id =@TariffId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTariffSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlTariffSave xml, 
set @xmlTariffSave = '<DocumentElement>\r\n  <TariffSave>\r\n    <Action>1</Action>\r\n    <Id> </Id>\r\n    <Name>a</Name>\r\n </TariffSave>\r\n</DocumentElement>'
exec ITADMIN.Tariff_Save_SCSNew @ErrorMessage,@xmlTariffSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[Tariff_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlTariffSave	       as xml = '<DocumentElement> <TariffSave> <Action>1</Action> <Id>0</Id> <Name>NewTariff2018</Name> </TariffSave> </DocumentElement>'
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlTariffSave
SELECT 
Action
,Id
,Name
into #tmpTariffSave

from openxml(@handle, '/DocumentElement/TariffSave',2) with
(
Action int
,Id int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @TariffId as int
declare @MaxTariffId as int
declare @TariffName as varchar(250)
declare @MaxTariff as varchar(250)
declare @CashServiceName as varchar(250)
declare @NewServiceName as varchar(250)
declare @OLDNewServiceName as varchar(250)
declare @myMaxId as int
declare @countBedType as int

select @Action = Action,@TariffId = Id,@TariffName  = Name
from   #tmpTariffSave	
/*
COPY CASH TARIFF for creating new tariff
ex. OP_P_1 ->   1 tariff
and IP_P_1_1 -> tariff_bedtype

*/
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   Declare @SQL nvarchar(max)
	   Declare @filename as varchar(max)


	  	if exists(select * from Tariff where RTRIM(LTRIM(LOWER(Name))) = RTRIM(LTRIM(LOWER(@TariffName)))  and deleted = 0)
			begin
				COMMIT TRAN
				SET       @ErrorMessage = 'Tariff Name Already Exists!'
				SET @ERROR_SEVERITY = ERROR_SEVERITY()
				SET @ERROR_STATE = ERROR_STATE()
				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
		end  

				Select @MaxTariffId = max(Id) + 1 from Tariff

				Insert into Tariff(Id, Name , StartDateTime, Deleted) 
				Select  @MaxTariffId,upper(@TariffName),Getdate(),0 
				from #tmpTariffSave

				---------Creating Empty OPTariffPrice
				SELECT IDENTITY(INT, 1,1) as TableID,replace(name,'OP_P_1_','OP_P_'+cast(@MaxTariffId as varchar(max))+'_') as newtablename ,name as cashtablename into TempOPBService  FROM sys.tables where name like  'OP[_]P[_]1[_]%'
 
			WHILE Exists (Select * from  TempOPBService)		
			    BEGIN 
						Select top 1 @myMaxId= TableID,@CashServiceName = cashtablename,@NewServiceName = newtablename from TempOPBService 

					set @SQL = N' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@NewServiceName as varchar(max)) + '''' + ')' +
								' BEGIN ' +
								' SELECT * INTO ' + cast(@NewServiceName as nvarchar(max)) +
								' from  ' +cast(@CashServiceName as nvarchar(max)) +
							--	' truncate table ' + cast(@NewServiceName as nvarchar(max)) +
								' END '+
								' ELSE                                 '+
								' BEGIN                               '+
								'  DROP TABLE ' + cast(@NewServiceName as nvarchar(max)) +
								'                                 '+
								' SELECT * INTO ' + cast(@NewServiceName as nvarchar(max)) +
								' from  ' +cast(@CashServiceName as nvarchar(max)) +
								' END                             '+
								'----------------------------------------------------------------------------------- '
								-- print @SQL
								 	EXEC (@SQL)
								Delete from TempOPBService  where TableID = @myMaxId
				END
				--   [ITADMIN].[Tariff_Save_SCS] ''
				DROP TABLE TempOPBService

-------------------------------------------IP IP ----------------------------------------------------------------------

					--Select *  into #TempDynamicIPBService     from IPBService where deleted = 0 and PriceTable <> 'NoPrice' and ID NOT IN (select ID from IPBService where pricetype <> 2 and deleted = 0 and PriceTable <> 'NoPrice' )
					select *  into #TempNOTDynamicIPBService  from IPBService where pricetype <> 2 and deleted = 0 and PriceTable <> 'NoPrice'

				SELECT  IDENTITY(INT, 1,1) as TableID
				,replace(name,'P_1_1_','') as tablename 
				,'P_'+cast(@MaxTariffId as varchar(max))+'_'  as tariffname 
				,'OLDP_'+cast(@MaxTariffId as varchar(max))+'_'  as oldtariffname 
				,name as cashtablename 
				into #TempDynamicIPBService
				FROM sys.tables where name like  'P[_]1[_]1[_]%'

				-- remove the not dynamic table ex. nurse rent 
 				SELECT * into #dynamicipbservicenew  from #TempDynamicIPBService where  LOWER(tablename) not in (select LOWER(PriceTable) from #TempNOTDynamicIPBService )
				select ROW_NUMBER() over(order by ID desc)  TableID,* into #TempBedTypeCount from dbo.BedType a  where a.deleted = 0 
				declare @TopId int,@bedtypeID int
				DECLARE @rowCount AS INT
				DECLARE @counter AS INT

 
 	  select ROW_NUMBER() over(order by tablename desc)  TableID,tablename,tariffname,oldtariffname,cashtablename  
	  into #NEWTempDynamicIPBService from #dynamicipbservicenew
 

 	  
	WHILE Exists (Select * from  #TempBedTypeCount)		
			    BEGIN 
						Select top 1 @myMaxId= TableID,@bedtypeID = id   from #TempBedTypeCount 
 
						SELECT @rowCount = Count(*) FROM #NEWTempDynamicIPBService
						SET @counter = 1;

						WHILE (@counter <= @rowCount)
							BEGIN
										Select  
										@CashServiceName = cashtablename
										,@NewServiceName = tariffname + cast(@bedtypeID as nvarchar(max)) +'_'+tablename
										,@OLDNewServiceName = oldtariffname  + cast( @bedtypeID as nvarchar(max)) +'_'+tablename
										from #NEWTempDynamicIPBService where TableID = @counter	 
										set @SQL = N' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@NewServiceName as varchar(max)) + '''' + ')' +
											' BEGIN ' +
												' SELECT * INTO ' + cast(@NewServiceName as nvarchar(max)) +
												' from  ' +cast(@CashServiceName as nvarchar(max)) +
											' END '+
											' ELSE                                 '+
											' BEGIN                               '+
											'  DROP TABLE ' + cast(@NewServiceName as nvarchar(max)) +
											'                                 '+
											' SELECT * INTO ' + cast(@NewServiceName as nvarchar(max)) +
											' from  ' +cast(@CashServiceName as nvarchar(max)) +
											' END                             '+

												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@OLDNewServiceName as varchar(max)) + '''' + ')' +
													' BEGIN ' +
													' ' + 
													' SELECT * INTO ' + cast(@OLDNewServiceName as nvarchar(max)) +
													' from  ' +cast(@CashServiceName as nvarchar(max)) +
													' ' +
													' truncate table ' + cast(@OLDNewServiceName as nvarchar(max)) +
													' END ' + 
													' ELSE ' + 
													' BEGIN ' + 
													' truncate table ' + cast(@OLDNewServiceName as nvarchar(max)) +
													' END ' + 

											'----------------------------------------------------------------------------------- '
								 				-- print @SQL
								 				 EXEC (@SQL)
									SET @counter = @counter+1;
							END
				Delete from #TempBedTypeCount  where TableID = @myMaxId
				END	
			 
			Drop table #TempNOTDynamicIPBService
			Drop table #TempDynamicIPBService
			Drop table #NEWTempDynamicIPBService
			Drop table #TempBedTypeCount
-------------------------------------------END  IP ----------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH   
	 ROLLBACK TRANSACTION               
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Tariff set Name =upper(@TariffName) where id =@TariffId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpTariffSave


set xact_abort OFF

END

 
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_OP_GetServiceDepartments_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [ITADMIN].[Tariff_OP_GetServiceDepartments_SCS] 
	@ServiceID INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(60), @SQL NVARCHAR(2000)

	SELECT @MasterTable = MasterTable FROM dbo.OPBService WHERE ID = @ServiceID
	--SET @SQL = N' SELECT DISTINCT b.id as id, UPPER(b.name) AS name ' +
	--			' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
	--			' INNER JOIN dbo.Department b ON a.departmentid=b.id ' +
	--			' ORDER BY UPPER(b.name)'

		SET @SQL = N'  select 0 as id, ''--ALL--'' as name  union all SELECT DISTINCT b.id as id, UPPER(b.name) AS name ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' INNER JOIN dbo.Department b ON a.departmentid=b.id ' 
			--	+' ORDER BY UPPER(b.name)'


	EXEC sp_executesql @SQL

END






GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_OP_GetServiceDepartments]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Tariff_OP_GetServiceDepartments]
	@ServiceID INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(60), @SQL NVARCHAR(2000)

	SELECT @MasterTable = MasterTable FROM dbo.OPBService WHERE ID = @ServiceID
	SET @SQL = N' SELECT DISTINCT b.id as ID, UPPER(b.name) AS Department ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' INNER JOIN dbo.Department b ON a.departmentid=b.id ' +
				' ORDER BY UPPER(b.name)'

	EXEC sp_executesql @SQL

END






GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--[ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS] 1,2,54,0
CREATE PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListWithPrice_SCS] ---1,3,26,0
	@TariffID INT,
	@ServiceID INT,
	@DepartmentID INT,
	@TableExists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(60), @PriceTable VARCHAR(30), @SQL NVARCHAR(2000),@Id nvarchar(50)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable,@Id = Id  FROM dbo.OPBservice WHERE ID = @ServiceID

		Insert into TempOPBILLSERVICE
				(Id,Name,StartDate)
		Select	@Id,@PriceTable,Getdate()

		Declare @RefName as varchar(250)
		Select @RefName = ',0 RefPrice'



	IF  EXISTS(SELECT 1 FROM TempOPBILLSERVICE where Id = 2)


	SET @SQL = N' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' + ',b.RefPrice' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is not NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END
				---' ORDER BY a.EmpCode '

	ELSE


		SET @SQL = N' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is not NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END
				--' ORDER BY  Case when '+ cast(@ServiceID as varchar) + ' = 2 then  a.empcode  else  a.code  END'


		--		print @SQL
		declare @IsDoctor  as int

		Select @IsDoctor = id From TempOPBILLSERVICE where id = 2

		If (@IsDoctor = 2)	
			BEGIN
			Delete TempGetOPTariffReports
			Insert into TempGetOPTariffReports
			(Id,Name,Code,Price,RefPrice)
			EXEC sp_executesql @sql, N'@TableExists BIT OUT', @TableExists = @TableExists OUT
			END

			ELSE
				BEGIN
				Delete TempGetOPTariffReports
				Insert into TempGetOPTariffReports
				(Id,Name,Code,Price)
				EXEC sp_executesql @sql, N'@TableExists BIT OUT', @TableExists = @TableExists OUT

				END

			Declare @TariffName as varchar(250)
			Declare @ServiceName as varchar(250)
			Declare @Department as varchar(250)

			Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffID
			Select  @ServiceName = Name from dbo.OPBservice where deleted = 0 and ID =  @ServiceID
			Select @Department = Name from dbo.Department where deleted = 0 and ID = @DepartmentID
			

			update a set a.TariffName = @TariffName,a.ServiceName = @ServiceName,a.DepartmentName = @Department  from TempGetOPTariffReports a


		EXEC sp_executesql @SQL, N'@TableExists BIT OUT', @TableExists = @TableExists OUT

	
	Delete TempOPBILLSERVICE	
END

			--INSERT INTO TempGetOPTariffReports
			--(Id,Name,Code,Price)
			--Select Id,Name,Code,Price from sp_executesql @SQL
			

		--Create Table TempGetOPTariffReports( 
		--						  Id int NULL,
		--						  Name varchar(250),
		--						  Code varchar(250),
		--						  Price	[numeric](18, 0) NULL,
		--						  RefPrice [numeric](18, 0) NULL,
		--						  TariffName varchar(250),
		--						  ServiceName varchar(250),
		--						  DepartmentName varchar(250)
		--						  )	

		---Select * from  TempGetOPTariffReports


--Select * from TempGetOPTariffReports 
--Select * from OPBService where MasterTable = 'Test'
--select * From Department where Name like '%Lab%'

--Select * From OP_P_1_Test where deleted = 0

GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemListNoPrice_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--[ITADMIN].[TARIFF_OP_GetItemListNoPrice_SCS]1,3,54,0
CREATE PROCEDURE [ITADMIN].[TARIFF_OP_GetItemListNoPrice_SCS]
	@TariffID INT,
	@ServiceID INT,
	@DepartmentID INT,
	@TableExists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(60), @PriceTable VARCHAR(30), @SQL NVARCHAR(2000)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable  FROM dbo.OPBservice WHERE ID = @ServiceID
	SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM sys.objects where name = ''OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ''') ' +
				'	BEGIN ' +
				'	   SET @TableExists = 0 ' +
				'	END	' +
				' ELSE ' +
				'	BEGIN ' +
				'	SET @TableExists = 1 ' +
				' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' + ---'ctr'+
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END +
				' ORDER BY  code ' +
				' END '
				---print @SQL
	EXEC sp_executesql @SQL, N'@TableExists BIT OUT', @TableExists = @TableExists OUT
END


GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemList_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--[ITADMIN].[TARIFF_OP_GetItemList_SCS]2,18,-1,NULL
CREATE PROCEDURE [ITADMIN].[TARIFF_OP_GetItemList_SCS]
	@TariffID INT,
	@ServiceID INT,
	@DepartmentID INT,
	@TableExists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	CREATE TABLE #temp(
			[Id] int NULL,
			[Name] [varchar](max) NULL,
			[Code] [varchar](max) NULL,
			[Price][varchar](max) NULL,
		)

	DECLARE @MasterTable VARCHAR(60), @PriceTable VARCHAR(30), @SQL NVARCHAR(2000)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable  FROM dbo.OPBservice WHERE ID = @ServiceID
	SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM sys.objects where name = ''OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ''') ' +
				'	BEGIN ' +
				'	   SET @TableExists = 0 ' +
				'	END	' +
				' ELSE ' +
				'	BEGIN ' +
				'	SET @TableExists = 1 ' +
				' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE b.Price is NULL AND A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END +
				' ORDER BY a.code ' +
				' END '
	EXEC sp_executesql @SQL, N'@TableExists BIT OUT', @TableExists = @TableExists OUT
END

GO

/****** Object:  StoredProcedure [ITADMIN].[TARIFF_OP_GetItemList]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[TARIFF_OP_GetItemList]
	@TariffID INT,
	@ServiceID INT,
	@DepartmentID INT,
	@TableExists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @MasterTable VARCHAR(60), @PriceTable VARCHAR(30), @SQL NVARCHAR(2000)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable  FROM dbo.OPBservice WHERE ID = @ServiceID
	SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM sys.objects where name = ''OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ''') ' +
				'	BEGIN ' +
				'	   SET @TableExists = 0 ' +
				'	END	' +
				' ELSE ' +
				'	BEGIN ' +
				'	SET @TableExists = 1 ' +
				' SELECT a.Id, Name, ' + CASE WHEN @ServiceID = 2 THEN ' empcode ' else ' code ' end + ' AS Code, b.Price ' +
				' FROM dbo.' + RTRIM(@MasterTable) + ' a ' +
				' LEFT JOIN dbo.OP_P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + @PriceTable + ' B ON A.ID = B.ID ' +
				' WHERE A.deleted = 0 ' + CASE WHEN @DepartmentID > 0 THEN ' AND A.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentID))) ELSE '' END +
				' ORDER BY a.code ' +
				' END '

	EXEC sp_executesql @SQL, N'@TableExists BIT OUT', @TableExists = @TableExists OUT
END









GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCSNEW]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





---[ITADMIN].[Tariff_IP_SearchItem_SCSNEW]4,2,''
---SELECT * FROM dbo.IPBservice
CREATE PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCSNEW] --20,1,'a'
	@ServiceID INT = 6 ,
	@SearchByCode int = 1 ,
	@SearchText VARCHAR(100) = 'fmder'
AS
BEGIN
	SET NOCOUNT ON;

	--	if NOT EXISTS (select * from dbo.TempItemCodetbl)
	--	BEGIN
	--			Create Table TempItemCodetbl( 
	--				  ID int NULL,
	--				  Code varchar(250) NULL,
	--				  Name varchar(250) NULL,
	--			END
	--ELSE
	---SELECT * FROM dbo.IPBservice
	

	DECLARE @MasterTable VARCHAR(30), @SQL NVARCHAR(2000), @SearchBy VARCHAR(10),@srcbycode varchar(50),@srctext varchar(50)

		Select @srcbycode = @SearchByCode
		Select @srctext = @SearchText


	SELECT @MasterTable = MasterTable FROM dbo.IPBservice WHERE ID = @ServiceID	
	
	IF @ServiceID != 15
		BEGIN
			SET @SearchBy = CASE WHEN @srcbycode = 1 THEN ' Code ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''%' + @srctext + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END
	ELSE
		BEGIN
			SET @SearchBy = CASE WHEN @srcbycode = 1 THEN ' EmpCode ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, EmpCode AS Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''%' + @srctext + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END

		if  EXISTS (select * from dbo.TempItemCodetbl)
			BEGIN
			  Delete TempItemCodetbl
		
			end


		--	[ITADMIN].[Tariff_IP_SearchItem_SCSNEW] 20,1,'a' SELECT ID, Code, Name FROM dbo.Anaesthesia WHERE  Name  LIKE 'a%' AND DELETED = 0 ORDER BY  Name 

		print(@sql)
				  Insert into TempItemCodetbl
				  EXEC sp_executesql @sql 

			Delete TempGetItemNameReports 

			Insert into TempGetItemNameReports
			(ID,Code)
			select ID as id,Code + '-' + Name as Code from TempItemCodetbl
				


			select ID as id,Code + '-' + Name as name from TempItemCodetbl

					--Create Table TempGetItemNameReports( 
					--			  ID int NULL,
					--			  Code varchar(250)
					--			  )	

END



---Select * From Delete TempGetItemNameReports





	--Create Table TempGetItemNameReports( 
	--							  ID int NULL,
	--							  Code varchar(250)
	--							  )	

GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--SELECT ID, Code, Name FROM dbo.FoodItem WHERE ID = 3
--[ITADMIN].[Tariff_IP_SearchItem_SCS] 4,'28',''
CREATE PROCEDURE [ITADMIN].[Tariff_IP_SearchItem_SCS] -- 4,'28',''
	@ServiceID INT,
	@SearchByCode varchar,
	@SearchText VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

	--if NOT EXISTS (select * from dbo.TempItemCodetbl)
	--	BEGIN
	--			Create Table TempItemCodetbl( 
	--				  ID int NULL,
	--				  Code varchar(250) NULL,
	--				  Name varchar(250) NULL,
	--				  StartDate datetime NULL 
	--				 )	
	--			END
	--ELSE

	DECLARE @MasterTable VARCHAR(30), @SQL NVARCHAR(2000), @SearchBy VARCHAR(10)

	SELECT @MasterTable = MasterTable FROM dbo.IPBservice WHERE ID = @ServiceID	 and deleted = 0

	---select * FROM dbo.IPBservice
	
	IF @ServiceID != 15
		BEGIN
		---	SET @SearchBy = CASE WHEN @SearchByCode = 1 THEN ' Code ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, Code, Name FROM dbo.' + @MasterTable + ' WHERE ID = ' + convert(varchar(max),@SearchByCode)
		END
	ELSE
		BEGIN
		---	SET @SearchBy = CASE WHEN @SearchByCode = 1 THEN ' EmpCode ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, Code, Name FROM dbo.' + @MasterTable + ' WHERE ID = ' + convert(varchar(max),@SearchByCode)
		END

	print  @sql  

		--if EXISTS (select * from TempItemCodetbl)
		--BEGIN
		--		Delete TempItemCodetbl
		--	    Insert into TempItemCodetbl
		--		EXEC sp_executesql @sql 
		--		END
   

		--		select ID as id,Code + '-' + Name as name from TempItemCodetbl

END
---drop table TempItemCodetbl


---select * FROM dbo.TempItemCodetbl where deleted = 0







GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SearchItem]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Tariff_IP_SearchItem]
	@ServiceID INT,
	@SearchByCode BIT,
	@SearchText VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @MasterTable VARCHAR(30), @SQL NVARCHAR(2000), @SearchBy VARCHAR(10)

	SELECT @MasterTable = MasterTable FROM dbo.IPBservice WHERE ID = @ServiceID	
	
	IF @ServiceID != 15
		BEGIN
			SET @SearchBy = CASE WHEN @SearchByCode = 1 THEN ' Code ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''' + @SearchText + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END
	ELSE
		BEGIN
			SET @SearchBy = CASE WHEN @SearchByCode = 1 THEN ' EmpCode ' ELSE ' Name ' END
			SET @SQL = N'SELECT ID, EmpCode AS Code, Name FROM dbo.' + @MasterTable + ' WHERE ' + @SearchBy + ' LIKE ''' + @SearchText + '%'' AND DELETED = 0 ORDER BY ' + @SearchBy
		END

	EXEC sp_executesql @sql 

END











GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_SaveItemPrice]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_IP_SaveItemPrice]
	@By INT,
	@TariffID INT,
	@ServiceID INT,
	@ItemID INT,
	@PriceList XML
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @NewPriceList TABLE (BedTypeID INT, NewPrice DECIMAL(10,2), NewEffectiveFrom DATETIME)
	DECLARE @BedTypeID INT, @SQL NVARCHAR(4000), @PriceType INT, @PriceTable VARCHAR(30), @NewPrice DECIMAL(10,2), @NewEffectiveFrom VARCHAR(50)

	SELECT @PriceTable = PriceTable FROM dbo.IPBservice WHERE ID = @ServiceID 
	
	INSERT @NewPriceList (BedTypeID, NewPrice, NewEffectiveFrom)
	SELECT 		
		BedTypeID = doc.col.value('BedTypeID[1]', 'INT'),
		NewPrice = doc.col.value('Price[1]', 'DECIMAL(10,2)'),
		NewEffectiveFrom = doc.col.value('EffectiveFrom[1]', 'VARCHAR(50)')
	FROM @PriceList.nodes('/DocumentElement/pricelist') doc(col)

	SET XACT_ABORT ON;
	BEGIN TRY
	BEGIN TRAN
	SELECT @BedTypeID = MIN(BedTypeID) FROM @NewPriceList
	WHILE @BedTypeID IS NOT NULL
		BEGIN
			SELECT @NewPrice = NewPrice, @NewEffectiveFrom = NewEffectiveFrom FROM @NewPriceList WHERE BedTypeID = @BedTypeID
			
			SET @SQL = N' IF EXISTS(SELECT 1 FROM dbo.P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable + ' WHERE ID = ' + LTRIM(RTRIM(STR(@ItemID))) + ')' +
						' BEGIN ' + 
						'	UPDATE dbo.P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable + 
						'		SET Price = ' + LTRIM(RTRIM(STR(@NewPrice))) + ', StartDateTime = ''' + @NewEffectiveFrom  + ''', OperatorID = ' + LTRIM(RTRIM(STR(@By))) + 
						'       OUTPUT DELETED.ID, DELETED.Price, DELETED.StartDateTime, DELETED.EndDateTime, DELETED.Deleted, DELETED.OperatorId ' +
						'		INTO dbo.OldP_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable +  ' (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId) ' +
						'	WHERE ID = ' + LTRIM(RTRIM(STR(@ItemID))) +
						' END ' +
						' ELSE ' +
						' BEGIN ' +
						'	INSERT INTO dbo.P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable +  
						'		   (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId) ' +
						'   VALUES (' + LTRIM(RTRIM(STR(@ItemID))) + ', ' + LTRIM(RTRIM(STR(@NewPrice))) + ', ''' + @NewEffectiveFrom + ''', NULL, 0, ' + LTRIM(RTRIM(STR(@By))) + ') ' +
						' END '
			print @sql
			EXEC sp_executesql @SQL
			SELECT @BedTypeID = MIN(BedTypeID) FROM @NewPriceList WHERE BedTypeID > @BedTypeID
		END
	COMMIT TRAN
	END TRY
	BEGIN CATCH
		DECLARE @ErrMsg NVARCHAR(2048)
		SELECT @ErrMsg = 'Error No ' + CONVERT(VARCHAR(50), ERROR_NUMBER()) + ': ' + ERROR_MESSAGE()

		IF XACT_STATE() = -1 OR XACT_STATE() = 1
			ROLLBACK TRANSACTION;
		
		RAISERROR(@ErrMsg, 16, 1); 
	END CATCH	
	SET XACT_ABORT OFF;	
END







GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_RevisedByPercent]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_IP_RevisedByPercent]
	@TariffID INT,
	@ServiceID INT,
	@By INT,
	@StartDate DATETIME,
	@Percent DECIMAL(8,2),
	@RowsAffected INT OUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PriceTable VARCHAR(30), @BedTypeID INT, @SQL NVARCHAR(4000), @PriceType INT

	SELECT @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBService where ID = @ServiceID

	IF @PriceType != 3
		BEGIN
			SELECT @BedTypeID = MIN(ID) FROM dbo.BedType WHERE DELETED = 0
			WHILE @BedTypeID IS NOT NULL
				BEGIN
					SET @SQL = N' UPDATE dbo.P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable + 
								' SET Price = ROUND(Price + (Price * (' + LTRIM(RTRIM(STR(@Percent))) + ')/100.00), 0), StartDateTime = ''' + convert(varchar(10), @StartDate, 101) + ''', OperatorID = ' + LTRIM(RTRIM(STR(@By))) +
								' OUTPUT DELETED.ID, DELETED.Price, DELETED.StartDateTime, DELETED.EndDateTime, DELETED.Deleted, DELETED.OperatorId ' +
								' INTO dbo.OldP_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(STR(@BedTypeID))) + '_' + @PriceTable +  ' (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId) ' 

					EXECUTE sp_executesql @SQL

					SET @RowsAffected = @RowsAffected + @@ROWCOUNT
					SELECT @BedTypeID = MIN(ID) FROM dbo.BedType WHERE DELETED = 0 AND ID > @BedTypeID
				END	
		END
	
END








GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_NewItemPrice_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
CREATE PROCEDURE [ITADMIN].[Tariff_IP_NewItemPrice_SCS] ---1,20,85

AS
BEGIN
	
			Select 1 selected,name,'0.00' as Price,Getdate() as startdatetime,id as BedTypeId From dbo.BedType where deleted = 0
			order by BedTypeId asc

END
--select * from Tariff
--select * from Anesthisia
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
---[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 10,20,NULL,'',''
----[ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] 1,20,85
CREATE PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice_SCS] -- 1,13,1457
	@TariffID INT = 1,
	@ServiceID INT = 13 ,
	@ItemId INT = 2343
AS
BEGIN

	DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
	, @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID
	---SELECT @ItemCode = '', @ItemName = ''
	

---Create Temp file name
			Create Table #TempFilesName( 
					  id int identity (1,1),
					  Name varchar(250) NULL,
					  BedTypeId int
					 )	

	Select @PriceTable = PriceTable from dbo.IPBService where Id = @ServiceID 

		Select id,name into #TempBedType
		from dbo.BedType where deleted = 0

		Declare @TempBedId as int

	WHILE exists(select top 1 * from #TempBedType)
					BEGIN
						SELECT top 1 @TempBedId = id from #TempBedType

						SET @filename = 'P_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
				
						
						insert into #TempFilesName (Name,BedTypeId) values(@filename,@TempBedId);
						

						delete #TempBedType where id = @TempBedId
				END
	
	if exists(select * from sys.tables where name = 'TempEmptyIPPriceView')
		BEGIN 
			drop table TempEmptyIPPriceView
		END

	Create Table TempEmptyIPPriceView( 
					  ID int NULL,
					  Price numeric NULL,
					  Deleted bit NULL, 
					  StartDateTime datetime NULL,
					  EndDateTime datetime NULL,
					  OperatorID int NULL,
					  BedTypeId int NULL
					 )
	Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int

	---select * from BedType where deleted = 0
	WHILE exists(select top 1 * from #TempFilesName)
				BEGIN
							SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId from #TempFilesName
						
							set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
											   ' BEGIN ' +
												--delete DUPLICATE
												 ' with Dups As(select ROW_NUMBER() OVER(PARTITION By id  order by (select 0)) as rn,* ' +
												 ' from '+ cast(@TempFiles as varchar) + ' where deleted = 0    )  ' +
												 ' delete from dups where rn > 1  ' +

											   ' INSERT INTO TempEmptyIPPriceView ' +
											   ' Select distinct *,'+ cast(@ctrBedId as varchar) + ' from ' + cast(@TempFiles as varchar) + 
											   ' where deleted = 0 ' +
											   ' and Id = ' +  cast(@ItemId as varchar) +
												' END '	
												print(@SQL)								  
						  EXEC sp_executesql @SQL 
				---	Select id as ID,name as BedTypeName,'0.00' as Price,startdatetime From BEdType where deleted = 0 
					Delete  #TempFilesName where id = @FileId
				END

			IF EXISTS (Select * from TempEmptyIPPriceView)
				BEGIN

				Declare @TariffName as  varchar(250),@ServiceName as varchar(250)
				
				Select @TariffName = Name from Tariff where deleted = 0 and Id = @TariffId

				Select @ServiceName = ServiceName from IPBService where deleted = 0 and ID = @ServiceID  

				Delete TempGetIPPriceReports

				Insert into TempGetIPPriceReports
				(BedName,Price,StartDateTime,BedTypeId,ID,TariffName,ServiceName)
	      Select b.name as BedName,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId,@TariffName,@ServiceName
			    from TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc




				Select b.name,convert(decimal(10,2),a.Price) as Price,a.StartDateTime,a.BedTypeId,a.ID as ItemId from TempEmptyIPPriceView a 
				LEFT JOIN dbo.BedType b on b.id =  a.BedTypeId
				order by a.BedTypeId asc
				END
				
				ELSE
Select name,'No Price' as Price,Getdate() as startdatetime,Id as BedTypeId,0,0 ItemId From dbo.BedType where deleted = 0


			 drop table #TempBedType
			 drop table #TempFilesName
			 drop table TempEmptyIPPriceView


END


GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_GetItemCodePrice]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
declare @Code varchar(50), @Name varchar(100)
exec ITADMIN.Tariff_IP_GetItemCodePrice 1, 15, null, @Code out, @Name out
select @code, @name
*/
CREATE PROCEDURE [ITADMIN].[Tariff_IP_GetItemCodePrice]--10,20,NULL,'',''
	@TariffID INT,
	@ServiceID INT,
	@ItemID INT = NULL OUT,
	@ItemCode VARCHAR(250) = '' OUT ,
	@ItemName VARCHAR(250) = '' OUT,
	@NextItem BIT = 1
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30), @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT

	SELECT @MasterTable = MasterTable, @PriceTable = PriceTable, @PriceType = PriceType FROM dbo.IPBservice WHERE ID = @ServiceID
	SELECT @ItemCode = '', @ItemName = ''

	IF @ItemID IS NULL
		BEGIN
			SET @SQL = N'SELECT @ItemID = MIN(ID) FROM dbo.' + @MasterTable + ' WHERE DELETED = 0'
			execute sp_executesql @sql, N'@ItemID INT OUT', @ItemID = @ItemID OUT
		END	
	ELSE IF @NextItem = 1
		BEGIN
			SET @SQL = N'SELECT TOP 1 @NewItemID = MIN(ID) FROM dbo.' + @MasterTable + ' WHERE ID > ' + LTRIM(RTRIM(STR(@ItemID))) + ' AND DELETED = 0'
			EXECUTE sp_executesql @sql, N'@NewItemID INT OUT', @NewItemID = @NewItemID OUT
			SET @ItemID = COALESCE(@NewItemID, @ItemID)
		END
	ELSE
		BEGIN
			SET @SQL = N'SELECT TOP 1 @NewItemID = MAX(ID) FROM dbo.' + @MasterTable + ' WHERE ID < ' + LTRIM(RTRIM(STR(@ItemID))) + ' AND DELETED = 0'
			EXECUTE sp_executesql @sql, N'@NewItemID INT OUT', @NewItemID = @NewItemID OUT
			SET @ItemID = COALESCE(@NewItemID, @ItemID)
		END

	EXEC ITADMIN.Tariff_IP_CheckIfTableExists @TariffID, @ServiceID, @PriceType, @PriceTable

	IF @PriceType != 3
		BEGIN
			IF @ServiceID != 15
				SET @SQL = N'SELECT @ItemCode = Code, @ItemName = Name FROM dbo.' + @MasterTable + ' WHERE ID = ' + LTRIM(RTRIM(STR(@ItemID)))
			ELSE
				SET @SQL = N'SELECT @ItemCode = EmpCode, @ItemName = Name FROM dbo.' + @MasterTable + ' WHERE ID = ' + LTRIM(RTRIM(STR(@ItemID)))

			EXEC sp_executesql @sql, N'@ItemCode VARCHAR(50) OUT, @ItemName VARCHAR(100) OUT', @ItemCode = @ItemCode OUT, @ItemName = @ItemName OUT		

			SET @SQL = ''
	   
			SELECT @BedTypeID = MIN(id) FROM dbo.BedType a WHERE a.deleted = 0  
  
			WHILE @BedTypeID IS NOT NULL  
			BEGIN  
				SET @sql = @sql + 'select ' + convert(VARCHAR, @BedTypeID) + ' as BedTypeID, price, startdatetime from dbo.P_' + convert(VARCHAR, @tariffid) + '_' + convert(VARCHAR, @bedtypeid) + '_' + @PriceTable + ' where id = ' + convert(VARCHAR, @itemid) + ' union all '  
  
				SELECT @BedTypeID = MIN(id)  
				FROM dbo.BedType a  
				WHERE a.deleted = 0  
				AND id > @BedTypeID  
			END  

			SET @sql = left(@sql, len(@sql) - 10) 

			SET @sql = 'select a.id, a.name, isnull(b.price, 0) as Price, b.startdatetime
						 from dbo.BedType a  
						 left join   
						 (  
						  ' + @sql + '  
						 ) b on a.ID = b.bedtypeid   
						 where a.deleted = 0'  
  
			EXEC sp_executesql @sql
		END
	ELSE
		BEGIN
			SET @SQL = N' SELECT A.BedTypeID as ID, label + '' - '' + B.Name as Name, COALESCE(A.Price, 0) AS Price, A.StartDateTime ' +
						' FROM dbo.P_' + @PriceTable + ' A ' +
						' INNER JOIN dbo.BedType B ON A.BedTypeID = B.ID ' +
						' WHERE A.CategoryID = 1 AND A.Deleted = 0 AND B.deleted = 0 ' +
						' ORDER BY B.ID'
			EXEC sp_executesql @sql
		END
		
END









GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_IP_CheckIfTableExists]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--Select * From IPBservice
CREATE PROCEDURE [ITADMIN].[Tariff_IP_CheckIfTableExists] --10,20,2,Anaesthesia
	@TariffID INT,
	@ServiceID INT,
	@PriceType INT,
	@PriceTable VARCHAR(30)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT

	IF @PriceType != 3 
		BEGIN
			SELECT @BedTypeID = MIN(ID) FROM dbo.BedType WHERE DELETED = 0
			WHILE @BedTypeID IS NOT NULL
				BEGIN
					SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM SYS.objects WHERE Name = ''P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(@BedTypeID)) + '_' + @PriceTable + ''' AND Type = ''U'') ' +
								' BEGIN '+
								' CREATE TABLE [dbo].[P_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(@BedTypeID)) + '_' + @PriceTable + '] (
									[ID] [int] NOT NULL,
									[Price] [numeric](10, 2) NOT NULL,
									[Deleted] [bit] NOT NULL,
									[StartDateTime] [datetime] NOT NULL,
									[EndDateTime] [datetime] NULL,
									[OperatorID] [int] NOT NULL
									) ON [TariffFile] ' +
								' END '
				
					EXEC sp_executesql @SQL

					SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM SYS.objects WHERE Name = ''OldP_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(@BedTypeID)) + '_' + @PriceTable + ''' AND Type = ''U'') ' +
								' BEGIN '+
								' CREATE TABLE [dbo].[OldP_' + LTRIM(RTRIM(STR(@TariffID))) + '_' + LTRIM(RTRIM(@BedTypeID)) + '_' + @PriceTable + '] (
									[ID] [int] NOT NULL,
									[Price] [numeric](10, 2) NOT NULL,
									[Deleted] [bit] NOT NULL,
									[StartDateTime] [datetime] NOT NULL,
									[EndDateTime] [datetime] NULL,
									[OperatorID] [int] NOT NULL
									) ON [TariffFile] ' +
								' END '
			print @SQL
					EXEC sp_executesql @SQL

					SELECT @BedTypeID = MIN(ID) FROM dbo.BedType WHERE DELETED = 0 AND ID > @BedTypeID
				END
		END
	ELSE
		BEGIN
			SET @SQL = N' IF NOT EXISTS(SELECT 1 FROM sys.objects WHERE Name = ''P_' + @PriceTable + ''' AND Type = ''U'') ' +
						' BEGIN ' +
						' CREATE TABLE [dbo].[P_' + @PriceTable + '](
							[CategoryID] [int] NOT NULL,
							[BedTypeID] [int] NOT NULL,
							[Price] [decimal](10, 2) NOT NULL,
							[Deleted] [bit] NOT NULL,
							[StartDateTime] [datetime] NOT NULL,
							[EndDateTime] [datetime] NULL,
							[OperatorID] [int] NOT NULL
						) ON [MasterFile] ' +
						' END '
			print @SQL
			EXEC sp_executesql @SQL

		END

END







GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_GetAllServices]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Tariff_GetAllServices]
	@IsIP BIT = 1
AS
BEGIN
	SET NOCOUNT ON;

	IF @IsIP = 1 
		BEGIN
			SELECT A.ID, A.ServiceName 
			FROM dbo.IPBservice a
			WHERE A.Deleted = 0
				AND A.OrderType <> 5
				AND A.PriceType <> 1
				AND A.PriceType <> 0
			ORDER BY A.ServiceName
		END
	ELSE
		BEGIN
			SELECT A.ID, UPPER(A.mastertable) AS ServiceName
			FROM dbo.OPBService A
			WHERE A.Deleted = 0
				AND A.DisplayServiceId NOT IN (10,11,4)
			ORDER BY A.MasterTable
		END
END








GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_Services_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Tariff_Get_Services_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

SELECT     Id as id, MasterTable AS name
FROM         OPBService
WHERE     (Deleted = 0) AND (DisplayServiceId NOT IN (10, 11, 4))
ORDER BY Id

END





GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_IPServices_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_Get_IPServices_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

--Select 
--ID as id
--,ServiceName as name
-- from IPbService Where Deleted=0 Order By ServiceName

 	SELECT A.ID AS id, A.ServiceName  as name
			FROM dbo.IPBservice a
			WHERE A.Deleted = 0
				AND A.OrderType <> 5
				AND A.PriceType <> 1
				AND A.PriceType <> 0
			ORDER BY A.ServiceName

END
GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_All_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_Get_All_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT A.ID as id, A.name 
	FROM dbo.Tariff a
	WHERE a.Deleted = 0
	ORDER BY A.Name 
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_Get_All]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Tariff_Get_All]	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT A.ID, A.Name
	FROM dbo.Tariff a
	WHERE a.Deleted = 0
	ORDER BY A.Name 
END






GO

/****** Object:  StoredProcedure [ITADMIN].[Tariff_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Tariff_DashBoard_SCS]-- 0

AS

BEGIN

		Select Name,Id
		from  Tariff where deleted = 0 


END





GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySelected_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[SurgerySelected_View_SCS]-- 0
@Id as int
AS

BEGIN

		SELECT deptid as Id,b.Name
		from Surgerystation a
		INNER JOIN Department b on b.ID = a.DeptId
		where surgeryid=@Id --2182


END
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgerySave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[SurgerySave_SCS]
	
    @ErrorMessage				    as NVARCHAR(max) OUT,
    @xmlSurgerySaveHeader			as xml,
	@xmlSurgeryDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlSurgerySaveHeader
SELECT 
Action
,SurgeryId
,DepartmentId
,SurgeryTypeId
,SurgeryName
,Code
,CostPrice
,Instructions
,OperatorId

into #tmpSurgerySaveHeader


from openxml(@handle, '/DocumentElement/SurgerySaveHeader',2) with
(
Action int
,SurgeryId int
,DepartmentId int
,SurgeryTypeId int
,SurgeryName varchar(250)
,Code varchar(250)
,CostPrice decimal
,Instructions varchar(250)
,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlSurgeryDetailsSave

select surgerysationId
into #tmpSurgeryDetailsSave

from openxml(@handle, '/DocumentElement/SurgeryDetailsSave',2) with
(
surgerysationId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DepartmentId as int
declare @SurgeryId as int
declare @MaxID as int
declare @surgerysationId as int

SELECT @Action = Action,@OperatorId = OperatorId,@DepartmentId = DepartmentId,@SurgeryId = SurgeryId
from   #tmpSurgerySaveHeader	

Select @surgerysationId = surgerysationId from #tmpSurgeryDetailsSave


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
						
					

						IF exists(select * from surgery a
										   Left join surgerystation b on b.SurgeryId = a.ID and b.DeptId = a.DepartmentID
										   where b.SurgeryId =@SurgeryId and b.DeptId in ( select surgerysationId from #tmpSurgeryDetailsSave))
							begin
						COMMIT TRAN
						SET       @ErrorMessage = 'Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
						end

		
						INSERT INTO surgery
										(Name,Code,CostPrice,StartDateTime,Instructions,Deleted,package,OperatorID,DepartmentID,ArabicName,ArabicCode,SurgeryType)
								SELECT	SurgeryName,Code,CostPrice,GETDATE(),Instructions,0,0,OperatorId,DepartmentId,'','',SurgeryTypeId
						from #tmpSurgerySaveHeader


						Select @MaxID = max(id) from Surgery

						Insert into surgerystation(SurgeryId,DeptId)
										Select  @MaxID,surgerysationId
										FROM #tmpSurgeryDetailsSave
						
							---select * from surgerystation
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	
			
    BEGIN TRY 
				
        BEGIN TRAN
					
					--IF exists(select * from Surgerystation where surgeryid =@SurgeryId and DeptId in (select surgerysationId from #tmpSurgeryDetailsSave ))
					--	begin
					--COMMIT TRAN
					--SET       @ErrorMessage = 'Already Exists!'
					--SET @ERROR_SEVERITY = ERROR_SEVERITY()
					--SET @ERROR_STATE = ERROR_STATE()
					--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
					--return;
					--end
					
					UPDATE a
					SET a.Name = b.SurgeryName
						,a.ArabicName = '"'
						,a.ArabicCode = b.Code
						,a.Costprice = b.Costprice
						,a.Instructions = b.Instructions
						,a.Modifieddatetime = GetDate()	
						,a.Modifiedby = @OperatorId
						,a.Code = b.Code
						,a.DepartmentID = b.DepartmentId
					from Surgery a
					INNER JOIN #tmpSurgerySaveHeader b
					ON b.SurgeryId = a.Id
					WHERE a.Id = @SurgeryId


					delete from surgerystation where SurgeryId = @SurgeryId
						Insert into surgerystation(SurgeryId,DeptId)
										Select  @SurgeryId,surgerysationId
										FROM #tmpSurgeryDetailsSave
							
							--SELECT * from SP_HElp SurgeryStation
	--changes made multiple insert jfj 10-28-2017
					--UPDATE a
					--SET  a.DeptId = @surgerysationId
					--from dbo.SurgeryStation a
					--where a.SurgeryId = @SurgeryId

 

					

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		Update Surgery set  deleted=1,modifiedby=@OperatorId,enddatetime=getdate()  where ID =@SurgeryId
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpSurgerySaveHeader
drop table #tmpSurgeryDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  





GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryListed_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROCEDURE [ITADMIN].[SurgeryListed_View_SCS]-- 0

AS

BEGIN

			--SELECT   ID AS Id, Name
			--FROM      SurgeryDept
			--WHERE     (Deleted = 0)
			--ORDER BY Name
			---change to department jfj 10-28-2017
			SELECT   ID AS Id, Name
			FROM      Department
			WHERE     (Deleted = 0)
			ORDER BY Name


END
 
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryHeader_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[SurgeryHeader_View_SCS] --3965-- 2182-- 0
@Id as int
AS

BEGIN

		SELECT     a.ID as Id
				  ,a.Name
				  ,a.Code
				  ,a.DepartmentID
				  ,b.Name as DepartmentName
				  ,a.SurgeryType
				  ,(Case when SurgeryType =  1  Then 'Major'
						 when SurgeryType  = 2 then  'Moderate'
						 when SurgeryType =  3 then  'Minor' END) as SurgeryName
				  ,a.package
				  ,a.CostPrice
				  ,a.Instructions	
		FROM       Surgery a
		LEFT JOIN Department b on b.ID = a.DepartmentID
		WHERE     (a.ID = @Id) and a.Deleted = 0


END
GO

/****** Object:  StoredProcedure [ITADMIN].[SurgeryDetailsView_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[SurgeryDetailsView_SCS]-- 0
@Id as int
AS

BEGIN
 
		SELECT isnull(deptid,' ') as Id,isnull(b.Name,' ') as Name
		from Surgerystation a
		INNER JOIN Department b on b.ID = a.DeptId
		where surgeryid=@Id


END
GO

/****** Object:  StoredProcedure [ITADMIN].[SubStore_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[SubStore_View_SCS] 138
CREATE PROCEDURE [ITADMIN].[SubStore_View_SCS] --2
@Id as int
AS


BEGIN
		

		SELECT     Stores as selected,Name,ID as Id
		FROM         dbo.Station
		WHERE     (Deleted = 0) AND (ID <> @Id) AND stores = 0 AND (ID NOT IN
                  (SELECT  parentid
                  FROM     SubStores
                  WHERE     (id = @Id)))

END
GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[StationType_View_SCS] --1--1-- 0
@Id as int
AS

BEGIN



		SELECT Name, ID as Id,replace(CONVERT(VARCHAR(11),StartDateTime,106),' ','-') as StartDateTime
			,CONVERT(VARCHAR(8), StartDateTime, 108) as StartTime,replace(CONVERT(VARCHAR(11),GETDATE(),106),' ','-') as DateToday, CONVERT(VARCHAR(8), GETDATE(), 108) as  TimeToday
		FROM      dbo.StationType
				where Id = @Id 
						
			Union  all
				Select '' as Name,0 Id,' ' StartDateTime,' ' StartTime,replace(CONVERT(VARCHAR(11),GETDATE(),106),' ','-') as DateToday, CONVERT(VARCHAR(8), GETDATE(), 108) as  TimeToday
		
		

END





GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[StationType_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlStationTypeSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlStationTypeSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpStationTypeSave

from openxml(@handle, '/DocumentElement/StationTypeSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpStationTypeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from StationType where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'StationType Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into StationType(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@Name),'"',Getdate(),0,@OperatorId
				from #tmpStationTypeSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus

				Update  StationType set Name =upper(@Name),ModifiedBy = @OperatorId,ModifiedDateTime = Getdate()			
				where Id =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		Update StationType set deleted =1,ModifiedDateTime=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpStationTypeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[StationType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[StationType_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 
		
			SELECT      Name,ID as Id
			FROM       StationType
			WHERE     (Deleted = 0)
			ORDER BY Name
END






GO

/****** Object:  StoredProcedure [ITADMIN].[StationDetails_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[StationDetails_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlStationDetailsSave       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlStationDetailsSave
SELECT 
Action
,StationId
,Name
,Location
,StationTypeId
,DepartmentId
,LocationId
,Prefix
,Code
,IndentLevel
,OperatorId
into #tmpStationSave

 --Insert into Station(ID,name,ArabicName,location,stationtypeid,startdatetime,deleted,departmentid,operatorid,LocationId,Prefix, Code,IndentLevel)  
 --values(239,'aaaa',N'"','bbbbb',4,'9/25/2016 1:17:09 PM',0,4,1412,6,'dddd', 'cccc',0)


 --update station set name= 'aaaa',Arabicname= '"',location='bbbbb',stationtypeid=4,startdatetime='9/25/2016 1:17:25 PM',departmentid=4,modifieddatetime=getdate()
-- ,modifiedby=1412,LocationId=6,Prefix= 'dddd', Code ='cccc', IndentLevel=1  where  id = 239

from openxml(@handle, '/DocumentElement/StationDetailsSave',2) with
(
Action int
,StationId int
,Name varchar(250)
,Location varchar(250)
,StationTypeId int
,DepartmentId int
,LocationId int
,Prefix varchar(150)
,Code varchar(150)
,IndentLevel int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int
declare @MaxID as int
declare @StationId as int

Declare @Location as varchar(250)
Declare @StationTypeId as int
Declare @DepartmentId as int 
Declare @LocationId as int
declare @Prefix as varchar(250)
declare @Code as varchar(250)
declare @InDentLevel as int


select @Action = Action,@StationId = StationId,@Name  = Name,@Location = Location,@StationTypeId = StationTypeId,@DepartmentId = DepartmentId,@LocationId = LocationId
		,@Prefix = Prefix,@Code = Code, @InDentLevel = IndentLevel,@OperatorId = OperatorId
from   #tmpStationSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from dbo.Station where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Station Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

			SELECT @MaxID =  MAX(ID) + 1  FROM  dbo.STATION

			Insert into dbo.Station(ID,name,ArabicName,location,stationtypeid,startdatetime,deleted,departmentid,operatorid,LocationId,Prefix,Code,IndentLevel)  
				--values(239,'aaaa',N'"','bbbbb',4,'9/25/2016 1:17:09 PM',0,4,1412,6,'dddd', 'cccc',0)
			Select @MaxID,Name,'"',Location,StationTypeId,GETDATE(),0,DepartmentId,OperatorId,LocationId,Prefix,Code,IndentLevel
				   from #tmpStationSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
							---select * from update a set StationTypeId = 11 from Station a where a.ID = 240
			
				Update dbo.station set name= @Name,Arabicname= '"',location=@Location,stationtypeid=@StationTypeId,startdatetime=Getdate()
				,DepartmentId=@DepartmentId,modifieddatetime=getdate(),modifiedby = @OperatorId,LocationId= @LocationId,Prefix= @Prefix
				,Code = @Code,IndentLevel = @InDentLevel
				where Id = @StationId
				-- ,modifiedby=1412,LocationId=6,Prefix= 'dddd', Code ='cccc', IndentLevel=1  where  id = 239
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		update dbo.station set enddatetime=getdate(),modifiedby=@OperatorId,deleted =1 where  id = @StationId 


        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpStationSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--select * From Station
GO

/****** Object:  StoredProcedure [ITADMIN].[Station_View]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 --  [ITADMIN].[Station_View] 239
CREATE PROCEDURE [ITADMIN].[Station_View]-- 0
@Id as int
AS

BEGIN
		 
		
			SELECT DISTINCT row_number() over(order by a.Name) AS slno
			,a.Name
			,a.Location
			,c.Name AS LocationName
			,b.Name as StationTypeName
			,e.Name as DepartmentName
			,a.Prefix
			,isnull(a.Code,' ') as Code
			,convert(varchar(11),a.StartDateTime,9) as StartDate
			,CONVERT(varchar, a.StartDateTime, 108) as StartTime
			,a.ID as StationId
			,a.LocationId
			,a.StationTypeID
			,a.DepartmentId
			,a.IndentLevel
			,a.ORA_CODE
			FROM        dbo.Station AS a 
						INNER JOIN StationType AS b ON a.StationTypeID = b.Id 
						INNER JOIN Location AS c ON a.LocationId = c.ID
						INNER JOIN Department as e on e.ID = a.DepartmentId
			WHERE     (a.Deleted = 0)  and a.Id = @Id
			ORDER BY a.Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[Station]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Station]-- 0

AS

BEGIN
		 
		
			SELECT DISTINCT row_number() over(order by a.StartDateTime desc) AS slno,a.Name, a.Location, c.Name AS LocationName,a.ID,a.StartDateTime
			FROM        dbo.Station AS a 
						INNER JOIN StationType AS b ON a.StationTypeID = b.Id 
						INNER JOIN Location AS c ON a.LocationId = c.ID
			WHERE     (a.Deleted = 0) order by a.StartDateTime desc

END


GO

/****** Object:  StoredProcedure [ITADMIN].[SelectedNonDiscountableItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
---[ITADMIN].[SelectedNonDiscountableItem_DashBoard_SCS] 18 -- 3,2,5,7,11,14,18   
CREATE PROCEDURE [ITADMIN].[SelectedNonDiscountableItem_DashBoard_SCS]
@ServiceId as int
AS

BEGIN
SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT
	Declare @MasterTable as Varchar(250) 



	 IF (@ServiceId = 11)
			 BEGIN
					
					Select @MasterTable = MasterTable from OpBService where id=@ServiceId

									SET @SQL = 'Select ItemCode + ' + ''' - ''' + ' + Name as Items,Id  from dbo.' + @MasterTable + 'a ' + N'
									LEFT JOIN OPNonDiscountableItems b on b.ItemId = a.Id where b.ServiceId = ' + LTRIM(RTRIM(STR(@ServiceId)))	
									--Print  @SQL     			             
					EXEC sp_executesql @SQL

			 END


	ELSE IF (@ServiceId != 2)
			BEGIN
				 ---Select  MasterTable from OpBService where id=3 
					Select @MasterTable = MasterTable from OpBService where id=@ServiceId

					SET @SQL = 'Select a.Code  + ' + ''' - ''' + ' + a.Name as Items, a.Id  from dbo.' + @MasterTable + 'a ' + N'
					LEFT JOIN OPNonDiscountableItems b on b.ItemId = a.Id where b.ServiceId = ' + LTRIM(RTRIM(STR(@ServiceId)))
			      -- Print  @SQL                     
				  EXEC sp_executesql @SQL
			END

			   ELSE 

					 BEGIN
							Select @MasterTable = MasterTable from OpBService where id=@ServiceId


							SET @SQL = 'Select EmpCode + ' + ''' - ''' + ' + Name as Items,Id  from dbo.' + @MasterTable + 'a ' + N'
							LEFT JOIN OPNonDiscountableItems b on b.ItemId = a.Id where b.ServiceId = ' + LTRIM(RTRIM(STR(@ServiceId)))	
								-- Print  @SQL                  
							EXEC sp_executesql @SQL
					 END

END    
---Select ItemCode + ' - ' + Name as Items,Id  from item  
--Select MasterTable,Id,ServiceCode from OpBService where id=11
--Select id,Name from OpBService where Deleted=0
--Select MasterTable,Id,ServiceCode from OpBService where id=2          

--select * from item                                                                    

 ----select Id,Itemcode as code ,name from item     where categoryid =17 and Deleted=0   
 --Select MasterTable,Id,ServiceCode from OpBService where id=18
 ----select * from item                         
 
 --Select id,Name from OpBService where Deleted=0

    
 

GO

/****** Object:  StoredProcedure [ITADMIN].[Select2StationList_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[ReRoutingOrders_View_SCS] 81
CREATE PROCEDURE [ITADMIN].[Select2StationList_SCS] --81---26,2-- 0

AS
 
BEGIN
		 --SP_HELP Anaesthesia
		Select Id, Name from his.dbo.Station where Deleted = 0 Order by Name


		 --select * from ItemMarkUp where categoryid = 26 and type = 2

END

GO

/****** Object:  StoredProcedure [ITADMIN].[Select2Service_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2Service_SCS]-- 0
@ServiceId as int
AS


IF  (@ServiceId = 7) ---//Procedures

BEGIN

			SELECT     a.ID as id,Code + ' ' + Name AS name
			FROM      OtherProcedures AS a
			WHERE     (Deleted = 0)
			ORDER BY Code
	


END
	ELSE
		BEGIN
		---//Investigation
				SELECT     ID as id, Code + ' ' + Name AS name
				FROM       Test AS a
				WHERE     (Deleted = 0)
				ORDER BY Code


			
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup






GO

/****** Object:  StoredProcedure [ITADMIN].[Select2RecoveryRoomOtId_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
--[ITADMIN].[Select2RecoveryRoomOtId_View_SCS] 4
CREATE PROCEDURE [ITADMIN].[Select2RecoveryRoomOtId_View_SCS]-- 4--2-- 0
@OtId as int
AS

BEGIN
			

		SELECT     ISNULL(a.ItemCode, '') AS ItemCode,ISNULL(b.Name,' ') as DepartmentName,ISNULL(DepartmentID, 0) AS DepartmentId
		FROM         OTItemCodes a
		LEFT JOIN   Department b on b.ID = a.DepartmentID
		WHERE     (a.Deleted = 0) AND (a.Type = 2) AND (a.OTNO = @OtId)
			
END


GO

/****** Object:  StoredProcedure [ITADMIN].[Select2RecoveryRoomCharges_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Select2RecoveryRoomCharges_SCS]-- 0
@CategoryId as int
AS

BEGIN
			


			SELECT     row_number() over(order by b.Name) as SNo, b.Name AS OtNo,c.Percentage,b.ID AS OtId
			FROM         OTNo AS b 
					  LEFT OUTER JOIN P_Recovery AS c 
					  INNER JOIN Tariff AS a ON a.Id = c.CategoryID ON b.ID = c.OTID AND c.CategoryID = @CategoryId
			ORDER BY Otno
			
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup



GO

/****** Object:  StoredProcedure [ITADMIN].[Select2List_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[ReRoutingOrders_View_SCS] 81
Create PROCEDURE [ITADMIN].[Select2List_SCS] --81---26,2-- 0

AS
 
BEGIN
		 --SP_HELP Anaesthesia
		Select Id, Name from Station where Deleted = 0 Order by Name


		 --select * from ItemMarkUp where categoryid = 26 and type = 2

END

GO

/****** Object:  StoredProcedure [ITADMIN].[Select2ForcePatient_BedTransfer]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2ForcePatient_BedTransfer] --1002906 --95-- 2--22--22-- 2-- 0
@IPID as int
AS

BEGIN

			SELECT  familyname + ' ' + firstname + ' ' + middlename + ' ' + lastname  as PatientName
					,a.RegistrationNo,
					b.name CurrentBed,a.ipid
					FROM inpatient a 
					LEFT JOIN bed b on a.ipid = b.ipid 
					WHERE a.registrationno = @IPID

END


GO

/****** Object:  StoredProcedure [ITADMIN].[Select2EmployeeAuthoDiscount_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[Select2EmployeeAuthoDiscount_SCS]
@DiscountType as int
AS
BEGIN

if (@DiscountType=1) --NO ACCOUNT NUMBERS
begin

			SELECT 
				a.Id	 as id
				,a.Name as name
			from Opdiscount a where a.deleted=0
		

end
else if ( @DiscountType = 2)
	begin
			SELECT
			 a.Id as id
			,a.Name as name
		from discount  a where a.deleted=0
	END
	--	date format	
		-- Select STUFF(STUFF(CONVERT(char(20), getdate(), 113),3,1, '-'),7,1,'-')
--select REPLACE(REPLACE(CONVERT(VARCHAR,getdate(),106), ' ','-'), ',','')
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2DumpDiscountPrice_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[Select2DumpDiscountPrice_SCS]
@DiscountType as int
AS
BEGIN

if (@DiscountType=1) --NO ACCOUNT NUMBERS
begin
		SELECT
			 a.Id as id
			,a.Name as name
		from discount  a where a.deleted=0

end
else if ( @DiscountType = 2)
	begin
			SELECT 
				a.Id	 as id
				,a.Name as name
			from Opdiscount a where a.deleted=0
	END
	--	date format	
		-- Select STUFF(STUFF(CONVERT(char(20), getdate(), 113),3,1, '-'),7,1,'-')
--select REPLACE(REPLACE(CONVERT(VARCHAR,getdate(),106), ' ','-'), ',','')
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2DoctorCode_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2DoctorCode_SCS]-- 0
AS

BEGIN

SELECT     a.ID as id, a.EmpCode + '-' + ' ' + a.Name as name
FROM       Employee AS a 
		   INNER JOIN DoctorMarkUp AS b ON a.ID = b.DoctorId
WHERE     (a.Deleted = 0) 
ORDER BY a.EmpCode



END

GO

/****** Object:  StoredProcedure [ITADMIN].[Select2CashDiscountPrice_Class_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[Select2CashDiscountPrice_Class_SCS]
@CompanyId as int
AS
BEGIN


			SELECT     ID AS id,Name AS Name
			FROM       Grade
			WHERE     (CompanyID = @CompanyId) AND (Deleted = 0)
	--	date format	
		-- Select STUFF(STUFF(CONVERT(char(20), getdate(), 113),3,1, '-'),7,1,'-')
--select REPLACE(REPLACE(CONVERT(VARCHAR,getdate(),106), ' ','-'), ',','')
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2CashDiscountDeptWise_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--[ITADMIN].[Select2CashDiscountDeptWise_DashBoard_SCS] 1,5,1,1
CREATE PROCEDURE [ITADMIN].[Select2CashDiscountDeptWise_DashBoard_SCS]
@DiscountType as int,
@DiscountId as int,
@CompanyId as int,
@CategoryId as int

AS
BEGIN

if (@DiscountType=1) --NO ACCOUNT NUMBERS
begin

		SELECT DISTINCT ID as id, ServiceName AS name
		FROM         IPBService
		WHERE     (ID <> 14) AND (ID <> 22) AND (ID IN
								  (SELECT     ServiceID
									 FROM      IPCashServiceDiscount
									 WHERE     (DiscountID = @DiscountId) AND (CompanyID = @CompanyId) AND (CategoryID = @CategoryId)))
		
end
else if ( @DiscountType = 2)
	begin

							SELECT     Id, Name
							FROM         OPBService
							WHERE     (Id <> 10) AND (Id <> 13) AND (Id <> 12) AND (Id IN
							(SELECT     ServiceID
								FROM         OPCashServiceDiscount
								WHERE     (CompanyID = @CompanyId) AND (CategoryID = @CategoryId) AND (GradeID = @DiscountId)))

	END

	--	date format	
		-- Select STUFF(STUFF(CONVERT(char(20), getdate(), 113),3,1, '-'),7,1,'-')
--select REPLACE(REPLACE(CONVERT(VARCHAR,getdate(),106), ' ','-'), ',','')
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2AneschargeServices_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2AneschargeServices_SCS]-- 0
AS




BEGIN
			Select Id as id,code + '-' + Name as name  from Anaesthesia where  Deleted=0 and billingType = 2
			
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup






GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Sample_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Select2_Sample_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

SELECT  a.ID as id,a.Name as name from Sample a where a.Deleted = 0

END





GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_PinReleaseDrugOrder_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Select2_PinReleaseDrugOrder_SCS]	
AS
BEGIN
	SET NOCOUNT ON;
SELECT    O.ID as id, I.IssueAuthorityCode + '.' + RIGHT('0000000000' + CONVERT(varchar(10), O.stationslno), 10) + ' - ' + CONVERT(varchar, I.RegistrationNo) AS name
FROM         OTOrder AS O 
		INNER JOIN InPatient AS I ON O.IPIDOPID = I.IPID
WHERE     (O.PatientType = 1) AND (DATEDIFF(hour, O.OTStartDateTime, '01-Jan-2015') <= 24) AND (O.Released = 0)

END





GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_CompanyLevel_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2_CompanyLevel_SCS]-- 0

AS

BEGIN

	SELECT     ID as id, 
			  Code + ' '  + '-'  +  Name as name
	FROM         Company
	WHERE     (Deleted = 0) AND (CategoryID <> 1)


	--Select a.Id, a.Code, a.Name from Category a, Company b where a.Id = b.CategoryID and b.id = 8738
	 --SELECT * FROM p_IpCstMarkup
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_ChangeType_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Select2_ChangeType_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

Select a.ID as id,a.Name as name from IptransactionType a

END





GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_Category_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Select2_Category_SCS]-- 0
@CompanyId as int
AS

BEGIN

	
SELECT     a.ID as id, a.Code + ' ' + '-' + a.Name as name
FROM       Category AS a 
		   INNER JOIN Company AS b ON a.ID = b.CategoryID
WHERE     (b.ID = @CompanyId)


	--Select a.Id, a.Code, a.Name from Category a, Company b where a.Id = b.CategoryID and b.id = 8738
	 --SELECT * FROM p_IpCstMarkup
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Select2_CancelBillReason_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Select2_CancelBillReason_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

select ID AS id, name as Name from CANCELBILLREASON where DELETED = 0

END





GO

/****** Object:  StoredProcedure [ITADMIN].[ReRoutingOrders_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
--[ITADMIN].[ReRoutingOrders_View_SCS] 81-
CREATE PROCEDURE [ITADMIN].[ReRoutingOrders_View_SCS] --144---231-- 81---26,2-- 0
@Id as int
AS
 

BEGIN

		SELECT s.Name AS Station
		--,LTRIM(RIGHT(CONVERT(varchar(20),r.FromTime,100),7)) as FromTime
		--,LTRIM(RIGHT(CONVERT(varchar(20),r.ToTime,100),7)) as ToTime,r.ActivePharmacyStnId AS stationid
		,CONVERT(varchar(15),CAST(r.FromTime AS TIME),100) as FromTime
		,CONVERT(varchar(15),CAST(r.ToTime AS TIME),100) as ToTime
		,'Remove' as blank
		FROM   ReRouteOrder AS r 
					INNER JOIN dbo.Station AS s ON r.ActivePharmacyStnId = s.ID
		WHERE     (r.PharmacyStnId = @Id)
		ORDER BY r.FromTime

END
GO

/****** Object:  StoredProcedure [ITADMIN].[ReRouteOrder_SAVE_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[ReRouteOrder_SAVE_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlReRouteHeaderSaveModel			as xml,
	@xmlReRouteDetailsSaveModel         as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReRouteHeaderSaveModel
SELECT 
Action
,PharmacyId
into #tmpReRouteOrderHeaderSave

from openxml(@handle, '/DocumentElement/ReRouteHeaderSaveModel',2) with
(
Action int,PharmacyId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReRouteDetailsSaveModel

select ActivePharmacyStnId,FromTime,ToTime
into #tmpReRouteDetailsSave

from openxml(@handle, '/DocumentElement/ReRouteDetailsSaveModel',2) with
(
ActivePharmacyStnId int 
,FromTime datetime
,ToTime datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @PharmacyId as int


		SELECT @Action = Action,@PharmacyId = PharmacyId
		from   #tmpReRouteOrderHeaderSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	
					Delete from Rerouteorder where pharmacystnid = @PharmacyId

					INSERT INTO ReRouteOrder
                      (ActivePharmacyStnId, FromTime, ToTime, PharmacyStnId)
				Select ActivePharmacyStnId,FromTime,ToTime,@PharmacyId
					from #tmpReRouteDetailsSave
						
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReRouteOrderHeaderSave
drop table #tmpReRouteDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

--*/
--select * from    Rerouteorder where ActivePharmacyStnId = 144
--convert(datetime,convert(varchar, getdate(), 110) + ' ' + FromTime)
--Select convert(datetime,convert(varchar, getdate(), 110) + ' ' + '12:00:00 AM')
GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Religion_View_SCS]-- 0
@ReligionId as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Religion
		WHERE     (ID = @ReligionId)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Religion_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlReligionSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReligionSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpReligionSave

from openxml(@handle, '/DocumentElement/ReligionSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @LocationId as int
--declare @MaxTariffId as int
declare @ReligionName as varchar(250)
declare @OperatorId as int



select @Action = Action,@LocationId = Id,@ReligionName  = Name,@OperatorId = OperatorId
from   #tmpReligionSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Location where Name = @ReligionName)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Location Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into Religion(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@ReligionName),'"',Getdate(),0,@OperatorId
				from #tmpReligionSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Religion set Name =upper(@ReligionName),ModifiedBy = @OperatorId,ModifiedDateTime = Getdate()			
				where ID =@LocationId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReligionSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Religion_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Religion_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Religion
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[ReleaseOrderDrug_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[ReleaseOrderDrug_Save_SCS]
	
    @ErrorMessage						as NVARCHAR(max) OUT,
    @xmlReleaseOrderDrugSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlReleaseOrderDrugSave
SELECT 
Action
,OrderId

into #tmpReleaseOrderDrug


from openxml(@handle, '/DocumentElement/ReleaseDrugOrderSave',2) with
(
Action int
,OrderId int

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @OrderId as int

			

			select @Action = Action,@OrderId =  OrderId
			from   #tmpReleaseOrderDrug	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		

			update OtOrder set released = 1 where id = @OrderId

					--select * From OTOrder where ID = 89372
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Release Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
	--	end
			
					--INSERT INTO OLDP_AsstSurgeon
     --                 (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
					--SELECT  ID, CategoryID, Percentage, StartDateTime,Getdate(), Deleted, OTIDNo,@OperatorId,SlNo
					--FROM    P_AsstSurgeon
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

					--UPDATE    P_AsstSurgeon
					--SET       Percentage = @Percentage, StartDateTime = Getdate(), Operatorid = @OperatorId
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN

	   --UPDATE CANOPBILLAPPROVER  set Deleted =1 where EmployeeID=@EmployeeId
		
		--INSERT INTO OLDP_AsstSurgeon
  --      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
		--SELECT     ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo,@OperatorId, SlNo
		--FROM         P_AsstSurgeon
		--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

		--delete from p_AsstSurgeon where CategoryId=@CategoryId and OTIDNo=@OTIDNo and Slno=@SlnoId

		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpReleaseOrderDrug


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--Tariff
--Select Name as NameFld ,Id as IdFld from TARIFF where  Deleted=0
--ORNO

GO

/****** Object:  StoredProcedure [ITADMIN].[RelationshipSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[RelationshipSave_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlRelationshipSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlRelationshipSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpRelationshipSave

from openxml(@handle, '/DocumentElement/RelationshipSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpRelationshipSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Relationships where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Relationship Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Relationships
	  Insert into Relationships(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@Name),'"',Getdate(),0,@OperatorId
				from #tmpRelationshipSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Relationships set Name =upper(@Name),ModifiedBy = @OperatorId,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpRelationshipSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Relationship_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Relationship_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Relationships
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Relationship_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Relationship_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Relationships
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Relataionship_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Relataionship_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Relationships
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[RecoveryRoomDetails_SAVE_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[RecoveryRoomDetails_SAVE_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlRecoveryRoomChargesHeaderSave		   as xml,
	@xmlRecoveryRoomChargesDetailsSave        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlRecoveryRoomChargesHeaderSave
SELECT 
Action
,CategoryId
,OperatorId
into #tmpRecoveryRoomChargeHeaderSave

from openxml(@handle, '/DocumentElement/RecoveryRoomChargesHeaderSave',2) with
(
Action int,CategoryId int,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlRecoveryRoomChargesDetailsSave

select OtId,Percentage
into #tmpRecoveryRoomDetailsSave

from openxml(@handle, '/DocumentElement/RecoveryRoomChargesDetailsSave',2) with
(
OtId int,Percentage decimal
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @CategoryId as int
declare @OperatorId as int
declare @MaxId as int

		SELECT @Action = Action,@CategoryId = CategoryId,@OperatorId = OperatorId
		from   #tmpRecoveryRoomChargeHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

				INSERT INTO oldP_Recovery
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTID, Operatorid)
				SELECT ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTID, @OperatorId
				FROM    P_Recovery
				WHERE   (CategoryID = @CategoryId) AND OTID in (select OTID from #tmpRecoveryRoomChargeHeaderSave)

				delete from P_Recovery where CategoryId= @CategoryId and OTID in (select OtId from #tmpRecoveryRoomChargeHeaderSave)

				Select @MaxId = max(id) from p_or

				INSERT INTO P_Recovery
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTID, Operatorid)
				SELECT @MaxId,@CategoryId,Percentage,Getdate(),NULL,0,OtId,@OperatorId
				FROM #tmpRecoveryRoomDetailsSave

			
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpRecoveryRoomChargeHeaderSave
drop table #tmpRecoveryRoomDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[RangeMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[RangeMarkup_DashBoard_SCS]-- 0

AS

BEGIN

SELECT 
		 row_number() over(order by a.ID) as SNo  
		,a.MinRange
		,a.MaxRange
		,a.Percentage
		,a.ID
from p_IpCstMarkup a


END

GO

/****** Object:  StoredProcedure [ITADMIN].[RangeMarkup_AddItem]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[RangeMarkup_AddItem]-- 0

AS

BEGIN
Declare @AddMax decimal(18,2)

	select  @AddMax =   replace(Max(MaxRange),'.00','.01') from p_IpCstMarkup

	SELECT	 row_number() over(order by a.ID) as SNo  
		,a.MinRange
		,a.MaxRange
		,a.Percentage
		,a.ID
		,@AddMax as AddMaxRange
	--	,max(a.MaxRange) MaxAdd
from p_IpCstMarkup a

	



END

GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[PTProcedure_View_SCS] 60
CREATE PROCEDURE [ITADMIN].[PTProcedure_View_SCS] --2
@Id as int

AS


BEGIN
		

		   SELECT b.Name as DepartmentName,a.departmentid as DepartmentId,a.Name,a.Costprice,a.Code,a.Instructions,a.Id
		   from ptprocedure a 
		   LEFT JOIN Department b ON b.ID = a.departmentid
		   where a.id=@Id

END
GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[PTProcedure_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlPTProcedureSaveModel		   as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPTProcedureSaveModel
		SELECT 
		Action
		,Id
		,Name
		,Code
		,instructions
		,DepartmentId
		,OperatorId
		,Costprice

into #tmpPTProcedure
from openxml(@handle, '/DocumentElement/PTProcedureSaveModel',2) with
(
		Action int
		,Id int
		,Name varchar(100)
		,Code varchar(30)
		,instructions  varchar(250)
		,DepartmentId varchar(30)
		,OperatorId int
		,Costprice decimal(18,2)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int

select @Action = Action,@ID = Id,@OperatorId = OperatorId
from   #tmpPTProcedure	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
			
				INSERT INTO ptprocedure
                      (Name, Costprice, Instructions, StartDateTime, EndDateTime, Deleted, OperatorID, Code, DepartmentID, ArabicName, ArabicCode)
				SELECT Name, Costprice, instructions, GETDATE(), NULL, 0, OperatorId, Code, DepartmentId, '"', Code
				FROM #tmpPTProcedure
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		
	
					UPDATE a
					SET a.Name = b.Name
						,a.ArabicName = '"'
						,a.ArabicCode = b.Code
						,a.Costprice = b.Costprice
						,a.Instructions = b.instructions
						,a.Modifieddatetime = GetDate()	
						,a.Modifiedby = @OperatorId
						,a.Code = b.Code
						,a.DepartmentID = b.DepartmentId
					from ptprocedure a
					INNER JOIN #tmpPTProcedure b
					ON b.Id = a.Id
					WHERE a.Id = @ID
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
				update ptprocedure  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID

		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPTProcedure


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[PTProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
Create PROCEDURE [ITADMIN].[PTProcedure_DashBoard_SCS]-- 0
AS

BEGIN
			--SP_HELP Anaesthesia
			SELECT     row_number() over(order by a.Code) as SNo, a.Code + ' - ' + Name AS NAME,Id
			FROM         ptprocedure a
			WHERE     (Deleted = 0)
			ORDER BY Name


END


--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85

GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelSetUp_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[PharmacyCancelSetUp_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlPharmacySave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPharmacySave
SELECT 
Action
,StationId
,NoOfDays 
into #tmpPharmacySave

from openxml(@handle, '/DocumentElement/PharmacySave',2) with
(
Action int
,StationId int
,NoOfDays int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @StationId as int
declare @NoOfDays as int



select @Action = Action,@StationId = StationId,@NoOfDays = NoOfDays
from   #tmpPharmacySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from PhaBillCancelDays where StationID = @StationId and NoOfDays = @NoOfDays)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Pharmcy Cancel Days SetUp Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

			  Insert into PhaBillCancelDays(StationID,NoOfDays)
			  Select StationId,NoOfDays
			  from #tmpPharmacySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				
				Update PhaBillCancelDays set StationID = @StationId,NoOfDays = @NoOfDays where StationID = @StationId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPharmacySave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7

GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelDaysSetup_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[PharmacyCancelDaysSetup_View_SCS] --95-- 2--22--22-- 2-- 0
@StationId as int
AS

BEGIN
			SELECT a.StationID,b.Name as Station,a.noofdays as NoOfDays
			from PhaBillCancelDays a
			LEFT JOIN Station b on a.StationID = b.id
			where a.StationID = @StationId
END

GO

/****** Object:  StoredProcedure [ITADMIN].[PharmacyCancelDaysSetup_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[PharmacyCancelDaysSetup_SCS]-- 2--22--22-- 2-- 0
AS

BEGIN
			Select b.Name as Station,a.NoOfDays,a.StationID  as StationId
			from PhaBillCancelDays a
			LEFT JOIN Station b on b.id = a.StationID
END

GO

/****** Object:  StoredProcedure [ITADMIN].[PatientOrder_Dashboard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE PROCEDURE [ITADMIN].[PatientOrder_Dashboard_SCS] 
@Id as int = 154659
AS

 
BEGIN
 
CREATE TABLE #TempPatientOrderCancel(
				DepartmentName varchar(250) NULL,
			    OrderID varchar(250) NULL,
				DateTime varchar(250) NULL,
				Name varchar(250) NULL,
				StationName varchar(250) NULL,
				DisPatchQuantity varchar(250) NULL,
				Unit varchar(250) NULL,
				SerialNo varchar(250) NULL,
				Operator varchar(250) NULL,
				Status varchar(250) NULL,
				id INT,
				serviceid INT,
				stationId INT,
				groupId INT

			)

-----------------Cath Order  12----------------------------

			INSERT INTO #TempPatientOrderCancel 
			SELECT      d.Name AS DepartmentName
						,S.Prefix + CONVERT(CHAR(6),a.stationslno, 103) AS OrderID
						,a.OrderDateTime AS DateTime
						,c.Code + ' - ' + c.Name AS Name
						, S.Name AS StationName
						, '' AS DisPatchQuantity
						, '' AS Unit
						, '' AS SerialNo
						,e.EmployeeID + '-' + e.Name AS Operator
						, '---' AS Status
						,a.id
						,b.TypeId AS serviceid
						,a.stationid as stationId
						,1 as groupId --for Cathlab Procedure
						 FROM     CathOrder AS a INNER JOIN
												  CathOrderDetail AS b ON a.id = b.orderid
												   INNER JOIN Employee AS e ON a.OperatorId = e.ID 
												   INNER JOIN CathProcedure AS c ON b.TypeId = c.ID 
												   INNER JOIN Department AS d ON c.DepartmentID = d.ID
												   INNER JOIN dbo.Station AS S ON a.stationid = S.ID
							WHERE     (a.IPIDOPID = @Id) AND (b.type = 1)
							--ORDER BY DateTime, a.id, Name
-----------------Test Requisition ----------------------------

					INSERT INTO #TempPatientOrderCancel 
					SELECT     d.Name AS DepartmentName
							  ,S.Prefix + CONVERT(CHAR(6), a.stationslno, 103) AS OrderID
							  ,a.DateTime
							  , c.Code + ' - ' + c.Name AS Name
							  , S.Name AS StationName
							  ,'' AS DisPatchQuantity
							  ,'' AS Unit
							  ,'' AS SerialNo
							  ,emp.EmployeeID + '-' + emp.Name AS Operator
							  ,CASE a.exstatus WHEN 1 THEN 'Request' WHEN 2 THEN 'Sample Collected' WHEN 3 THEN 'Sample Collected' WHEN 4 THEN 'Test Done' END AS Status
							  ,a.ID AS id
							  ,b.ServiceID as serviceid
							  ,b.DestStID as stationId
							  ,2 as groupId --for Test Requisition
					FROM      TestRequisition AS a 
									INNER JOIN dbo.Station AS S ON a.SourceStID = S.ID 
									INNER JOIN RequestedTest AS b ON a.ID = b.OrderID 
									INNER JOIN Test AS c ON b.ServiceID = c.ID 
									INNER JOIN dbo.Station AS d ON b.DestStID = d.ID 
									INNER JOIN Department AS e ON c.DepartmentID = e.ID 
									INNER JOIN Employee AS emp ON a.OperatorID = emp.ID
					WHERE     (a.IPID = @Id) AND (c.Profile = 0) AND (b.ProfileID = 1) OR
										  (a.IPID = @Id) AND (c.Profile = 0) AND (b.ProfileID IS NULL) OR
										  (a.IPID = @Id) AND (c.Profile = 0) AND (b.ProfileID = 0)
					UNION ALL
					SELECT DISTINCT 
							'Profiles' AS DepartmentName
							,S.Prefix + CONVERT(CHAR(6)
							,a.stationslno, 103) AS OrderID
							,a.DateTime
							,c.Code + ' - ' + c.Name AS Name
							,S.Name AS StationName
							,'' AS DisPatchQuantity
							,'' AS Unit
							, '' AS SerialNo
							,emp.EmployeeID + '-' + emp.Name AS Operator
							,CASE a.exstatus WHEN 1 THEN 'Request' WHEN 2 THEN 'Sample Collected' WHEN 3 THEN 'Sample Collected' WHEN 4 THEN 'Test Done' END AS Status
							,a.ID AS id
							,b.ProfileID as serviceid
							,a.SourceStID as stationId
							,2 as groupId --for Test Requisition
					FROM         TestRequisition AS a 
						 	LEFT JOIN dbo.Station AS S ON a.SourceStID = S.ID 
							LEFT JOIN RequestedTest AS b ON a.ID = b.OrderID 
							LEFT JOIN Test AS c ON b.ProfileID = c.ID 
							LEFT JOIN Department AS e ON c.DepartmentID = e.ID
						 --	LEFT JOIN dbo.Station AS d 
					   	--	LEFT JOIN TestLab AS f ON d.ID = f.STATIONID ON c.ID = f.TESTID 
							LEFT JOIN Employee AS emp ON a.OperatorID = emp.ID
					WHERE     (a.IPID = @Id) AND (c.Profile = 1) AND (c.ID <> 1301)
			 
-----------------FOOD ORDER ----------------------------
				  INSERT INTO #TempPatientOrderCancel 
						SELECT     
						'' AS DepartmentName
						,S.Prefix + '-' + CONVERT(CHAR(6),a.ID, 103) AS OrderID
						,a.DateTime AS datetime
						,c.Code + ' - ' + c.Name AS Name
						,S.Name AS StationName
						,SUM(b.Quantity) AS DisPatchQuantity
						,'' AS Unit
						, '' AS SerialNo
						,e.EmployeeID + '-' + e.Name AS Operator
						, 'Requested' AS Status
						,a.ID AS id
						,b.ServiceId AS serviceid
						,a.StationID as stationId
						,3 as groupId ---Food Item
							FROM         FoodOrder AS a 
										INNER JOIN FoodOrderDetail AS b ON a.ID = b.OrderID 
										INNER JOIN FoodItem AS c ON b.ServiceId = c.Id 
										INNER JOIN Department AS d ON c.DepartmentID = d.ID 
										INNER JOIN dbo.Station AS S ON a.StationID = S.ID 
										INNER JOIN Employee AS e ON a.OperatorID = e.ID
							WHERE     (a.IPID = @Id) AND (a.dispatched IS NULL)
						   GROUP BY a.ID, a.DateTime, c.Code, c.Name, S.Name, e.EmployeeID, e.Name, b.ServiceId, S.Prefix,a.StationID
							--ORDER BY datetime, id, Name

-----------BSPExecution-----------------------
				INSERT INTO #TempPatientOrderCancel 
					SELECT  
					'' AS DepartmentName
					,S.Prefix + CONVERT(CHAR(6), a.stationslno, 103) AS OrderID
					,a.datetime
					,c.code + ' - ' + c.name AS Name, S.Name AS StationName
					, SUM(b.Quantity) AS DisPatchQuantity
					,'Nos' AS Unit
					,'' AS SerialNo
					,e.EmployeeID + '-' + e.Name AS operator
					,'---' AS Status
					,a.id
					,b.ServiceID as serviceid
					,a.stationid as stationId
					,4 groupId----- BSPExecution
						FROM  BSPExecution AS a 
									INNER JOIN BSPExecutionDetail AS b ON a.id = b.OrderID 
									INNER JOIN BedsideProcedure AS c ON b.ServiceID = c.id 
									INNER JOIN Department AS d ON c.departmentid = d.ID 
									INNER JOIN dbo.Station AS S ON a.stationid = S.ID 
									INNER JOIN Employee AS e ON a.operatorid = e.ID
						WHERE     (a.ipid = @Id)
			    GROUP BY d.Name, a.datetime, S.Prefix, a.stationslno, c.code, c.name, S.Name, e.EmployeeID, e.Name, a.id, b.ServiceID,a.stationid
			---	ORDER BY a.datetime, a.id, c.name

---------------------OtherProceduresOrder-----------------------
			INSERT INTO #TempPatientOrderCancel 
			SELECT    d.Name AS DepartmentName
					,S.Prefix + CONVERT(CHAR(6)
					,a.stationslno, 103) AS OrderID
					,a.DateTime
					,c.Code + ' - ' + c.Name AS Name
					,S.Name AS StationName
					,SUM(b.Quantity) AS DisPatchQuantity
					,'Nos' AS Unit
					,'' AS SerialNo
					,e.EmployeeID + '-' + e.Name AS operator
					,'---' AS Status, a.ID AS id
					,b.ServiceID as serviceid
					,a.StationID as stationId
					,5 groupId ---Other Procedure Item
				FROM         OtherProceduresOrder AS a 
								INNER JOIN OtherProceduresOrderDetail AS b ON a.ID = b.OrderID 
								INNER JOIN OtherProcedures AS c ON b.ServiceID = c.ID 
								INNER JOIN Department AS d ON c.DepartmentID = d.ID 
								INNER JOIN dbo.Station AS S ON a.StationID = S.ID 
								INNER JOIN Employee AS e ON a.OperatorID = e.ID
				WHERE     (a.IPID = @Id)
				GROUP BY d.Name, a.DateTime, S.Prefix, a.stationslno, c.Code, c.Name, S.Name, e.EmployeeID, e.Name, a.ID, b.ServiceID,a.StationID
				---ORDER BY a.DateTime, id, Name

---------------------RHOrderDetail-----------------------
				INSERT INTO #TempPatientOrderCancel
				SELECT     
				'' AS DepartmentName
				,a.id AS OrderID
				,a.OrderDateTime AS datetime
				,c.Code + ' - ' + c.Name AS Name, S.Name AS StationName
				,'' AS DisPatchQuantity
				, '' AS Unit
				,'' AS SerialNo
				, e.EmployeeID + '-' + e.Name AS Operator
				, '---' AS Status
				, a.id
				, b.typeid AS serviceid
				,a.stationid as stationId
				,6 groupId  --- RHOrder
				FROM         RHOrder AS a 
							INNER JOIN RHOrderDetail AS b ON a.id = b.orderid 
							INNER JOIN PTProcedure AS c ON b.typeid = c.ID 
							INNER JOIN Department AS d ON c.DepartmentID = d.ID
							INNER JOIN dbo.Station AS S ON a.stationid = S.ID 
							INNER JOIN Employee AS e ON a.OperatorId = e.ID
				WHERE     (a.PatientType = 1) AND (a.IPIDOPID = @Id) AND (b.type = 1)
				---ORDER BY a.DateTime, OrderID, Name

						Select  DepartmentName,OrderID,DateTime,Name,StationName,DisPatchQuantity,Unit,SerialNo,Operator,Status,id,serviceid,stationId,groupId
						From #TempPatientOrderCancel order by datetime,id, DepartmentName

Drop Table #TempPatientOrderCancel
END
GO

/****** Object:  StoredProcedure [ITADMIN].[PatientCancelOrder_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[PatientCancelOrder_Save_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
	@xmlPatientOrderHeaderSave			as xml,
    @xmlPatientCancelOrderSave	    as xml

	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPatientOrderHeaderSave
SELECT 
Action
,OperatorId
into #tmpPatientOrderHeaderSave

from openxml(@handle, '/DocumentElement/PatientOrderHeaderSave',2) with
(
Action int
,OperatorId int

)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPatientCancelOrderSave
SELECT 

OrderId
,TypeId -- serviceid
,groupId
into #tmpPatientCancelOrderSave

from openxml(@handle, '/DocumentElement/PatientCancelOrderSave',2) with
(
OrderId int
,TypeId int
,groupId int

)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int
declare @MaxID as int
declare @OrderId as int
declare @TypeId as int
declare @GroupId as int


select @Action = Action,@OperatorId =OperatorId
from #tmpPatientOrderHeaderSave 

select @OrderId = OrderId,@TypeId = TypeId,@GroupId = groupId
from   #tmpPatientCancelOrderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	 
		-----------Fro Cathlab Item Order----------
			Select @MaxID = Max(maxid)  from OrderMaxID where tableID = 9 And StationID in (10,12,71)

				--create logs july 9 2018
	insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
	 values ('OrderMaxID','[ITADMIN].[PatientCancelOrder_Save_SCS]','','','','GroupId-'+cast(@GroupId as nvarchar(max))+ 'maxid '+cast(@MaxID as nvarchar(max)) )


		---------For CatORder----------------
		if (@GroupId = 1)
			--if exists (Select * from CathOrderDetail where orderid = @OrderId)
	Begin

	--create logs july 9 2018
	insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
	 values ('CancelCathOrderDetail','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )

			INSERT INTO CancelCathOrderDetail
                      (orderid, type, typeid, price, canceledon)
			SELECT     orderid, type, TypeId, price, Getdate() as canceledon
			FROM       CathOrderDetail
			WHERE     (orderid = @OrderId) AND (TypeId = @TypeId) -- note serviceid 

		    DELETE FROM Cathorderdetail WHERE orderid = @OrderId and typeid = @TypeId-- note serviceid 

			INSERT INTO CancelCathOrder
                      (id, patienttype, ipidopid, operatorid, clid, orderdatetime, procedurestartdatetime, procedureenddatetime, issueauthoritycode, opbillid, anaesthesiatypeid, 
                      anaesthesiastartdatetime, anaesthesiaenddatetime, cathno, diagnosis, angiodata, cinecd, remarks, shiftingnurseid, stationid, canceledby, canceledon, normal, 
                      stationslno, recoverystartdatetime, recoveryenddatetime, chkar, bedid, modified)
			SELECT     id, PatientType, IPIDOPID,OperatorId,CLid,OrderDateTime,ProcedureStartdateTime,ProcedureEnddateTime, IssueAuthorityCode,opbillid,AnaesthesiaTypeId, 
					   anaesthesiastartdatetime,anaesthesiaenddatetime, CathNo,diagnosis,angiodata,CineCD,remarks,ShiftingNurseId,7,@OperatorId,--->hardcoded AS (IT STATION), 1412 AS Expr2, 
					   Getdate() as canceledon,Normal,@MaxID, RecoveryStartDateTime, RecoveryEndDateTime, ChkAR, bedid,0 
			FROM       CathOrder
			WHERE     (id = @OrderId)

			Declare @Empty as int

			select @Empty = count(*) from CathOrderDetail where OrderID = @OrderId and type = 1

			If (@Empty = 0)
			BEGIN	
					DELETE FROM Cathorder WHERE id = @OrderId
					DELETE FROM Cathorderdetail WHERE orderid = @OrderId
			END
		END
		---------For RequestedTest----------------
		if (@GroupId = 2)
			--if exists (Select * from RequestedTest where orderid = @OrderId)
				Begin
 
						
							INSERT INTO CanTestRequisition
							(id, bedid, ipid, operatorid, sourcestid, priority, remarks, datetime, doctorid, tobedoneby, exstatus, printed, tobedoneat, phlebotomy, canceledby, canceleddatetime, 
							modified, StationSlNo)
							SELECT   ID,BedID,IPID,OperatorID,SourceStID,Priority,Remarks, DateTime, DoctorID, ToBeDoneBy, Exstatus, Printed, ToBeDoneAt, Phlebotomy, @OperatorId AS CanceledBy
							, Getdate() AS canceleddatetime,0, stationslno
							FROM     TestRequisition
							WHERE     (ID = @OrderId)

						--create logs NOV 25 2018
						insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
						values ('CanTestRequisition','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )
	 


						IF exists(select* from his.dbo.requestedtest WHERE    OrderID = @OrderId  and SERVICEID= @TypeId)
						begin
						--SERVICEID

											Insert into his.dbo.CanRequestedTest (OrderID,ServiceID,DestStID,CollectedBy,AcknowledgedBy,TestDoneby,collectedDateTime,AcknowledgeddateTime,CollectedAt,TestDoneDateTime,SampleID,ProfileID,Verified1,Verifiedby,labnum,ReceivingTime,normal,bIMAGE,verifieddatetime,CanceledDateTime,canceledBY) 
											select OrderID,ServiceID,DestStID,CollectedBy,AcknowledgedBy,TestDoneby,collectedDateTime,AcknowledgeddateTime,CollectedAt,TestDoneDateTime,SampleID,ProfileID,Verified1,Verifiedby,labnum,ReceivingTime,normal,bIMAGE,verifieddatetime, GETDATE() ,@OperatorId 
											from his.dbo.requestedtest WHERE    OrderID = @OrderId  
											and ServiceID= @TypeId
					
											--create logs NOV 25 2018
											insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
											values ('CanRequestedTest-SERVICEID=TYPEID','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )	   

											
											Delete from his.dbo.RequestedTest where OrderID = @OrderId and ServiceID = @TypeId
											 

						end
						ELSE
						begin
							--PROFILE
											Insert into his.dbo.CanRequestedTest (OrderID,ServiceID,DestStID,CollectedBy,AcknowledgedBy,TestDoneby,collectedDateTime,AcknowledgeddateTime,CollectedAt,TestDoneDateTime,SampleID,ProfileID,Verified1,Verifiedby,labnum,ReceivingTime,normal,bIMAGE,verifieddatetime,CanceledDateTime,canceledBY) 
											select OrderID,ServiceID,DestStID,CollectedBy,AcknowledgedBy,TestDoneby,collectedDateTime,AcknowledgeddateTime,CollectedAt,TestDoneDateTime,SampleID,ProfileID,Verified1,Verifiedby,labnum,ReceivingTime,normal,bIMAGE,verifieddatetime, GETDATE() ,@OperatorId 
											from his.dbo.requestedtest WHERE    OrderID = @OrderId  
											and PROFILEID= @TypeId
					
											--create logs NOV 25 2018
											insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
											values ('CanRequestedTest-PROFILEID=TYPEID','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )	   
												
											Delete from his.dbo.RequestedTest where OrderID = @OrderId and PROFILEID = @TypeId										 
						eND

				
					select @Empty = count(*) from RequestedTest where OrderID = @OrderId and (profileid=1 OR PROFILEID IS NULL or profileid=0)

					If (@Empty = 0)
					BEGIN	
					--create logs NOV 25 2018
					insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
					values ('RequestedTest-1@Empty=0','DELETE','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )
	 
							DELETE FROM RequestedTest WHERE OrderID = @OrderId
							DELETE from TestRequisition where ID = @OrderId
					END	



/*		OLD SCRIPT dEC 1 2018 JESUS

		INSERT INTO CanRequestedTest
								(orderid, serviceid, deststid, collectedby, acknowledgedby, testdoneby, collecteddatetime, acknowledgeddatetime, collectedat, testdonedatetime, sampleid, profileid, 
								verified1, verifiedby, labnum, receivingtime, normal, bimage, verifieddatetime, canceleddatetime, CanceledBy)
					SELECT     OrderID, ServiceID, DestStID, CollectedBy, AcknowledgedBy, TestDoneby, collectedDateTime, AcknowledgeddateTime, CollectedAt, TestDoneDateTime, SampleID, 
								ProfileID, Verified1, Verifiedby, labnum, ReceivingTime, normal, bIMAGE, verifieddatetime,getdate() as canceleddatetime,@OperatorId
					FROM       RequestedTest
					WHERE     (OrderID = @OrderId ) and (ServiceID= @TypeId)

					Delete from RequestedTest where OrderID = @OrderId and ServiceID = @TypeId

					INSERT INTO CanTestRequisition
                      (id, bedid, ipid, operatorid, sourcestid, priority, remarks, datetime, doctorid, tobedoneby, exstatus, printed, tobedoneat, phlebotomy, canceledby, canceleddatetime, 
                      modified, StationSlNo)
					SELECT   ID,BedID,IPID,OperatorID,SourceStID,Priority,Remarks, DateTime, DoctorID, ToBeDoneBy, Exstatus, Printed, ToBeDoneAt, Phlebotomy, @OperatorId AS CanceledBy
							, Getdate() AS canceleddatetime,0, stationslno
					FROM     TestRequisition
					WHERE     (ID = @OrderId)
			
				 
					select @Empty = count(*) from RequestedTest where OrderID = @OrderId and (profileid=1 OR PROFILEID IS NULL or profileid=0)

					If (@Empty = 0)

					BEGIN	
							DELETE FROM RequestedTest WHERE OrderID = @OrderId
							DELETE from TestRequisition where ID = @OrderId
					END							
*/
				END
		---------FoodOrderDetail----------------------
	    if (@GroupId = 3)
		--if exists(Select * from FoodOrderDetail where OrderID = @OrderId)
				BEGIN

								--create logs july 9 2018
						insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
							values ('CancelFoodOrderDetail','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )


					   INSERT INTO CancelFoodOrderDetail
								  (orderid,serviceid,Quantity,batchno,dispatchedquantity)
						SELECT     orderid, ServiceID,Quantity,batchno,dispatchedquantity
						FROM         FoodOrderDetail
						WHERE     (OrderID = @OrderId)
		
			 
				DELETE FROM CancelFoodOrderDetail WHERE orderid = @OrderId and ServiceID = @TypeId
			 
				INSERT INTO CancelFoodOrder 
						(id,RegistrationNo,IssueAuthorityCode,IPID,OPBillId,StationID,BedID,OperatorID,DateTime,canceldatetime,
						cancelledby,modified,dispatched,printstatus,amount,fboperatorid,dispatcheddatetime,stationslno,type,Billed,AdmitDatetime)
						SELECT 
						id,RegistrationNo,IssueAuthorityCode,IPID,OPBillId,StationID,BedID,OperatorID,DateTime,GetDate() as canceldatetime,@OperatorId,1,dispatched,printstatus,amount,fboperatorid,dispatcheddatetime,stationslno,type,Billed,AdmitDatetime
						from FoodOrder where id = @OrderId


							select @Empty = count(*) from CancelFoodOrderDetail where orderid = @OrderId
					   If (@Empty = 0)
								BEGIN	
										DELETE FROM FoodOrder WHERE id = @OrderId
										DELETE FROM FoodOrderDetail WHERE OrderID = @OrderId
								END
		
				END		
		---------BSPExecutionDetail--------------
		if (@GroupId = 4)
		    --if exists(Select * from BSPExecutionDetail where OrderID = @OrderId)
			Begin

						--create logs july 9 2018
						insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
							values ('CanBSPExecutionDetail','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )
	  
						INSERT INTO CanBSPExecutionDetail
								  (orderid, serviceid, canceleddatetime, Quantity)
						SELECT     orderid, ServiceID,Getdate() as canceleddatetime,Quantity
						FROM         BSPExecutionDetail
						WHERE     (orderid = @OrderId)

						DELETE FROM BSPExecutionDetail WHERE orderid = @OrderId and ServiceID = @TypeId

						 
						INSERT INTO CanBSPExecution 
						(id,ipid,doctorid,bedid,stationid,operatorid,datetime,canceledby,canceleddatetime
						,modified,StationSlNo)
						SELECT 
						id,ipid,doctorid,bedid,stationid,operatorid,datetime,@OperatorId,Getdate() as canceleddatetime,1,stationslno
						from BSPExecution where id = @OrderId

						select @Empty = count(*) from BSPExecutionDetail where OrderID = @OrderId

					   If (@Empty = 0)
								BEGIN	
										DELETE FROM BSPExecution WHERE id = @OrderId
										DELETE FROM BSPExecutionDetail WHERE OrderID = @OrderId
								END

						---select * From CanBSPExecution
			END
		---------For ProceduresOrder----------------
	    if (@GroupId = 5)
			--if exists (Select * from OtherProceduresOrderDetail where orderid = @OrderId)
					BEGIN

					
											--create logs july 9 2018
	insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
	 values ('CanOtherProceduresOrderDetail','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )


							INSERT INTO CanOtherProceduresOrderDetail
										(orderid, serviceid,canceleddatetime,Quantity)
							SELECT     OrderID, ServiceID,Getdate() as canceleddatetime, Quantity
							FROM         OtherProceduresOrderDetail
							WHERE     (OrderID = @OrderId) AND (ServiceID = @TypeId)
						 
							Delete from OtherProceduresOrderDetail  where OrderID = @OrderId and ServiceID = @TypeId

							INSERT INTO CanOtherProceduresOrder
									(bedid, ipid, stationid, operatorid, datetime, doctorid, id, canceledby, canceleddatetime, modified, StationSlNo)
							SELECT   BedID, IPID, StationID, OperatorID, DateTime, DoctorID, ID, @OperatorId AS CanceledBy,Getdate() AS CanceledDateTime,1,stationslno
							FROM     OtherProceduresOrder
							WHERE     (ID = @OrderId)

						select @Empty = count(*) from otherproceduresorderDetail where OrderID = @OrderId

					If (@Empty = 0)

					BEGIN	
							DELETE FROM otherproceduresorderDetail WHERE OrderID = @OrderId
							DELETE from OtherProceduresOrder where ID = @OrderId
					END	
					
					
							

				END
		---------For RHOrder----------------
		if (@GroupId = 6)
			--if exists(Select * from RHOrderDetail where orderid = @OrderId)
				BEGIN
					--create logs july 9 2018
					insert into itadmin.logs_procedures_items (TableName,Name,CostPrice,Code,OperatorID,Comment)
					 values ('CancelRHOrderDetail','INSERT','','','','orderid-'+cast(@OrderId as nvarchar(max))+ 'typeid '+cast(@TypeId as nvarchar(max)) )


						INSERT INTO CancelRHOrderDetail
								  (orderid, type, typeid, price, canceledon)
						SELECT     orderid, type, typeid, price, GETDATE() as canceledon
						FROM         RHOrderDetail
						WHERE     (orderid = @OrderId)

						DELETE FROM RHOrderDetail WHERE orderid = @OrderId and typeid = @TypeId

						 
						INSERT INTO CancelRHOrder
									(id, patienttype, ipidopid, operatorid, orderdatetime, procedurestartdatetime, procedureenddatetime, issueauthoritycode, opbillid, remarks, diagnosis, treatment, 
									stationid, status, canceledby, canceledon, shiftingnurseid, doctorid, referreddoctor, opvisitno, bedid, modified)
						SELECT     id, PatientType, IPIDOPID, OperatorId, OrderDateTime, ProcedureStartdateTime, ProcedureEnddateTime, IssueAuthorityCode, opbillid, remarks, diagnosis, Treatment, 
									stationid, status,@OperatorId,GETDATE() as canceledon, ShiftingNurseId, DoctorId, ReferredDoctor, OpVisitNo, bedid,0
						FROM         RHOrder
						WHERE     (id = @OrderId)

						select @Empty = count(*) from RHOrderDetail where OrderID = @OrderId and type = 1
						
						If (@Empty = 0)
								BEGIN	
										DELETE FROM RHOrder WHERE id = @OrderId
										DELETE FROM RHOrderDetail WHERE orderid = @OrderId
								END
 
				END

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Cancel Item Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...
 

drop table #tmpPatientCancelOrderSave


set xact_abort OFF

END
 
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [ITADMIN].[PackageVisit_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlPackageVisitSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPackageVisitSave
SELECT 
Action
,TestId
,NoOfDays
,NoOfVisits
,ServiceId
into #tmpPackageVisitHeader


from openxml(@handle, '/DocumentElement/PackageVisitSave',2) with
(
Action int
,TestId int
,CompanyId int
,NoOfDays int
,NoOfVisits int
,ServiceId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @NoOfDays as int
declare @NoOfVisits as int
declare @TestId  as int
declare @ServiceId as int

select @Action = Action, @NoOfDays = NoOfDays, @NoOfVisits = NoOfVisits,@TestId = TestId,@ServiceId = ServiceId
from   #tmpPackageVisitHeader	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
			INSERT INTO OPRevisitPackages
                      (Testid, NoOfdays, NoOfVisits, StartDatetime, EndDatetime, Deleted, Serviceid)
			Select TestId,NoOfDays,NoOfVisits,getdate(),NULL,0,Serviceid
			from #tmpPackageVisitHeader

					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				UPDATE    OPRevisitPackages
				SET              NoOfdays = @NoOfDays, NoOfVisits = @NoOfVisits
				WHERE     (Testid = @TestId) AND (Serviceid = @ServiceId) and deleted = 0


---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPackageVisitHeader


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_Save]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[PackageVisit_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlPackageVisitSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPackageVisitSave
SELECT 
Action
,TestId
,NoOfDays
,NoOfVisits
,ServiceId
into #tmpPackageVisitHeader


from openxml(@handle, '/DocumentElement/PackageVisitSave',2) with
(
Action int
,TestId int
,CompanyId int
,NoOfDays int
,NoOfVisits int
,ServiceId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @NoOfDays as int
declare @NoOfVisits as int
declare @TestId  as int
declare @ServiceId as int

select @Action = Action, @NoOfDays = NoOfDays, @NoOfVisits = NoOfVisits,@TestId = TestId,@ServiceId = ServiceId
from   #tmpPackageVisitHeader	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
			INSERT INTO OPRevisitPackages
                      (Testid, NoOfdays, NoOfVisits, StartDatetime, EndDatetime, Deleted, Serviceid)
			Select TestId,NoOfDays,NoOfVisits,getdate(),NULL,0,Serviceid
			from #tmpPackageVisitHeader

					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				UPDATE    OPRevisitPackages
				SET              NoOfdays = @NoOfDays, NoOfVisits = @NoOfVisits
				WHERE     (Testid = @TestId) AND (Serviceid = @ServiceId) and deleted = 0


---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPackageVisitHeader


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_FetchDetails]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[PackageVisit_FetchDetails]-- 0
@Service as int,
@PackageId as int
AS


IF  (@Service = 7) ---//Procedures

BEGIN


	
			SELECT   
				     row_number() over(order by a.Code) as SNo  
					 ,a.ID AS ID
					 , a.Code + '-' + a.Name AS Test
					 , b.NoOfdays
					 ,b.NoOfVisits
			FROM         OPRevisitPackages AS b 
						INNER JOIN OtherProcedures AS a ON b.Testid = a.ID
			WHERE     (b.Serviceid = 7) and a.ID = @PackageId
			ORDER BY a.Code, a.Name

END
	ELSE
		BEGIN
		---//Investigation

				SELECT       
				row_number() over(order by a.Code) as SNo  
				,a.ID AS id
				,a.Code + '-' + a.Name AS Test
				, b.NoOfdays
				,b.NoOfVisits
				FROM         OPRevisitPackages AS b 
				INNER JOIN  Test AS a ON b.Testid = a.ID
				WHERE     (b.Serviceid = 3) and a.ID = @PackageId
				ORDER BY a.Code, a.Name 
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_DashBoard_SCS_New]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[PackageVisit_DashBoard_SCS_New]-- 0
@Service as int
AS


IF  (@Service = 7) ---//Procedures

BEGIN


	
			SELECT   
				     row_number() over(order by a.Code) as SNo  
					 ,a.ID AS ID
					 , a.Code + '-' + a.Name AS Test
					 , b.NoOfdays
					 ,b.NoOfVisits
			FROM         OPRevisitPackages AS b 
						INNER JOIN OtherProcedures AS a ON b.Testid = a.ID
			WHERE     (b.Serviceid = 7) and b.Deleted = 0
			ORDER BY a.Code, a.Name

END
	ELSE
		BEGIN
		---//Investigation

				SELECT       
				row_number() over(order by a.Code) as SNo  
				,a.ID AS id
				,a.Code + '-' + a.Name AS Test
				, b.NoOfdays
				,b.NoOfVisits
				FROM         OPRevisitPackages AS b 
				INNER JOIN  Test AS a ON b.Testid = a.ID
				WHERE     (b.Serviceid = 3) and b.Deleted = 0
				ORDER BY a.Code, a.Name
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[PackageVisit_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[PackageVisit_DashBoard_SCS]-- 0
@Service as int
AS


IF  (@Service = 3) ---//Investigation

BEGIN


		SELECT     
		row_number() over(order by a.ID) as SNo
		,a.ID AS id, a.Code + '-' + a.Name AS test, b.NoOfdays, b.NoOfVisits
		FROM         OPRevisitPackages AS b 
					INNER JOIN Test AS a ON b.Testid = a.ID
		WHERE     (b.Serviceid = @Service)
		ORDER BY a.ID,a.Name

END
	ELSE
		BEGIN
		---//Procedures


		SELECT     
		row_number() over(order by a.ID) as SNo
		,a.ID AS id, a.Code + '-' + a.Name AS test, b.NoOfdays, b.NoOfVisits
		FROM        OPRevisitPackages AS b 
					INNER JOIN OtherProcedures AS a ON b.Testid = a.ID
		WHERE     (b.Serviceid = @Service)
		ORDER BY  a.ID,a.Name
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[OTNursingAdministration_SAVE_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[OTNursingAdministration_SAVE_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlOTNursingAdminHeaderSave	   as xml,
	@xmlOTNursingAdminDetaisSave       as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOTNursingAdminHeaderSave
SELECT 
Action
,CategoryId
,OperatorId
into #tmpOTNursingAdministrationHeaderSave

from openxml(@handle, '/DocumentElement/OTNursingAdminHeaderSave',2) with
(
Action int,CategoryId int,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOTNursingAdminDetaisSave

select Percentage,Amount,ExceedAmount,BedTypeID
into #tmpOTNursingAdministrationDetailsSave

from openxml(@handle, '/DocumentElement/OTNursingAdminDetaisSave',2) with
(
Percentage decimal,Amount decimal,ExceedAmount decimal,BedTypeID int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @CategoryId as int
declare @OperatorId as int


		SELECT @Action = Action,@CategoryId = CategoryId,@OperatorId = OperatorId
		from   #tmpOTNursingAdministrationHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

		INSERT INTO OLDP_OTNursingAdministration
                      (CategoryID, Percentage, ExceededPrice, StartDateTime, EndDateTime, Deleted, Operatorid, amount, BedTypeID)
			SELECT     CategoryID, Percentage, ExceededPrice, StartDateTime, Getdate(), Deleted,@OperatorId, amount, BedTypeID
			FROM         P_OTNursingAdministration
			WHERE     (CategoryID = @CategoryId) AND (BedTypeID in (select BedTypeID from #tmpOTNursingAdministrationDetailsSave))

			Delete From P_OTNursingAdministration where CategoryId=@CategoryId and (BedTypeID in (select BedTypeID from #tmpOTNursingAdministrationDetailsSave))
			
			--sp_help P_OTNursingAdministration
			INSERT INTO  P_OTNursingAdministration
                      (CategoryID,Percentage, ExceededPrice, StartDateTime, EndDateTime, Deleted, Operatorid, amount, BedTypeID)
			SELECT @CategoryId,Percentage,ExceedAmount,Getdate(),NULL,0,@OperatorId,Amount,BedTypeID
			from #tmpOTNursingAdministrationDetailsSave

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOTNursingAdministrationHeaderSave
drop table #tmpOTNursingAdministrationDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/


--sp_help oldp_OtNursingAdministration
GO

/****** Object:  StoredProcedure [ITADMIN].[OTNurseAdministration_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[OTNurseAdministration_View_SCS] --58--1- --26,2-- 0
@CategoryId as int
AS

BEGIN
		IF not EXISTS(SELECT   a.id AS SNo,a.name as BedType,b.Percentage,b.amount as Amount,b.ExceededPrice as ExceedAmount,b.BedTypeID 
		FROM       dbo.BedType AS a 
				   INNER JOIN P_OTNursingAdministration AS b ON a.id = b.BedTypeID
		WHERE     (a.deleted = 0) AND (b.CategoryID = @CategoryId))
		BEGIN 
					SELECT row_number() over(order by a.Name) as SNo
					,a.name as BedType
					,0 as Percentage 
					,0 as Amount
					,0 as ExceedAmount
					,id as BedTypeID
					from dbo.BedType a Where a.Deleted = 0
					END

		SELECT     a.id AS SNo,a.name as BedType,b.Percentage,b.amount as Amount,b.ExceededPrice as ExceedAmount,b.BedTypeID 
		FROM       dbo.BedType AS a 
				   INNER JOIN P_OTNursingAdministration AS b ON a.id = b.BedTypeID
		WHERE     (a.deleted = 0) AND (b.CategoryID = @CategoryId)
END

--select * from P_OTNursingAdministration

--select * from BedType
GO

/****** Object:  StoredProcedure [ITADMIN].[OTNurseAdministration_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[OTNurseAdministration_DashBoard_SCS] ---26,2-- 0

AS

BEGIN
		SELECT row_number() over(order by a.Name) as SNo
		,a.name as BedType
		,0 as Percentage 
		,0 as Amount
		,0 as ExceedAmount
		,0 as BedTypeID
		from dbo.BedType a Where a.Deleted = 0
END
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[OtherProcedure_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlOtherProcedureSaveModel		   as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOtherProcedureSaveModel
		SELECT 
		Action
		,Id
		,Name
		,Code
		,CostPrice
		,DepartmentId
		,instructions
		,remarks
		,OperatorId
		,SpecialisationId

into #tmpOtherProcedSave
from openxml(@handle, '/DocumentElement/OtherProcedureSaveModel',2) with
(
		Action int
		,Id int
		,Name varchar(100)
		,Code varchar(30)
		,CostPrice decimal(18,2)
		,DepartmentId varchar(30)
		,instructions varchar(100)
		,remarks varchar(100)
		,OperatorId int
		,SpecialisationId int
		
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @Name as varchar(250)
declare @Code as varchar(150)
--declare @OperatorId as int

select @Action = Action,@ID = Id,@Name = Name, @Code = Code--,@OperatorId = OperatorId
from   #tmpOtherProcedSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

		--			if exists(select * from OtherProcedures where  Name = @Name or  Code = @Code)
		--	begin
		--			COMMIT TRAN
		--			SET       @ErrorMessage = 'Name or Code Already Exists!'
		--			SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--			SET @ERROR_STATE = ERROR_STATE()
		--			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--			return;
		--end



				INSERT INTO OtherProcedures
                      (Name, Costprice,instructions,remarks,StartDateTime, EndDateTime, Deleted,OperatorID,Code, DepartmentID, ArabicName, ArabicCode,SpecialisationId,CONTYPE)
				SELECT Name, Costprice, instructions, remarks, Getdate(), NULL, 0, OperatorId, Code,DepartmentId,'"','"',SpecialisationId,0
				FROM #tmpOtherProcedSave
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--					if exists(select * from OtherProcedures where  Name = @Name or  Code = @Code)
		--	begin
		--			COMMIT TRAN
		--			SET       @ErrorMessage = 'Name or Code Already Exists!'
		--			SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--			SET @ERROR_STATE = ERROR_STATE()
		--			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--			return;
		--end
		
					UPDATE a
					SET a.Name = b.Name
						,a.ArabicName = '"'
						,a.ArabicCode = b.Code
						,a.Costprice = b.CostPrice
						,a.Code = b.Code
						,a.DepartmentID = b.DepartmentId
						,a.instructions = b.instructions
						,a.remarks = b.remarks
						,a.ModifiedBy = b.OperatorId
						,a.ModifiedDateTime = GETDATE()
						,a.SpecialisationId = b.SpecialisationId
					from OtherProcedures a
					INNER JOIN #tmpOtherProcedSave b
					ON b.Id = a.Id
					WHERE a.Id = @ID
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
				update OtherProcedures  set deleted=1,enddatetime=getdate() where id=@ID
				--select * From BedsideProcedure

        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOtherProcedSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages 
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProced_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN 
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[OtherProced_View_SCS] 3268
CREATE PROCEDURE [ITADMIN].[OtherProced_View_SCS]-- 3269-- 0
@Id as int

AS

BEGIN
			--SP_HELP Anaesthesia
			SELECT     row_number() over(order by a.Code) as SNo
			,  a.Name AS Name
			,a.Code
			,a.CostPrice
			,b.Name as DepartmentName
			,a.DepartmentID as DepartmentId
			,c.Name as SpecialisationName
			,isnull(a.SpecialisationId,'') as SpecialisationId
			,a.Instructions
			,a.Remarks
			,a.Id
			FROM         otherprocedures a
			LEFT JOIN Department b on b.ID = a.DepartmentID
			LEFT JOIN Specialisation c on c.ID = a.SpecialisationId
			WHERE     (a.Deleted = 0) and a.ID  = @Id
			ORDER BY Name


END
GO

/****** Object:  StoredProcedure [ITADMIN].[OtherProced_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[OtherProced_DashBoard_SCS]-- 0
AS

BEGIN
			--SP_HELP Anaesthesia
			SELECT     row_number() over(order by a.Code) as SNo, a.Code + ' - ' + Name AS NAME,Id
			FROM         otherprocedures a
			WHERE     (Deleted = 0)
			ORDER BY Name


END


--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85

GO

/****** Object:  StoredProcedure [ITADMIN].[OtherPackageProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[OtherPackageProcedure_Save_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlOtherPackageHeaderSave			    as xml,
	@xmlOtherPackageDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOtherPackageHeaderSave
SELECT 
Action
,ServiceId
,OperatorId

into #tmpOtherProcedureHeader


from openxml(@handle, '/DocumentElement/OtherPackageHeaderSave',2) with
(
Action int
,ServiceId int
,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOtherPackageDetailsSave

select ItemId
into #tmpOtherProcedureDetailsSave

from openxml(@handle, '/DocumentElement/OtherPackageDetailsSave',2) with
(
ItemId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ServiceId as int
declare @OperatorId as int


SELECT @Action = Action,@ServiceId = ServiceId,@OperatorId = OperatorId 
from   #tmpOtherProcedureHeader	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
					UPDATE a set a.Deleted = 1 from OtherPackageProcedures a where a.ServiceID = @ServiceID 

					---Delete from OtherPackageProcedures where ServiceID=@ServiceID

			INSERT INTO OtherPackageProcedures
                      (ItemID, OperatorID, Deleted, DateTime, ServiceID)
			SELECT ItemId,@OperatorId,0,Getdate(),@ServiceId
			from #tmpOtherProcedureDetailsSave

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOtherProcedureHeader
drop table #tmpOtherProcedureDetailsSave	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[ORSurgery_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[ORSurgery_DashBoard_SCS]-- 0

AS

BEGIN

			SELECT     ID, Code + ' - ' + Name AS NAME
			FROM       Surgery
			WHERE     (Deleted = 0)
			ORDER BY Name


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Organisation_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Organisation_View_SCS]-- 1 -- 0
@Id as int
AS

BEGIN
		SELECT a.Name,a.AddInformation,a.Address1
		,a.Address2,a.Address3,a.City,a.State,a.Country
		,a.PhoneNo,a.EMail,a.FaxNo,a.PagerNo,a.CellPhoneNo
		,a.PinCode,a.District,a.IssueAuthorityCode
		,a.ContactPerson,a.CompanyId,b.Name as Company,a.CurrencyId as CurrencyId,c.currency as Currency,a.Id
		from OrganisationDetails a
		LEFT JOIN Company b on b.Id = a.CompanyId 
		LEFT JOIN CurrencyValues  c on c.c_id = a.CurrencyId
		where a.Id = @Id
END
GO

/****** Object:  StoredProcedure [ITADMIN].[Organisation_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[Organisation_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlOrganisationSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOrganisationSave
SELECT 
Action
,Name
,AddInformation
,Address1
,Address2
,Address3
,City
,Country
,PhoneNo
,EMail
,FaxNo
,PagerNo
,CellPhoneNo
,PinCode
,District
,IssueAuthorityCode
,CompanyId
,CurrencyId
,OperatorId
,Id
into #tmpOrganisationSave

from openxml(@handle, '/DocumentElement/OrganisationSave',2) with
(
Action int
,Name varchar(250)
,AddInformation  varchar(250)
,Address1 varchar(250)
,Address2 varchar(250)
,Address3 varchar(250)
,City varchar(250)
,Country varchar(250)
,PhoneNo varchar(250)
,EMail varchar(250)
,FaxNo varchar(250)
,PagerNo varchar(250)
,CellPhoneNo varchar(250)
,PinCode varchar(250)
,District varchar(250)
,IssueAuthorityCode varchar(250)
,CompanyId int
,CurrencyId int 
,OperatorId int
,Id int

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int
declare @CellPhoneNo as varchar(250)

select @Action = Action,@Name  = Name,@OperatorId = OperatorId,@CellPhoneNo = CellPhoneNo
from   #tmpOrganisationSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


	   	Update a  
				set   a.Name  = b.Name
					  ,a.AddInformation = b.AddInformation
					  ,a.Address1 = b.Address1
					  ,a.Address2 = b.Address2
					  ,a.Address3 = b.Address3
					  ,a.City = b.City
					  ,a.Country = b.Country
					  ,a.PhoneNo = b.PhoneNo
					  ,a.EMail = b.EMail
					  ,a.FaxNo = b.FaxNo
					  ,a.PagerNo = b.PagerNo
					  ,a.CellPhoneNo = b.CellPhoneNo
					  ,a.PinCode = b.PinCode 
					  ,a.District = b.District 
					  ,a.IssueAuthorityCode = b.IssueAuthorityCode
					  ,a.CompanyId = b.CompanyId
					  ,a.CurrencyId = b.CurrencyId
					--  ,a.OperatorId = b.OperatorId
					  from OrganisationDetails a 
					  INNER JOIN #tmpOrganisationSave b on b.Id = a.Id
					where a.Id =1

				 update a set a.CellPhoneNo = @CellPhoneNo from OrganisationDetails a where Id = 1
				 update a set a.Name = @Name from OrganisationDetails a where Id = 1
					--Insert into OrganisationDetails(Name ,AddInformation,Address1, Address2,Address3,City,
					--	   Country,PhoneNo,EMail,FaxNo,PagerNo,CellPhoneNo,PinCode,District,IssueAuthorityCode,CompanyId,CurrencyId,OperatorId) 
					--Select Name,AddInformation,Address1, Address2,Address3,City,
					--	   Country,PhoneNo,EMail,FaxNo,PagerNo,CellPhoneNo,PinCode,District,IssueAuthorityCode,CompanyId,CurrencyId,OperatorId
					--	   FROM #tmpOrganisationSave where ID = @Id


	 --  select * from OrganisationDetails
	
			--	Select  upper(@Name),'"',Getdate(),0
			--	from #tmpCitySave


	 --  	if exists(select * from City where Name = @Name)
		--	begin
		--COMMIT TRAN
		--SET       @ErrorMessage = 'Organization Name Already Exists!'
		--SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--SET @ERROR_STATE = ERROR_STATE()
		--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--return;
		--end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  --Insert into City(Name ,ArabicName,StartDateTime, Deleted) 
			--	Select  upper(@Name),'"',Getdate(),0
			--	from #tmpCitySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from City

				--Update a  
				--set   a.Name  = b.Name
				--	  ,a.AddInformation = b.AddInformation
				--	  ,a.Address1 = b.Address1
				--	  ,a.Address2 = b.Address2
				--	  ,a.Address3 = b.Address3
				--	  ,a.City = b.City
				--	  ,a.Country = b.Country
				--	  ,a.PhoneNo = b.PhoneNo
				--	  ,a.EMail = b.EMail
				--	  ,a.FaxNo = b.FaxNo
				--	  ,a.PagerNo = b.PagerNo
				--	  ,a.CellPhoneNo = b.CellPhoneNo
				--	  ,a.PinCode = b.PinCode 
				--	  ,a.District = b.District 
				--	  ,a.IssueAuthorityCode = b.IssueAuthorityCode
				--	  ,a.CompanyId = b.CompanyId
				--	  ,a.CurrencyId = b.CurrencyId
				--	  ,a.OperatorId = b.OperatorId
				--	  from OrganisationDetails a 
				--	  INNER JOIN #tmpOrganisationSave b on b.Id = a.Id
				--where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOrganisationSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/
--select * from OrganisationDetails

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7

GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[OREmployeeType_View_SCS] --411 --6--6 --6-- 0
@Id as int
As
BEGIN 


			SELECT   
							a.Employeeid as Employeeid
							,b.empcode + ' - ' + convert(nvarchar(20),b.Name) as EmployeeName
							,Case when convert(varchar(20),a.Typeid) = 1 then 'Surgeon'
							when convert(varchar(20),a.Typeid) = 2 then 'Anaesthesist'
							when convert(varchar(20),a.Typeid) = 3 then 'Asst.Surgeon'
							when convert(varchar(20),a.Typeid) = 4 then 'Scrub Nurse' END as TypeName
							,a.Typeid
			FROM         OTEmployeeDoctor a
			LEFT JOIN EMPLOYEE  b on b.Id =  a.Employeeid
			--LEFT JOIN EMPLOYEE  b on convert(varchar(20),b.EmployeeID) =  Convert(varchar(20),a.Employeeid)
			WHERE     (IDD = @Id)



END
GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[OREmployeeType_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlOREmployeeSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOREmployeeSave
SELECT 
Action
,Employeeid
,TypeId

into #tmpOREmployeeSave


from openxml(@handle, '/DocumentElement/OREmployeeSave',2) with
(
Action int
,Employeeid int
,TypeId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @EmployeeId as int
declare @TypeId	  as int

select @Action = Action,@EmployeeId = Employeeid,@TypeId = Typeid
from   #tmpOREmployeeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
			IF exists(select * from otemployeedoctor where Typeid = @TypeId and Employeeid = @EmployeeId )-- 
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
						end

						

						insert into otemployeedoctor (employeeid,typeid) 
						SELECT Employeeid,TypeId 
						from #tmpOREmployeeSave
				
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
			IF exists(select * from otemployeedoctor where Typeid = @TypeId and  Employeeid = @EmployeeId )
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
						end


			INSERT INTO oldotemployeedoctor
                      (Employeeid, Typeid)
				Select Employeeid,TypeId 
			from otemployeedoctor where employeeid= @EmployeeId

			delete otemployeedoctor where employeeid = @EmployeeId

		   INSERT INTO otemployeedoctor
                      (Employeeid, Typeid)
				Select Employeeid,TypeId
			from #tmpOREmployeeSave

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Edit Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		delete from otemployeedoctor where employeeid=@EmployeeId and Typeid = @TypeId


		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOREmployeeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[OREmployeeType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



 
CREATE PROCEDURE [ITADMIN].[OREmployeeType_DashBoard_SCS]

AS

BEGIN

 	   SELECT     a.EmpCode + ' - ' + a.Name AS NAME, c.Name AS Type,b.IDD AS Id 
		FROM       Employee AS a 
				INNER JOIN OTEmployeeDoctor AS b ON a.ID = b.Employeeid 
				INNER JOIN OTEmployeeDoctorType AS c ON b.Typeid = c.Id
		WHERE     (a.Deleted = 0) 





END
GO

/****** Object:  StoredProcedure [ITADMIN].[ORCharges_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[ORCharges_DashBoard_SCS] --1-- 0
@CategoryId as int
AS

BEGIN

 	  
		SELECT  row_number() over(order by b.Name) SNo,b.ID AS ORNo, b.Name AS ORNoName,isnull(convert(varchar(20),c.Percentage),' ') as Percentage
		FROM    OTNo AS b 
				LEFT OUTER JOIN P_OR AS c 
				INNER JOIN Tariff AS a ON a.Id = c.CategoryID ON b.ID = c.OTIDNo AND c.CategoryID = @CategoryId
		--ORDER BY Otno


END
GO

/****** Object:  StoredProcedure [ITADMIN].[OPTariffSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[OPTariffSave_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlOPTariffHeaderSave			as xml,
	@xmlOPTariffDetails				as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffHeaderSave
SELECT 
Action
,Deleted
,TariffID
,ServiceID

into #tmpOPTariffHeaderSave
from openxml(@handle, '/DocumentElement/OPTariffHeaderSave',2) with
(
Action int
,Deleted int
,TariffID int
,ServiceID int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPTariffDetails
select Id,Price,RefPrice,ROW_NUMBER() over(order by Id) i
into #tmpOPTariffDetails
from openxml(@handle, '/DocumentElement/OPTariffDetails',2) with
(
Id int,Price DECIMAL(10,2),RefPrice DECIMAL(10,2)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
Declare @Deleted as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @ItemID as int
DECLARE @NewPrice as int
Declare @GetDate as Datetime

SELECT @Action = Action,@Deleted = Deleted, @TariffID = TariffID, @ServiceID = ServiceID
from #tmpOPTariffHeaderSave


select @GetDate = GetDate()

IF OBJECT_ID('dbo.CreateOPDetails', 'U') IS NOT NULL 
  DROP TABLE dbo.CreateOPDetails; 

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
	   Declare @SQL nvarchar(max)
	   Declare @filename as varchar(max)

	
		--SELECT PriceTable
		--			FROM  OPBService a
		--	WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = 7


	   
			SELECT  @ServiceName = PriceTable
					FROM  OPBService a
			WHERE   (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID

	
	      ---Select * from OPBService a WHERE  (a.Deleted = 0) AND (a.DisplayServiceId NOT IN (10, 11, 4)) AND a.Id = @ServiceID
		   --Create Table LogTemptblOPCreate( 
					--  Id int NULL,
					--  Price decimal NULL,
					--  LogDate datetime,
					--  PriceTableName varchar(250) NULL
					-- )


			SELECT @ItemID = Id,@NewPrice = Price
			from #tmpOPTariffDetails

					SELECT * INTO CreateOPDetails 
			from #tmpOPTariffDetails  
			---Select * from LogTemptblOPCreate

			---//Format select * From Op_P_2_OtherProcedure where price = 10
			
			   set @filename = 'OP_P_' + cast(@TariffID as varchar) + '_' + cast(@ServiceName as varchar)

					Insert into LogTemptblOPCreate
					(Id,Price,RefPrice,LogDate,PriceTableName)
					Select Id,Price,RefPrice,Getdate(),@filename
					from #tmpOPTariffDetails

				 Update a set a.typeid = 2 from LogTemptblOPCreate a where PriceTableName like '%Doctor%'

				 Declare @TypeId as int

				 Select @TypeId = typeid  from LogTemptblOPCreate where Id in (Select Id from #tmpOPTariffDetails)
	
				---Select * from LogTemptblOPCreate
				---select * from OP_P_1_Test where id = 3384
				begin

				IF  (@TypeId = 2)

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
					' where Id in (Select Id from CreateOPDetails)' +
					' Insert Into ' + cast(@filename as nvarchar) +
					' (id,price,startdatetime,deleted,enddatetime,visittype,RefPrice) ' +
					' Select Id,Price,GetDate(),0,NULL,1,RefPrice ' +
					' from CreateOPDetails '
			
				ELSE

					Set	@SQL =	' Delete from ' + cast(@filename as nvarchar) +
							' where Id in (Select Id from CreateOPDetails)' +
							' Insert Into ' + cast(@filename as nvarchar) +
							' (id,price,startdatetime,deleted,enddatetime) ' +
							' Select Id,Price,GetDate(),0,NULL ' +
							' from CreateOPDetails '
		
								

				--print @SQL

				EXEC (@SQL)


		       END


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN
	
    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPTariffHeaderSave
drop table #tmpOPTariffDetails
drop table CreateOPDetails
--drop table @@TABLENAME@@
--drop table backtest
set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlOPTariffHeaderSave xml
declare @xmlOPTariffDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlOPTariffHeaderSave = '<DocumentElement>\r\n  <OPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <Deleted>0</Deleted>\r\n    <TariffID>2</TariffID>\r\n    <ServiceID>7</ServiceID>\r\n  </OPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlOPTariffDetails = '<DocumentElement>\r\n  <OPTariffDetails>\r\n    <Id>7126</Id>\r\n    <Price>20.66</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7127</Id>\r\n    <Price>35.66</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7128</Id>\r\n    <Price>25.69</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7129</Id>\r\n    <Price>25</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7130</Id>\r\n    <Price>45.69</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7131</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7132</Id>\r\n    <Price>45</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7133</Id>\r\n    <Price>55</Price>\r\n  </OPTariffDetails>\r\n  <OPTariffDetails>\r\n    <Id>7368</Id>\r\n    <Price>10</Price>\r\n  </OPTariffDetails>\r\n</DocumentElement>'
exec ITADMIN.OPTariffSave_SCS @ErrorMessage,@xmlOPTariffHeaderSave,@xmlOPTariffDetails
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/


--Select * from OP_P_1_Doctor where Id = 4187
GO

/****** Object:  StoredProcedure [ITADMIN].[OPServiceTariff_Get_All_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[OPServiceTariff_Get_All_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT     Id, Name
		FROM         OPBService
		WHERE     (Deleted = 0)
END






GO

/****** Object:  StoredProcedure [ITADMIN].[OPService_Get_All_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[OPService_Get_All_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

			SELECT     Id as ID, Name as ServiceName
			FROM       OPBService
			WHERE     (Deleted = 0)
END
GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[OPRevisitDays_View_SCS] 2
CREATE PROCEDURE [ITADMIN].[OPRevisitDays_View_SCS]-- 0
@Id as int

AS


BEGIN
			--SP_HELP RevisitDays
			SELECT 
			b.Name as CompanyName
			,c.Name as CategoryName
			,a.NoOfDays
			,a.CompanyId
			,a.CategoryId
			,a.Id
			from RevisitDays a
			INNER JOIN Company  b on b.ID = a.CompanyId
			INNER JOIN Category c on c.ID = a.CategoryId where a.Id = @Id


END



--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85


--select * from RevisitDays

--select * from Category
--select * from Company


GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[OPRevisitDays_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlOPRevisitSaveModel		   as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPRevisitSaveModel
		SELECT 
		Action
		,CategoryId
		,CompanyId
		,NoOfDays
		,OperatorId
		,ClientIP
		,Id

into #tmpOpRevisitDays
from openxml(@handle, '/DocumentElement/OPRevisitSaveModel',2) with
(
		Action int
		,CategoryId int
		,CompanyId int
		,NoOfDays int
		,OperatorId int
		,ClientIP varchar(30)
		,Id int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int
declare @CompanyId as int

select @Action = Action,@ID = Id,@OperatorId = OperatorId,@CompanyId = CompanyId
from   #tmpOpRevisitDays	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
			
		if exists(Select * From RevisitDays where CompanyId = @CompanyId)
						begin
						COMMIT TRAN
						SET       @ErrorMessage = 'Company already Exists'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
		end
					
			INSERT INTO RevisitDays 
						(CategoryId,CompanyId,NoOfDays,StartDateTime,OperatorId,ModifiedDateTime,ModifiedOperatorId,StationID,ClientIP,Deleted)
				  Select CategoryId,CompanyId,NoOfDays,GETDATE(),OperatorId,NULL,NULL,0,ClientIP,0
				  From #tmpOpRevisitDays
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		
			
				INSERT INTO OLDRevisitDays 
						(CategoryId,CompanyId,NoOfDays,StartDateTime,OperatorId,ModifiedDateTime,ModifiedOperatorId,StationID,ClientIP,Deleted)
				 Select CategoryId,CompanyId,NoOfDays,StartDateTime,OperatorId,ModifiedDateTime,ModifiedOperatorId,StationID,ClientIP,1
				  From RevisitDays where Id = @ID
			
			
					UPDATE a
					SET a.CategoryId = b.CategoryId
						,a.NoOfDays = b.NoOfDays
						,a.ModifiedDateTime = Getdate()
						,a.ModifiedOperatorId = b.OperatorId
						,a.StationID = 0
						,a.ClientIP = b.ClientIP		
					from RevisitDays a
					INNER JOIN #tmpOpRevisitDays b
					ON b.Id = a.Id
					WHERE a.Id = @ID
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		INSERT INTO OLDRevisitDays 
						(CategoryId,CompanyId,NoOfDays,StartDateTime,OperatorId,ModifiedDateTime,ModifiedOperatorId,StationID,ClientIP,Deleted)
		Select CategoryId,CompanyId,NoOfDays,StartDateTime,OperatorId,ModifiedDateTime,ModifiedOperatorId,StationID,ClientIP,1
				  From RevisitDays where Id = @ID
		
		UPDATE RevisitDays set Deleted=1,ModifiedDateTime=GETDATE(),ModifiedOperatorId=@OperatorId where Id =@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOpRevisitDays


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[OPRevisitDays_DashBoardSCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[OPRevisitDays_DashBoardSCS]-- 0
AS

BEGIN
			--SP_HELP Anaesthesia
			SELECT row_number() over(order by b.Id) as SNo,b.Name as CompanyName,c.Name as CategoryName,a.NoOfDays,a.Id
			from RevisitDays a
			LEFT JOIN Company  b on b.ID = a.CompanyId
			LEFT JOIN Category c on c.ID = a.CategoryId 
			where a.Deleted = 0


END




--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85




--select * from Category
--select * from Company
GO

/****** Object:  StoredProcedure [ITADMIN].[OpPackage_DashBoardTProcedure_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[OpPackage_DashBoardTProcedure_SCS] 25701
CREATE PROCEDURE [ITADMIN].[OpPackage_DashBoardTProcedure_SCS] 
@Pin as int
AS

BEGIN
--Declare @Date as Datetime
--Select @Date = Getdate()


SELECT     	0  as selected
		   ,row_number() over(order by d.Name) as SNo 
		   ,d.Code + '' + d.Name AS ProcedureName --Package
		   ,c.Name AS doctor
		   ,a.NoOfDays AS PackDays
		   ,a.NoOfVisits AS PackVisits
		   ,Case when DATEDIFF(d, a.Billdatetime, a.Billdatetime) <> DATEDIFF(d, a.Billdatetime, Getdate()) then a.dayscompleted  
		   ELSE DATEDIFF(d, a.Billdatetime, Getdate()) END AS Days
		   ,a.visitscompleted AS visits
		   ,a.Remarks
		   ,CONVERT(varchar(30),b.Title + ' ' + b.Firstname + ' ' + b.MiddleName + ' ' + b.LastName) AS Patient
		   ,d.ID AS TestId
		   ,c.ID AS doctorid
		   ,a.PinNo
		   ,a.ItemId
		  --, DATEDIFF(d, a.Billdatetime,@Date) AS OriginalDays
FROM         OPProcedureConsultaion AS a 
			INNER JOIN Patient AS b ON a.PinNo = b.Registrationno 
			INNER JOIN Employee AS c ON a.DoctorId = c.ID 
			INNER JOIN OtherProcedures AS d ON a.ItemId = d.ID
WHERE     (a.PinNo = @Pin)
ORDER BY patient, d.Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[OpPackage_DashBoardTest_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
---[ITADMIN].[OpPackage_DashBoardTest_SCS]  1098524
CREATE PROCEDURE [ITADMIN].[OpPackage_DashBoardTest_SCS] --1098524
@Pin as int
AS

BEGIN
--Declare @Date as Datetime
--Select @Date = Getdate()


			SELECT 
			0  as selected
			,row_number() over(order by d.Name) as SNo   
			,d.ID AS TestId
			, d.Code + '' + d.Name AS TestName ---as Package
           ,c.Name AS doctor
		   , a.NoOfDays AS PackDays
		   ,a.NoOfVisits AS PackVisits
           ,a.PinNo
		   ,CONVERT(varchar(30), b.Title + ' ' + b.Firstname + ' ' + b.MiddleName + ' ' + b.LastName) AS Patient 
		   ,Case when DATEDIFF(d, a.Billdatetime, a.Billdatetime) <> DATEDIFF(d, a.Billdatetime, Getdate()) then a.dayscompleted  
		   ELSE DATEDIFF(d, a.Billdatetime, Getdate()) END AS Days
		   ,a.visitscompleted as visits
		   ,a.Remarks
		   ,c.ID AS doctorid
		   ,a.ItemId
		   --,DATEDIFF(d, a.Billdatetime, @Date) AS OriginalDays
FROM         OPPackageConsultation AS a 
				INNER JOIN Patient AS b ON a.PinNo = b.Registrationno 
				INNER JOIN Employee AS c ON a.DoctorId = c.ID 
				INNER JOIN Test AS d ON a.ItemId = d.ID
WHERE     (a.PinNo = @Pin)
ORDER BY patient, d.Name


END
GO

/****** Object:  StoredProcedure [ITADMIN].[OPModifyPackageSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[OPModifyPackageSave_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
    @xmlPackageHeaderSave			as xml,
	@xmlPackageDetailsTestSave      as xml,
	@xmlPackageDetailsProcedSave	as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPackageHeaderSave
SELECT 
Action
into #tmpPackageHeaderSave


from openxml(@handle, '/DocumentElement/PackageHeaderSave',2) with
(
Action int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPackageDetailsTestSave

select SNo,PinNo,ItemId,DoctorId,dayscompleted,visitscompleted,Remarks,ROW_NUMBER() over(order by SNo) i
into #tmpPackageDetailsTestSave

from openxml(@handle, '/DocumentElement/PackageDetailsTestSave',2) with
(
SNo int,PinNo int,ItemId int,DoctorId int,dayscompleted int,visitscompleted int,Remarks nvarchar(250)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------Procedure---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlPackageDetailsProcedSave

select SNo,PinNo,ItemId,DoctorId,dayscompleted,visitscompleted,Remarks,ROW_NUMBER() over(order by SNo) i
into #tmpPackageDetailsProcedSave

from openxml(@handle, '/DocumentElement/PackageDetailsProcedSave',2) with
(
SNo int,PinNo int,ItemId int,DoctorId int,dayscompleted int,visitscompleted int,Remarks nvarchar(250)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

declare @Action	  as int
declare @PinNo as int
declare @SNo as int
declare @dayscompleted as int
declare @visitscompleted as int
declare @ItemId as int
declare @DoctorId as int
declare @Remarks as nvarchar(250)
declare @myMaxId int

			select @Action = Action
			from   #tmpPackageHeaderSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


if exists (select * from #tmpPackageDetailsTestSave)
	Begin
	

		WHILE exists(select top 1 * from #tmpPackageDetailsTestSave)
		  BEGIN
				select top 1 @myMaxId=i from #tmpPackageDetailsTestSave
							
							Update a 
							SET a.dayscompleted = b.dayscompleted
								,a.visitscompleted = b.visitscompleted
								,a.Remarks = b.Remarks
							from OPPackageConsultation a
							Inner join #tmpPackageDetailsTestSave b on a.PinNo = b.PinNo
							where b.i = @myMaxId and a.ItemId = b.ItemId and a.DoctorId = b.DoctorId

						delete from #tmpPackageDetailsTestSave where i= @myMaxId
			END

	END


if exists (select * from #tmpPackageDetailsProcedSave)	
		Begin
				
		WHILE exists(select top 1 * from #tmpPackageDetailsProcedSave)									
			BEGIN
					   select top 1 @myMaxId=i from #tmpPackageDetailsProcedSave
													
						Update a 
						SET a.dayscompleted = b.dayscompleted
							,a.visitscompleted = b.visitscompleted
							,a.Remarks = b.Remarks
						from OPProcedureConsultaion a
						Inner join #tmpPackageDetailsProcedSave b on a.PinNo = b.PinNo
						where b.i = @myMaxId and a.ItemId = b.ItemId and a.DoctorId = b.DoctorId and a.PinNo = b.PinNo

					delete from #tmpPackageDetailsProcedSave where i= @myMaxId
			END
		
		END		


					
			--UPDATE  OPProcedureConsultaion
			--		SET  dayscompleted = 2, visitscompleted = 10, Remarks = ' Testasdsfdfsad'
			--		WHERE PinNo and ItemId and DoctorId IN (select PinNo,ItemId,DoctorId from #tmpPackageDetailsSave)
	  --      --WHERE     (PinNo = 25701) AND (ItemId = 2292) AND (DoctorId = 7995)
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpPackageHeaderSave
drop table #tmpPackageDetailsTestSave
drop table #tmpPackageDetailsProcedSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[OPIPView_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[OPIPView_SCS] --7000
@DoctorId as int
AS

BEGIN

SELECT     a.ID, a.EmpCode + '-' + ' ' + a.Name as Name, b.MarkUpPercent
FROM       Employee AS a 
		   INNER JOIN DoctorMarkUp AS b ON a.ID = b.DoctorId
WHERE     (a.Deleted = 0) and a.Id = @DoctorId
ORDER BY a.EmpCode



END

GO

/****** Object:  StoredProcedure [ITADMIN].[OPDoctorClinic_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[OPDoctorClinic_View_SCS] --158--10437-- 0
@Id as int
AS

BEGIN
		--SELECT * from CombinedCodeDoctors
	
		SELECT     row_number() over(order by a.Name) as SNo,a.ID as Id,a.EmpCode + '-' + a.Name as DoctorName, ISNULL(b.ClinicName, '') AS ClinicName, ISNULL(b.WaitTime, 5) AS WaitTime
		,isnull(b.SqNumber,0) as Sequence ---ISNULL(b.Sequence, 100) AS Sequence
		,0 selected
		--,(case when ClinicName != '' then 1 else 0 end)as  selected
		FROM       Doctor AS a 
					LEFT OUTER JOIN DoctorClinic AS b ON a.ID = b.DoctorId
		WHERE     (a.Deleted = 0) AND (a.DepartmentID = @Id)
		ORDER BY a.Name
		--SELECT a.DoctorId as Id,b.Name From CombinedCodeDoctors a
		--LEFT JOIN Doctor b on b.ID = a.DoctorId where PrimaryConsultant = 2 and CombinedId = @Id
		
END

--Select*  from DoctorClinic where name = '%Surgery%' 
--select * From  Specialisation  where name like '%Surgery Clinic%' 
GO

/****** Object:  StoredProcedure [ITADMIN].[OPDiscountApprovals_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[OPDiscountApprovals_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlOPDiscountApprovalSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPDiscountApprovalSave
SELECT 
Action
,RegNo
,IACode
,DiscountId
,VisitDate
,Reason
,DoctorId
,DiscounTType
,VisitEndDate
,OperatorId
into #tmpOPDiscountApprovalSave



from openxml(@handle, '/DocumentElement/OPDiscountApprovalSave',2) with
(
Action int
,RegNo int
,IACode varchar(50)
,DiscountId int
,VisitDate datetime
,Reason varchar(250)
,DoctorId int
,DiscounTType int
,VisitEndDate datetime
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @OperatorId as int


select @Action = Action,@OperatorId = OperatorId
from   #tmpOPDiscountApprovalSave
	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	 --  	if exists(SELECT a.Name AS Station
		--			FROM         OPDiscountApproval AS a 
		--			INNER JOIN    Station AS b ON a.Stationid = b.ID
		--			WHERE     a.Stationid <> @StationId AND a.Name = @Prefix)
		--begin
		--COMMIT TRAN
		--SET @ErrorMessage = 'Bill Prefix Already Exists!'
		--SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--SET @ERROR_STATE = ERROR_STATE()
		--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--return;
		--end

		--ELSE
			BEGIN

				 Insert into OPDiscountApproval  
				 (RegNo,IACode,OperatorId,DateTime,DiscountId,VisitDate,Reason,Deleted,DoctorId,DiscounTType, VisitEndDate)  
				 SELECT RegNo,IACode,OperatorId,Getdate(),DiscountId,VisitDate,Reason,0,DoctorId,DiscounTType,VisitEndDate
				 FROM #tmpOPDiscountApprovalSave
				--values (55,'SA01',352,getdate(), 8 ,'8/17/2016', 'sssss',0,8707, 0, '8/17/2016' )

		
			END
			--select * from OPDiscountApproval
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		---For Checking the Updates
				
		--INSERT INTO CanOPBillType
  --                  (Id, Name, Description, IsLocked, StartDateTime, EndDateTime, deleted, billtype, currentno, stationId, OperatorId, ModifiedOperator, ModifiedDatetime)
		--SELECT       id, Name, Description, islocked, startdatetime, enddatetime, deleted, billtype, currentno, Stationid, OperatorId,@OperatorId, GETDATE()
		--FROM         OPBillType
		--WHERE       (Stationid = @StationId) AND (billtype = @BillTypeId)
	
		--Update OPBillType set Name = @Prefix where StationId= @StationId and billType= @BillTypeId and Description = @BillTypeName
				
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPDiscountApprovalSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7

--Select CODE + '-' + NAME as NameFld ,ID as IdFld from COMPANY where  DELETED=0 AND CATEGORYID=12


GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Occupation_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Occupation
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Occupation_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlOccupationSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOccupationSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpOccupationSave

from openxml(@handle, '/DocumentElement/OccupationSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpOccupationSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Occupation where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Occupation Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into Occupation(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@Name),'"',Getdate(),0,@OperatorId
				from #tmpOccupationSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus

				Update  Occupation set Name =upper(@Name),ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOccupationSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Occupation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Occupation_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Occupation
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminProced_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[NursingAdminProced_View_SCS] 12
CREATE PROCEDURE [ITADMIN].[NursingAdminProced_View_SCS] --2
@Id as int

AS


BEGIN      

			--SP_HELP RevisitDays
		   SELECT a.Name,a.code as Code,a.costprice as CostPrice,b.Name as DepartmentName,a.departmentid as DepartmentId,a.id as Id
		   from bedsideprocedure a 
		   LEFT JOIN Department b ON b.ID = a.departmentid
		   where a.id=@Id

END
GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdministration_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[NursingAdministration_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlNursingAdminisSaveModel		   as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlNursingAdminisSaveModel
		SELECT 
		Action
		,Id
		,Name
		,Code
		,CostPrice
		,DepartmentId
		--,OperatorId

into #tmpNursingAdminSave
from openxml(@handle, '/DocumentElement/NursingAdminisSaveModel',2) with
(
		Action int
		,Id int
		,Name varchar(100)
		,Code varchar(30)
		,CostPrice decimal(18,2)
		,DepartmentId varchar(30)
		--,OperatorId int
		
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
--declare @OperatorId as int

select @Action = Action,@ID = Id--,@OperatorId = OperatorId
from   #tmpNursingAdminSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	---   select  * from BedsideProcedure
				INSERT INTO BedsideProcedure
                      (Name, Costprice, StartDateTime, EndDateTime, Deleted,Code, DepartmentID, ArabicName, ArabicCode,StatusType,uploaded)
				SELECT Name, CostPrice, GETDATE(), NULL, 0, Code, DepartmentId, Name, Code,0,0
				FROM #tmpNursingAdminSave
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		
					UPDATE a
					SET a.Name = b.Name
						,a.ArabicName = '"'
						,a.ArabicCode = b.Code
						,a.Costprice = b.CostPrice
						,a.Code = b.Code
						,a.DepartmentID = b.DepartmentId
					from BedsideProcedure a
					INNER JOIN #tmpNursingAdminSave b
					ON b.Id = a.Id
					WHERE a.Id = @ID
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
				update BedsideProcedure  set deleted=1,enddatetime=getdate() where id=@ID
				--select * From BedsideProcedure

        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpNursingAdminSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages 
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[NursingAdminisProced_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[NursingAdminisProced_DashBoard_SCS]-- 0
AS

BEGIN
			--SP_HELP BedsideProcedure
		SELECT      row_number() over(order by deleted) as SNo, code + ' - ' + name AS Name,ID as Id
		FROM         BedsideProcedure
		WHERE     (deleted = 0)
		ORDER BY deleted desc




END




--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85




--select * from Category
--select * from Company
GO

/****** Object:  StoredProcedure [ITADMIN].[NonDiscountItemSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[NonDiscountItemSave_SCS]
	
    @ErrorMessage						as NVARCHAR(max) OUT,
    @xmlNonDiscountHeaderSave			as xml,
	@xmlNonDiscountDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlNonDiscountHeaderSave
SELECT 
Action
,ServiceId

into #tmpNOnDiscountHeaderSave


from openxml(@handle, '/DocumentElement/NonDiscountHeaderSave',2) with
(
Action int
,ServiceId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlNonDiscountDetailsSave

select ItemId
into #tmpNonDiscountDetailsSave

from openxml(@handle, '/DocumentElement/NonDiscountDetailsSave',2) with
(
ItemId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ServiceId as int


SELECT @Action = Action,@ServiceId = ServiceId
from   #tmpNOnDiscountHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					
					Delete from OPNonDiscountableItems where ServiceId =@ServiceId
					    
					 
					Insert into OPNonDiscountableItems  
							(DiscountTypeId,ServiceId,DeptId,ItemId)
					Select  0,@ServiceId,0,ItemId
					FROM #tmpNonDiscountDetailsSave
		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpNOnDiscountHeaderSave
drop table #tmpNonDiscountDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[NonDiscountableItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
---[ITADMIN].[NonDiscountableItem_DashBoard_SCS] 11 -- 3,2,5,7,11,14,18   
CREATE PROCEDURE [ITADMIN].[NonDiscountableItem_DashBoard_SCS]
@ServiceId as int = 7 
AS

BEGIN
SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT
	Declare @MasterTable as Varchar(250) 



	 IF (@ServiceId = 11)
			 BEGIN
					
					Select @MasterTable = MasterTable from OpBService where id=@ServiceId

									SET @SQL = 'Select ItemCode + ' + ''' - ''' + ' + Name as Items,Id  from dbo.' + @MasterTable 	
									--Print  @SQL     
									
									
									             
					EXEC sp_executesql @SQL

			 END


	ELSE IF (@ServiceId != 2)
			BEGIN
				 ---Select  MasterTable from OpBService where id=3 
					Select @MasterTable = MasterTable from OpBService where id=@ServiceId


					SET @SQL = 'Select Code  + ' + ''' - ''' + ' + Name as Items, Id  from dbo.' + @MasterTable 	
			           -- Print  @SQL                            
					EXEC sp_executesql @SQL
			END

			   ELSE 

					 BEGIN
							Select @MasterTable = MasterTable from OpBService where id=@ServiceId


							SET @SQL = 'Select EmpCode + ' + ''' - ''' + ' + Name as Items,Id  from dbo.' + @MasterTable 	
								-- Print  @SQL                  
							EXEC sp_executesql @SQL
					 END

END  
GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Nationality_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Nationality
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Nationality_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlNationalitySave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlNationalitySave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpNationalitySave

from openxml(@handle, '/DocumentElement/NationalitySave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpNationalitySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from City where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Nationality Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into Nationality(Name ,ArabicName,StartDateTime, Deleted) 
				Select  upper(@Name),'"',Getdate(),0
				from #tmpNationalitySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from Nationality

				Update  Nationality set Name = upper(@Name)--,ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpNationalitySave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Nationality_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Nationality_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Nationality
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[MenuSync]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
WARDS.[WARDS_OTHER_PROC_VIEW] 15
*/

CREATE proc [ITADMIN].[MenuSync]
@Mod int,
@XML xml
as
if @mod = 1 
begin
	DECLARE @HIS_MODULES TABLE (
	[ModuleID] [int] NULL,
	[ModuleName] [varchar](100) NULL,
	[URLLink] [varchar](50) NULL,
	[ImgSrc] [varchar](50) NULL,
	[StationSpecific] [varchar](1) NULL,
	[TPwdRequired] [varchar](1) NULL,
	[Deleted] [bit] NULL,
	[VirtualPoolName] [varchar](20) NULL,
	[IncludeVPoolName] [bit] NULL
	)
	INSERT @HIS_MODULES (
	ModuleID,
	ModuleName,
	URLLink,
	ImgSrc,
	StationSpecific,
	TPwdRequired,
	Deleted,
	VirtualPoolName,
	IncludeVPoolName
	)
	SELECT 							
	ModuleID = doc.col.value('ModuleID[1]', 'INT'),
	ModuleName = doc.col.value('ModuleName[1]', 'varchar(255)'),
	URLLink = doc.col.value('URLLink[1]', 'varchar(50)'),
	ImgSrc = doc.col.value('ImgSrc[1]', 'varchar(50)'),
	StationSpecific = doc.col.value('StationSpecific[1]', 'varchar(1)'),
	TPwdRequired = doc.col.value('TPwdRequired[1]', 'varchar(1)'),
	Deleted = doc.col.value('Deleted[1]', 'bit')	,
	VirtualPoolName = doc.col.value('VirtualPoolName[1]', 'varchar(20)')	,
	IncludeVPoolName = doc.col.value('IncludeVPoolName[1]', 'bit')
	FROM @XML.nodes('/DocumentElement/Data') doc(col)		
end

if @mod = 2 
begin
	DECLARE @ACCESS_MODULEFEATURES TABLE (
	ModuleId int,
	FeatureId int)
	
	INSERT @ACCESS_MODULEFEATURES (	ModuleId,FeatureId)
	SELECT 							
	ModuleId = doc.col.value('ModuleId[1]', 'INT'),
	FeatureId = doc.col.value('FeatureId[1]', 'INT')
	FROM @XML.nodes('/DocumentElement/Data') doc(col)		
	
	--insert into HISGLOBAL.ACCESS_MODULEFEATURES_DEL (ModuleId,	FeatureId,Deleted)
	--select a.ModuleId,a.FeatureId,0 from HISGLOBAL.ACCESS_MODULEFEATURES a
	--inner join @ACCESS_MODULEFEATURES b on a.FeatureId = b.FeatureId and a.ModuleId = b.ModuleId
	
	delete a 
	from HISGLOBAL.ACCESS_MODULEFEATURES a
	where ModuleId in (select max(ModuleId) from @ACCESS_MODULEFEATURES)
	
	
	insert into HISGLOBAL.ACCESS_MODULEFEATURES (ModuleId,	FeatureId,Deleted)
	select a.ModuleId,a.FeatureId,0 from @ACCESS_MODULEFEATURES a
	
end

if @mod = 3 
begin
	DECLARE @ACCESS_FEATUREFUNCTIONS TABLE (
	FeatureId int,
	FunctionID int)
	
	INSERT @ACCESS_FEATUREFUNCTIONS (FeatureId,FunctionID)
	SELECT 							
	FeatureId = doc.col.value('FeatureId[1]', 'INT'),
	FunctionID = doc.col.value('FunctionID[1]', 'INT')
	FROM @XML.nodes('/DocumentElement/Data') doc(col)		
	
	--insert into HISGLOBAL.ACCESS_FEATUREFUNCTIONS (FunctionID,	FeatureId,Deleted)
	--select a.ModuleId,a.FeatureId,0 from HISGLOBAL.ACCESS_MODULEFEATURES a
	--inner join @ACCESS_FEATUREFUNCTIONS b on a.FeatureId = b.FeatureId and a.ModuleId = b.ModuleId
	
	delete a 
	from HISGLOBAL.ACCESS_FEATUREFUNCTIONS a
	where FeatureId in (select featureid from @ACCESS_FEATUREFUNCTIONS)
	
	
	insert into HISGLOBAL.ACCESS_FEATUREFUNCTIONS (FeatureId,FunctionID,Deleted)
	select a.FeatureId,a.FunctionID,0 from @ACCESS_FEATUREFUNCTIONS a
	
end
	
if @mod = 5 
begin
	DECLARE @MENU_FUNCTIONS TABLE (
	Name varchar(50),
	FunctionID int,
	PasswordTrans int)
	
	INSERT @MENU_FUNCTIONS (Name,FunctionID,PasswordTrans)
	SELECT 							
	Name = doc.col.value('Name[1]', 'varchar(50)'),
	FunctionID = doc.col.value('FunctionID[1]', 'INT'),
	PasswordTrans = doc.col.value('PasswordTrans[1]', 'INT')
	FROM @XML.nodes('/DocumentElement/Data') doc(col)		
		
	insert into HISGLOBAL.MENU_FUNCTIONS (Name,FunctionID,PasswordTrans,Deleted)
	select Name,FunctionID,PasswordTrans,0 from @MENU_FUNCTIONS 
	--where FunctionID not in (
	--select FunctionID from HISGLOBAL.MENU_FUNCTIONS)
	
end
GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Marital_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      MaritalStatus
		WHERE     (ID = @Id)
END




GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[Marital_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlMaritalSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlMaritalSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpMaritalSave

from openxml(@handle, '/DocumentElement/MaritalSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpMaritalSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from MaritalStatus where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Marital Status Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into MaritalStatus(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@Name),'"',Getdate(),0,@OperatorId
				from #tmpMaritalSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus

				Update  MaritalStatus set Name =upper(@Name),ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpMaritalSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Marital_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Marital_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       MaritalStatus
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[MarckupBedType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[MarckupBedType_DashBoard_SCS] -- 0

AS

BEGIN

 


if exists(select Name from  dbo.BedType where Id not in (select BedTypeId from P_IPCSTBEDTYPEMARKUP ) and deleted = 0)
Begin
			SELECT    0 as Selected 
					  ,b.name as Name
					  ,isnull(a.MarkupPer,'0') as  MarkupPer
					  ,0 as NewMarkUp
					  ,b.id as Id
			FROM       P_IPCSTBEDTYPEMARKUP AS a 
					   LEFT JOIN  dbo.BedType AS b ON a.BedTypeId = b.id
			WHERE     a.Deleted = 0 and b.deleted = 0
			union all
			select '0',(select Name from  dbo.BedType where Id not in (select BedTypeId from P_IPCSTBEDTYPEMARKUP ) and deleted = 0),'0','0',(select Id from  dbo.BedType where Id not in (select BedTypeId from P_IPCSTBEDTYPEMARKUP ) and deleted = 0)


END
ELSE
BEGIN

			SELECT    0 as Selected 
					  ,b.name as Name
					  ,isnull(a.MarkupPer,'0') as  MarkupPer
					  ,0 as NewMarkUp
					  ,b.id as Id
			FROM       P_IPCSTBEDTYPEMARKUP AS a 
					   LEFT JOIN  dbo.BedType AS b ON a.BedTypeId = b.id
			WHERE     a.Deleted = 0 and b.deleted = 0

END


---wipro 
--Select b.Id, b.Name, a.MarkUpPer from P_IPCSTBEDTYPEMARKUP a, BedType b Where a.BedtypeID =* b.ID and a.Deleted = 0


END
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedSelectedDoctor_HeaderView_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[MappingCombinedSelectedDoctor_HeaderView_SCS]-- 0
@Id as int
AS

BEGIN
		--SELECT * from CombinedCodeDoctors
	
		SELECT a.DoctorId as Id,b.Name From CombinedCodeDoctors a
		LEFT JOIN Doctor b on b.ID = a.CombinedId where PrimaryConsultant = 1 and CombinedId = @Id

		--SELECT a.DoctorId as Id,b.Name From CombinedCodeDoctors a
		--LEFT JOIN Doctor b on b.ID = a.DoctorId where PrimaryConsultant = 2 and CombinedId = @Id
		
END
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedSelectedDoctor_DetailsView_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[MappingCombinedSelectedDoctor_DetailsView_SCS]-- 0
@Id as int
AS

BEGIN
		--SELECT * from CombinedCodeDoctors
	
		--SELECT a.CombinedId,b.Name From CombinedCodeDoctors a
		--LEFT JOIN Doctor b on b.ID = a.CombinedId where PrimaryConsultant = 1 and CombinedId = 10437

		SELECT a.DoctorId as Id,b.Name From CombinedCodeDoctors a
		LEFT JOIN Doctor b on b.ID = a.DoctorId where PrimaryConsultant = 2 and CombinedId = @Id
		
END
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedDoctorSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[MappingCombinedDoctorSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlCombinedDoctorHeaderSave			as xml,
	@xmlCombinedDoctorDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCombinedDoctorHeaderSave

SELECT 
Action
,OperatorId
,CombinedDoctorId
,PrimaryConsultanId
Into #tmpCombinedDoctorSaveHeader

from openxml(@handle, '/DocumentElement/CombinedDoctorHeaderSave',2) with
(
Action int
,OperatorId int
,CombinedDoctorId int
,PrimaryConsultanId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCombinedDoctorDetailsSave

select DoctorId
Into #tmpCombinedDoctorSaveDetails

from openxml(@handle, '/DocumentElement/CombinedDoctorDetailsSave',2) with
(
DoctorId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @CombinedDoctorId as int
declare @OperatorId as int
declare @PrimaryConsultanId as int

SELECT @Action = Action,@CombinedDoctorId = CombinedDoctorId,@OperatorId = OperatorId,@PrimaryConsultanId = PrimaryConsultanId
from   #tmpCombinedDoctorSaveHeader	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				

					if exists(select * from CombinedCodeDoctors where  CombinedId =@CombinedDoctorId and DoctorId in (select DoctorId from #tmpCombinedDoctorSaveDetails))
				begin
					COMMIT TRAN
					SET       @ErrorMessage = 'Combined Doctor Already Exists!'
					SET @ERROR_SEVERITY = ERROR_SEVERITY()
					SET @ERROR_STATE = ERROR_STATE()
					RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
					return;
				end

					Insert into CombinedCodeDoctors 
					(DoctorId, CombinedId,PRIMARYCONSULTANT,StartDateTime,OperatorId)
					SELECT  @PrimaryConsultanId,@CombinedDoctorId,1,Getdate(),@OperatorId
					from #tmpCombinedDoctorSaveHeader

					Insert into CombinedCodeDoctors 
					(DoctorId,CombinedId,PRIMARYCONSULTANT,StartDateTime,OperatorId)  
					SELECT DoctorId,@CombinedDoctorId,2,Getdate(),@OperatorId
					from #tmpCombinedDoctorSaveDetails
					
		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCombinedDoctorSaveDetails
drop table #tmpCombinedDoctorSaveHeader	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  


--select * From CombinedCodeDoctors
--10437
--1373
GO

/****** Object:  StoredProcedure [ITADMIN].[MappingCombinedDoctor_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[MappingCombinedDoctor_DashBoard_SCS]-- 0

AS

BEGIN


		Select Id,Empcode  + '-' + ' ' + Name as Name from Doctor where deleted = 0 order by Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[MapOtherProcedure_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[MapOtherProcedure_View_SCS] --6 --6-- 0
@Id as int
AS

BEGIN

		
		Select row_number() over(order by a.Code) as SNo,a.Code +  ' '  + a.Name as Name,b.Name as DepartmentName,d.ServiceName,a.ID as ItemId,c.ServiceID 
		from OtherProcedures  a
		LEFT JOIN Department b on a.DepartmentID = b.ID 
		LEFT JOIN OtherPackageProcedures c on c.ItemID = a.ID
		LEFT JOIN IPBService d on d.ID = c.ServiceID
		where c.ServiceID = @Id and a.Deleted = 0 and c.Deleted = 0



END


GO

/****** Object:  StoredProcedure [ITADMIN].[MapOtherProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[MapOtherProcedure_DashBoard_SCS]-- 0

AS

BEGIN

 		Select --row_number() over(order by a.Code) as SNo
		a.Code +  ' '  + a.Name as Name,b.Name as DepartmentName,isnull(d.ServiceName,' ') as ServiceName,a.ID as ItemId,isnull(c.ServiceID,'0') as  ServiceID
		from OtherProcedures  a
		LEFT JOIN Department b on a.DepartmentID = b.ID 
		LEFT JOIN OtherPackageProcedures c on c.ItemID = a.ID
		LEFT JOIN IPBService d on d.ID = c.ServiceID 
		where a.Deleted = 0
	--SELECT     ID Id, Code + ' '  +  Name as Name
	--		FROM  OtherProcedures
	--		WHERE (Deleted = 0)
	--		ORDER BY Code




END
GO

/****** Object:  StoredProcedure [ITADMIN].[MachineProcedureModalityList]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE proc [ITADMIN].[MachineProcedureModalityList]
as

select b.ID as id,b.Code + ' - ' + b.Name as text, c.Code as name from ITADMIN.InvestigationModalitySetup a
left join test b on a.ItemID = b.ID 
inner join itadmin.ModalitySetup c on a.ModalityID = c.id	

GO

/****** Object:  StoredProcedure [ITADMIN].[MachineListSave]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE proc [ITADMIN].[MachineListSave]
@ID	int,
@Code	varchar(50),
@Name	varchar(100),
@Description	varchar(250),
@DepartmentID	int,
@LocationID	int,
@Room	varchar(100),
@AcquisitionDate	datetime,
@CommisionDate	datetime,
@XML xml,
@XMLDoctors xml,
@ReturnMessage VARCHAR(100) OUT,
@ReturnFlag int OUT
as
DECLARE @Modal TABLE (	
	ModalityID int
)

DECLARE @Doctors TABLE(	
	EmployeeId int
)


INSERT @Modal (
	ModalityID 
)
SELECT 							
	ModalityID = doc.col.value('ModalityID[1]', 'INT')	
FROM @XML.nodes('/DocumentElement/Data') doc(col)	



INSERT @Doctors(
	EmployeeId  
)
SELECT 							
	EmployeeId = doc.col.value('EmployeeId[1]', 'INT')	
FROM @XMLDoctors.nodes('/DocumentElement/Data') doc(col)	

if (@ID = 0)
begin
	insert into ITADMIN.MachineSetup
	(
	Code,
	Name,
	Description,
	DepartmentID,
	LocationID,
	Room,
	AcquisitionDate,
	CommisionDate)
	select 
	@Code,
	@Name,
	@Description,
	@DepartmentID,
	@LocationID,
	@Room,
	@AcquisitionDate,
	@CommisionDate

		
	set @ReturnMessage = 'Machine Successfully Added!';
	set @ReturnFlag = SCOPE_IDENTITY()

	insert into ITADMIN.MachineModalitySetup (MachineID,ModalityID,Deleted)
	select @ReturnFlag,ModalityID,0 from @Modal
	
	insert into ITADMIN.MachineDoctorSetup(MachineID,DoctorId, DepartmentID,Deleted)
	select @ReturnFlag,EmployeeId,@DepartmentID,0 from @Doctors
end
else
begin

	update ITADMIN.MachineSetup set	
	Code = @Code,
	Name = @Name ,
	Description = @Description,
	DepartmentID = @DepartmentID,
	LocationID = @LocationID,
	Room =@Room,
	AcquisitionDate = @AcquisitionDate,
	CommisionDate = @CommisionDate 
	where id = @ID
	set @ReturnMessage = 'Machine Successfully Updated!';
	
	update ITADMIN.MachineModalitySetup set deleted = 1 where MachineID = @ID

	insert into ITADMIN.MachineModalitySetup (MachineID,ModalityID,Deleted)
	select @ID,ModalityID,0 from @Modal
	
	update ITADMIN.MachineDoctorSetup set Deleted = 1 where MachineID = @ID

	insert into ITADMIN.MachineDoctorSetup(MachineID,DoctorId, DepartmentID,Deleted)
	select @ID,EmployeeId,@DepartmentID,0 from @Doctors
	
set @ReturnFlag =1

end
return


GO

/****** Object:  StoredProcedure [ITADMIN].[MachineList]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE proc [ITADMIN].[MachineList]
as


select a.*,b.Name as Department,c.ID as Location,c.name as LocationName,d.ModalityID as ModalityID,e.Code as ModalityCode , 0 DoctorId
 from ITADMIN.MachineSetup a
left join department b on a.DepartmentID = b.ID
left join Location c on a.LocationID = c.ID
left join itadmin.MachineModalitySetup d on a.ID = d.MachineID
left join itadmin.ModalitySetup e on d.ModalityID = e.ID
where d.Deleted = 0 and b.Deleted = 0 and c.Deleted = 0 
GO

/****** Object:  StoredProcedure [ITADMIN].[Location_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Location_View_SCS]-- 0
@LocationId as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      Location
		WHERE     (ID = @LocationId)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[Location_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[Location_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlLocationSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlLocationSave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpLocationSave

from openxml(@handle, '/DocumentElement/LocationSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @LocationId as int
--declare @MaxTariffId as int
declare @LocationName as varchar(250)
declare @OperatorId as int



select @Action = Action,@LocationId = Id,@LocationName  = Name,@OperatorId = OperatorId
from   #tmpLocationSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from Location where Name = @LocationName)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Location Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into Location(Name ,ArabicName,StartDateTime, Deleted,OperatorId) 
				Select  upper(@LocationName),'"',Getdate(),0,@OperatorId
				from #tmpLocationSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update  Location set Name =upper(@LocationName),ModifiedBy = @OperatorId,ModifiedDateTime = Getdate()			
				where ID =@LocationId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpLocationSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[Location_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Location_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       Location
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_View_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[LaundryItem_View_SCS]--22--22-- 2-- 0
@Id as int
AS

BEGIN
				SELECT 
					a.Name
					,a.Code
					,a.CostPrice
					,a.DepartmentID as DepartmentId
					,b.Name as DepartmentName
					,a.ID as Id
					FROM LaundryItem a 
					LEFT JOIN Department b on b.ID = a.DepartmentID
					where a.id= @Id
END
GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[LaundryItem_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlLaundryItemSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlLaundryItemSave
SELECT 
Action
,Id
,Name
,Code 
,CostPrice
,OperatorId
,DepartmentId
into #tmpLaundrySave

from openxml(@handle, '/DocumentElement/LaundryItemSave',2) with
(
Action int
,Id int 
,Name varchar(250)
,Code varchar(250)
,CostPrice decimal
,OperatorId int
,DepartmentId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DepartmentId as int
declare @Id as int
declare @Code as varchar(250)
declare @Name as varchar(250)
declare @CostPrice as decimal


select @Action = Action,@OperatorId = OperatorId,@Id = Id,@DepartmentId = DepartmentId,@Code = Code,@CostPrice =CostPrice,@Name = Name
from   #tmpLaundrySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from LaundryItem where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Laundry Item  Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into LaundryItem(Name ,costprice,StartDateTime, Deleted,EndDateTime,Code,DepartmentID,ArabicName,ArabicCode,Units) 
				Select  upper(@Name),CostPrice,Getdate(),0,NULL,Code,DepartmentId,'"','"','Nos'
				from #tmpLaundrySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				
				Update LaundryItem set name = @Name,arabicname='"',ArabicCode='"',costprice=@CostPrice,enddatetime=getdate(),code=@Code,departmentid=@DepartmentId where id=@Id



---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpLaundrySave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[LaundryItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[LaundryItem_DashBoard_SCS]-- 0

AS

BEGIN

			
			SELECT      ROW_NUMBER() over(order by Id)  as SNo, Code + ' - ' + Name AS Name,ID as Id
			FROM         LaundryItem
			WHERE     (Deleted = 0)
			ORDER BY Id
END
GO

/****** Object:  StoredProcedure [ITADMIN].[LaubdryItem_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[LaubdryItem_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlLaundryItemSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlLaundryItemSave
SELECT 
Action
,Id
,Name
,Code 
,CostPrice
,OperatorId
,DepartmentId
into #tmpLaundrySave

from openxml(@handle, '/DocumentElement/LaundryItemSave',2) with
(
Action int
,Id int 
,Name varchar(250)
,Code varchar(250)
,CostPrice decimal
,OperatorId int
,DepartmentId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DepartmentId as int
declare @Id as int
declare @Code as varchar(250)
declare @Name as varchar(250)
declare @CostPrice as decimal


select @Action = Action,@OperatorId = OperatorId,@Id = Id,@DepartmentId = DepartmentId,@Code = Code,@CostPrice =CostPrice
from   #tmpLaundrySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	 --  	if exists(select * from LaundryItem where Id = @Id)
		--	begin
		--COMMIT TRAN
		--SET       @ErrorMessage = 'Laundry Item  Already Exists!'
		--SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--SET @ERROR_STATE = ERROR_STATE()
		--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--return;
		--end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into LaundryItem(Name ,costprice,StartDateTime, Deleted,EndDateTime,Code,DepartmentID,ArabicName,ArabicCode,Units) 
				Select  upper(@Name),CostPrice,Getdate(),0,NULL,Code,DepartmentId,'"','"','Nos'
				from #tmpLaundrySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				
				Update LaundryItem set name = @Name,arabicname='"',ArabicCode='"',costprice=@CostPrice,enddatetime=getdate(),code=@Code,departmentid=@DepartmentId where id=@Id



---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpLaundrySave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[ItemMapping_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[ItemMapping_Save_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlItemMappingSaveModel			    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlItemMappingSaveModel
SELECT 
Action
,fromstation
,tostation
into #tmpItemMappingSave

from openxml(@handle, '/DocumentElement/ItemMappingSaveModel',2) with
(
Action int
,fromstation int
,tostation int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int,@fromstation as int,@tostation as int

select @Action = Action,@fromstation = fromstation,@tostation = tostation
from   #tmpItemMappingSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --from = 69
	   --to = 124
	--uncomment on this on feb-19-2017 JFJ as per angelo. nagdodouble insert daw
			if exists(select * from itemstore where StationID = @tostation)
				BEGIN
						
						COMMIT TRAN
						SET @ErrorMessage = 'Mapping Station Already Exists!Contact IT Administrator'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
				END


			  Select * into tempitemstore from itemstore where StationID = @fromstation

			  INSERT INTO ItemStore
					(ItemID, MaxLevel, MinLevel,QOH, ROL, ROQ, ABC, FSN, StationID, Deleted, StartDateTime, EndDateTime, ved, Tax, UnitID, ConversionQty)
			  Select ItemID,MaxLevel,MinLevel,QOH,ROL,ROQ,ABC,FSN,@tostation,Deleted,StartDateTime,EndDateTime,ved,Tax,UnitID,ConversionQty
					FROM tempitemstore
			
			drop table tempitemstore
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
			
        BEGIN TRAN


				--if exists(select * from CategoryStationMap where categoryid = @categoryid and  stationid = @stationid)
				--BEGIN
						
				--		COMMIT TRAN
				--		SET  @ErrorMessage = 'Mapping Station Already Exists!'
				--		SET @ERROR_SEVERITY = ERROR_SEVERITY()
				--		SET @ERROR_STATE = ERROR_STATE()
				--		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				--		return;
				--END

				--UPDATE a
				--SET a.stationid = b.stationid
				--from CategoryStationMap a
				--INNER JOIN #tmpCatStationSave b
				--ON b.categoryid = a.categoryid
			
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		--delete from CategoryStationMap where categoryid = @categoryid and stationid = @stationid
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpItemMappingSave


set xact_abort OFF

END
GO

/****** Object:  StoredProcedure [ITADMIN].[ItemCode_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [ITADMIN].[ItemCode_Save_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
    @xmlItemCodeHeaderSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlItemCodeHeaderSave
SELECT 
Action
,OTNO
,ItemCode
,Type
,DepartmentId
,OperatorId

into #tmpOtItemCodeSave


from openxml(@handle, '/DocumentElement/ItemCodeHeaderSave',2) with
(
Action int
,OTNO int
,ItemCode varchar(250)
,Type int
,DepartmentId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @Type as int

select @Action = Action,@Type = Type
from   #tmpOtItemCodeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
			--	begin
			--			COMMIT TRAN
			--			SET  @ErrorMessage = 'Already Exists!'
			--			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			--			SET @ERROR_STATE = ERROR_STATE()
			--			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			--	return;
			--			end


			Update OTItemCodes Set Deleted = 1 where Type = @Type

			INSERT INTO OTItemCodes
                      (OTNO, ItemCode, Type, Deleted, OperatorId,DepartmentID)
				SELECT OTNO,ItemCode,Type,0,OperatorId,DepartmentId
				FROM #tmpOtItemCodeSave
								
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
	--	end
			
					--INSERT INTO OLDP_AsstSurgeon
     --                 (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
					--SELECT  ID, CategoryID, Percentage, StartDateTime,Getdate(), Deleted, OTIDNo,@OperatorId,SlNo
					--FROM    P_AsstSurgeon
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

					--UPDATE    P_AsstSurgeon
					--SET       Percentage = @Percentage, StartDateTime = Getdate(), Operatorid = @OperatorId
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--INSERT INTO OLDP_AsstSurgeon
  --      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
		--SELECT     ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo,@OperatorId, SlNo
		--FROM         P_AsstSurgeon
		--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

		--delete from p_AsstSurgeon where CategoryId=@CategoryId and OTIDNo=@OTIDNo and Slno=@SlnoId

		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOtItemCodeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--Tariff
--Select Name as NameFld ,Id as IdFld from TARIFF where  Deleted=0
--ORNO

GO

/****** Object:  StoredProcedure [ITADMIN].[ITEMCODE_PatientPreparationFee_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[ITEMCODE_PatientPreparationFee_SCS] --2-- 0

AS

BEGIN
			
	SELECT     ISNULL(ItemCode, '') AS ItemCode
	FROM       OTItemCodes
	WHERE     (Type = 1) AND (Deleted = 0)
			
END
GO

/****** Object:  StoredProcedure [ITADMIN].[ITEMCODE_AsstSurgeon_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[ITEMCODE_AsstSurgeon_SCS] --2-- 0

AS

BEGIN
			
	
		SELECT     ISNULL(ItemCode, '') AS ItemCode
		FROM         OTItemCodes
		WHERE     (Type = 4) AND (Deleted = 0)
			
END

GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS_Test]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[IPTariffSave_SCS_Test]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlIPTariffHeaderSave			as xml,
	@xmlIPTariffDetailsSave			as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffHeaderSave
SELECT 
Action
,TariffID
,ServiceID
,ItemId
,OperatorId

into #tmpIPTariffHeaderSave
from openxml(@handle, '/DocumentElement/IPTariffHeaderSave',2) with
(
Action int
,TariffID int
,ServiceID int
,ItemId int
,OperatorId int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffDetailsSave
select BedTypeId,Price,StartDate,ROW_NUMBER() over(order by BedTypeId) i
into #tmpIPTariffDetailsSave
from openxml(@handle, '/DocumentElement/IPTariffDetailsSave',2) with
(
BedTypeId int,Price DECIMAL,StartDate Datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @NewPrice as int
Declare @OperatorId as int
Declare @ItemId as int

SELECT @Action = Action,@ItemId = ItemId,@OperatorId = OperatorId
from #tmpIPTariffHeaderSave

--SELECT @ItemId = ItemId
--from #tmpIPTariffDetailsSave
--select @GetDate = GetDate()


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --Declare @filename as varchar(max)
		DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30)
		, @PriceTable VARCHAR(30), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max)


		Select @PriceTable = PriceTable from dbo.IPBService where Id = @ServiceID 

		--Select BedTypeId,Price,StartDate into checkTempBedType
		--from #tmpIPTariffDetailsSave


			Declare @TempBedId as int,@MaxID as int,@StartDate datetime,@TempPrice Decimal
			
			--Create Table #TempBedType( 
			--		    BedTypeId int identity (1,1),
			--	     	Price varchar(250) NULL, 
			--			StartDate datetime,
			--			TempId  int
			--)
		
			--		  --id int identity (1,1),
			--		  --BedTypeId int,
			--		  --Price int,
			--		  --StartDate datetime,
			--		  --OperatorId int,

			--		 )	

				--Create Table #TempFilesName( 
				--	    id int identity (1,1),
				--     	Name varchar(250) NULL, 
				--		BedTypeId int,
				--		StartDate datetime,
				--		Price decimal,
				--		ItemId int
				--	  --id int identity (1,1),
				--	  --BedTypeId int,
				--	  --Price int,
				--	  --StartDate datetime,
				--	  --OperatorId int,

				--	 )	
					 --select * into  checktempFilesName 
					 --from #TempFilesName
					 --select * from checktempFilesName

					 -- select * into  checkTempBedType 
					 --from #TempBedType
				
		declare @MaxIdctr as int

	WHILE exists(select top 1 * from #tmpIPTariffDetailsSave)
			BEGIN
					SELECT top 1 @MaxIdctr = i,@StartDate = StartDate,@TempPrice = Price,@ItemId = ItemId  from #tmpIPTariffDetailsSave

					SET @filename = 'P_' + cast(@TariffID as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTable as varchar)
						
				    Insert into dbo.checktempFilesName (Name,BedTypeId,StartDate,Price,ItemId) values(@filename,@TempBedId,@StartDate,@TempPrice,@ItemId);
						
					delete #tmpIPTariffDetailsSave where i = @MaxIdctr
			END

   Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int,@Deleted as int ,@GetDate as datetime,@temPrice decimal,@tempItemId int,@test as int
   Select @Deleted = 0 
   Select @GetDate = getdate()
   select @test = 20

				WHILE exists(select top 1 * from checktempFilesName)

						BEGIN
									SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId from checktempFilesName

									set @SQL = N' IF EXISTS(Select * from dbo.' + cast(@TempFiles as varchar) + ' where Id = ' + cast(@tempItemId as varchar) +
											' BEGIN ' +
											' Update ' + cast(@TempFiles as varchar) + ' Set Price =' + cast(@temPrice as varchar) + 'Startdatetime =' + cast(@GetDate as varchar) + 'OperatorId =' + cast(@OperatorId as varchar) +
											' where id =' + cast(@tempItemId as varchar) +
											' END ' +
											' ELSE' +
											' BEGIN ' +
											' INSERT INTO dbo.OLD' + cast(@TempFiles as varchar)  + 
											' (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId)' + 
											' SELECT ID,Price,StartDateTime,'+ cast(@GetDate as varchar) + ',Deleted'  + cast(@OperatorId as varchar)  +
										    ' from ' + cast(@TempFiles as varchar) + 'where id =' + cast(@tempItemId as varchar) + 
											' END'

									---Update P_1_1_Anaesthesia Set  Price=4000,Startdatetime='12/23/2016 11:03 AM',OperatorId=1412 where id = 85
							
							--set @SQL = N' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
									--				   ' BEGIN ' +
									--				   ' if NOT EXISTS( Select * from dbo.' + cast(@TempFiles as varchar) + ' where Id = ' + cast(@tempItemId as varchar) +
									--				   ' BEGIN ' +
									--				   ' INSERT INTO dbo.' + cast(@TempFiles as varchar) + 
									--				   ' (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId)' +
									--				   ' SELECT ItemId,Price,StartDateTime,EndDateTime,' + cast(@Deleted as varchar)  + cast(@OperatorId as varchar)  +
									--				   ' from ' + cast(@TempFiles as varchar) + 'where Id =' + cast(@tempItemId as varchar) + 
									--				   ' END' +
									--				   ' ELSE' +
									--				   ' BEGIN' +
									--				   ' SELECT ItemId,Price,Deleted,StartDateTime,EndDateTime,OperatorId INTO dbo.OLD' + cast(@TempFiles as varchar) + 
									--				   ' from ' + cast(@TempFiles as varchar) + 'where Id =' + cast(@tempItemId as varchar) +
									--				   --' INSERT INTO dbo.OLD' + cast(@TempFiles as varchar)  + 
									--				   --' (Id,Price,StartDateTime,EndDateTime,Deleted,OperatorId)' + 
									--				   --' SELECT ID,Price,StartDateTime,'+ cast(@GetDate as varchar) + ',Deleted'  + cast(@OperatorId as varchar)  +
									--				   --' from ' + cast(@TempFiles as varchar) + 'where BedTypeId =' + cast(@ctrBedId as varchar) + 
									--				   ' Update a set a.EndDateTime =' + cast(@GetDate as varchar) + ',a.OperatorId =' + cast(@OperatorId as varchar)  + 'from dbo.OLD' + cast(@TempFiles as varchar) + 'a' + ' where a.ID =' + cast(@tempItemId as varchar) +
									--				   ' Update a set a.Price =' + cast(@temPrice as varchar)  + ',a.OperatorId =' + cast(@OperatorId as varchar) + 'from dbo.' + cast(@TempFiles as varchar) + 'a' + ' where a.ID =' + cast(@tempItemId as varchar) +
									--				   ' END'
								
							
							EXEC sp_executesql @SQL 
								
							Delete  checktempFilesName where id = @FileId		
							
				END
				---Print @SQL 		
			 ---drop table #TempEmptyIPPriceView		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

--drop table #TempBedType
--drop table #TempFilesName
drop table #tmpIPTariffHeaderSave
drop table #tmpIPTariffDetailsSave
--drop table @@TABLENAME@@
--drop table backtest

set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlIPTariffHeaderSave	 xml
declare @xmlIPTariffDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlIPTariffHeaderSave = '<DocumentElement>\r\n  <IPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <TariffId>1</TariffId>\r\n    <ServiceId>20</ServiceId>\r\n    <ItemId>85</ItemId>\r\n    <OperatorId>139</OperatorId>\r\n  </IPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlIPTariffDetailsSave = '<DocumentElement>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>15</BedTypeId>\r\n    <Price>100.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>17</BedTypeId>\r\n    <Price>200.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>18</BedTypeId>\r\n    <Price>300.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.IPTariffSave_SCS_Test @ErrorMessage,@xmlIPTariffHeaderSave,@xmlIPTariffDetailsSave
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/


GO

/****** Object:  StoredProcedure [ITADMIN].[IPTariffSave_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
 @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlIPTariffHeaderSave			as xml = '<DocumentElement> <IPTariffHeaderSave> <Action>1</Action> <TariffId>1</TariffId> <ServiceId>2</ServiceId> <ItemId>0</ItemId> <OperatorId>1412</OperatorId> </IPTariffHeaderSave> </DocumentElement>'
,
	@xmlIPTariffDetailsSave			as xml = '<DocumentElement> <IPTariffDetailsSave> <BedTypeId>38</BedTypeId> <Price>123</Price> <StartDate>05/31/2017 10:06 AM</StartDate> </IPTariffDetailsSave> </DocumentElement>'


*/



CREATE PROCEDURE [ITADMIN].[IPTariffSave_SCS] 
	
   @ErrorMessage					as NVARCHAR(max) OUT,	
    
	--for not dynamic
	-- @xmlIPTariffHeaderSave			as xml = '<DocumentElement> <IPTariffHeaderSave> <Action>1</Action> <TariffId>1</TariffId> <ServiceId>2</ServiceId> <ItemId>0</ItemId> <OperatorId>1412</OperatorId> </IPTariffHeaderSave> </DocumentElement>'
	--,@xmlIPTariffDetailsSave			as xml = '<DocumentElement> <IPTariffDetailsSave> <BedTypeId>38</BedTypeId> <Price>123</Price> <StartDate>05/31/2017 10:06 AM</StartDate> </IPTariffDetailsSave> </DocumentElement>'

	--for dynamic
	  @xmlIPTariffHeaderSave  as xml = '<DocumentElement> <IPTariffHeaderSave> <Action>1</Action> <TariffId>1</TariffId> <ServiceId>6</ServiceId> <ItemId>1280</ItemId> <OperatorId>1412</OperatorId> </IPTariffHeaderSave> </DocumentElement>'
	 ,@xmlIPTariffDetailsSave as xml = '<DocumentElement> <IPTariffDetailsSave> <BedTypeId>1</BedTypeId> <Price>900.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>2</BedTypeId> <Price>870.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>3</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>5</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>6</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>7</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>8</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>9</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>10</BedTypeId> <Price>950.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>11</BedTypeId> <Price>1070.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>12</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>15</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>17</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>18</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>20</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>23</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>24</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>25</BedTypeId> <Price>950.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>27</BedTypeId> <Price>830.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>28</BedTypeId> <Price>1070.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> <IPTariffDetailsSave> <BedTypeId>38</BedTypeId> <Price>0.00</Price> <StartDate>5/21/2017 11:31:58 AM</StartDate> </IPTariffDetailsSave> </DocumentElement>'
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffHeaderSave
SELECT 
Action
,TariffId
,ServiceId
,ItemId
,OperatorId

into #tmpIPTariffHeaderSave
from openxml(@handle, '/DocumentElement/IPTariffHeaderSave',2) with
(
Action int
,TariffId int
,ServiceId int
,ItemId int
,OperatorId int
  
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPTariffDetailsSave
select BedTypeId,Price,StartDate,ROW_NUMBER() over(order by BedTypeId) i
into #tmpIPTariffDetailsSave
from openxml(@handle, '/DocumentElement/IPTariffDetailsSave',2) with
(
BedTypeId int,Price DECIMAL(10,2),StartDate Datetime
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Action as int
DECLARE @TariffID as int
DECLARE @ServiceID as int
DECLARE @ServiceName as varchar(250)
DECLARE @NewPrice as int
Declare @OperatorId as int
Declare @ItemId as int


declare @rent as varchar(20) = 'Rent' 
declare @nurse as varchar(20) = 'Nurse' 
declare @CrossMatch as varchar(20) = 'CrossMatch' 


SELECT @Action = Action,@ItemId = ItemId,@OperatorId = OperatorId,@ServiceID  = ServiceId,@TariffID =  TariffId 
from #tmpIPTariffHeaderSave

	
IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

		DECLARE  @BedTypeID INT, @MasterTable VARCHAR(30), @PriceTable VARCHAR(max), @SQL NVARCHAR(max), @NewItemID INT, @PriceType INT,@filename as varchar(max) ,@filenameNoDynamcTble as varchar(max)
		Declare @TempBedId as int,@MaxID as int,@StartDate datetime,@TempPrice DECIMAL(10,2)
		declare @TariffIDs as int, @ServiceIDs as int,@PriceTables as varchar(max),@isDynamicTable int 


		declare  @CombHeaderDetailsItemId as TABLE ( id int identity (1,1),BedTypeId int,StartDate datetime,Price DECIMAL(10,2),ItemId int,TariffId int,ServiceId int)
		declare @TempFilesName  as TABLE  (  id int identity (1,1),Name varchar(250) NULL, BedTypeId int,StartDate datetime,Price DECIMAL(10,2),ItemId int,TariffId int,ServiceId int	 )				
		declare @TempFilesNameWithNoDynamicTable  as TABLE  (  id int identity (1,1),Name varchar(250) NULL, BedTypeId int,StartDate datetime,Price DECIMAL(10,2),ItemId int,CategoryId int,ServiceId int	 )				
		declare @TempEmptyFilesName  as TABLE  ( ID int,Price numeric, Deleted bit,StartDateTime datetime,EndDateTime datetime,OperatorID int)	
		Declare @FileId as int,@TempFiles as varchar(250),@ctrBedId as int, @GetDate as datetime,@temPrice DECIMAL(10,2),@tempItemId int
			 
		SET @isDynamicTable = 1 


		insert into @CombHeaderDetailsItemId (BedTypeId,StartDate,Price) SELECT BedTypeId,StartDate,Price from #tmpIPTariffDetailsSave
		
		Update a set a.ItemId = @ItemId,a.TariffId = @TariffID,a.ServiceId =@ServiceID  from @CombHeaderDetailsItemId a

		Select BedTypeId,Price,StartDate,ItemId,TariffId,ServiceId into #TempBedType from @CombHeaderDetailsItemId

			WHILE exists(select top 1 * from #TempBedType)
			BEGIN

					SELECT top 1 @TempBedId = BedTypeId,@StartDate = StartDate,@TempPrice = Price,@ItemId = ItemId,@TariffIDs = TariffId,@ServiceIDs = ServiceId  from #TempBedType
					Select @PriceTables = PriceTable from dbo.IPBService where Id = @ServiceIDs  
					SET @filename = 'P_' + cast(@TariffIDs as varchar) + '_' + cast(@TempBedId as varchar) + '_' + cast(@PriceTables as varchar)
					SET @filenameNoDynamcTble = 'P_' + cast(@PriceTables as varchar)
					 

				    Insert into @TempFilesName (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId) values(@filename,@TempBedId,@StartDate,@TempPrice,@ItemId,@TariffIDs,@ServiceIDs);
				    Insert into @TempFilesNameWithNoDynamicTable (Name,BedTypeId,StartDate,Price,ItemId,CategoryId,ServiceId) values(cast(@PriceTables as varchar),@TempBedId,@StartDate,@TempPrice,@ItemId,@TariffIDs,@ServiceIDs );
					delete #TempBedType where BedTypeId = @TempBedId
			END
 
			
			
			select * from @TempFilesNameWithNoDynamicTable
			--check if table exist on dynamic table
			
			SET @isDynamicTable = 1

			if exists(select * from ipbservice where pricetype <> 2 and PriceTable <> 'NoPrice' and  LOWER(PriceTable) in ( select distinct LOWER(Name) from @TempFilesNameWithNoDynamicTable group by Name ))
			begin
				SET @isDynamicTable = 0 
			end
		
		--  [ITADMIN].[IPTariffSave_SCS] ''	

		IF(@isDynamicTable = 0)
		BEGIN -- NOT Dynamic Table

		     	Insert into LogsTempTariffTable (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,DateProcess) 
					Select 	Name,BedTypeId,StartDate,Price,ItemId,CategoryId,ServiceId,Getdate()
					from @TempFilesNameWithNoDynamicTable

			declare @catId int

			WHILE exists(select top 1 * from @TempFilesNameWithNoDynamicTable)
						BEGIN
									select @TempFiles =  @filenameNoDynamcTble
									 
									SELECT top 1 @FileId = id,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId,@GetDate = StartDate,@catId = CategoryId from @TempFilesNameWithNoDynamicTable
									set @SQL = 	N'  declare @janDate smalldatetime  ' + 
												'  SET @janDate = convert(varchar(max), ''01-Jan-''+ cast(year(getdate()) as varchar(max) )) ' +
												' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
												' BEGIN ' +
												 ' 
												  '+
												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')' +
												 ' 
												  '+
														' BEGIN ' +
													' 
												  '+
														' Create Table dbo.OLD' + cast(@TempFiles as varchar) + '( 
																[CategoryID] [int] NOT NULL,
																[BedTypeID] [int] NOT NULL,
																[Price] [decimal](10, 2) NOT NULL,
																[Deleted] [bit] NOT NULL,
																[StartDateTime] [datetime] NOT NULL,
																[EndDateTime] [datetime] NULL,
																[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' + 
												  ' 
												  '+
													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where CategoryID =' + cast(@catId as varchar) +   ' AND BedTypeID = '+ cast(@ctrBedId as varchar)+'     )' +
													 ' 
												  '+
													' BEGIN ' +
													' INSERT INTO  dbo.' + cast(@TempFiles as varchar)  + 
													' (CategoryID,BedTypeID,Price,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT  ' + cast(@catId as varchar) + ',' + cast(@ctrBedId as varchar) + ',' + cast(@temPrice as varchar) +' ,0, '  + cast(@OperatorId as varchar)  + ', @janDate ' + 
												
												 ' 
												  '+
												  ' END' +
												 ' ELSE ' +
												'	BEGIN ' +
												 ' 
												  '+

														' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
														' where CategoryID =' + cast(@catId as varchar) +   ' AND BedTypeID = '+ cast(@ctrBedId as varchar)+
												 ' 
												  '+
												'	END ' +



												   ' 
												  '+
												
													' declare @oldEndDateTime_Current datetime ' +  
													' declare @oldEndDateTime_Old datetime    ' +      
													' declare @oldEndDateTime datetime      ' +    
													 ' 
												  '+ 
													' select @oldEndDateTime_Current = Max(StartDateTime) from ' + cast(@TempFiles as varchar)  + ' where CategoryID =' + cast(@catId as varchar) +   ' AND BedTypeID = '+ cast(@ctrBedId as varchar)+ 
													' select @oldEndDateTime_Old = Max(EndDateTime) from OLD' + cast(@TempFiles as varchar)  +  ' where CategoryID =' + cast(@catId as varchar) +   ' AND BedTypeID = '+ cast(@ctrBedId as varchar)+ 
													'  SELECT @oldEndDateTime =  ISNULL(@oldEndDateTime_Old,@oldEndDateTime_Current) ' + 
													 ' 
												  '+ 
												
													 ' 
												  '+

													'  IF NOT EXISTS(select * from dbo.OLD' + cast(@TempFiles as varchar) +' where CategoryID =' + cast(@catId as varchar) +   ' AND BedTypeID = '+ cast(@ctrBedId as varchar)+ ') '+ 
													'  BEGIN  ' + 
													 ' 
												  '+
													
														' INSERT INTO dbo.OLD' + cast(@TempFiles as varchar)  + 
														' (CategoryId,BedtypeId,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
														' SELECT '+cast(@catId as varchar)+',' + cast(@ctrBedId as varchar) + ',' + cast(@temPrice as varchar) +', GETDATE() ,0, '  + cast(@OperatorId as varchar)  + ',@janDate'  + 
											 
													 ' 
												  '+
												  '  END  ' + 
													'  ELSE ' + 
													'  BEGIN ' + 
													 ' 
												  '+
															' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
															' (CategoryID,BedTypeID,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
															' SELECT '+cast(@catId as varchar)+',' + cast(@ctrBedId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',@oldEndDateTime'  + 
													'  END  ' + 

													 ' 
												  '+

												' END ' +
												' ELSE ' +
											    ' BEGIN ' +
												 ' 
												  '+

												' Create Table dbo.' + cast(@TempFiles as varchar) + '( 
													[CategoryID] [int] NOT NULL,
													[BedTypeID] [int] NOT NULL,
													[Price] [decimal](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
												 )	' + 
												  ' 
												  '+

												' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												' (CategoryID,BedTypeID,Price,Startdatetime,Deleted,OperatorId)  ' + 
												' SELECT ' + cast(@catId as varchar) + ',' + cast(@ctrBedId as varchar) + ',' + cast(@temPrice as varchar) +',@janDate  ,0, '  + cast(@OperatorId as varchar)  +
											--	' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  +
												' END '+
												
												 
												 + ' ------------------------------------------------------------------------------------------------------------------------------------------ ' 
											--  [ITADMIN].[IPTariffSave_SCS] ''	
												print @SQL		
											 EXEC sp_executesql @SQL 	
											Delete  @TempFilesNameWithNoDynamicTable where id = @FileId
			END


		

		END--END NOT Dynamic Table



		IF(@isDynamicTable = 1)
		BEGIN --Dynamic Table

					Insert into LogsTempTariffTable (Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,DateProcess) 
					Select 	Name,BedTypeId,StartDate,Price,ItemId,TariffId,ServiceId,Getdate()
					from @TempFilesName

				 
			WHILE exists(select top 1 * from @TempFilesName)
						BEGIN
									SELECT top 1 @FileId = id,@TempFiles = Name,@ctrBedId = BedTypeId,@temPrice = Price,@tempItemId = ItemId,@GetDate = StartDate from @TempFilesName
									
										 


										---Start DELETE DUPLICATE ENTRY IN OLD and current Sep2 2018
												set @SQL = 	'' 
												 
												set @SQL = N'  IF  EXISTS(SELECT * FROM sys.tables where name  = ''' + cast(@TempFiles as varchar) + '''  ) ' +
														' BEGIN ' +
													'  ;with duplicates   ' +

													' as  ' +
													' ( ' +
													' select ID,StartDateTime  ' +
													' ,ROW_NUMBER() over (partition by ID  order by StartDateTime desc ) as Duplicate ' +											
													' from   dbo.' + cast(@TempFiles as varchar) + '     ' +
													' ) ' +
													' delete from duplicates where   Duplicate > 1 ' + 

													' insert into [dbo].[LogsTempTariffTable_Deleted](Name,DateProcess) ' + 
													' select ''' + cast(@TempFiles as varchar) + ''', GETDATE() ' +
														' END ' 
											print @SQL		
											EXEC sp_executesql @SQL 
											-- OLD TABLE partition by startdate and ENDDATE to capture duplicate
											set @SQL = 	'' 
											set @SQL = N'  IF  EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')  ' +
														' BEGIN ' +
													'  ;with duplicates   ' +
													' as  ' +
													' ( ' +
													' select ID,StartDateTime,EndDateTime   ' +
													' ,ROW_NUMBER() over (partition by ID,StartDateTime,EndDateTime   order by StartDateTime desc ) as Duplicate ' +											
													' from   dbo.OLD' + cast(@TempFiles as varchar) + '     ' +
													' ) ' +
													' delete from duplicates where   Duplicate > 1 ' + 

													' insert into [dbo].[LogsTempTariffTable_Deleted](Name,DateProcess) ' + 
													' select ''dbo.OLD' + cast(@TempFiles as varchar) + '  '', GETDATE() ' +
													' END ' 
											print @SQL		
											EXEC sp_executesql @SQL 
											--  [ITADMIN].[IPTariffSave_SCS] ''	
										---END DELETE DUPLICATE ENTRY IN OLD and current Sep2 2018	

									
									set @SQL = 	'' 
									set @SQL = N'  declare @janDate smalldatetime  ' + 
											'  SET @janDate = convert(varchar(max), ''01-Jan-''+ cast(year(getdate()) as varchar(max) )) ' +
									 ' IF EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + cast(@TempFiles as varchar) + '''' + ')' +
												' BEGIN ' +

												' IF NOT EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')' +

														' BEGIN ' +
														' Create Table dbo.OLD' + cast(@TempFiles as varchar) + '( 
															[ID] [int] NOT NULL,
															[Price] [numeric](10, 2) NOT NULL,
															[Deleted] [bit] NOT NULL,
															[StartDateTime] [datetime] NOT NULL,
															[EndDateTime] [datetime] NULL,
															[OperatorID] [int] NOT NULL
														 )	' + 
														' END ' + 
												 

													' IF NOT EXISTS (Select * from ' + cast(@TempFiles as varchar)  +  ' where ID =' + cast(@tempItemId as varchar) +   ')' +
													' BEGIN ' +
													' INSERT INTO  dbo.' + cast(@TempFiles as varchar)  + 
													' (Id,Price,Deleted,OperatorId,Startdatetime) ' + 
													' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +' ,0, '  + cast(@OperatorId as varchar)  + ', @janDate' + 
												' END ' +
													' ELSE' +
														' BEGIN ' +
														' UPDATE dbo.' + cast(@TempFiles as varchar) + ' Set Price = ' + cast(@temPrice as varchar) + ' ,Startdatetime = ''' + cast(@GetDate as varchar) + ''' ,OperatorId = ' + cast(@OperatorId as varchar)  + 
															' where ID = ' + cast(@tempItemId as varchar) +
													' END ' +
														'    ' + 


													' declare @oldEndDateTime_Current datetime ' +  
													' declare @oldEndDateTime_Old datetime    ' +      
													' declare @oldEndDateTime datetime      ' +    
													' 	    ' + 
													' select @oldEndDateTime_Current = Max(StartDateTime) from ' + cast(@TempFiles as varchar)  +' where Id = '+ cast(@tempItemId as varchar) +'  ' +  
													' select @oldEndDateTime_Old = Max(EndDateTime) from OLD' + cast(@TempFiles as varchar)  + ' where Id = '+ cast(@tempItemId as varchar) +'  ' + 
													' SELECT @oldEndDateTime =  ISNULL(@oldEndDateTime_Old,@oldEndDateTime_Current) ' + 
													'    ' + 
													
													'  IF NOT EXISTS(select * from dbo.OLD' + cast(@TempFiles as varchar) +' where Id = '+ cast(@tempItemId as varchar) +')  ' + 
													'  BEGIN  ' + 
														
														' INSERT INTO dbo.OLD' + cast(@TempFiles as varchar)  + 
														' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
														' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',@janDate'  + 
													 						 		 
													'  END  ' + 
													'  ELSE ' + 
													'  BEGIN ' + 
															' INSERT INTO OLD' + cast(@TempFiles as varchar)  + 
															' (Id,Price,EndDateTime,Deleted,OperatorId,Startdatetime) ' + 
															' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',' + '''' + cast(@GetDate as varchar) + ''' ,0, '  + cast(@OperatorId as varchar)  + ',@oldEndDateTime'  + 
														
													'  END  ' + 

												' END ' +
												' ELSE ' +
											    ' BEGIN ' +
												' Create Table dbo.' + cast(@TempFiles as varchar) + '( 
													[ID] [int] NOT NULL,
													[Price] [numeric](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
												 )	' + 

												' INSERT INTO dbo.' + cast(@TempFiles as varchar)  + 
												' (Id,Price,Startdatetime,Deleted,OperatorId) ' + 
												' SELECT ' + cast(@tempItemId as varchar) + ',' + cast(@temPrice as varchar) +',@janDate,0, '  + cast(@OperatorId as varchar)  +
												' END '+
												 + ' ------------------------------------------------------------------------------------------------------------------------------------------ ' 
											--  [ITADMIN].[IPTariffSave_SCS] ''	
												print @SQL		
											  EXEC sp_executesql @SQL 

											---Start DELETE DUPLICATE ENTRY IN OLD and current Sep2 2018
												set @SQL = 	'' 
												 
												set @SQL = N'  IF  EXISTS(SELECT * FROM sys.tables where name  = ''' + cast(@TempFiles as varchar) + '''  ) ' +
														' BEGIN ' +
													'  ;with duplicates   ' +

													' as  ' +
													' ( ' +
													' select ID,StartDateTime  ' +
													' ,ROW_NUMBER() over (partition by ID  order by StartDateTime desc ) as Duplicate ' +											
													' from   dbo.' + cast(@TempFiles as varchar) + '     ' +
													' ) ' +
													' delete from duplicates where   Duplicate > 1 ' + 

													' insert into [dbo].[LogsTempTariffTable_Deleted](Name,DateProcess) ' + 
													' select ''' + cast(@TempFiles as varchar) + ''', GETDATE() ' +
														' END ' 
											print @SQL		
											EXEC sp_executesql @SQL 
											-- OLD TABLE partition by startdate and ENDDATE to capture duplicate
											set @SQL = 	'' 
											set @SQL = N'  IF  EXISTS(SELECT * FROM sys.tables where name  = ' + '''' + 'OLD' + cast(@TempFiles as varchar) + '''' + ')  ' +
														' BEGIN ' +
													'  ;with duplicates   ' +
													' as  ' +
													' ( ' +
													' select ID,StartDateTime,EndDateTime   ' +
													' ,ROW_NUMBER() over (partition by ID,StartDateTime,EndDateTime   order by StartDateTime desc ) as Duplicate ' +											
													' from   dbo.OLD' + cast(@TempFiles as varchar) + '     ' +
													' ) ' +
													' delete from duplicates where   Duplicate > 1 ' + 

													' insert into [dbo].[LogsTempTariffTable_Deleted](Name,DateProcess) ' + 
													' select ''dbo.OLD' + cast(@TempFiles as varchar) + '  '', GETDATE() ' +
													' END ' 
											print @SQL		
											EXEC sp_executesql @SQL 
											--  [ITADMIN].[IPTariffSave_SCS] ''	
										---END DELETE DUPLICATE ENTRY IN OLD and current Sep2 2018		

											Delete  @TempFilesName where id = @FileId

			END
		END --END Dynamic Table



		
 --	
	-- [ITADMIN].[IPTariffSave_SCS] '' 			
 												
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH   
		 ROLLBACK TRANSACTION             
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #TempBedType
--drop table @TempFilesName
drop table #tmpIPTariffHeaderSave
drop table #tmpIPTariffDetailsSave
--drop table @CombHeaderDetailsItemId
--drop table @TempEmptyFilesName
--drop table @@TABLENAME@@
--drop table backtest

set xact_abort OFF

END



/*

select * from p_rent where categoryId = 1

select * from bedtype a


declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlIPTariffHeaderSave	 xml
declare @xmlIPTariffDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlIPTariffHeaderSave = '<DocumentElement>\r\n  <IPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <TariffId>1</TariffId>\r\n    <ServiceId>20</ServiceId>\r\n    <ItemId>85</ItemId>\r\n    <OperatorId>139</OperatorId>\r\n  </IPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlIPTariffDetailsSave = '<DocumentElement>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>15</BedTypeId>\r\n    <Price>100.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>17</BedTypeId>\r\n    <Price>200.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n  <IPTariffDetailsSave>\r\n    <BedTypeId>18</BedTypeId>\r\n    <Price>300.00</Price>\r\n    <StartDate>9/28/2016 8:37:55 PM</StartDate>\r\n  </IPTariffDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.IPTariffSave_SCS @ErrorMessage,@xmlIPTariffHeaderSave,@xmlIPTariffDetailsSave
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4
--select * from dbo.Op_P_3_OtherProcedures

*/

---///drop table testtcheckTempFileName 
---//drop table checkTempFileName
--select * from testtcheckTempFileName
--select * from P_66_28_Anaesthesia
---select * from P_66_2_Anaesthesia
--select * from P_84_2_Anaesthesia

---select * drop table P_84_28_Anaesthesia
-- Select * from LogsTempTariffTable  where StartDate = 'Oct  1 2016 12:39PM'
--select * from P_1_2_Test    where Id =3973
--Selct * from 

--Insert into P_1_28_Test
--(ID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
--Select Itemid,Price,0,StartDate,NULL,10268
--From LogsTempTariffTable where BedTypeId = 28
GO

/****** Object:  StoredProcedure [ITADMIN].[IPService_Get_All_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[IPService_Get_All_SCS]	
AS
BEGIN
	SET NOCOUNT ON;

			SELECT     0 Selected,ID, ServiceName
			FROM       IPBService
			WHERE     (PriceType IN (3, 4)) AND (Deleted = 0)
END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPPharmacyServices_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[IPPharmacyServices_DashBoard_SCS]-- 0

AS

BEGIN




if exists(select Name from  dbo.BedType where Id not in (select BedTypeId from P_PharmacySCharge ) and deleted = 0)
Begin


SELECT     0 as selected -- note make zero to unselected
		   ,a.name as BedType
		   ,ISNULL(b.ServiceCharge, 0) AS CurrentMarkUp
		   ,0 as NewMarkUp
		   ,a.id as Id
FROM       dbo.BedType AS a 
		   LEFT OUTER JOIN P_PharmacySCharge AS b ON a.id = b.BedTypeID
WHERE     (a.deleted = 0) and b.Deleted = 0 

union all
select '0',(select Name from  dbo.BedType where Id not in (select BedTypeId from P_PharmacySCharge ) and deleted = 0),'0','0',(select Id from  dbo.BedType where Id not in (select BedTypeId from P_PharmacySCharge ) and deleted = 0)



END
ELSE
BEGIN

SELECT     0 as selected -- note make zero to unselected
		   ,a.name as BedType
		   ,ISNULL(b.ServiceCharge, 0) AS CurrentMarkUp
		   ,0 as NewMarkUp
		   ,a.id as Id
FROM       dbo.BedType AS a 
		   LEFT OUTER JOIN P_PharmacySCharge AS b ON a.id = b.BedTypeID
WHERE     (a.deleted = 0) and b.Deleted = 0 order by b.StartDateTime asc




END

END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPPharmacyService_Save]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[IPPharmacyService_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
	@xmlIPPharmacyHeaderSave		as xml,
    @xmlIPPharmacyDetailsSave	as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPPharmacyHeaderSave
SELECT 
Action
,OperatorId
into #tmpIPPharmacyHeaderSave


from openxml(@handle, '/DocumentElement/IPPharmacyHeaderSave',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPPharmacyDetailsSave
SELECT 
BedTypeId
,MarkupPer
into #tmpIPPharmacyDetailsSave


from openxml(@handle, '/DocumentElement/IPPharmacyDetailsSave',2) with
(
BedTypeId int
,MarkupPer int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int


select @Action = Action, @OperatorId = OperatorId
from #tmpIPPharmacyHeaderSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
		---Note: UnRemarks this is a Correct process however need confirmation
		
				INSERT INTO OldP_PharmacySCharge
                  (CategoryID,BedTypeId,ServiceCharge, StartDateTime, EndDateTime, Deleted, OperatorId)
				SELECT     1,BedTypeId, MarkupPer, StartDateTime,GETDATE(),1, OperatorId
				FROM   P_IPCSTBEDTYPEMARKUP
				WHERE  BedTypeId in   (Select BedTypeId from #tmpIPPharmacyDetailsSave)


				Update P_PharmacySCharge Set Deleted = 1 where BedTypeId in (Select BedTypeId from #tmpIPPharmacyDetailsSave)
				 
			    Delete P_PharmacySCharge where BedTypeId in (Select BedTypeId from #tmpIPPharmacyDetailsSave)


				INSERT INTO P_PharmacySCharge
					  (CategoryID,BedTypeId, ServiceCharge, StartDateTime, EndDateTime, Deleted, OperatorId)
				Select 1,BedTypeId,MarkupPer,GetDate(),NULL,0,@OperatorId
				from #tmpIPPharmacyDetailsSave



					
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'			
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpIPPharmacyHeaderSave
drop table #tmpIPPharmacyDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

select * from  OldP_PharmacySCharge


*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUp_Save_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[IPOPMarkUp_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlOPIPMarkUpSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPIPMarkUpSave
SELECT 
Action
,DoctorId
,MarkUpPercent
,OperatorId
into #tmpOPIPMarkUpSave


from openxml(@handle, '/DocumentElement/OPIPMarkUpSave',2) with
(
Action int
,DoctorId int
,MarkUpPercent int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DoctorId as int
declare @MarkUpPercent as int
declare @OperatorId as int

select @Action = Action,@DoctorId = DoctorId,@MarkUpPercent = MarkUpPercent,@OperatorId = OperatorId
from   #tmpOPIPMarkUpSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from DoctorMarkUp where  DoctorId =@DoctorId)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Doctor Already Markup Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


	   Insert into DoctorMarkUp(DoctorId,MarkUpPercent,StartDateTime,Deleted,OperatorId) 
	   SELECT DoctorId,MarkUpPercent,GetDate(),0,OperatorId
	   from  #tmpOPIPMarkUpSave
	
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

	Insert into OldDoctorMarkUp
		(DoctorId,MarkUpPercent,StartDateTime,Deleted,EnddateTime,OperatorId) 
	Select DoctorId,MarkUpPercent,StartDateTime,Deleted,getdate(),OperatorId
		from DoctorMarkUp Where DoctorID=@DoctorId

		Update DoctorMarkUp set StartDateTime= getDate(),MarkUpPercent = @MarkUpPercent,OperatorId = @OperatorId Where DoctorID= @DoctorId


---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPIPMarkUpSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUp_Save]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[IPOPMarkUp_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlOPIPMarkUpSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlOPIPMarkUpSave
SELECT 
Action
,DoctorId
,MarkUpPercent
,OperatorId
into #tmpOPIPMarkUpSave


from openxml(@handle, '/DocumentElement/OPIPMarkUpSave',2) with
(
Action int
,DoctorId int
,MarkUpPercent int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DoctorId as int
declare @MarkUpPercent as int
declare @OperatorId as int

select @Action = Action,@DoctorId = DoctorId,@MarkUpPercent = MarkUpPercent,@OperatorId = OperatorId
from   #tmpOPIPMarkUpSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from #tmpOPIPMarkUpSave where  DoctorId =@DoctorId)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Doctor Already Markup Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end


	   Insert into DoctorMarkUp(DoctorId,MarkUpPercent,StartDateTime,Deleted,OperatorId) 
	   SELECT DoctorId,MarkUpPercent,GetDate(),0,OperatorId
	   from  #tmpOPIPMarkUpSave
	
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

	Insert into OldDoctorMarkUp
		(DoctorId,MarkUpPercent,StartDateTime,Deleted,EnddateTime,OperatorId) 
	Select DoctorId,MarkUpPercent,StartDateTime,Deleted,getdate(),OperatorId
		from DoctorMarkUp Where DoctorID=@DoctorId

		Update DoctorMarkUp set StartDateTime= getDate(),MarkUpPercent = @MarkUpPercent,OperatorId = @OperatorId Where DoctorID= @DoctorId


---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpOPIPMarkUpSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[IPOPMarkUP_DashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[IPOPMarkUP_DashBoard_SCS]-- 0

AS

BEGIN

SELECT     
		 row_number() over(order by a.EmpCode) as SNo ,a.EmpCode, a.Name, b.MarkUpPercent,a.ID
FROM       Employee AS a 
		   INNER JOIN DoctorMarkUp AS b ON a.ID = b.DoctorId
WHERE     (a.Deleted = 0)
ORDER BY a.EmpCode



END


GO

/****** Object:  StoredProcedure [ITADMIN].[IPCashMarkUpConfigDashBoard_SCS]    Script Date: 12/5/2018 1:39:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[IPCashMarkUpConfigDashBoard_SCS]-- 0

AS

BEGIN

SELECT     MarkUp as selected,ServiceName,ID
FROM       IPBService
WHERE     (Deleted = 0) AND (ID NOT IN (14, 30, 21, 23, 28, 2, 3, 35, 36))


---wipro 
--Select b.Id, b.Name, a.MarkUpPer from P_IPCSTBEDTYPEMARKUP a, BedType b Where a.BedtypeID =* b.ID and a.Deleted = 0


END
GO

/****** Object:  StoredProcedure [ITADMIN].[IPCashMarkUpConfig_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[IPCashMarkUpConfig_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
	@xmlIPCashMarkupHeaderSave		as xml,
    @xmlIPCashMarkupDetailsSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPCashMarkupHeaderSave
SELECT 
Action
,CashMarkUpDefault
into #tmpIPCashMarkupHeaderSave


from openxml(@handle, '/DocumentElement/IPCashMarkupHeaderSave',2) with
(
Action int,CashMarkUpDefault int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlIPCashMarkupDetailsSave
SELECT 
ID
into #tmpIPCashMarkupDetailsSave


from openxml(@handle, '/DocumentElement/IPCashMarkupDetailsSave',2) with
(
ID int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @CashMarkUpDefault as int


select @Action = Action,@CashMarkUpDefault = CashMarkUpDefault
from #tmpIPCashMarkupHeaderSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
			    UPDATE organisationdetails  SET CASHDEFAULTMARKUP=@CashMarkUpDefault

				Update IPBSERVICE Set MARKUP = 1 where ID in (Select ID from #tmpIPCashMarkupDetailsSave)

				Update IPBSERVICE Set MARKUP = 0 where ID not in (Select ID from #tmpIPCashMarkupDetailsSave)

		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpIPCashMarkupHeaderSave
drop table #tmpIPCashMarkupDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[IORCharge_SAVE_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[IORCharge_SAVE_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlORChargesHeaderSave		   as xml,
	@xmlORChargesDetailsSave        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlORChargesHeaderSave
SELECT 
Action
,CategoryId
,OperatorId
into #tmpORChargeHeaderSave

from openxml(@handle, '/DocumentElement/ORChargesHeaderSave',2) with
(
Action int,CategoryId int,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlORChargesDetailsSave

select ORNo,Percentage
into #tmpORChargeDetailsSave

from openxml(@handle, '/DocumentElement/ORChargesDetailsSave',2) with
(
ORNo int,Percentage decimal
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @CategoryId as int
declare @OperatorId as int
declare @MaxId as int

		SELECT @Action = Action,@CategoryId = CategoryId,@OperatorId = OperatorId
		from   #tmpORChargeHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

				INSERT INTO OLDP_OR
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid)
				SELECT ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo, @OperatorId
				FROM    P_OR
				WHERE   (CategoryID = @CategoryId) AND OTIDNo in (select ORNo from #tmpORChargeDetailsSave)

				delete from P_Or where CategoryId= @CategoryId and OTIDNo in (select ORNo from #tmpORChargeDetailsSave)

				Select @MaxId = max(id) from p_or

				INSERT INTO P_OR
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid)
				SELECT @MaxId,@CategoryId,Percentage,Getdate(),NULL,0,ORNo,@OperatorId
				FROM #tmpORChargeDetailsSave

			
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpORChargeHeaderSave
drop table #tmpORChargeDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkUp_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[InvetoryItemMarkUp_View_SCS]-- 0
@CategoryId as int,
@TypeId as int
AS

BEGIN
		 --SP_HELP Anaesthesia
		SELECT       row_number() over(order by Id) as SNo
					,MinRange
					,MaxRange
					,SellingPercentage as Percentage
		FROM         ItemMarkUp
		WHERE    categoryid = @CategoryId and Type  = @TypeId

		 --select * from ItemMarkUp where categoryid = 26 and type = 2

END
GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkup_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[InvetoryItemMarkup_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlInvenItemMarkupHeaderModel		   as xml,
	@xmlInvenItemMarkupDetailsModel        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlInvenItemMarkupHeaderModel
SELECT 
Action
,CategoryId
,Type
,OperatorId
into #tmpInvenItemMarkupHeaderSave

from openxml(@handle, '/DocumentElement/InvenItemMarkupHeaderModel',2) with
(
Action int,CategoryId int,Type int,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlInvenItemMarkupDetailsModel

select SNo,MinRange,MaxRange,Percentage,ROW_NUMBER() over(order by SNo) i
into #tmpInvenItemMarkupDetailsSave

from openxml(@handle, '/DocumentElement/InvenItemMarkupDetailsModel',2) with
(
SNo int 
,MinRange decimal(18,2)
,MaxRange decimal(18,2)
,Percentage decimal(18,2)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @CategoryId as int
declare @Type	    as int
declare @OperatorId as int

		SELECT @Action = Action,@CategoryId = CategoryId,@Type = Type,@OperatorId = OperatorId
		from   #tmpInvenItemMarkupHeaderSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

					
			INSERT INTO olditemmarkup
                      (Id, MinRange, MaxRange, SellingPercentage, StartDatetime, EndDatetime, Deleted, OperatorId, Type, Categoryid)
			SELECT     ID, MinRange, MaxRange, SellingPercentage, StartDateTime, GETDATE(),1,@OperatorId, Type, CategoryID
			FROM       ItemMarkUp
			WHERE     (CategoryID = @CategoryId) AND (Type = @Type)

			Delete from ItemMarkUp where categoryid = @CategoryId and type = @Type

			INSERT INTO ItemMarkUp
                      (MinRange,MaxRange,SellingPercentage,StartDateTime,EndDateTime,Deleted,OperatorId,Type,CategoryID)
			SELECT	   MinRange,MaxRange,Percentage,Getdate(),null,0,@OperatorId,@Type,@CategoryId
					FROM #tmpInvenItemMarkupDetailsSave
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpInvenItemMarkupHeaderSave
drop table #tmpInvenItemMarkupDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItemMarkup_SAVE_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[InvetoryItemMarkup_SAVE_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlInvenItemMarkupHeaderModel		   as xml,
	@xmlInvenItemMarkupDetailsModel        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlInvenItemMarkupHeaderModel
SELECT 
Action
,CategoryId
,Type
,OperatorId
into #tmpInvenItemMarkupHeaderSave

from openxml(@handle, '/DocumentElement/InvenItemMarkupHeaderModel',2) with
(
Action int,CategoryId int,Type int,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlInvenItemMarkupDetailsModel

select SNo,MinRange,MaxRange,Percentage,ROW_NUMBER() over(order by SNo) i
into #tmpInvenItemMarkupDetailsSave

from openxml(@handle, '/DocumentElement/InvenItemMarkupDetailsModel',2) with
(
SNo int 
,MinRange decimal(18,2)
,MaxRange decimal(18,2)
,Percentage decimal(18,2)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @CategoryId as int
declare @Type	    as int
declare @OperatorId as int

		SELECT @Action = Action,@CategoryId = CategoryId,@Type = Type,@OperatorId = OperatorId
		from   #tmpInvenItemMarkupHeaderSave	


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

					
			INSERT INTO olditemmarkup
                      (Id, MinRange, MaxRange, SellingPercentage, StartDatetime, EndDatetime, Deleted, OperatorId, Type, Categoryid)
			SELECT     ID, MinRange, MaxRange, SellingPercentage, StartDateTime, GETDATE(),1,@OperatorId, Type, CategoryID
			FROM       ItemMarkUp
			WHERE     (CategoryID = @CategoryId) AND (Type = @Type)

			Delete from ItemMarkUp where categoryid = @CategoryId and type = @Type

			INSERT INTO ItemMarkUp
                      (MinRange,MaxRange,SellingPercentage,StartDateTime,EndDateTime,Deleted,OperatorId,Type,CategoryID)
			SELECT	   MinRange,MaxRange,Percentage,Getdate(),null,0,@OperatorId,@Type,@CategoryId
					FROM #tmpInvenItemMarkupDetailsSave
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpInvenItemMarkupHeaderSave
drop table #tmpInvenItemMarkupDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[InvetoryItem_MarkUp_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
Create PROCEDURE [ITADMIN].[InvetoryItem_MarkUp_View_SCS] ---26,2-- 0
@CategoryId as int,
@TypeId as int
AS

BEGIN
		 --SP_HELP Anaesthesia
		SELECT       row_number() over(order by Id) as SNo
					,MinRange
					,MaxRange
					,SellingPercentage as Percentage
		FROM         ItemMarkUp
		WHERE    categoryid = @CategoryId and Type  = @TypeId

		 --select * from ItemMarkUp where categoryid = 26 and type = 2

END
GO

/****** Object:  StoredProcedure [ITADMIN].[INP_WIFI_UPLOADCODES]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE proc [ITADMIN].[INP_WIFI_UPLOADCODES]
@Code		varchar(50),
@Definition	varchar(100),
@Comment	varchar(100),
@ValidityPeriod	varchar(50),
@TimeQuota		varchar(20),
@DataVolume		varchar(20)

as

insert into itadmin.InpatientWIFICodes
(
Code,
Definition,
Comment,
ValidityPeriod,
TimeQuota,
DataVolume,
DateUploaded
)
select 
@Code,
@Definition,
@Comment,
@ValidityPeriod,
@TimeQuota,
@DataVolume,
getdate()


GO

/****** Object:  StoredProcedure [ITADMIN].[INP_WIFI_GETCODES]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE proc [ITADMIN].[INP_WIFI_GETCODES]

as
select  Code,Definition,Comment,ValidityPeriod,TimeQuota,DataVolume,DateUploaded,'Unused' as PIN,'' as Name,'' as DateReleased from itadmin.InpatientWIFICodes
union all
select  Code,Definition,Comment,ValidityPeriod,TimeQuota,DataVolume,DateUploaded,PIN,b.Firstname + ' ' + b.Lastname as Name,DateReleased 
from itadmin.InpatientWIFIReleased a
left join patient b on a.PIN = b.Registrationno 



GO

/****** Object:  StoredProcedure [ITADMIN].[HomeCareProcess_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[HomeCareProcess_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
    @xmlHeaderMapProcess			as xml,
	@xmlItemListMapProcess			as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHeaderMapProcess
SELECT 
Action
into #tmpMappingHeaderSave


from openxml(@handle, '/DocumentElement/HeaderMapProcess',2) with
(
Action int
)
exec sp_xml_removedocument @handle
-----------------Mapping Process---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlItemListMapProcess

select SNo,Test,CostPrice,Id,NewCode,Name,Code,ROW_NUMBER() over(order by SNo) i
into #tmpItemListMapProcess

from openxml(@handle, '/DocumentElement/ItemListMapProcess',2) with
(
SNo int,Test varchar(20),CostPrice decimal(18,2),Id int,NewCode varchar(20),Name varchar(20),Code varchar(20)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

declare @Action	 as int
declare @myMaxId as int
declare @MaxID as int
declare @Code as varchar(20)
declare @UpdatedCodeId as int

			select @Action = Action
			from   #tmpMappingHeaderSave
			
		

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			--Select a.SNo,a.Test,a.CostPrice,a.Id,a.NewCode,a.Name,a.Remarks from #tmpItemListMapProcess a
		
				WHILE exists(SELECT top 1 * from #tmpItemListMapProcess)
					  BEGIN
							SELECT top 1 @myMaxId=i from #tmpItemListMapProcess

							INSERT INTO Test
							(Code, Name, ArabicCode, ArabicName, CostPrice, Profile, Instructions, Images,ClinicalDetails,Login_SName,Type,Notes,ICDCode
							,PCS,EquipID,Sequence,DepartmentID,ConType,IsCulture,Zonediameter,PendingTestsDisplay,Anaesthetist,StartDateTime,EndDateTime,Deleted,OperatorID,NewCode,ModifiedBy,UPLOADED,UDATETIME)
							
							SELECT a.NewCode as Code,b.Name,a.NewCode as ArabicCode,b.ArabicName,b.CostPrice,b.Profile,b.Instructions,b.Images,b.ClinicalDetails,b.Login_SName,b.Type,b.Notes,b.ICDCode
							,b.PCS,b.EquipID,b.Sequence,b.DepartmentID,b.ConType,b.IsCulture,b.Zonediameter,b.PendingTestsDisplay,b.Anaesthetist,b.StartDateTime,b.EndDateTime,1,b.OperatorID,a.NewCode,b.ModifiedBy,b.UPLOADED,b.UPLOADED
							from #tmpItemListMapProcess a 
							LEFT JOIN Test b on b.ID = a.Id	 WHERE i = 	@myMaxId

							--SELECT @MaxID =  max(ID)  from Test

						    Select @Code = NewCode from #tmpItemListMapProcess where i = @myMaxId

							Select @UpdatedCodeId = ID from Test where Code = @Code --42


							--select * from hc_testmap where code = 'FMLAB-1042'
							--Select @OldCodeId =  a.ID 
							--from TestKolang  a
							--LEFT JOIN #tmpItemListMapProcess b on b.Code = a.Code
							--where a.Code = @Code  and b.i = @myMaxId
							--select * SP_hELP hc_testmap

							INSERT INTO hc_testmap (itemid,code,amcitemid,amccode,amcname,deleted,itemname)
							SELECT a.Id,a.Code,@UpdatedCodeId,a.NewCode,a.Name,0,a.Name 
							from #tmpItemListMapProcess a where i = @myMaxId

							DELETE from #tmpItemListMapProcess where i= @myMaxId
						END
								
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Map Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpMappingHeaderSave
drop table #tmpItemListMapProcess

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/


--SELECT 
-- row_number() over(order by a.ID) as SNo 
--,a.ID
--,a.Code + ' '  + a.Name as Test
--,a.CostPrice

--from Test a

--select * from Test where deleted = 1  - data 1015
--select * from hc_testmap-  data 148

--select replace(value,'FM','HC') as test

--SELECT REPLACE('FMLAB-3023','FM','HC');


GO

/****** Object:  StoredProcedure [ITADMIN].[HoldingSubStoreSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[HoldingSubStoreSave_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlHoldingSubStoreHeaderModel			as xml,
	@xmlHoldingSubStoreDetailsModel        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHoldingSubStoreHeaderModel
SELECT 
Action
into #tmpHoldingStoreHeaderSave


from openxml(@handle, '/DocumentElement/HoldingSubStoreHeaderModel',2) with
(
Action int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHoldingSubStoreDetailsModel

select stores,Id,ROW_NUMBER() over(order by Id) i
into #tmpHoldingStoreDetailsSave

from openxml(@handle, '/DocumentElement/HoldingSubStoreDetailsModel',2) with
(
stores int
,Id int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @myMaxId int
declare @Id int
declare @selected int

		select @Action = 2
			from   #tmpHoldingStoreHeaderSave	

		select	@Id = Id,@selected = 1 from #tmpHoldingStoreDetailsSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


if exists (select * from #tmpHoldingStoreHeaderSave)
	Begin
	

		Update a set stores = 0 from station a
			
		WHILE exists(select top 1 * from #tmpHoldingStoreDetailsSave)
		  BEGIN
				select top 1 @myMaxId=i from #tmpHoldingStoreDetailsSave
							
							Update a 
							SET a.stores = @selected
							from dbo.station a
							Inner join #tmpHoldingStoreDetailsSave b on a.ID = b.Id
							where i = @myMaxId 

						delete from #tmpHoldingStoreDetailsSave where i= @myMaxId
			END

	END



					
			--UPDATE  OPProcedureConsultaion
			--		SET  dayscompleted = 2, visitscompleted = 10, Remarks = ' Testasdsfdfsad'
			--		WHERE PinNo and ItemId and DoctorId IN (select PinNo,ItemId,DoctorId from #tmpPackageDetailsSave)
	  --      --WHERE     (PinNo = 25701) AND (ItemId = 2292) AND (DoctorId = 7995)
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpHoldingStoreHeaderSave
drop table #tmpHoldingStoreDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[HoldingStoreSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[HoldingStoreSave_SCS]
	
    @ErrorMessage					    as NVARCHAR(max) OUT,
    @xmlHoldingStoreHeaderModel			as xml,
	@xmlHoldingStoreDetailsModel        as xml
	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHoldingStoreHeaderModel
SELECT 
Action
into #tmpHoldingStoreHeaderSave


from openxml(@handle, '/DocumentElement/HoldingStoreHeaderModel',2) with
(
Action int
)
exec sp_xml_removedocument @handle
-----------------Test/Investigation---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHoldingStoreDetailsModel

select stores,Id,ROW_NUMBER() over(order by Id) i
into #tmpHoldingStoreDetailsSave

from openxml(@handle, '/DocumentElement/HoldingStoreDetailsModel',2) with
(
stores int
,Id int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @myMaxId int
declare @Id int
declare @selected int

		select @Action = Action
			from   #tmpHoldingStoreHeaderSave	

		select	@Id = Id,@selected = 1 from #tmpHoldingStoreDetailsSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN


if exists (select * from #tmpHoldingStoreHeaderSave)
	Begin
	

		Update a set stores = 0 from dbo.station a
			
		WHILE exists(select top 1 * from #tmpHoldingStoreDetailsSave)
		  BEGIN
				select top 1 @myMaxId=i from #tmpHoldingStoreDetailsSave
							
							Update a 
							SET a.stores = @selected
							from dbo.station a
							Inner join #tmpHoldingStoreDetailsSave b on a.ID = b.Id
							where i = @myMaxId 

						delete from #tmpHoldingStoreDetailsSave where i= @myMaxId
			END

	END



					
			--UPDATE  OPProcedureConsultaion
			--		SET  dayscompleted = 2, visitscompleted = 10, Remarks = ' Testasdsfdfsad'
			--		WHERE PinNo and ItemId and DoctorId IN (select PinNo,ItemId,DoctorId from #tmpPackageDetailsSave)
	  --      --WHERE     (PinNo = 25701) AND (ItemId = 2292) AND (DoctorId = 7995)
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpHoldingStoreHeaderSave
drop table #tmpHoldingStoreDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[Holding_Store_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[PTProcedure_View_SCS] 60
CREATE PROCEDURE [ITADMIN].[Holding_Store_DashBoard_SCS] --2

AS


BEGIN
		

		SELECT     Stores as selected,Name,ID
		FROM         dbo.Station
		WHERE     (Deleted = 0)
		ORDER BY Name

END


GO

/****** Object:  StoredProcedure [ITADMIN].[HCListItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HCListItem_DashBoard_SCS]-- 0

AS

BEGIN

		    SELECT
			row_number() over(order by a.ID) as SNo 
			,a.Code + ' '  + a.Name as Test
			,a.CostPrice
			,a.ID as Id
			,REPLACE(a.Code,'FM','HC') as NewCode
			,a.Name
			,a.Code
			FROM Test a

END


GO

/****** Object:  StoredProcedure [ITADMIN].[HC_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[HC_DashBoard_SCS]-- 0

AS

BEGIN

		    SELECT 
			 row_number() over(order by a.ID) as SNo 
			,a.ID
			,a.Code + ' '  + a.Name as Test
			,a.CostPrice

			FROM Test a


END








GO

/****** Object:  StoredProcedure [ITADMIN].[GetUserInfo_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--select * from Employee where EmployeeId = '1738369'
CREATE PROCEDURE [ITADMIN].[GetUserInfo_SCS] -- 192 --11503 -- 11503 --219--1412 --'20160803001'-- 10554--4374  --4374--5-- 46
@Id as int = '139'
AS
BEGIN
	
	if(@id = '139')
	BEGIN
	SELECT  
					a.EmployeeId  as id
					,a.EmployeeID + '-' + a.Name as name
					,a.Name as EmpName
					,case when (a.Password = 'EXPIRED') then '3fZ93[$U3PW!3k:D3\373U5e3fZN' else
					isnull(a.Password,'3fZ93[$U3PW!3k:D3\373U5e3fZN') end  as Password
					--,'5MXg2AqXrPQ=' as Password
					,b.EffectivityDate
					,b.Question1
					,b.Question2
					,b.SecAnswer1
					,b.SecAnswer2
					,b.Mobile
					,b.Email
				 
			from Employee a 
			--INNER
			left  join ITADMIN.User_Authentication b on b.EmployeeId = Convert(varchar(250),a.EmployeeID)  and b.Active = 1 --active
			where    a.Id = @Id   

	END

	ELSE

	BEGIN

	SELECT  
					a.EmployeeId  as id
					,a.EmployeeID + '-' + a.Name as name
					,a.Name as EmpName
					,case when (a.Password = 'EXPIRED') then '3fZ93[$U3PW!3k:D3\373U5e3fZN' else
					isnull(a.Password,'3fZ93[$U3PW!3k:D3\373U5e3fZN') end  as Password
					--,'5MXg2AqXrPQ=' as Password
					,b.EffectivityDate
					,b.Question1
					,b.Question2
					,b.SecAnswer1
					,b.SecAnswer2
					,b.Mobile
					,b.Email
				 
			from Employee a 
			--INNER
			left  join ITADMIN.User_Authentication b on b.EmployeeId = Convert(varchar(250),a.EmployeeID)  and b.Active = 1 --active
			where   a.Deleted = 0 and a.Id = @Id   


	END
		
					

			 
			 
END


			


GO

/****** Object:  StoredProcedure [ITADMIN].[GetPatientAdmission_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
---[ITADMIN].[GetPatientAdmission_View_SCS] 1450764
CREATE PROCEDURE [ITADMIN].[GetPatientAdmission_View_SCS] --1450764 -- 0
@Id as int = 225727
AS

BEGIN
	--for Testing 1450764
		SELECT     a.IPID as id,convert(varchar(19),a.AdmitDateTime) as name--,--a.RegistrationNo
		FROM       AllInpatients a
		WHERE     (a.AdmitDateTime >= '23-Dec-06') AND (a.RegistrationNo = @Id)
		ORDER BY a.AdmitDateTime DESC


END
GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUpParam_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[GetMaxRangeMarkUpParam_SCS]-- 9999999.00
@ErrorMessage	as NVARCHAR(max) OUT,
@MaxRange       as decimal
AS

BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
Declare @EnteredMaxRange decimal(18,2)

BEGIN
   BEGIN TRY 
       BEGIN TRAN
	--select  @AddMax =  replace(Max(MaxRange),'.00','.01') from p_IpCstMarkup

		Select @EnteredMaxRange  = max(MaxRange) from  p_IpCstMarkup

		if (@MaxRange = '')
			begin
					COMMIT TRAN
					SET @ErrorMessage = 'Please Input Correct Max Range!'
					SET @ERROR_SEVERITY = ERROR_SEVERITY()
					SET @ERROR_STATE = ERROR_STATE()
					RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
					return;
					end
		
	   if (@MaxRange > @EnteredMaxRange)
				   begin
					COMMIT TRAN
					SET @ErrorMessage = 'Min Range cannot be greater than or equal to Max Range!'
					SET @ERROR_SEVERITY = ERROR_SEVERITY()
					SET @ERROR_STATE = ERROR_STATE()
					RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
					return;
		end
			
			
			select Distinct @MaxRange + 0.01 as MaxRange from p_IpCstMarkup

	
			COMMIT TRAN

			SET	@ErrorMessage = '100-Min Range Set.'		
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()		
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

			END TRY
			BEGIN CATCH                
				SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
				SET @ERROR_SEVERITY = ERROR_SEVERITY()
				SET @ERROR_STATE = ERROR_STATE()		
				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
			END CATCH; 
    
	END -- End Saving...
	set xact_abort OFF
END






GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUpNewParam_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[GetMaxRangeMarkUpNewParam_SCS]

@MaxRange       as decimal
AS

BEGIN

		select Distinct @MaxRange + 0.01 as MaxRange from p_IpCstMarkup

END






GO

/****** Object:  StoredProcedure [ITADMIN].[GetMaxRangeMarkUp_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[GetMaxRangeMarkUp_SCS]-- 0

AS

BEGIN
--Declare @AddMax decimal(18,2)

	--select  @AddMax =  replace(Max(MaxRange),'.00','.01') from p_IpCstMarkup

	select Max(MaxRange) + 0.01 as MaxRange from p_IpCstMarkup


	----Test 
	--Select 5.00  as MaxRange


END






GO

/****** Object:  StoredProcedure [ITADMIN].[GetDoctorList_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[GetDoctorList_SCS] --139
@OperatorId as int
AS

BEGIN

Select a.IsPractisingDoctor from Employee  a
where ID = @OperatorId
---wipro 
--Select b.Id, b.Name, a.MarkUpPer from P_IPCSTBEDTYPEMARKUP a, BedType b Where a.BedtypeID =* b.ID and a.Deleted = 0

END

GO

/****** Object:  StoredProcedure [ITADMIN].[GetDefaultCashMarkUp_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[GetDefaultCashMarkUp_SCS]-- 0

AS

BEGIN

SELECT CASHDEFAULTMARKUP as CashMarkUp  FROM organisationdetails


---wipro 
--Select b.Id, b.Name, a.MarkUpPer from P_IPCSTBEDTYPEMARKUP a, BedType b Where a.BedtypeID =* b.ID and a.Deleted = 0


END


GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE proc [ITADMIN].[get_cacellation_type_details_View_SCS]  --19
	@Id int
as
begin
	set nocount on;

	select 
		ISNULL(UPPER(A.Code), '') + ' - ' + UPPER(A.NAME) as DetailName
	    ,REPLACE(CONVERT(VARCHAR(50), A.StartDateTime, 106),' ','-') as STDate
		,A.Id
		,A.MainReasonId
		,A.Code
		,A.Name
		,convert(varchar(10),A.Deleted) as Del
		,ISNULL(B.CODE, '') + ' - ' + UPPER(B.NAME) as MainReasonName
	from dbo.CANCELBILLREASONDetails  A
	LEFT JOIN dbo.CANCELBILLREASON B ON A.MainReasonId = B.ID
	where a.Id = @Id

end
GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


Create proc [ITADMIN].[get_cacellation_type_details_SCS] -- 13
	@Id int
as
begin
	set nocount on;

	select 
		ISNULL(UPPER(A.Code), '') + ' - ' + UPPER(A.NAME) as DetailName
	    ,REPLACE(CONVERT(VARCHAR(50), A.StartDateTime, 106),' ','-') as STDate
		,A.Id, A.MainReasonId
		,A.Code
		,A.Name
		,A.Deleted as Del
		,ISNULL(B.CODE, '') + ' - ' + UPPER(B.NAME) as MainReasonName
	from dbo.CANCELBILLREASONDetails  A
	LEFT JOIN dbo.CANCELBILLREASON B ON A.MainReasonId = B.ID
	where A.mainreasonid = @id

end

GO

/****** Object:  StoredProcedure [ITADMIN].[get_cacellation_type_details]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


Create proc [ITADMIN].[get_cacellation_type_details]
	@Id int
as
begin
	set nocount on;

	select 
		A.Id, A.MainReasonId, A.Code, A.Name, 
		ISNULL(UPPER(A.Code), '') + ' - ' + UPPER(A.NAME) as DetailName,
		REPLACE(CONVERT(VARCHAR(50), A.StartDateTime, 106),' ','-') as STDate,
		A.Deleted as Del,
		ISNULL(B.CODE, '') + ' - ' + UPPER(B.NAME) as MainReasonName
	from dbo.CANCELBILLREASONDetails  A
	LEFT JOIN dbo.CANCELBILLREASON B ON A.MainReasonId = B.ID
	where A.mainreasonid = @id

end

--select * from CANCELBILLREASONDetails
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[GenCashierTransType_View_SCS]-- 2-- 0
@Id as int
AS

BEGIN
		SELECT  Name, 
		CASE Type WHEN 1 THEN 'Collection' ELSE 'Payment' END AS Type,id as Id,Type as TypeId
		FROM         GenCashierTransType
		WHERE     (deleted = 0) and Id = @Id
		ORDER BY Name
END
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[GenCashierTransType_Save_SCS]
	
    @ErrorMessage						as NVARCHAR(max) OUT,
    @xmlGenCashierTransTypeSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlGenCashierTransTypeSave
SELECT 
Action
,Id
,OperatorId
,Name
,TypeId
into #tmpGenCashierTransTypeSave

from openxml(@handle, '/DocumentElement/GenCashierTransTypeSave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
,TypeId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @LocationId as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int
declare @Id as int
declare @TypeId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId,@TypeId = TypeId
from   #tmpGenCashierTransTypeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from GenCashierTransType where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into GenCashierTransType(Name,StartDateTime, Deleted,OperatorId) 
				Select  upper(@Name),Getdate(),0,@OperatorId
				from #tmpGenCashierTransTypeSave
		
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

				Update GenCashierTransType set name = @Name,type = @TypeId,operatorid =@OperatorId where id=@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		Update GenCashierTransType set deleted =1,enddatetime=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpGenCashierTransTypeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[GenCashierTransType_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[GenCashierTransType_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT  Name, 
					CASE type WHEN 1 THEN 'Collection' ELSE 'Payment' END AS Type,id as Id
			FROM         GenCashierTransType
			WHERE     (deleted = 0)
			ORDER BY Name
END
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListTest_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FunctionListTest_SCS] --13,251
@ModuleId as int
,@RoleId as int
AS
BEGIN

	CREATE TABLE #temp1(
			[selected] int NULL,
			[FeatureName] [varchar](1000) NULL,
			[FeatureId] int NULL,
			--[MaxId] int NULL,
			--[stationid] int NULL,
		)

Insert into #temp1
SELECT 
0 as selected
,b.Name as FeatureName
,b.Id as FeatureId
from HIS.HISGLOBAL.ACCESS_ROLEFEATURES a 	
LEFT JOIN  HIS.HISGLOBAL.MENU_ACCESS b on b.FeatureID = a.Feature_Id
where a.Module_Id = @ModuleId and a.Role_Id = @RoleId

update a set selected = 1 from #temp1 a

			select   b.selected,c.Name as FuncationName,FunctionID
			From HISGLOBAL.ACCESS_FEATUREFUNCTIONS a
		    LEFT JOIN m_functions c on c.Id = a.FunctionID
			LEFT JOIN #temp1 b on b.FeatureId = a.FeatureId
			where b.selected = 1
			--select * from #temp1 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListSelected_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FunctionListSelected_SCS] --13,251
@ModuleId as int
,@RoleId as int
AS
BEGIN

	CREATE TABLE #temp1(
			[selected] int NULL,
			[FeatureName] [varchar](1000) NULL,
			[FeatureId] int NULL,
			--[MaxId] int NULL,
			--[stationid] int NULL,
		)

Insert into #temp1
SELECT 
0 as selected
,b.Name as FeatureName
,b.Id as FeatureId
from HIS.HISGLOBAL.ACCESS_ROLEFEATURES a 	
LEFT JOIN  HIS.HISGLOBAL.MENU_ACCESS b on b.FeatureID = a.Feature_Id
where a.Module_Id = @ModuleId and a.Role_Id = @RoleId

update a set selected = 1 from #temp1 a

			--select   b.selected,c.Name as FunctionName,FunctionID
			--From HISGLOBAL.ACCESS_FEATUREFUNCTIONS a
		 --   LEFT JOIN m_functions c on c.Id = a.FunctionID
			--LEFT JOIN #temp1 b on b.FeatureId = a.FeatureId
			--where b.selected = 1

			
			select   b.selected,c.Name as FunctionName,FunctionID
			From HISGLOBAL.ACCESS_USERFUNCTION a
		    LEFT JOIN m_functions c on c.Id = a.FunctionID
			LEFT JOIN #temp1 b on b.FeatureId = a.FeatureId
			where b.selected = 1
			--select * from #temp1 
END
--select * From HISGLOBAL.ACCESS_FEATUREFUNCTIONS 
--select * from [HISGLOBAL].[ACCESS_USERFUNCTION]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionListNew_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FunctionListNew_SCS]-- 1,558--13,251
AS
BEGIN


			select  
			distinct 
			 0 selected,c.Name as FunctionName,FunctionID
			From [HISGLOBAL].[MENU_FUNCTIONS] a
		    LEFT JOIN m_functions c on c.Id = a.FunctionID
END
--Select * 

--from [HISGLOBAL].[ACCESS_USERFUNCTION]
GO

/****** Object:  StoredProcedure [ITADMIN].[FunctionList_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FunctionList_SCS]-- 516
@FeatureId as int
AS
BEGIN

select 
a.FeatureId
,b.Name as FunctionName
,b.Id as FunctionID
 from HISGLOBAL.ACCESS_FEATUREFUNCTIONS a
 LEFT JOIN m_functions b on b.Id = a.FunctionID
 where a.FeatureId = @FeatureId

END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchUserInfor_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[FetchUserInfor_SCS] 
--@Id as int
AS
BEGIN

SET NOCOUNT ON;

				    SELECT
					a.EmployeeId  as id
					,b.EmployeeID + '-' + a.Name as name
					,a.Name as EmpName
					,isnull(a.Password,'LPRZDqzEQYo=') as Password
					,a.EffectivityDate
					--,a.CounterAtempt
					--,a.IsAdminReset
					,a.Question1
					,a.Question2
					,a.SecAnswer1
					,a.SecAnswer2
					--,a.IsSuperUser as IsSuperUserId
					--,Case when a.IsSuperUser = 1 then 'YES' ElSE 'NO' END as IsSuperUser
					,a.Mobile
					,a.Email
					--'' as DecrpytPass
					--,b.CellNo as Mobile
					--,b.Email as Email
					from ITADMIN.User_Authentication a
					LEFT JOIN EMPLOYEE b on b.ID = a.EmployeeId 
					where  a.Active = 1 --and a.EmployeeId = @Id

END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientOrder_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[FetchPatientOrder_View_SCS] --1508348--62336 -- 0
@IPID as int
AS

BEGIN


		SELECT  
				 InPatient.IssueAuthorityCode + '.' + REPLICATE('0', 10 - LEN(CAST(InPatient.RegistrationNo AS char(10)))) + CAST(InPatient.RegistrationNo AS char(10)) AS RegistrationNo
				,InPatient.Title + ' ' + InPatient.FirstName + ' ' + InPatient.MiddleName + ' ' + InPatient.LastName as PatientName
				,Bed.Name as BedName
				,InPatient.AdmitDateTime
				,c.Name as CompanyName
				,InPatient.CompanyID
				--,'' AS DischargeDatetime
				,InPatient.IPID
				,InPatient.RegistrationNo as Pin
		FROM         InPatient 
					INNER JOIN Bed ON InPatient.IPID = Bed.IPID
					Left Join Company c on c.ID  = InPatient.CompanyID
		WHERE     (InPatient.RegistrationNo = @IPID)
		UNION ALL
			SELECT  
				 OldInPatient.IssueAuthorityCode + '.' + REPLICATE('0', 10 - LEN(CAST(OldInPatient.RegistrationNo AS char(10)))) + CAST(OldInPatient.RegistrationNo AS char(10)) AS RegistrationNo
				,OldInPatient.Title + ' ' + OldInPatient.FirstName + ' ' + OldInPatient.MiddleName + ' ' + OldInPatient.LastName as PatientName
				,Bed.Name as BedName
				,OldInPatient.AdmitDateTime
				,c.Name as CompanyName
				,OldInPatient.CompanyID
			
				--,'' AS DischargeDatetime
				,OldInPatient.IPID
			     ,OldInPatient.RegistrationNo as Pin
		FROM         OldInPatient 
					INNER JOIN Bed ON OldInPatient.IPID = Bed.IPID
					Left Join Company c on c.ID  = OldInPatient.CompanyID
		WHERE     (OldInPatient.RegistrationNo = @IPID)
		ORDER BY InPatient.AdmitDateTime DESC



	
		--SELECT  
		--a.IssueAuthorityCode + '.' + REPLICATE('0', 10 - LEN(CAST(a.RegistrationNo AS char(10)))) + CAST(a.RegistrationNo AS char(10)) AS RegistrationNo
		--,a.Title + ' ' + a.FirstName + ' ' + a.MiddleName + ' ' + a.LastName as PatientName
		--,b.Name as BedName
		--,replace(convert(varchar(11),a.AdmitDateTime,106),' ','-') as AdmitDateTime
		--,c.Name as CompanyName
		--,a.CompanyID as CompanyId
		--,a.RegistrationNo
		--,a.IPID
		--FROM inpatient a 
		--Left Join Bed b on b.IPID = a.IPID
		--Left Join Company c on c.ID  = a.CompanyID
		--where a.registrationno =@IPID

		--UNION ALL

		--SELECT  
		--a.IssueAuthorityCode + '.' + REPLICATE('0', 10 - LEN(CAST(a.RegistrationNo AS char(10)))) + CAST(a.RegistrationNo AS char(10)) AS RegistrationNo
		--,a.Title + ' ' + a.FirstName + ' ' + a.MiddleName + ' ' + a.LastName as PatientName
		--,b.Name as BedName
		--,replace(convert(varchar(11),a.AdmitDateTime,106),' ','-') as AdmitDateTime
		--,c.Name as CompanyName
		--,a.CompanyID as CompanyId
		--,a.RegistrationNo
		--,a.IPID
		--FROM OldInPatient a 
		--Left Join Bed b on b.IPID = a.IPID
		--Left Join Company c on c.ID  = a.CompanyID
		--where a.registrationno =@IPID



		--SELECT     InPatient.IPID, InPatient.Title, InPatient.FirstName, InPatient.MiddleName, InPatient.LastName, Bed.Name, InPatient.AdmitDateTime, '' AS DischargeDatetime, 
		--InPatient.CompanyID
		--FROM         InPatient 
		--INNER JOIN Bed ON InPatient.IPID = Bed.IPID
		--WHERE     (InPatient.RegistrationNo = 1481910) AND (InPatient.IssueAuthorityCode = 'SA01')
		--UNION ALL
		--SELECT     IPID, Title, FirstName, MiddleName, LastName, '---' AS Expr1, AdmitDateTime, DischargeDateTime, CompanyID
		--FROM         OldInPatient
		--WHERE     (RegistrationNo = 1481910) AND (issueauthoritycode = 'SA01')
		--ORDER BY InPatient.AdmitDateTime DESC




END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientInformation_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[FetchPatientInformation_View_SCS] --62336 -- 0
@IPID as int
AS

BEGIN
	
		SELECT     A.Title + ' ' + A.FirstName + ' ' + A.LastName AS PatientName, C.Code + ' ' + C.Name AS CompanyName,A.CompanyID as CompanyId,B.IPID,A.RegistrationNo
		FROM         AllInpatients AS A 
					INNER JOIN IPTransactions AS B ON A.IPID = B.IPID 
					INNER JOIN Company AS C ON A.CompanyID = C.ID 
					INNER JOIN IPTransactionType AS D ON B.Type = D.ID
		WHERE     (B.IPID = @IPID)


END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchPatientInformation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[FetchPatientInformation_DashBoard_SCS]-- 62336 -- 0
@IPID as int
AS

BEGIN
	
		SELECT      B.ReceiptNo,B.DateTime,D.Name AS Type,B.Amount,' ' as ChangeType,B.ModeOfPayment,B.IPID
                    ,B.Type AS TypeID,A.CompanyID,B.Type as OldTypeId 
		FROM         AllInpatients AS A 
					INNER JOIN IPTransactions AS B ON A.IPID = B.IPID 
					INNER JOIN Company AS C ON A.CompanyID = C.ID 
					INNER JOIN IPTransactionType AS D ON B.Type = D.ID
		WHERE     (B.IPID = @IPID)


END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchCancelPatientInformation_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
Create PROCEDURE [ITADMIN].[FetchCancelPatientInformation_View_SCS] --62336 -- 0
@IPID as int
AS

BEGIN
	
		SELECT     A.Title + ' ' + A.FirstName + ' ' + A.LastName AS PatientName, C.Code + ' ' + C.Name AS CompanyName,A.CompanyID as CompanyId,B.IPID,A.RegistrationNo
		,replace(convert(varchar(11),a.DischargeDateTime,106),' ','-') as DischargeDateTime
		FROM         AllInpatients AS A 
					INNER JOIN IPTransactions AS B ON A.IPID = B.IPID 
					INNER JOIN Company AS C ON A.CompanyID = C.ID 
					INNER JOIN IPTransactionType AS D ON B.Type = D.ID
		WHERE     (B.IPID = @IPID)


END
GO

/****** Object:  StoredProcedure [ITADMIN].[FetchCancelDepositInformation_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
CREATE PROCEDURE [ITADMIN].[FetchCancelDepositInformation_DashBoard_SCS] --185220 -- 62336 -- 0
@IPID as int
AS

BEGIN
	
		SELECT      B.ReceiptNo,B.DateTime,D.Name AS Type,B.Amount,'0' selected,B.ModeOfPayment,B.IPID
                    ,B.Type AS TypeID,A.CompanyID--,--replace(convert(varchar(11),a.DischargeDateTime,106),' ','-') as DischargeDateTime--B.Type as OldTypeId 
		FROM         AllInpatients AS A 
					INNER JOIN IPTransactions AS B ON A.IPID = B.IPID 
					INNER JOIN Company AS C ON A.CompanyID = C.ID 
					INNER JOIN IPTransactionType AS D ON B.Type = D.ID
		WHERE     (B.IPID = @IPID)

	

END	
GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureListSelected_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FeatureListSelected_SCS] --13,251
@ModuleId as int
,@RoleId as int
AS
BEGIN

	CREATE TABLE #temp1(
			[selected] int NULL,
			[FeatureName] [varchar](1000) NULL,
			[FeatureId] int NULL,
			--[MaxId] int NULL,
			--[stationid] int NULL,
		)

			Insert into #temp1
			SELECT 
			0 as selected
			,b.Name as FeatureName
			,b.Id as FeatureId
			from HIS.HISGLOBAL.ACCESS_ROLEFEATURES a 	
			LEFT JOIN  HIS.HISGLOBAL.MENU_ACCESS b on b.FeatureID = a.Feature_Id
			where a.Module_Id = @ModuleId and a.Role_Id = @RoleId

			update a set selected = 1 from #temp1 a

						SELECT   b.selected,b.FeatureName,a.FeatureId
						From HISGLOBAL.ACCESS_FEATUREFUNCTIONS a
						LEFT JOIN #temp1 b on b.FeatureId = a.FeatureId
						--where b.selected = 1
					--select * from #temp1 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureListNew_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FeatureListNew_SCS]-- 99-- 12	
@ModuleId as int
AS
BEGIN

SELECT
Distinct 
0 as selected
,b.Name as FeatureName
,b.Id as FeatureId
from [HISGLOBAL].[ACCESS_MODULEFEATURES] a 	
LEFT JOIN  HIS.HISGLOBAL.MENU_ACCESS b on b.FeatureID = a.FeatureId
where a.ModuleId = @ModuleId ---and b.Name = NULL --and a.Role_Id = @RoleId and 

END


--Select * From HIS.HISGLOBAL.ACCESS_ROLEFEATURES where Module_Id = 99

--Select * from HIS.HISGLOBAL.MENU_ACCESS


--Select * from [HISGLOBAL].[ACCESS_MODULEFEATURES]
---Select * from [HISGLOBAL].[HIS_MODULES]
--select * From m_features


GO

/****** Object:  StoredProcedure [ITADMIN].[FeatureList_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
exec [HISGLOBAL].[EMPLOYEE_FEATURE] 139,312
select * from employee where employeeid = '156549'
select * From hisglobal.ACCESS_USERFEATURES 
select * from HIS.HISGLOBAL.ACCESS_ROLEFEATURES		-	List of Feature/Function per Roles/Station/Module	- WIPRO (dbo.l_rolefeatures)
select * from HIS.HISGLOBAL.ACCESS_USERROLES		-	List of Roles per User ID							- WIPRO (dbo.L_USERROLES)
select * from HIS.HISGLOBAL.ACCESS_ROLES			-	Master List of Roles								- WIPRO (dbo.m_roles)
select * from HIS.HISGLOBAL.MENU_ACCESS 			-	Master List of Features/Function with ParentID		- WIPRO (dbo.m_features)
select * from HIS.HISGLOBAL.MENU_PARENT 			-	Master List of Parents
select * from HIS.HISGLOBAL.HIS_MODULES 			-	Master List of Modules (with Online HIS URL Link)
select * from HIS.HISGLOBAL.ACCESS_STATION 			-	Master List of Station per Module					- WIPRO (DataInfo.dbo.ModulePermission)
select * from HIS.HISGLOBAL.ACCESS_USER_STATION		-	Master List of Station per User per Module			- WIPRO (DataInfo.dbo.ModulePermission)
select * from DataInfo.dbo.ServerInformation 		-	Master List of Modules (WIPRO)

*/


CREATE PROCEDURE [ITADMIN].[FeatureList_SCS]-- 12	
@ModuleId as int
,@RoleId as int
AS
BEGIN

SELECT 
1 as selected
,b.Name as FeatureName
,b.Id as FeatureId
from HIS.HISGLOBAL.ACCESS_ROLEFEATURES a 	
LEFT JOIN  HIS.HISGLOBAL.MENU_ACCESS b on b.FeatureID = a.Feature_Id
where a.Module_Id = @ModuleId and a.Role_Id = @RoleId

END





--select * From m_features

GO

/****** Object:  StoredProcedure [ITADMIN].[EmployeeDiscountAutho_EmpAuthority_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[PTProcedure_View_SCS] 60
CREATE PROCEDURE [ITADMIN].[EmployeeDiscountAutho_EmpAuthority_SCS] --2
@DiscountId as int,
@IPOPTypeId as int
AS


BEGIN
		

	SELECT     a.EmployeeID + ' - '  + a.Name as Name,a.ID as Id
	FROM       Employee AS a 
				INNER JOIN  EmployeeDiscount AS b ON a.ID = b.EmployeeID
	WHERE     (b.DiscountID = @DiscountId) AND (b.IPOPType = @IPOPTypeId) and a.deleted = 0

END

GO

/****** Object:  StoredProcedure [ITADMIN].[EmployeeDiscountAutho_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[PTProcedure_View_SCS] 60
CREATE PROCEDURE [ITADMIN].[EmployeeDiscountAutho_DashBoard_SCS] --2

AS


BEGIN
		

		SELECT    a.EmployeeID + ' - ' + a.Name as Name, a.ID as Id
		FROM      Employee a
		WHERE     (a.Deleted = 0)

END


GO

/****** Object:  StoredProcedure [ITADMIN].[EmpAuthorityDiscount_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[EmpAuthorityDiscount_Save]
	
    @ErrorMessage						as NVARCHAR(max) OUT,
	@xmlEmpAuthorityHeaderSave			as xml,
    @xmlEmpAuthorityDetailsSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlEmpAuthorityHeaderSave
SELECT 
Action
,DiscountId
,IPOPTypeId
,OperatorId
into #tmpEmpAutorithyHeaderSave


from openxml(@handle, '/DocumentElement/EmpAuthorityHeaderSave',2) with
(
Action int
,DiscountId int
,IPOPTypeId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlEmpAuthorityDetailsSave
SELECT 
EmployeeId

into #tmpEmpAuthorityDetailsSave


from openxml(@handle, '/DocumentElement/EmpAuthorityDetailsSave',2) with
(
EmployeeId int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DiscountId as int
declare @IPOPTypeId as int



SELECT @Action = Action,@OperatorId = OperatorId,@DiscountId = DiscountId,@IPOPTypeId = IPOPTypeId
from #tmpEmpAutorithyHeaderSave

IF (@Action = 1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
				Delete from EmployeeDiscount where DiscountId = @DiscountId and IPOPType =@IPOPTypeId 

				INSERT INTO EmployeeDiscount
                      (EmployeeID, DiscountID, StartDateTime, OperatorId, IPOPType, Limit, Deleted)
				Select EmployeeId,@DiscountId,Getdate(),@OperatorId,@IPOPTypeId,0,0
				from #tmpEmpAuthorityDetailsSave group by EmployeeId 


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100- Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action = 2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		

			--delete OPCashServiceDiscount where GradeID =4 and ServiceID in (14,18)
			--select * from OPCashServiceDiscount where GradeID =4 and ServiceID in (14,18)
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'	
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpEmpAutorithyHeaderSave
drop table #tmpEmpAuthorityDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
----convetion time SELECT--->> CONVERT(VARCHAR(8),GETDATE(),108)
GO

/****** Object:  StoredProcedure [ITADMIN].[DUMP_DiscounType_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[DUMP_DiscounType_Save_SCS]
	
    @ErrorMessage		        as NVARCHAR(max) OUT,
    @xmlDumpDiscountTypeSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDumpDiscountTypeSave
SELECT 
Action
,DiscountType
,DumpDiscountId
,Id
,OperatorId
into #DumpDiscountTypeSave

from openxml(@handle, '/DocumentElement/DumpDiscountTypeSave',2) with
(
Action int
,DiscountType int
,DumpDiscountId int
,Id int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DiscountType as int
declare @Id as int
declare @DumpDiscountId as int
declare @MaxId as int

			select @Action = Action,@OperatorId = OperatorId
			,@DiscountType = DiscountType,@Id = Id,@DumpDiscountId = DumpDiscountId
			from   #DumpDiscountTypeSave	

IF (@DiscountType=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	  -- Select @MaxId - Max(Id) from Discount

		IF exists(select * from IpCashServiceDiscount WHERE DiscountID = @Id)
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Cannot Dump Details Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
		end

		--IF exists(select * from IPCashDeptDiscount WHERE DiscountID = @DumpDiscountId)
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
		--end

			INSERT INTO OldIPCashServiceDiscount
           (CategoryID, CompanyID, ServiceID, GradeID, Percentage, DateTime, OperatorID, CancelDateTime)
			SELECT  CategoryID, CompanyID, ServiceID, GradeID, Percentage, DateTime, OperatorID, Getdate()
			FROM    IPCashServiceDiscount
			WHERE   (DiscountID = @Id)

			delete from IpCashServiceDiscount where DiscountId= @Id

			INSERT INTO IPCashServiceDiscount
                      (CategoryID, CompanyID, GradeID, ServiceID, DiscountID, Percentage, DateTime, OperatorID, Amount)
			SELECT     CategoryID, CompanyID, GradeID, ServiceID, @Id, Percentage, Getdate(),@OperatorId, Amount
			FROM         IPCashServiceDiscount
			WHERE     (DiscountID = @DumpDiscountId)


			INSERT INTO OldIPCashDeptDiscount
                      (CategoryID, CompanyID, ServiceID, GradeID, DiscountId, DepartmentID, Percentage, StartDateTime, OperatorID, CancelDateTime, Deleted)
			SELECT     CategoryID, CompanyID, ServiceID, GradeID, DiscountID, DepartmentID, Percentage, StartDateTime, OperatorID,Getdate(),1
			FROM         IPCashDeptDiscount
			WHERE     (DiscountID = @Id)

			delete from IpCashdeptDiscount where Discountid=@Id
		
			INSERT INTO IPCashDeptDiscount
                    (CategoryID, CompanyID, GradeID, DiscountID, ServiceID, DepartmentID, Percentage, Amount, StartDateTime, EndDateTime, OperatorID, Deleted)
			SELECT     CategoryID, CompanyID, GradeID, @Id, ServiceID, DepartmentID, Percentage, Amount, StartDateTime, EndDateTime, @OperatorId, Deleted
			FROM       IPCashDeptDiscount
			WHERE     (DiscountID = @DumpDiscountId)  -- for dumping IDs
		
			---in wipro OldIPCashItemDiscount and  IPCashItemDiscount zero
			INSERT INTO OldIPCashItemDiscount
                      (CategoryID, CompanyID, ServiceID, GradeID, DiscountId, DepartmentId, Percentage, DateTime, OperatorID, CancelDateTime, ItemID)
			SELECT     CategoryID, CompanyID, ServiceID, GradeID, DiscountID, DepartmentId, Percentage, DateTime, OperatorID, GETDATE(), ItemID
			FROM         IPCashItemDiscount
			WHERE     (DiscountID = @Id)
			--WHERE     (DiscountID = 0)
			
			delete from IpCashItemDiscount where Discountid = @Id

			INSERT INTO IPCashItemDiscount
                      (CategoryID, CompanyID, ServiceID, GradeID, DiscountID, ItemID, DepartmentId, Percentage, DateTime, OperatorID, Amount)
			SELECT     CategoryID, CompanyID, ServiceID, GradeID, @Id, ItemID, DepartmentId, Percentage, Getdate(),@OperatorId, Amount
			FROM         IPCashItemDiscount
			WHERE     (DiscountID = @DumpDiscountId)
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-IP Dump Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@DiscountType = 2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
					 --- Select @MaxId - Max(Id) from OPDiscount
				--select @Id = Id from #DumpDiscountTypeSave


				IF exists(select * from OPCashServiceDiscount WHERE GradeID = @Id)
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Cannot Dump Details Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
				end

		    
			delete from OpCashServiceDiscount where gradeid= @Id
		      --select * from OpCashServiceDiscount where gradeid = 2
			  --SELECT * INTO testKolang from #DumpDiscountTypeSave
			  --select * from testKolang

			INSERT INTO OPCashServiceDiscount
                      (CategoryID, CompanyID, DiscountType, ServiceID, GradeID, Percentage, StartDateTime, EndDateTime, OperatorID, Deleted, amount)
			SELECT     CategoryID, CompanyID, DiscountType, ServiceID, @Id, Percentage, GETDATE(),NULL,@OperatorId, Deleted, amount
			FROM         OPCashServiceDiscount
			WHERE     (GradeID = @DumpDiscountId)
			

			delete from OpCashdeptDiscount where gradeid=@Id

			INSERT INTO OPCashDeptDiscount
                      (CategoryId, CompanyId, GradeId, ServiceId, DepartmentId, DiscountType, Percentage, Amount, StartDateTime, EndDateTime, OperatorId, Deleted)
			SELECT     CategoryId, CompanyId, @Id, ServiceId, DepartmentId, DiscountType, Percentage, Amount, StartDateTime, EndDateTime,@OperatorId, Deleted
			FROM         OPCashDeptDiscount
			WHERE     (GradeId = @DumpDiscountId)

			delete from OpCashItemDiscount where gradeid=@Id

			INSERT INTO OPCashItemDiscount
            (CategoryID, CompanyID, ServiceID, GradeID, ItemID, DepartmentID, Percentage, StartDateTime, EndDateTime, OperatorID, Deleted, Amount)
			SELECT     CategoryID, CompanyID, ServiceID,@Id, ItemID, DepartmentID, Percentage, GETDATE(),NULL,@OperatorId, Deleted, Amount
			FROM         OPCashItemDiscount
			WHERE     (GradeID = @DumpDiscountId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-OP Dump Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...



drop table #DumpDiscountTypeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlDumpDiscountTypeSave as xml, 
set @xmlDumpDiscountTypeSave = '<DocumentElement>\r\n  <DumpDiscountTypeSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <DiscountType>2</DiscountType>\r\n    <Id>2</Id>\r\n    <DumpDiscountId>2</DumpDiscountId>\r\n  </DumpDiscountTypeSave>\r\n</DocumentElement>'
exec [ITADMIN].[DUMP_DiscounType_Save_SCS] @ErrorMessage,@xmlDumpDiscountTypeSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpeMapping_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[DoctorSpeMapping_DashBoard_SCS]-- 0

AS

BEGIN

		Select ID as Id, Name from Specialisation where Deleted = 0 Order by Name


END
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpecializationMappingSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[DoctorSpecializationMappingSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlDoctorSpecMappingHeaderSave			as xml,
	@xmlDoctorSpecMappingDetailsSave		as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorSpecMappingHeaderSave
SELECT 
Action
,DoctorId
,OperatorId

into #tmpDocspeMappingHeaderSave


from openxml(@handle, '/DocumentElement/DoctorSpecMappingHeaderSave',2) with
(
Action int
,DoctorId int
,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorSpecMappingDetailsSave

select SpecialisationId
into #tmpDocspemapDetailsSave

from openxml(@handle, '/DocumentElement/DoctorSpecMappingDetailsSave',2) with
(
SpecialisationId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DoctorId as int
declare @OperatorId as int


SELECT @Action = Action,@DoctorId = DoctorId,@OperatorId = OperatorId
from   #tmpDocspeMappingHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					
					Delete from doctor_specialisation where doctorid=@DoctorId

					INSERT INTO Doctor_Specialisation
                      (DoctorId, SpecialisationId, StartDateTime, OperatorID)
					Select @DoctorId,SpecialisationId,Getdate(),@OperatorId
					from #tmpDocspemapDetailsSave
		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpDocspeMappingHeaderSave
drop table #tmpDocspemapDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorSpecializationMapping_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[DoctorSpecializationMapping_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlDoctorSpecMappingHeaderSave			as xml,
	@xmlDoctorSpecMappingDetailsSave		as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorSpecMappingHeaderSave
SELECT 
Action
,DoctorId
,OperatorId

into #tmpDocspeMappingHeaderSave


from openxml(@handle, '/DocumentElement/DoctorSpecMappingHeaderSave',2) with
(
Action int
,DoctorId int
,OperatorId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorSpecMappingDetailsSave

select SpecialisationId
into #tmpDocspemapDetailsSave

from openxml(@handle, '/DocumentElement/DoctorSpecMappingDetailsSave',2) with
(
SpecialisationId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DoctorId as int
declare @OperatorId as int


SELECT @Action = Action,@DoctorId = DoctorId,@OperatorId = OperatorId
from   #tmpDocspeMappingHeaderSave	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					
					Delete from doctor_specialisation where doctorid=@DoctorId

					INSERT INTO Doctor_Specialisation
                      (DoctorId, SpecialisationId, StartDateTime, OperatorID)
					Select @DoctorId,SpecialisationId,Getdate(),@OperatorId
					from #tmpDocspemapDetailsSave
		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpDocspeMappingHeaderSave
drop table #tmpDocspemapDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionMappingView_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[DoctorReceptionMappingView_DashBoard_SCS]-- 0
@Id as int
AS

BEGIN


		select ReceptionistId as Id,Receptionist_name as Name from doctor_reception where Doctorid = @Id

END
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionMapping_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[DoctorReceptionMapping_DashBoard_SCS]-- 0

AS

BEGIN


		SELECT DISTINCT U.ID as Id, U.Name as Name
				FROM         l_userroles AS LU 
					INNER JOIN Employee AS U ON LU.User_Id = U.ID 
					INNER JOIN l_rolefeatures AS LR ON LU.Role_Id = LR.Role_Id
				WHERE     (LR.Station_Id = 1) AND (LR.Module_Id = 35)
		ORDER BY U.Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorReceptionistMappingSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[DoctorReceptionistMappingSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlDoctorRecepHeaderSave			as xml,
	@xmlDoctorRecepDetailsSave			as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorRecepHeaderSave
SELECT 
Action
,OperatorId
,DoctorId
,DoctorName
,Confine

into #tmpDoctorReceptionisHeader


from openxml(@handle, '/DocumentElement/DoctorRecepHeaderSave',2) with
(
Action int
,OperatorId int
,DoctorId int
,DoctorName varchar(250)
,Confine int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDoctorRecepDetailsSave

select ReceptionistId,ReceptionistName
into #tmpDocRecepMapDetailsSave

from openxml(@handle, '/DocumentElement/DoctorRecepDetailsSave',2) with
(
ReceptionistId int,ReceptionistName varchar(250)
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @DoctorId as int
declare @OperatorId as int
declare @Confine as int
declare @DoctorName as varchar(250)

SELECT @Action = Action,@DoctorId = DoctorId,@OperatorId = OperatorId,@DoctorName = DoctorName,@Confine = Confine
from   #tmpDoctorReceptionisHeader	



IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				

					Delete from Doctor_Reception where doctorid=@DoctorId

					Insert into Doctor_Reception 
					(DoctorId,Doctor_name,ReceptionistId,Receptionist_name,OperatorId,Datetime,Confine)
			 Select @DoctorId,@DoctorName,ReceptionistId,ReceptionistName,@OperatorId,GETDATE(),@Confine
					from #tmpDocRecepMapDetailsSave
		
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Successfully Save.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpDoctorReceptionisHeader
drop table #tmpDocRecepMapDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  




GO

/****** Object:  StoredProcedure [ITADMIN].[DoctorMappingSelectedList_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[DoctorMappingSelectedList_View_SCS]-- 0
@Id as int
AS

BEGIN

		
			SELECT a.SpecialisationId as Id,Name as Name
			FROM         Doctor_Specialisation  a
						LEFT JOIN Specialisation b on b.ID = a.SpecialisationId
			WHERE     (DoctorId = @Id)


END
GO

/****** Object:  StoredProcedure [ITADMIN].[Doctor_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[Doctor_DashBoard_SCS]-- 0

AS

BEGIN


		SELECT DISTINCT U.ID as Id, U.Name as Name
				FROM         l_userroles AS LU 
					INNER JOIN Employee AS U ON LU.User_Id = U.ID 
					INNER JOIN l_rolefeatures AS LR ON LU.Role_Id = LR.Role_Id
				WHERE     (LR.Station_Id = 1) AND (LR.Module_Id = 35)
		ORDER BY U.Name

END
GO

/****** Object:  StoredProcedure [ITADMIN].[DiscounType_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[DiscounType_Save_SCS]
	
    @ErrorMessage		        as NVARCHAR(max) OUT,
    @xmlDiscountTypeSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDiscountTypeSave
SELECT 
Action
,Name
,AuthCanEdit
,RequireNoAuth
,OperatorId
,CompanyId
,DiscountType
,Id
,DumpDiscountId
into #DiscountTypeSave

from openxml(@handle, '/DocumentElement/DiscountTypeSave',2) with
(
Action int
,Name varchar(250)
,AuthCanEdit bit
,RequireNoAuth bit
,OperatorId int
,CompanyId int
,DiscountType int
,Id int
,DumpDiscountId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DiscountType as int
declare @MaxIdIP as int
declare @MaxIdOP as int
declare @Id as int
declare @AuthCanEdit as bit
declare @RequireNoAuth as bit

				select @Action = Action,@OperatorId = OperatorId
			,@DiscountType = DiscountType,@Id = Id,@AuthCanEdit = AuthCanEdit,@RequireNoAuth = RequireNoAuth
			from   #DiscountTypeSave	

IF (@DiscountType=1 and @Action = 1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	
			----IP During new
			Select @MaxIdIP = max(ID) + 1 from Discount

			Insert into Discount(ID,Name,StartDateTime,EndDateTime,Deleted,MaintainDiscountNo,AuthCanEdit,RequireNoAuth) 
			SELECT @MaxIdIP,Name,Getdate(),null,0,0,AuthCanEdit,RequireNoAuth
			FROM #DiscountTypeSave
			--values(15,'TEST KO LANG',getdate(),null,0,0,1,1)
	
			---OP During New
		
			--values(27,'TESTKO',getdate(),null,0,1412,0, 1)
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-IP Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@DiscountType = 2 and @Action =1) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				
			Select @MaxIdOP  = max(ID) + 1 from OpDiscount

			Insert into OpDiscount(ID,Name,StartDateTime,EndDateTime,Deleted,OperatorID,Type,CompanyId) 
			SELECT @MaxIdOP,Name,Getdate(),null,0,@OperatorId,0,CompanyId
			FROM #DiscountTypeSave
			--Update anaesthesia set name = 'GENERAL ANESTHESIA',costprice=15,code='FMORDZ9999',ModifiedBy = 1412,BillingType=2 ,ArabicName='"',ArabicCode='"' where id=85
			--sp_HElp anaesthesia
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-OP Save Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@DiscountType = 1 and @Action =2) -- Update
BEGIN

   BEGIN TRY 
       BEGIN TRAN
				
				Update Discount set RequireNoAuth=@RequireNoAuth,AuthCanEdit=@AuthCanEdit where id=@Id
			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Discount Updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

ELSE IF (@DiscountType = 2 and @Action =2) -- Update
BEGIN

   BEGIN TRY 
       BEGIN TRAN
				
				--Update Discount set RequireNoAuth=@RequireNoAuth,AuthCanEdit=@AuthCanEdit where id=@Id
			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END



ELSE IF (@DiscountType = 1 and  @Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
	             	Update Discount set Deleted=1 where ID=@Id
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100- IP Discount Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

ELSE IF (@DiscountType = 2 and  @Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
	             	Update OPDiscount set Deleted=1 where ID=@Id
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-OP Discount Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END




drop table #DiscountTypeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlDiscountTypeSave as xml, 
set @xmlDiscountTypeSave = '<DocumentElement>\r\n  <DiscountTypeSave>\r\n    <Action>1</Action>\r\n    <Name>NewDiscount</Name>\r\n    <AuthCanEdit>false</AuthCanEdit>\r\n    <RequireNoAuth>true</RequireNoAuth>\r\n    <OperatorId>139</OperatorId>\r\n    <CompanyId>0</CompanyId>\r\n    <DiscountType>1</DiscountType>\r\n  </DiscountTypeSave>\r\n</DocumentElement>'
exec ITADMIN.DiscounType_Save_SCS @ErrorMessage,@xmlDiscountTypeSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7



GO

/****** Object:  StoredProcedure [ITADMIN].[DiscountTypeList_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [ITADMIN].[DiscountTypeList_SCS]
@DiscountType as int
AS
BEGIN

if (@DiscountType=1) --NO ACCOUNT NUMBERS
begin
		SELECT 
			row_number() over(order by a.Id) as SNo	
			,a.Name
			,STUFF(STUFF(CONVERT(char(20), a.StartDateTime, 113),3,1,'-'),7,1,'-') as CreatedOn
			,a.Id
			,a.AuthCanEdit
			,a.RequireNoAuth
			,0 as CompanyId
			,NULL as CompanyName
		from discount  a where a.deleted=0

end
else if ( @DiscountType = 2)
	BEGIN
			SELECT 
				row_number() over(order by a.Id) as SNo	
				,a.Name
				,STUFF(STUFF(CONVERT(char(20), a.StartDateTime, 113),3,1,'-'),7,1,'-') as CreatedOn
				,a.Id
				,0 AuthCanEdit
				,0 RequireNoAuth
				,a.CompanyId
				,b.Name as CompanyName
			from Opdiscount a 
			LEFT JOIN Company b on b.ID = a.CompanyId 
			where a.deleted=0
		END
	--	date format	
		-- Select STUFF(STUFF(CONVERT(char(20), getdate(), 113),3,1, '-'),7,1,'-')
--select REPLACE(REPLACE(CONVERT(VARCHAR,getdate(),106), ' ','-'), ',','')
END
GO

/****** Object:  StoredProcedure [ITADMIN].[DeptLvlMarkup_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[DeptLvlMarkup_DashBoard_SCS]-- 0

AS

BEGIN

		 SELECT    row_number() over(order by b.Name) as SNo  
		  ,B.Name
		  , ISNULL(a.MaxRange, 0) AS MaxRange
		  ,ISNULL(a.Percentage, 0) AS Percentage
		  ,B.ID
		  FROM  P_IPCSTDeptMarkUp AS a 
          RIGHT OUTER JOIN  Department AS B ON a.ID = B.ID
ORDER BY B.Name


END








GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimeRoomView_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[OPRevisitDays_View_SCS] 2
CREATE PROCEDURE [ITADMIN].[CutOffTimeRoomView_View_SCS]--233 --81 233-- 81-- 0

AS


BEGIN
				
				Select CutOffTime  from RoomRentConfig
				--where a.StationID= @Id


END

GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimePharmcyView_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[OPRevisitDays_View_SCS] 2
CREATE PROCEDURE [ITADMIN].[CutOffTimePharmcyView_View_SCS]--81 233-- 81-- 0
@Id as int

AS


BEGIN

				SELECT 
				b.Name as StationName
				,a.StationId 
				,isnull(a.CutOffTime,getdate()) as CutOffTime
				from WardCutOffTime a
				LEFT JOIN dbo.Station b on b.Id = a.StationId
				where a.StationID= @Id and a.StationId is not null


END



--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85


--select * from Station where name like '%Scie%'

--select * from Category
--select * from Company


GO

/****** Object:  StoredProcedure [ITADMIN].[CutOffTimePharmacySave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [ITADMIN].[CutOffTimePharmacySave_SCS]
	
    @ErrorMessage					 as NVARCHAR(max) OUT,
    @xmlCutOffTimePharmacySave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCutOffTimePharmacySave
SELECT 
Action
,WardStationId
,CutOffTime
into #tmpCutOffTimePharmacySave

from openxml(@handle, '/DocumentElement/CutOffTimePharmacySave',2) with
(
Action int
,WardStationId int
,CutOffTime  varchar(50)

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int 


select @Action = Action,@Id = WardStationId
from   #tmpCutOffTimePharmacySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					Insert into WardCutOffTime(Stationid,CutOffTime) 
					Select WardStationId,CutOffTime
					from #tmpCutOffTimePharmacySave

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from City

				--Update a  
				--set   a.Name  = b.Name
				--	  ,a.AddInformation = b.AddInformation
				--	  ,a.Address1 = b.Address1
				--	  ,a.Address2 = b.Address2
				--	  ,a.Address3 = b.Address3
				--	  ,a.City = b.City
				--	  ,a.Country = b.Country
				--	  ,a.PhoneNo = b.PhoneNo
				--	  ,a.EMail = b.EMail
				--	  ,a.FaxNo = b.FaxNo
				--	  ,a.PagerNo = b.PagerNo
				--	  ,a.CellPhoneNo = b.CellPhoneNo
				--	  ,a.PinCode = b.PinCode 
				--	  ,a.District = b.District 
				--	  ,a.IssueAuthorityCode = b.IssueAuthorityCode
				--	  ,a.CompanyId = b.CompanyId
				--	  ,a.CurrencyId = b.CurrencyId
				--	  ,a.OperatorId = b.OperatorId
				--	  from OrganisationDetails a 
				--	  INNER JOIN #tmpOrganisationSave b on b.Id = a.Id
				--where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		    delete from WardCutOffTime where StationID= @Id
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-CutOff Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCutOffTimePharmacySave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/
--select * from OrganisationDetails

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7

GO

/****** Object:  StoredProcedure [ITADMIN].[CSTZeroPrice_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[CSTZeroPrice_Save_SCS]
	
    @ErrorMessage			as NVARCHAR(max) OUT,
	@xmlCSTHeaderSave		as xml,
    @xmlCSTZeroItemDetails	as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTHeaderSave
SELECT 
Action
,OperatorId
into #tmpCSTHeaderSave


from openxml(@handle, '/DocumentElement/CSTHeaderSave',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTZeroItemDetails
SELECT 
ItemID
,ItemCode
,ItemName
,CategoryId
into #tmpCSTZeroItemDetails


from openxml(@handle, '/DocumentElement/CSTZeroItemDetails',2) with
(
ItemID int
,ItemCode varchar(250)
,ItemName varchar(250)
,CategoryId int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int


select @Action = Action, @OperatorId = OperatorId
from #tmpCSTHeaderSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
				---Select * from CSTZeroPriceItems

				Delete from CSTZeroPriceItems
				DBCC CHECKIDENT ('[CSTZeroPriceItems]', RESEED, 0)
			
				INSERT INTO CSTZeroPriceItems
                      (ItemID, ItemCode, ItemName, CategoryID, OperatorId, Deleted)
				SELECT     ItemID, ItemCode, ItemName,CategoryID,@OperatorId,0
				FROM   #tmpCSTZeroItemDetails
					
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCSTHeaderSave
drop table #tmpCSTZeroItemDetails

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTZeroPrice_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CSTZeroPrice_Save]
	
    @ErrorMessage			as NVARCHAR(max) OUT,
	@xmlCSTHeaderSave		as xml,
    @xmlCSTZeroItemDetails	as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTHeaderSave
SELECT 
Action
,OperatorId
into #tmpCSTHeaderSave


from openxml(@handle, '/DocumentElement/CSTHeaderSave',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTZeroItemDetails
SELECT 
ItemID
,ItemCode
,ItemName
,CategoryId
into #tmpCSTZeroItemDetails


from openxml(@handle, '/DocumentElement/CSTZeroItemDetails',2) with
(
ItemID int
,ItemCode varchar(250)
,ItemName varchar(250)
,CategoryId int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int


select @Action = Action, @OperatorId = OperatorId
from #tmpCSTHeaderSave

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
				---Select * from CSTZeroPriceItems

				Delete from CSTZeroPriceItems
				DBCC CHECKIDENT ('[CSTZeroPriceItems]', RESEED, 0)
			
				INSERT INTO CSTZeroPriceItems
                      (ItemID, ItemCode, ItemName, CategoryID, OperatorId, Deleted)
				SELECT     ItemID, ItemCode, ItemName,CategoryID,@OperatorId,0
				FROM   #tmpCSTZeroItemDetails
					
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCSTHeaderSave
drop table #tmpCSTZeroItemDetails

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[CSTMarkUP_RangeMarkup]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[CSTMarkUP_RangeMarkup]-- 0

AS

BEGIN

	SELECT  
	 row_number() over(order by a.ID) as SNo 
	--,max(MaxRange)
	,a.MinRange
	,a.MaxRange
	,a.Percentage
	 from p_IpCstMarkup a

	 --SELECT * FROM p_IpCstMarkup
END

--SELECT DISTINCT 
--		a.Bagnumber
--		,a.Bloodgroup
--		,a.ExpiryDate
--		,c.ID
--		,b.componentid
--		,d.name AS baggroop
--		,a.Bagid
--		,c.Code
--		,a.Cvolume AS Volume
--		,ISNULL(c.ReplacementCount, 0) 
--         AS replacementcount
--FROM         Screen AS a 
--			INNER JOIN BloodGroup AS d ON a.Bloodgroup = d.id 
--			INNER JOIN CrossMatch AS b ON a.Bagnumber = b.BagNumber 
--			INNER JOIN Component AS c ON b.componentid = c.ID
--WHERE     (a.Procid = 5) AND (b.Issued = 0) AND (b.Ipid = 185259) AND (a.ScreenValue = 0) AND (b.Reserved = 1) AND (a.ExpiryDate >= GETDATE()) AND (b.worderid = 12972) 
--                      AND (a.Bagnumber NOT IN ('')) AND (a.Cvolume > 0) AND (a.BROKEN = 0)
--ORDER BY a.Bagid, a.Bloodgroup







GO

/****** Object:  StoredProcedure [ITADMIN].[CSTBedTypeMarkUP_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CSTBedTypeMarkUP_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
	@xmlCSTBedTypeHeader		as xml,
    @xmlCSTBedTypeMarkUpSave	as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTBedTypeHeader
SELECT 
Action
,OperatorId
into #tmpBedtypeHeader


from openxml(@handle, '/DocumentElement/CSTBedTypeHeader',2) with
(
Action int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCSTBedTypeMarkUpSave
SELECT 
BedTypeId
,MarkupPer
into #tmpCSTBedTypeMarkUpSave


from openxml(@handle, '/DocumentElement/CSTBedTypeMarkUpSave',2) with
(
BedTypeId int
,MarkupPer int
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int


select @Action = Action, @OperatorId = OperatorId
from #tmpBedtypeHeader

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		


				INSERT INTO OLDP_IPCSTBEDTYPEMARKUP
                      (BedTypeId, MarkupPer, StartDateTime, EndDateTime, Deleted, OperatorId, HostName)
				SELECT     BedTypeId, MarkupPer, StartDateTime,GETDATE(),1, OperatorId,HostName
				FROM   P_IPCSTBEDTYPEMARKUP
				WHERE  BedTypeId in   (Select BedTypeId from #tmpCSTBedTypeMarkUpSave)


				Update P_IPCSTBEDTYPEMARKUP Set Deleted = 1 where BedTypeId in (Select BedTypeId from #tmpCSTBedTypeMarkUpSave)

				INSERT INTO P_IPCSTBEDTYPEMARKUP
					  (BedTypeId, MarkupPer, StartDateTime, EndDateTime, Deleted, OperatorId, HostName)
				Select BedTypeId,MarkupPer,GetDate(),NULL,0,@OperatorId,HOST_NAME()
				from #tmpCSTBedTypeMarkUpSave
					
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCSTBedTypeMarkUpSave
drop table #tmpBedtypeHeader

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[CSSItemZeroPrice_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[CSSItemZeroPrice_DashBoard_SCS]-- 0

AS

BEGIN

SELECT
 a.ItemCode + ' ' + '-' + a.ItemName as SelectedItem
 ,a.ItemCode
 ,a.ItemName as Name
 ,a.CategoryID
 ,a.ItemID as ItemId
FROM  CSTZeroPriceItems a



END
GO

/****** Object:  StoredProcedure [ITADMIN].[CSSItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[CSSItem_DashBoard_SCS]-- 0

AS

BEGIN

SELECT     
		  a.ItemCode + ' ' + '-' + a.Name as SelectedItem
		  ,a.ItemCode,a.Name
		  ,a.CategoryID
		  ,a.ID AS ItemId
FROM       CSSItem a


END
GO

/****** Object:  StoredProcedure [ITADMIN].[CreateTransOrder_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CreateTransOrder_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,	
    @xmlCreateTransOrder			as xml

AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCreateTransOrder
SELECT 
	Action
	,Monthyear

into #tmpCreateTransOrder
from openxml(@handle, '/DocumentElement/CreateTransOrder',2) with
(
		Action int
		,MonthYear Datetime

)

exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare @MonthYear as varchar(20)
Declare @Year  as varchar(20)
Declare @Month as varchar(20)
Declare @Action as int

SELECT @Action = Action,@MonthYear = MonthYear
from #tmpCreateTransOrder

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   Declare @filename as varchar(max)
	   Declare @filenameDetails as varchar(max)
	   declare @sql nvarchar(max)
	   declare @SqlDetails nvarchar(max)

	    select @Year  = (DATEPART(year,@MonthYear))
				--SELECT (datepart(year,GETDATE()))
		Select @Month  = (DATEPART(month,@MonthYear))
				--SELECT (datepart(month,GETDATE()))
		




				set @filename = 'TransOrder_' + @Year + '_' + @Month
				
				IF object_id(@filename) IS NOT NULL 
				begin 
					
				  COMMIT TRAN
					    SET	@ErrorMessage = 'Already Process'		
       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()		
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);
						return;
				end

				  



				set @sql = '

				IF NOT (EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_NAME = ''@@TABLENAME@@''))

				BEGIN

					CREATE TABLE [dbo].[@@TABLENAME@@](
					[IdKey] [int] NOT NULL,
					[Id] [int] NOT NULL,
					[StationSlNo] [int] NOT NULL,
					[DateTime] [datetime] NOT NULL,
					[IssType] [tinyint] NULL,
					[DetailType] [smallint] NOT NULL,
					[StationId] [int] NOT NULL,
					[ToStationid] [int] NULL,
					[Prefix] [varchar](10) NULL,
					[slno] [int] NULL,
					[PinNo] [int] NULL,
				UNIQUE NONCLUSTERED 
				(
				[IdKey] ASC
				)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [MMSFile]
				) ON [IndexFile]
			
			END
			'
			set @sql = replace(@sql, '@@TABLENAME@@',@filename)

			set @filenameDetails = 'TransOrderDetail_' + @Year + '_' + @Month

			IF object_id(@filenameDetails) IS NOT NULL 
				begin 
					
					  COMMIT TRAN
					    SET	@ErrorMessage = 'Already Process'		
       
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()		
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);
						return;
				end




			set @SqlDetails = '

				IF NOT (EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_NAME = ''@@TABLENAME@@''))

				BEGIN
			
						CREATE TABLE [dbo].[@@TABLENAME@@](
						[IdKey] [int] NOT NULL,
						[Id] [int] NOT NULL,
						[StationSlNo] [int] NOT NULL,
						[DateTime] [datetime] NOT NULL,
						[IssType] [tinyint] NULL,
						[DetailType] [smallint] NOT NULL,
						[StationId] [int] NOT NULL,
						[ToStationid] [int] NULL,
						[Prefix] [varchar](10) NULL,
						[slno] [int] NULL,
						[PinNo] [int] NULL,
					UNIQUE NONCLUSTERED 
					(
					[IdKey] ASC
					)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [MMSFile]
					) ON [IndexFile] 
			END
			'
		    set @SqlDetails = replace(@SqlDetails, '@@TABLENAME@@',@filenameDetails)
			
			exec (@sql)
			exec (@SqlDetails)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN
	
    SET	@ErrorMessage = '100-TransOrder Successfully Created.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

			
	
        COMMIT TRAN

        SET	@ErrorMessage = '100-Modify Entry successfully updated.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Findings deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCreateTransOrder
--drop table @@TABLENAME@@
--drop table backtest
set xact_abort OFF

END



/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCreateTransOrder xml
declare @ErrorMessage nvarchar(max)
set @xmlCreateTransOrder = '<DocumentElement>\r\n <CreateTransOrder>\r\n   <Action>1</Action>\r\n    <MonthYear>2016-04-02 13:18:29.213</MonthYear>\r\n  </CreateTransOrder>\r\n</DocumentElement>'
exec ITADMIN.CreateTransOrder_SCS @ErrorMessage,@xmlCreateTransOrder 
print (@ErrorMessage)

select * from TransOrder_2016_4
select * from  TransOrderDetail_2016_4



*/

GO

/****** Object:  StoredProcedure [ITADMIN].[CopyOPTariffSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CopyOPTariffSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlCopyOPTariffHeaderSave				as xml,
	@xmlCopyOPTariffServiceDetailsSave      as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyOPTariffHeaderSave
SELECT 
Action
,OperatorId
,fromTariffId
,toTariffId
,percentage
,Effecdate
into #tmpCopyTariffHeaderSave


from openxml(@handle, '/DocumentElement/CopyOPTariffHeaderSave',2) with
(
Action int
,OperatorId varchar(10)
,fromTariffId varchar(4)
,toTariffId varchar(4)
,percentage varchar(10)
,Effecdate varchar(25)
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyOPTariffServiceDetailsSave

select serviceId,ROW_NUMBER() over(order by serviceId) i
into #tmpCopyOPTariffServiceDetailsSave

from openxml(@handle, '/DocumentElement/CopyOPTariffServiceDetailsSave',2) with
(
serviceId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @fromTariffId as VARCHAR(4)
declare @toTariffId as VARCHAR(4)
--declare @Percentage as decimal(18,2)
declare @OperatorId as varchar(10)
declare @Percentage  VARCHAR(10)
declare @Name VARCHAR(255)
Declare @DestinationTable VARCHAR(255)
Declare @SQL NVARCHAR(MAX)
Declare @EmptySQL NVARCHAR(MAX)
Declare @DeleteSQL NVARCHAR(MAX)
Declare @UpdateSQL NVARCHAR(MAX)
Declare @TestTable as varchar(250)
Declare @NurseTable as varchar(250)
Declare @CrossMatchTable as varchar(250)
Declare @DateToday as varchar(250)

SELECT @Action = Action,@fromTariffId = fromTariffId,@toTariffId = toTariffId,@Percentage = percentage,@OperatorId = OperatorId,@DateToday = Effecdate
from   #tmpCopyTariffHeaderSave	

--Select @DateToday  = Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
					
				Create Table #CreateTableName( 
						ID	int IDENTITY(1,1) PRIMARY KEY,
						TableName varchar(250) NULL,
						ServiceId varchar(250) NULL
						)

				 INSERT INTO #CreateTableName
				  (TableName)
				  select (Name) from sys.objects where name like 'OP[_]P[_]' + @fromTariffId + '[_]%' and type = 'U'
					
				Update a set a.ServiceId = 2 from #CreateTableName a where a.TableName  like '%Doctor%'
				Update a set a.ServiceId = 0 from  #CreateTableName a where a.TableName not like '%Doctor%'





				--select * from   LogCopyOpTriff

				--Create Table delete LogCopyOpTriff( 
				--			 ID	 varchar(250) NULL,
				--			  TableName varchar(250) NULL,
				--			  DestinationTable varchar(250) NULL,
				--			  ProcessDate datetime NULL,
				--			  ServiceId int NULL
				--			 )
							 
				---Select * From   LogCopyOpTriff
				---Select * from OP_P_101_OtherProcedure
				---Select * From OP_P_97_BLOODISSUEMASTER

				 INSERT INTO LogCopyOpTriff
				  (ID,TableName,ProcessDate,ServiceId)
				  SELECT ID,TableName,Getdate(),ServiceId
					from #CreateTableName


					if not exists(select @Name)
						begin
							COMMIT TRAN
							SET       @ErrorMessage = 'No data available'
							SET @ERROR_SEVERITY = ERROR_SEVERITY()
							SET @ERROR_STATE = ERROR_STATE()
							RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
							return;
					end

					Declare @Top as int
					Declare @PercentageAmount as varchar(20)
					Declare @PramDate as varchar(20)

--Normal Process
		WHILE Exists (Select * from #CreateTableName where ServiceId =0) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName where ServiceId =0

						
						 Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave

						----Select * from Tariff

						Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave


						Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =0
							
						select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')	
							
						Update a set a.DestinationTable = @DestinationTable,a.ProcessDate = Getdate() from LogCopyOpTriff a where a.ID = @Top and ServiceId = 0
							
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime' + 
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
									

						EXEC (@SQL)

						Delete from #CreateTableName where ID = @Top and ServiceId =0
				 END	

----For Doctor Price
	   	WHILE Exists (Select * from #CreateTableName where ServiceId =2) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName where ServiceId =2

						
						 Select @PramDate = Effecdate from #tmpCopyTariffHeaderSave

						----Select * from Tariff

						Select @PercentageAmount = percentage   from #tmpCopyTariffHeaderSave


						Select @Name = TableName from #CreateTableName where ID = @Top and ServiceId =2
							
						select @DestinationTable = REPLACE(@Name, 'OP_P_' + @fromTariffId + '_', 'OP_P_' + @toTariffId + '_')	
							
						Update a set a.DestinationTable = @DestinationTable,a.ProcessDate = Getdate() from LogCopyOpTriff a where a.ID = @Top and ServiceId = 2
							
					 SET @SQL = N'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
									' Select * INTO  ' + @DestinationTable + 
									' FROM dbo.' + @Name + 
									' Update a set a.Price=' + 'Case when ' + @PercentageAmount + ' = 0  then a.Price else a.Price*'+ @PercentageAmount + ' END' + ', a.startdatetime=''' +  cast(@PramDate as varchar) + ''' from dbo.' + @DestinationTable + ' a' +
									' END ' +
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar) + ')' +
								    ' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' (ID,Price,startdatetime,DELETED,enddatetime,visittype,RefPrice)' +
											' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime,' + '1' + ',RefPrice' +
											'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' +
									' END '
									

						EXEC (@SQL)

						Delete from #CreateTableName where ID = @Top and ServiceId =2
				 END	

				 --Select * from OP_P_48_test  where ID not in (Select ID from OP_P_101_test)
								 -- INSERT INTO dbo.OP_P_101_OtherProcedure
								 --SELECT ID,Case when 0= 0 then PRICE ELSE  PRICE * 0 END, DELETED, ' 01-Nov-2016' , null  
								 --FROM dbo.OP_P_48_OtherProcedure where ID not in(Select ID from OP_P_101_OtherProcedure)

                               -- -Select * From OP_P_48_Doctor
								--DECLARE @tesT AS NVARCHAR(MAX)
								--DECLARE @PercentageAmount AS VARCHAR(250)
								--DECLARE @Name AS VARCHAR(250)
								--DECLARE @DestinationTable AS VARCHAR(250)
								--declare @DateToday  VARCHAR(250)
								--sELECT @PercentageAmount = 1.06
								--sELECT @DateToday = '17-Oct-2016'
								--sELECT @Name = 'OP_P_48_TEST'
								--sELECT @DestinationTable = 'dbo.OP_P_101_TEST' 
								--set @tesT = 'INSERT INTO dbo.' + @DestinationTable + 
								--			' (ID,Price,startdatetime,DELETED,enddatetime,visittype,RefPrice)' +
								--			' SELECT ID,Case when ' + @PercentageAmount + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as varchar) + ' END as Price, '  +''' '+ cast(@DateToday as varchar) + ''' as startdatetime'+',DELETED, null as endatetime,' + '1' + ',RefPrice' +
								--			'  FROM dbo.' + @Name + ' where ID not in' + '(Select ID from ' +  @DestinationTable + ')' 
								--PRINT @tesT
				
				

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Copying New IP Tariff Completed.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END
drop table #CreateTableName
drop table #tmpCopyTariffHeaderSave
drop table #tmpCopyOPTariffServiceDetailsSave	


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCopyOPTariffHeaderSave xml, @xmlCopyOPTariffServiceDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlCopyOPTariffHeaderSave = '<DocumentElement>\r\n  <CopyOPTariffHeaderSave>\r\n    <Action>1</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <fromTariffId>11</fromTariffId>\r\n    <toTariffId>97</toTariffId>\r\n    <percentage>2.05</percentage>\r\n  </CopyOPTariffHeaderSave>\r\n</DocumentElement>'
set @xmlCopyOPTariffServiceDetailsSave = '<DocumentElement>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>3</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>2</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>7</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n  <CopyOPTariffServiceDetailsSave>\r\n    <serviceId>14</serviceId>\r\n  </CopyOPTariffServiceDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.CopyOPTariffSave_SCS @ErrorMessage,@xmlCopyOPTariffHeaderSave, @xmlCopyOPTariffServiceDetailsSave
print (@ErrorMessage)

*/  

--[dbo].[OP_P_101_OtherProcedure]
--Select * from Tariff

--Select  * From OP_P_48_OtherProcedure
--Select * from [dbo].[OP_P_48_TEST]
--Select * from [dbo].[OP_P_48_PTPROCEDURE]

---Select * From Tariff where ID = 48
---Select * From Tariff where ID = 101

----Select * from Tariff where name = '1452' 
GO

/****** Object:  StoredProcedure [ITADMIN].[CopyIPTariffSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[CopyIPTariffSave_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlCopyTariffHeaderSave				as xml = ''
	,@xmlCopyIPTariffServiceDetailsSave      as xml = ''
	as
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyTariffHeaderSave
SELECT 
Action
,OperatorId
,fromTariffId
,toTariffId
,percentage
,Effecdate
into #tmpCopyTariffHeaderSave


from openxml(@handle, '/DocumentElement/CopyTariffHeaderSave',2) with
(
Action int
,OperatorId varchar(20)
,fromTariffId varchar(10)
,toTariffId varchar(10)
,percentage varchar(20)
,Effecdate varchar(25)
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCopyIPTariffServiceDetailsSave

select serviceId,ROW_NUMBER() over(order by serviceId) i
into #tmpCopyIPTariffServiceDetailsSave

from openxml(@handle, '/DocumentElement/CopyIPTariffServiceDetailsSave',2) with
(
serviceId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @fromTariffId as VARCHAR(10)
declare @toTariffId as VARCHAR(10)
--declare @Percentage as decimal(18,2)
declare @OperatorId as varchar(20)
declare @Percentage  VARCHAR(20)
declare @Name VARCHAR(255)
Declare @DestinationTable VARCHAR(255)
Declare @SQL NVARCHAR(MAX)
Declare @EmptySQL NVARCHAR(MAX)
Declare @DeleteSQL NVARCHAR(MAX)
Declare @RentTable as varchar(250)
Declare @NurseTable as varchar(250)
Declare @CrossMatchTable as varchar(250)
Declare @DateToday as varchar(25)
Declare @TableTEXT NVARCHAR(MAX)

SELECT @Action = Action,@fromTariffId = fromTariffId,@toTariffId = toTariffId,@Percentage = percentage,@OperatorId = OperatorId,@DateToday = Effecdate
from   #tmpCopyTariffHeaderSave	

--Select @DateToday  = Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   		 
				Create Table #CreateTableName( 
							 ID	int IDENTITY(1,1) PRIMARY KEY,
							  TableName varchar(250) NULL
							 )


				  INSERT INTO #CreateTableName
				  (TableName)
				  select (Name) from sys.objects where name like 'P[_]' + @fromTariffId  + '[_]%' and type = 'U'
				 
					if not exists(select * from #CreateTableName)
						begin
							COMMIT TRAN
							SET       @ErrorMessage = 'No data available'
							SET @ERROR_SEVERITY = ERROR_SEVERITY()
							SET @ERROR_STATE = ERROR_STATE()
							RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
							return;
					end
					

			Declare @Top as int
			declare @PercentageAmount as nvarchar(20)
			SET	@TableTEXT	= N' '

			WHILE Exists (Select * from #CreateTableName) 

				BEGIN 
						SELECT top 1 @Top = ID from #CreateTableName
 
						Select @PercentageAmount =  percentage   from #tmpCopyTariffHeaderSave

						Select @Name = TableName  from #CreateTableName where ID = @Top

						select @DestinationTable = REPLACE(@Name, 'P_' + @fromTariffId + '_', 'P_' + @toTariffId + '_')

						INSERT INTO LogCopyIpTriff (ID,TableName,DestinationTable,ProcessDate)
							SELECT ID,TableName,@DestinationTable,Getdate() from #CreateTableName where ID = @Top

					
					    SET @SQL = 'IF NOT EXISTS(SELECT * FROM sys.objects where name  = ' + ''''  + cast(@DestinationTable as varchar) + '''' + ')' +
									' BEGIN ' + 
												' Create Table dbo.' + cast(@DestinationTable as varchar) + '( 
													[ID] [int] NOT NULL,
													[Price] [numeric](10, 2) NOT NULL,
													[Deleted] [bit] NOT NULL,
													[StartDateTime] [datetime] NOT NULL,
													[EndDateTime] [datetime] NULL,
													[OperatorID] [int] NOT NULL
													)	' + 
									' END ' +
							
									' IF NOT EXISTS (Select * from ' + cast(@DestinationTable as varchar)  +  ')' +
									' BEGIN ' +
											' INSERT INTO dbo.' + @DestinationTable + 
											' SELECT ID,Case when ' + Cast(@PercentageAmount as nvarchar) + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as nvarchar) + ' END, DELETED, '  +''' '+ @DateToday + ''' '+', null,' + @OperatorId + 
											'  FROM dbo.' + cast(@Name as varchar) + ' where ID not in' + '(Select ID from ' +  cast(@DestinationTable as varchar) + ')' +
								    ' END '  +
									' ELSE ' +
									' BEGIN  ' +
												' DELETE FROM  dbo.' + @DestinationTable + 
												 ' INSERT INTO dbo.' + @DestinationTable + 
												' SELECT ID,Case when ' + Cast(@PercentageAmount as nvarchar) + '= 0 then PRICE ELSE ' + ' PRICE * ' + Cast(@PercentageAmount as nvarchar) + ' END, DELETED, '  +''' '+ @DateToday + ''' '+', null,' + @OperatorId + 
												' FROM dbo.' + cast(@Name as varchar) + ' where ID not in' + '(Select ID from ' +  cast(@DestinationTable as varchar) + ')' +
									
												'  ' +
									' END ' 


						SET	@TableTEXT	= @TableTEXT + '+TBL'+cast(@Top as varchar)  +'-' + cast(@DestinationTable as varchar) + ''

						EXEC (@SQL)

						Delete from #CreateTableName where ID = @Top
				 END	
	
				SELECT @RentTable = id from ipbservice where id in (Select serviceId from #tmpCopyIPTariffServiceDetailsSave where serviceId = 2)
				SELECT @NurseTable = id from ipbservice where id in (Select serviceId from #tmpCopyIPTariffServiceDetailsSave where serviceId = 3)
				SELECT @CrossMatchTable = id from ipbservice where id in (Select serviceId from #tmpCopyIPTariffServiceDetailsSave where serviceId = 25)
			

					if exists (Select PriceTable from ipbservice  where id =  @RentTable)
						BEGIN

									delete from p_Rent where CategoryID= @toTariffId
									Insert into p_Rent (CategoryID,BedTypeID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
									Select @toTariffId,BedTypeID,Case when @Percentage= 0 then Price ELSE   Price * @Percentage END,Deleted,@DateToday, NULL, @OperatorId 
									from p_Rent where categoryid=@fromTariffId
		
					 END

					

				 	if exists (Select PriceTable from ipbservice  where id = @NurseTable)
						BEGIN

								delete from p_Nurse where CategoryID= @toTariffId
								Insert into p_Nurse(CategoryID,BedTypeID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
								Select @toTariffId, BedTypeID, Case when @Percentage= 0 then Price ELSE   Price * @Percentage END,Deleted, @DateToday, NULL, @OperatorId 
								from p_Nurse where categoryid=@fromTariffId
						END

					if exists (Select PriceTable from ipbservice  where id = @CrossMatchTable)
						BEGIN

									delete from p_CrossMatch where CategoryID= @toTariffId
									insert into p_CrossMatch(CategoryID,BedTypeID,Price,Deleted,StartDateTime,EndDateTime,OperatorID)
									Select @toTariffId,BedTypeID,Case when @Percentage= 0 then Price ELSE   Price * @Percentage END,Deleted,@DateToday, NULL, @OperatorId 
									from p_CrossMatch where categoryid=@fromTariffId
							END

--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Copying New IP Tariff Completed.'+@TableTEXT		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
				



        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Copying OP Tariff Completed.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
 
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #CreateTableName
drop table #tmpCopyTariffHeaderSave
drop table #tmpCopyIPTariffServiceDetailsSave	


set xact_abort OFF

END

 
GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice_SCSNEW]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[ComputeItemPrice_SCSNEW]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlComputeItemHeader	    as xml,
	@xmlComputeItemDetails      as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemHeader
SELECT 
Action
,Amount

into #tmpComputeItemHeader

from openxml(@handle, '/DocumentElement/ComputeItemHeader',2) with
(
Action int
,Amount decimal(18,2)
)
exec sp_xml_removedocument @handle
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemDetails

select Id,TestName,Sample,OriginalPrice,Percentage,Price
into #tmpComputeItemDetails
from openxml(@handle, '/DocumentElement/ComputeItemDetails',2) with
(
Id int,TestName varchar(250),Sample varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--declare @ID      as int
declare @Action	  as int
declare @Amount   as int
declare @TotalPricePackage as decimal(18,2)
declare @Percentage as decimal(18,2)
declare @ActualPrice as decimal(18,2)
declare @myId as int

--declare @OperatorID as int
--declare @OrderNo as int

select @Action = Action,@Amount = Amount
from   #tmpComputeItemHeader	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			
			--SELECT @TotalPricePackage =  SUM(Price) 
			--from #tmpComputeItemDetails

			SELECT @TotalPricePackage = Amount 
			from #tmpComputeItemDetails
		
	   --Select * from ITADMIN_HC
		 INSERT INTO dbo.ITADMIN_HC(
							Id,TestName,Sample,OriginalPrice,Percentage,Price						
		)
		SELECT
							Id ,TestName ,Sample ,OriginalPrice,Percentage,Price			
				FROM #tmpComputeItemDetails


					
	    WHILE exists(select top 1 * from #tmpComputeItemDetails)
		BEGIN
					
				    select top 1 @myId= Id from #tmpComputeItemDetails

					SELECT @TotalPricePackage =  sum(Price) from #tmpComputeItemDetails
					
					Select @Percentage  = (OriginalPrice/@TotalPricePackage) * 100 from #tmpComputeItemDetails where Id = @myId


					UPDATE  dbo.ITADMIN_HC SET Percentage = @Percentage where Id = @myId 

					select @ActualPrice = (@TotalPricePackage * Percentage) / 100  from dbo.ITADMIN_HC where Id = @myId

					UPDATE dbo.ITADMIN_HC SET Price = @ActualPrice where Id  = @myId

					delete from #tmpComputeItemDetails where Id = @myId
		END

				
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Re-Calculate Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpComputeItemHeader
drop table #tmpComputeItemDetails	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[ComputeItemPrice_SCS]
	
    @ErrorMessage				     as NVARCHAR(max) OUT,
    @xmlComputeItemHeader	         as xml,
	@xmlComputeItemDetails			 as xml,
	@xmlComputeItemDepartConsult	 as xml,
	@xmlComputeHealthProcedure		 as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemHeader
SELECT 
Action
,Amount

into #tmpComputeItemHeader

from openxml(@handle, '/DocumentElement/ComputeItemHeader',2) with
(
Action int,Amount decimal(18,2)
)
exec sp_xml_removedocument @handle
----------------------------Investigation Item----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemDetails

select Id,TestName,Sample,OriginalPrice,Percentage,Price,HealthCheckUpId,testid,tid,stnid,station,sid
into #tmpComputeItemDetails
from openxml(@handle, '/DocumentElement/ComputeItemDetails',2) with
(
Id int,TestName varchar(250),Sample varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2),HealthCheckUpId int,testid int,tid int,stnid int,station varchar(250),sid int
)
exec sp_xml_removedocument @handle
-------------------------------Consult Department-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemDepartConsult

select SNo,HCUId,DepartmentId,sequence,OriginalPrice,Percentage,Price
into #tmpDepartmentConsultation
from openxml(@handle, '/DocumentElement/ComputeItemDepartConsult',2) with
(
SNo int,HCUId int,DepartmentId int,sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2)
)
exec sp_xml_removedocument @handle

--------------------Health Procedure----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeHealthProcedure

select SNo,HCUId,ProcedureId,sequence,OriginalPrice,Percentage,Price
into #tmpComputeHealthProcedure
from openxml(@handle, '/DocumentElement/ComputeHealthProcedure',2) with
(
SNo int,HCUId int,ProcedureId int,sequence int,OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--declare @ID      as int
declare @Action	  as int
declare @Amount   as int
declare @TotalPricePackage as decimal(18,2)
declare @Percentage as decimal(18,2)
declare @ActualPrice as decimal(18,2)
declare @myId as int
declare @MaxHealthCheckUpId as int

--declare @OperatorID as int
--declare @OrderNo as int

select @Action = Action,@Amount = Amount
from   #tmpComputeItemHeader	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	
					Drop table ITADMIN_HCINV_Temp

					CREATE TABLE [dbo].[ITADMIN_HCINV_Temp](
					[Id] [int] NULL,
					[TestName] [varchar](250) NULL,
					[Sample] [varchar](250) NULL,
					[OriginalPrice] [decimal](18, 2) NULL,
					[Percentage] [decimal](18, 2) NULL,
					[Price] [decimal](18, 2) NULL,
					[HealthCheckupId] [int] NULL,
					--For Savings
					[testid] [int] NULL,
					[tid] [int] NULL,
					[stnid] [int] NULL,
					[station] [varchar](250) NULL,
					[sid] [int] NULL
					--for saving
					--[testid] [int] NULL,
					--[]
					) ON [MasterFile]
					

					select @MaxHealthCheckUpId =isnull(max(Id),0) from healthcheckup
		
					--delete dbo.ITADMIN_HCINV_Temp where HealthCheckUpId = @MaxHealthCheckUpId

					--delete dbo.ITADMIN_HCINV_Temp --where HealthCheckUpId = @MaxHealthCheckUpId	
				
				   --Select * from ITADMIN_HC
					 INSERT INTO dbo.ITADMIN_HCINV_Temp(
										Id,TestName,Sample,OriginalPrice,Percentage,Price,HealthCheckUpId,testid,tid,stnid,station,sid					
					)
					SELECT
										Id,TestName ,Sample ,OriginalPrice,Percentage,Price,@MaxHealthCheckUpId + 1,testid,tid,stnid,station,sid
							FROM #tmpComputeItemDetails

		
					
					WHILE exists(select top 1 * from #tmpComputeItemDetails)
					BEGIN
		
					
								select top 1 @myId= Id from #tmpComputeItemDetails

								SELECT @TotalPricePackage =  sum(OriginalPrice) from #tmpComputeItemDetails
					
								Select @Amount = Amount from #tmpComputeItemHeader

								Select @Percentage  = (OriginalPrice/@TotalPricePackage) * 100 from #tmpComputeItemDetails where Id = @myId 


								UPDATE  dbo.ITADMIN_HCINV_Temp SET Percentage = @Percentage where Id = @myId 


								select @ActualPrice = (@Amount * Percentage) / 100  from dbo.ITADMIN_HCINV_Temp where Id = @myId 

								UPDATE dbo.ITADMIN_HCINV_Temp SET Price = @ActualPrice where Id  = @myId

								delete from #tmpComputeItemDetails where Id = @myId 
					END
					

				--Checking 
					--select * from ITADMIN_HCConDept_Temp
				        Drop table ITADMIN_HCConDept_Temp	
					 
						CREATE TABLE [dbo].[ITADMIN_HCConDept_Temp](
						[SNo] int NULL,
						[HCUId] [int] NULL,
						[DepartmentId] [int] NULL,
						[sequence] [int] NULL,
						[OriginalPrice] [int] NULL,
						[Percentage] [int] NULL,
						[Price] [int] NULL,
				) ON [MasterFile]

		
				   select @MaxHealthCheckUpId =isnull(max(Id),0) from healthcheckup
		
					--delete dbo.ITADMIN_HCConDept_Temp where HCUId = @MaxHealthCheckUpId

				   --Select * from ITADMIN_HC
					 INSERT INTO ITADMIN_HCConDept_Temp(
										SNo,HCUId,DepartmentId,sequence,OriginalPrice,Percentage,Price					
					)
					SELECT
										SNo,@MaxHealthCheckUpId + 1,DepartmentId ,SNo as sequence,OriginalPrice,Percentage,Price
										FROM #tmpDepartmentConsultation

		
					
		WHILE exists(select top 1 * from #tmpDepartmentConsultation)
					BEGIN
		
					
								select top 1 @myId= SNo from #tmpDepartmentConsultation

								SELECT @TotalPricePackage =  sum(OriginalPrice) from #tmpDepartmentConsultation
					
								Select @Amount = Amount from #tmpComputeItemHeader

								Select @Percentage  = (OriginalPrice/@TotalPricePackage) * 100 from #tmpDepartmentConsultation where SNo = @myId 


								UPDATE  dbo.ITADMIN_HCConDept_Temp SET Percentage = @Percentage where SNo = @myId 


								select @ActualPrice = (@Amount * Percentage) / 100  from dbo.ITADMIN_HCConDept_Temp where SNo = @myId 

								UPDATE dbo.ITADMIN_HCConDept_Temp SET Price = @ActualPrice where SNo  = @myId

								delete from #tmpDepartmentConsultation where SNo = @myId 
					END
	

	--Checking 
					--select * from ITADMIN_HCHProced_Temp
				       Drop table ITADMIN_HCHProced_Temp	

						CREATE TABLE [dbo].[ITADMIN_HCHProced_Temp](
						[SNo] [int] NULL,
						[HCUId] [int] NULL,
						[ProcedureId] [int] NULL,
						[sequence] [int] NULL,
						[OriginalPrice] [int] NULL,
						[Percentage] [int] NULL,
						[Price] [int] NULL,
				) ON [MasterFile]


				    select @MaxHealthCheckUpId =isnull(max(Id),0) from healthcheckup
		
					--delete dbo.ITADMIN_HCHProced_Temp where HCUId = @MaxHealthCheckUpId

				   --Select * from ITADMIN_HC
					 INSERT INTO ITADMIN_HCHProced_Temp(
										SNo,HCUId,ProcedureId,sequence,OriginalPrice,Percentage,Price					
					)
					SELECT
										SNo,@MaxHealthCheckUpId + 1,ProcedureId ,SNo as sequence,OriginalPrice,Percentage,Price
										FROM #tmpComputeHealthProcedure

		
					
					WHILE exists(select top 1 * from #tmpComputeHealthProcedure)
					BEGIN
		
					
								select top 1 @myId= SNo from #tmpComputeHealthProcedure

								SELECT @TotalPricePackage =  sum(OriginalPrice) from #tmpComputeHealthProcedure
					
								Select @Amount = Amount from #tmpComputeItemHeader

								Select @Percentage  = (OriginalPrice/@TotalPricePackage) * 100 from #tmpComputeHealthProcedure where SNo = @myId 


								UPDATE  dbo.ITADMIN_HCHProced_Temp SET Percentage = @Percentage where SNo = @myId 


								select @ActualPrice = (@Amount * Percentage) / 100  from dbo.ITADMIN_HCHProced_Temp where SNo = @myId 

								UPDATE dbo.ITADMIN_HCHProced_Temp SET Price = @ActualPrice where SNo  = @myId

								delete from #tmpComputeHealthProcedure where SNo = @myId 
					END
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Re-Calculate Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpComputeItemHeader
drop table #tmpComputeItemDetails	
drop table #tmpDepartmentConsultation
drop table #tmpComputeHealthProcedure
set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlComputeItemHeader xml, @xmlComputeItemDetails xml,@xmlComputeItemDepartConsult xml,@xmlComputeHealthProcedure xml
declare @ErrorMessage nvarchar(max)
set @xmlComputeItemHeader = '<DocumentElement>\r\n  <ComputeItemHeader>\r\n    <Action>1</Action>\r\n    <Amount>3500</Amount>\r\n  </ComputeItemHeader>\r\n</DocumentElement>'
set @xmlComputeItemDetails = '<DocumentElement>\r\n  <ComputeItemDetails>\r\n    <Id>1</Id>\r\n    <TestName>COMPLETE BLOOD COUNT (CBC)</TestName>\r\n    <Sample>2ML EDTA WHOLE BLOOD</Sample>\r\n    <OriginalPrice>175</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n    <HealthCheckUpId>0</HealthCheckUpId>\r\n  </ComputeItemDetails>\r\n  <ComputeItemDetails>\r\n    <Id>2</Id>\r\n    <TestName>COMPLETE BLOOD COUNT (CBC)</TestName>\r\n    <Sample>2ML EDTA WHOLE BLOOD</Sample>\r\n    <OriginalPrice>115</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n    <HealthCheckUpId>0</HealthCheckUpId>\r\n  </ComputeItemDetails>\r\n  <ComputeItemDetails>\r\n    <Id>3</Id>\r\n    <TestName>CHOLESTEROL</TestName>\r\n    <Sample>2ML SERUM</Sample>\r\n    <OriginalPrice>165</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n    <HealthCheckUpId>0</HealthCheckUpId>\r\n  </ComputeItemDetails>\r\n</DocumentElement>'
set @xmlComputeItemDepartConsult = '<DocumentElement>\r\n  <ComputeItemDepartConsult>\r\n    <SNo>1</SNo>\r\n    <DepartmentId>78</DepartmentId>\r\n    <OriginalPrice>175</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeItemDepartConsult>\r\n  <ComputeItemDepartConsult>\r\n    <SNo>2</SNo>\r\n    <DepartmentId>13</DepartmentId>\r\n    <OriginalPrice>115</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeItemDepartConsult>\r\n  <ComputeItemDepartConsult>\r\n    <SNo>3</SNo>\r\n    <DepartmentId>34</DepartmentId>\r\n    <OriginalPrice>435</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeItemDepartConsult>\r\n</DocumentElement>'
set @xmlComputeHealthProcedure = '<DocumentElement>\r\n  <ComputeHealthProcedure>\r\n    <SNo>1</SNo>\r\n    <HCUId>0</HCUId>\r\n    <ProcedureId>1605</ProcedureId>\r\n    <OriginalPrice>540</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeHealthProcedure>\r\n  <ComputeHealthProcedure>\r\n    <SNo>2</SNo>\r\n    <HCUId>0</HCUId>\r\n    <ProcedureId>1605</ProcedureId>\r\n    <OriginalPrice>155</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeHealthProcedure>\r\n  <ComputeHealthProcedure>\r\n    <SNo>3</SNo>\r\n    <HCUId>0</HCUId>\r\n    <ProcedureId>1605</ProcedureId>\r\n    <OriginalPrice>370</OriginalPrice>\r\n    <Percentage>0.00</Percentage>\r\n    <Price>0.00</Price>\r\n  </ComputeHealthProcedure>\r\n</DocumentElement>'
exec [ITADMIN].[ComputeItemPrice_SCS] @ErrorMessage,@xmlComputeItemHeader, @xmlComputeItemDetails,@xmlComputeItemDepartConsult,@xmlComputeHealthProcedure
print (@ErrorMessage)
*/

--select * from dbo.ITADMIN_HCINV_Temp where HealthCheckUpId = 55

GO

/****** Object:  StoredProcedure [ITADMIN].[ComputeItemPrice]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[ComputeItemPrice]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlComputeItemHeader	    as xml,
	@xmlComputeItemDetails      as xml

   
    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemHeader
SELECT 
Action
,Amount

into #tmpComputeItemHeader

from openxml(@handle, '/DocumentElement/ComputeItemHeader',2) with
(
Action int
,Amount decimal(18,2)
)
exec sp_xml_removedocument @handle
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlComputeItemDetails

select Id,TestName,Sample,OriginalPrice,Percentage,Price
into #tmpComputeItemDetails
from openxml(@handle, '/DocumentElement/ComputeItemDetails',2) with
(
Id int,TestName varchar(250),Sample varchar(250),OriginalPrice decimal(18,2),Percentage decimal(18,2),Price decimal(18,2)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--declare @ID      as int
declare @Action	  as int
declare @Amount   as int
declare @TotalPricePackage as decimal(18,2)
declare @Percentage as decimal(18,2)
declare @ActualPrice as decimal(18,2)
declare @myId as int

--declare @OperatorID as int
--declare @OrderNo as int

select @Action = Action,@Amount = Amount
from   #tmpComputeItemHeader	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

			
			--SELECT @TotalPricePackage =  SUM(Price) 
			--from #tmpComputeItemDetails

			SELECT @TotalPricePackage = Amount 
			from #tmpComputeItemDetails
		
	   --Select * from ITADMIN_HC
		 INSERT INTO dbo.ITADMIN_HC(
							Id,TestName,Sample,OriginalPrice,Percentage,Price						
		)
		SELECT
							Id ,TestName ,Sample ,OriginalPrice,Percentage,Price			
				FROM #tmpComputeItemDetails


					
	    WHILE exists(select top 1 * from #tmpComputeItemDetails)
		BEGIN
					
				    select top 1 @myId= Id from #tmpComputeItemDetails

					SELECT @TotalPricePackage =  sum(Price) from #tmpComputeItemDetails
					
					Select @Percentage  = (OriginalPrice/@TotalPricePackage) * 100 from #tmpComputeItemDetails where Id = @myId


					UPDATE  dbo.ITADMIN_HC SET Percentage = @Percentage where Id = @myId 

					select @ActualPrice = (@TotalPricePackage * Percentage) / 100  from dbo.ITADMIN_HC where Id = @myId

					UPDATE dbo.ITADMIN_HC SET Price = @ActualPrice where Id  = @myId

					delete from #tmpComputeItemDetails where Id = @myId
		END

				
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Price Re-Calculate Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
      
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpComputeItemHeader
drop table #tmpComputeItemDetails	

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/



GO

/****** Object:  StoredProcedure [ITADMIN].[CompanyLevelMarkupSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CompanyLevelMarkupSave_SCS]
	
    @ErrorMessage					as NVARCHAR(max) OUT,
	@xmlHeaderMarkUpSave		    as xml,
	@xmlDepartLvlMarkUpSave			as xml,
	@xmlRangeMarkupSave				as xml

	
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT


--------------------Company Level----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlHeaderMarkUpSave
SELECT 
Action
,CategoryId
,CompanyId
,OperatorId
,MarkupPer
into #tmpCompanyLevelHeaderSave


from openxml(@handle, '/DocumentElement/HeaderMarkUpSave',2) with
(
Action int,CategoryId int,CompanyId int,OperatorId int,MarkupPer int
)
exec sp_xml_removedocument @handle

--------------------------Depart Level----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlDepartLvlMarkUpSave
SELECT 
MaxRange
,Percentage
,ID
into #tmpDepartLevelHeaderSave

from openxml(@handle, '/DocumentElement/DepartLvlMarkUpSave',2) with
(
MaxRange decimal(18,2),Percentage decimal(18,2),ID int
)
exec sp_xml_removedocument @handle
--------------------------Range  MarkUp----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlRangeMarkupSave
SELECT 
MinRange
,MaxRange
,Percentage
,ID
into #tmpRangeMarkupSave
from openxml(@handle, '/DocumentElement/RangeMarkupSave',2) with
(
MinRange decimal(18,2),MaxRange decimal(18,2),Percentage decimal(18,2),ID int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

declare @Action	  as int
declare @CompanyId as int
declare @OperatorId as int
	
			select @Action = Action,@CompanyId = CompanyId,@OperatorId = OperatorId
			from   #tmpCompanyLevelHeaderSave	

IF (@Action=1) -- CompanyLevel
BEGIN
   BEGIN TRY 
       BEGIN TRAN
	   

	   	if exists(select * from P_IPCSTCompMarkup where CompanyId = @CompanyId and Deleted = 0)
			begin
		COMMIT TRAN
		SET @ErrorMessage = 'Company Markup Exists!...Contact IT Administrator!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

		if exists (select * from #tmpCompanyLevelHeaderSave where CompanyId = @CompanyId)
				Begin
			
			--SP_HELP oldP_IPCSTCompMarkup
			--select * from oldP_IPCSTCompMarkup
			--select * from P_IPCSTCompMarkup where CompanyID = 280

				---Marks if needed for the futures
				INSERT INTO oldP_IPCSTCompMarkup (CategoryId,CompanyId,MarkupPer,StartDateTime,EndDateTime,Deleted,OperatorId,Hostname)
				Select CategoryId,CompanyId,MarkupPer,GETDATE(),NULL,0,OperatorId,HOST_NAME()
				From #tmpCompanyLevelHeaderSave where CompanyId  = @CompanyId


			---	Update a set a.Deleted = 1 from P_IPCSTCompMarkup a where a.CompanyId  = @CompanyId
		
				INSERT INTO P_IPCSTCompMarkup (CategoryId,CompanyId,MarkupPer,StartDateTime,EndDateTime,Deleted,OperatorId,Hostname)
				Select CategoryId,CompanyId,MarkupPer,GETDATE(),NULL,0,@OperatorId,HOST_NAME()
				From #tmpCompanyLevelHeaderSave --where CompanyId = @CompanyId
		
				END
				--count duplicate
				--SELECT COUNT(CompanyID) 
				--FROM P_IPCSTCompMarkup
				--GROUP BY CompanyID
				--HAVING ( COUNT(CompanyID) > 1 )
	    
	    --if exists (select * from #tmpDepartLevelHeaderSave)	
					--Begin
				
					--INSERT INTO OLDP_IPCSTDeptMarkUp
					--(ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
					--SELECT  ID,MinRange,MaxRange,Percentage,StartDateTime,GETDATE(),1,@OperatorId
					--FROM    P_IPCSTDEPTMarkUp where ID in (select ID from #tmpDepartLevelHeaderSave)
					
					--DELETE FROM P_IPCSTDEPTMarkUp

					--INSERT INTO P_IPCSTDeptMarkUp
     --               (ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
					--SELECT  ID,MinRange,MaxRange,Percentage,GETDATE(),NULL,0,@OperatorId
					--from #tmpDepartLevelHeaderSave

					--END		


	 --   if exists (select * from #tmpRangeMarkupSave)	
		--			Begin
				
		--			INSERT INTO oldp_IpCstMarkup
		--			(ID,MinRange,MaxRange,Percentage,StartDateTime,EndDateTime,Deleted,Operatorid)
		--			SELECT  ID,MinRange,MaxRange,Percentage,StartDateTime,GETDATE(),1,@OperatorId
		--			FROM   p_IpCstMarkup where ID in (select ID from #tmpRangeMarkupSave)
					
		--			Delete from p_IpCstMarkup
					
		--			INSERT INTO p_IpCstMarkup
  --                  (ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
		--			SELECT  ID,MinRange,MaxRange,Percentage,GETDATE(),NULL,0,@OperatorId
		--			from #tmpRangeMarkupSave

		--END		


					
			--UPDATE  OPProcedureConsultaion
			--		SET  dayscompleted = 2, visitscompleted = 10, Remarks = ' Testasdsfdfsad'
			--		WHERE PinNo and ItemId and DoctorId IN (select PinNo,ItemId,DoctorId from #tmpPackageDetailsSave)
	  --      --WHERE     (PinNo = 25701) AND (ItemId = 2292) AND (DoctorId = 7995)
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Company Level Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- DepartMentlevel
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		---select * from OLDP_IPCSTDeptMarkUp
      
				 if exists (select * from #tmpDepartLevelHeaderSave)	
					Begin
				
				--select * from OLDP_IPCSTDeptMarkUp
				--select * from  P_IPCSTDEPTMarkUp

					INSERT INTO OLDP_IPCSTDeptMarkUp
					(ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
					SELECT  ID,0.00,MaxRange,Percentage,StartDateTime,GETDATE(),1,@OperatorId
					FROM    P_IPCSTDEPTMarkUp where ID in (select ID from #tmpDepartLevelHeaderSave where MaxRange <> 0.00 and MinRange <> 0.00)

					DELETE FROM P_IPCSTDEPTMarkUp

					INSERT INTO P_IPCSTDeptMarkUp
                    (ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
					SELECT  ID,0.00,MaxRange,Percentage,GETDATE(),NULL,0,@OperatorId
					from #tmpDepartLevelHeaderSave where MaxRange <> 0.00 and Percentage <> 0.00

					END		

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Department Level Successuffuly Save.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- Range Level
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		   if exists (select * from #tmpRangeMarkupSave)	
					Begin

					--select * from  oldp_IpCstMarkup
					
					INSERT INTO oldp_IpCstMarkup
					(ID,MinRange,MaxRange,Percentage,StartDateTime,EndDateTime,Deleted,Operatorid)
					SELECT  ID,MinRange,MaxRange,Percentage,StartDateTime,GETDATE(),1,@OperatorId
					FROM   p_IpCstMarkup where ID in (select ID from #tmpRangeMarkupSave)
					
					Delete from p_IpCstMarkup
					
					INSERT INTO p_IpCstMarkup
                    (ID, MinRange, MaxRange, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid)
					SELECT  ID,MinRange,MaxRange,Percentage,GETDATE(),NULL,0,@OperatorId
					from #tmpRangeMarkupSave

		END		
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Range MarkUp Successfully Save.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCompanyLevelHeaderSave
drop table #tmpDepartLevelHeaderSave
drop table #tmpRangeMarkupSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlCrossMatchSaveHeader xml, @xmlCrossMatchSaveDetails xml
declare @ErrorMessage nvarchar(max)
set @xmlCrossMatchSaveHeader = '<DocumentElement>\r\n  <CrossMatchSaveHeader>\r\n    <Action>2</Action>\r\n    <Ipid>185552</Ipid>\r\n    <BedId>12</BedId>\r\n    <Doctorid>2744</Doctorid>\r\n    <Operatorid>1412</Operatorid>\r\n    <CompatablityId>0</CompatablityId>\r\n    <reqtype>1</reqtype>\r\n    <CrossMatchedById>9849</CrossMatchedById>\r\n    <CrossMatchId>0</CrossMatchId>\r\n    <StationId>30</StationId>\r\n    <transtype>0</transtype>\r\n    <RequestedDateTime>2016-03-26 11:01:00 AM</RequestedDateTime>\r\n    <antibody>1</antibody>\r\n  </CrossMatchSaveHeader>\r\n</DocumentElement>'
set @xmlCrossMatchSaveDetails = '<DocumentElement>\r\n<CrossMatchSaveDetails>\r\n    <ctr>2</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>05-Sep-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/70/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n  <CrossMatchSaveDetails>\r\n    <ctr>1</ctr>\r\n    <bagid>4</bagid>\r\n    <ExpiryDate>16-Aug-2016</ExpiryDate>\r\n    <compatabulity>0</compatabulity>\r\n    <Issued>2016-03-26 11:01:00 AM</Issued>\r\n    <Reserved>1</Reserved>\r\n    <ExtenReserved>0</ExtenReserved>\r\n    <patbloodgroup>3</patbloodgroup>\r\n    <UnitGroup>2</UnitGroup>\r\n    <BagNumber>15/CRYO/64/CRYO</BagNumber>\r\n    <ComponentId>4</ComponentId>\r\n  </CrossMatchSaveDetails>\r\n</DocumentElement>'
exec BLOODBANK.CrossMatchReserevedSave_SCS @ErrorMessage,@xmlCrossMatchSaveHeader, @xmlCrossMatchSaveDetails
print (@ErrorMessage)

*/

GO

/****** Object:  StoredProcedure [ITADMIN].[City_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[City_View_SCS]-- 0
@Id as int
AS

BEGIN
		SELECT    Name, ID as Id
		FROM      City
		WHERE     (ID = @Id)
END





GO

/****** Object:  StoredProcedure [ITADMIN].[City_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[City_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlCitySave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCitySave
SELECT 
Action
,Id
,OperatorId
,Name
into #tmpCitySave

from openxml(@handle, '/DocumentElement/CitySave',2) with
(
Action int
,Id int
,OperatorId int
,Name varchar(250)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int



select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId
from   #tmpCitySave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from City where Name = @Name)
			begin
		COMMIT TRAN
		SET       @ErrorMessage = 'City Name Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into City(Name ,ArabicName,StartDateTime, Deleted) 
				Select  upper(@Name),'"',Getdate(),0
				from #tmpCitySave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		----select * from City

				Update  City set Name = upper(@Name)--,ModifiedBy = @OperatorId--,ModifiedDateTime = Getdate()			
				where ID =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCitySave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[City_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[City_DashBoard_SCS]-- 0

AS

BEGIN

		--Select Name,Id
		--from  Tariff 

			SELECT      Name,ID as Id
			FROM       City
			WHERE     (Deleted = 0)
			ORDER BY Name
END





GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeTransferDepositTypeSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[ChangeTransferDepositTypeSave_SCS]
	
    @ErrorMessage										as NVARCHAR(max) OUT,
    @xmlChangeTransferDepositTypeHeaderSave				as xml,
	@xmlChangeTypeDetailsSave						    as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlChangeTransferDepositTypeHeaderSave
SELECT 
Action
,IPID
,OperatorId
,CancelReasonId
into #tmpChangeTransferDepositTypeHeaderSave


from openxml(@handle, '/DocumentElement/ChangeTransferDepositTypeHeaderSave',2) with
(
Action int
,IPID int
,OperatorId int
,CancelReasonId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlChangeTypeDetailsSave

select ReceiptNo,Type,OldTypeId,ROW_NUMBER() over(order by ReceiptNo) i
into #tmpChangeTypeDetailsSave	

from openxml(@handle, '/DocumentElement/ChangeTypeDetailsSave',2) with
(
ReceiptNo int,Type int,OldTypeId int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @IPID as int
declare @ReceiptNo as int
declare @Type as int 
declare @OldTypeId as int
declare @OperatorId as int 
declare @ReasonCancelId as int 
declare @myMaxId as int

SELECT @Action = Action,@OperatorId = OperatorId,@ReasonCancelId = CancelReasonId,@IPID = IPID
from   #tmpChangeTransferDepositTypeHeaderSave	

SELECT @ReceiptNo = ReceiptNo,@Type = Type, @OldTypeId = OldTypeId
from   #tmpChangeTypeDetailsSave	

--Select Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		

		--select * from cancelIPTransactions
				
	Insert into cancelIPTransactions 
			(SerialNo  ,IPID ,ReceiptNo ,Amount,Type ,PaidBy ,Remarks,BillNo ,ModeOfPayment ,bankName ,BranchName,PayableName ,ChequeDate, ChequeNo ,DateTime ,OperatorID,CancelledOn, CanclledBy,ReasonForCancellationId,Cancelled_Transfered )
	Select  SerialNo,IPID,ReceiptNo,Amount,Type,PaidBy,Remarks,BillNo,ModeOfPayment ,bankName ,BranchName,PayableName ,ChequeDate, ChequeNo ,datetime,OperatorID,GETDATE(),@OperatorId,@ReasonCancelId,1    
			from IPTransactions where Type=@OldTypeId and ReceiptNo=@ReceiptNo and IPID=@IPID

			UPDATE IPTransactions SET TYPE=@Type    where ReceiptNo=@ReceiptNo and Type=@OldTypeId and  IPID=@IPID

	WHILE exists(select top 1 * from #tmpChangeTypeDetailsSave)
		  BEGIN
				select top 1 @myMaxId=i from #tmpChangeTypeDetailsSave

				Insert into cancelIPTransactions 
							(SerialNo  ,IPID ,ReceiptNo ,Amount,Type ,PaidBy ,Remarks,BillNo ,ModeOfPayment ,bankName ,BranchName,PayableName ,ChequeDate, ChequeNo ,DateTime ,OperatorID,CancelledOn, CanclledBy,ReasonForCancellationId,Cancelled_Transfered )
					Select  a.SerialNo,a.IPID,a.ReceiptNo,a.Amount,a.Type,a.PaidBy,a.Remarks,a.BillNo,a.ModeOfPayment ,a.bankName ,a.BranchName,a.PayableName ,a.ChequeDate, a.ChequeNo ,a.datetime,a.OperatorID,GETDATE(),@OperatorId,@ReasonCancelId,1    
							from IPTransactions  a 
							INNER JOIN #tmpChangeTypeDetailsSave b on b.ReceiptNo = a.ReceiptNo
							where a.Type=b.OldTypeId and a.ReceiptNo=b.ReceiptNo and a.IPID=@IPID and i = @myMaxId
							
						UPDATE a  
						SET TYPE= b.Type 
						From IPTransactions a 
						INNER JOIN #tmpChangeTypeDetailsSave b on b.ReceiptNo = a.ReceiptNo
						where a.ReceiptNo=b.ReceiptNo and a.Type=b.OldTypeId and  a.IPID=@IPID and i = @myMaxId
						select * from IPTransactions
						

						delete from #tmpChangeTypeDetailsSave where i= @myMaxId
			END


					
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpChangeTransferDepositTypeHeaderSave
drop table #tmpChangeTypeDetailsSave	


set xact_abort OFF

END

/*
declare @xmlChangeTransferDepositTypeHeaderSave xml, @xmlChangeTypeDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlChangeTransferDepositTypeHeaderSave = '<DocumentElement>\r\n  <ChangeTransferDepositTypeHeaderSave>\r\n    <Action>1</Action>\r\n    <IPID>62336</IPID>\r\n    <OperatorId>139</OperatorId>\r\n    <CancelReasonId>1</CancelReasonId>\r\n  </ChangeTransferDepositTypeHeaderSave>\r\n</DocumentElement>'
set @xmlChangeTypeDetailsSave = '<DocumentElement>\r\n  <ChangeTypeDetailsSave>\r\n    <ReceiptNo>221980</ReceiptNo>\r\n    <Type>2</Type>\r\n    <OldTypeId>1</OldTypeId>\r\n  </ChangeTypeDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.ChangeTransferDepositTypeSave_SCS @ErrorMessage,@xmlChangeTransferDepositTypeHeaderSave, @xmlChangeTypeDetailsSave
print (@ErrorMessage)

*/  





GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeItemCST_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
--[ITADMIN].[ReRoutingOrders_View_SCS] 81-
--[ITADMIN].[ChangeItemCST_View_SCS] 121604
CREATE PROCEDURE [ITADMIN].[ChangeItemCST_View_SCS] ---155796--144---231-- 81---26,2-- 0
@Id as int
AS
 

BEGIN

declare @Value as varchar(50)
declare @SetValue as varchar(50)
set @Value = 'Total Item Effected'


SELECT @SetValue = 'Attention!!!' + ' ' + convert(nvarchar(10),Count(B.ItemID)) + ' ' + @Value
			FROM   Batch AS B 
			INNER JOIN BatchStore AS S ON B.BatchID = S.BatchID
			INNER JOIN Item as c on c.Id =  b.ItemID
			WHERE     (B.ItemID = @Id) AND (S.Quantity > 0) AND (S.StationID NOT IN (4, 103))


			SELECT distinct isnull(c.Name,' ') as ItemName,isnull(B.ItemID,' ') as ItemID,B.MRP as OldPrice,@SetValue as TotalItem
			FROM   Batch AS B 
			INNER JOIN BatchStore AS S ON B.BatchID = S.BatchID
			INNER JOIN Item as c on c.Id =  b.ItemID
			WHERE     (B.ItemID = @Id) AND (S.Quantity > 0) AND (S.StationID NOT IN (4, 103))
		--	ORDER BY B.BatchID,B.MRP DESC





			

END
GO

/****** Object:  StoredProcedure [ITADMIN].[ChangeCSTPrice_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[ChangeCSTPrice_Save]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlChangeCSTSaveModel	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlChangeCSTSaveModel
SELECT 
Action
,mrp
,SellingPrice
,ItemId
into #tmpChangeCSTPrice


from openxml(@handle, '/DocumentElement/ChangeCSTSaveModel',2) with
(
Action int
,mrp decimal
,SellingPrice money
,ItemId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ItemId as int
declare @MRP as decimal
declare @SellingPrice as money 

select @Action = Action, @ItemId = ItemId,@MRP = mrp,@SellingPrice = SellingPrice
from   #tmpChangeCSTPrice	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
				UPDATE  Batch
				SET     MRP = @SellingPrice, SellingPrice = @SellingPrice
				FROM    Batch 
						INNER JOIN BatchStore AS S ON Batch.BatchID = S.BatchID
				WHERE     (Batch.ItemID = @ItemId) AND (S.Quantity > 0) AND (S.StationID NOT IN (4, 103))

				UPDATE    Item
				SET       SellingPrice = @SellingPrice
				FROM      Item 
				INNER JOIN BatchStore AS S ON Item.ID = S.ItemID
				WHERE     (Item.ID = @ItemId) AND (S.Quantity > 0) AND (S.StationID NOT IN (4, 103))


--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				--UPDATE    OPRevisitPackages
				--SET              NoOfdays = @NoOfDays, NoOfVisits = @NoOfVisits
				--WHERE     (Testid = @TestId) AND (Serviceid = @ServiceId) and deleted = 0


---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Contact IT Administrator'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpChangeCSTPrice


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[CatProcedure_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
Create PROCEDURE [ITADMIN].[CatProcedure_DashBoard_SCS]-- 0
AS

BEGIN
			--SP_HELP Anaesthesia
		SELECT    row_number() over(order by ID) as SNo, Code + ' - ' + Name AS Name,ID as Id
		FROM      CathProcedure
		WHERE     (Deleted = 0)


END
GO

/****** Object:  StoredProcedure [ITADMIN].[CathProcedure_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--[ITADMIN].[CathProcedure_View_SCS] 60
CREATE PROCEDURE [ITADMIN].[CathProcedure_View_SCS] --2
@Id as int

AS


BEGIN
			--SP_HELP RevisitDays
		  SELECT b.Name as DepartmentName,a.departmentid as DepartmentId,a.Name,a.Costprice,a.Code,a.Instructions,a.Id
		   from cathprocedure a 
		   LEFT JOIN Department b ON b.ID = a.departmentid
		   where a.id=@Id

END

GO

/****** Object:  StoredProcedure [ITADMIN].[CathProcedure_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[CathProcedure_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlCathProcedureSaveModel		   as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCathProcedureSaveModel
		SELECT 
		Action
		,Id
		,Name
		,Code
		,instructions
		,DepartmentId
		,OperatorId
		,Costprice

into #tmpCathProcedure
from openxml(@handle, '/DocumentElement/CathProcedureSaveModel',2) with
(
		Action int
		,Id int
		,Name varchar(100)
		,Code varchar(30)
		,instructions  varchar(250)
		,DepartmentId varchar(30)
		,OperatorId int
		,Costprice decimal(18,2)
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int

select @Action = Action,@ID = Id,@OperatorId = OperatorId
from   #tmpCathProcedure	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
			
				INSERT INTO CathProcedure
                      (Name, Costprice, Instructions, StartDateTime, EndDateTime, Deleted, OperatorID, Code, DepartmentID, ArabicName, ArabicCode)
				SELECT Name, Costprice, instructions, GETDATE(), NULL, 0, OperatorId, Code, DepartmentId, '"', Code
				FROM #tmpCathProcedure
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		
	
					UPDATE a
					SET a.Name = b.Name
						,a.ArabicName = '"'
						,a.ArabicCode = b.Code
						,a.Costprice = b.Costprice
						,a.Instructions = b.instructions
						,a.Modifieddatetime = GetDate()	
						,a.Modifiedby = @OperatorId
						,a.Code = b.Code
						,a.DepartmentID = b.DepartmentId
					from CathProcedure a
					INNER JOIN #tmpCathProcedure b
					ON b.Id = a.Id
					WHERE a.Id = @ID
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
				update cathprocedure  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID

		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCathProcedure


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7


GO

/****** Object:  StoredProcedure [ITADMIN].[CathLab_DashBoardSCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia_View_SCS] 88
CREATE PROCEDURE [ITADMIN].[CathLab_DashBoardSCS]-- 0
AS

BEGIN
			--SP_HELP Anaesthesia
			SELECT     row_number() over(order by a.Code) as SNo, a.Code + ' - ' + Name AS NAME
			FROM         CathProcedure a
			WHERE     (Deleted = 0)
			ORDER BY Name


END


--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85

GO

/****** Object:  StoredProcedure [ITADMIN].[CategoryStation_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[CategoryStation_Save_SCS]
	
    @ErrorMessage							as NVARCHAR(max) OUT,
    @xmlListCategoryStationSaveModel	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlListCategoryStationSaveModel
SELECT 
Action
,categoryid
,stationid
into #tmpCatStationSave

from openxml(@handle, '/DocumentElement/ListCategoryStationSaveModel',2) with
(
Action int
,categoryid int
,stationid int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int,@categoryid as int,@stationid as int

select @Action = Action,@categoryid = categoryid,@stationid = stationid
from   #tmpCatStationSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
			
				if exists(select * from CategoryStationMap where categoryid = @categoryid and  stationid = @stationid)
				BEGIN
						
						COMMIT TRAN
						SET @ErrorMessage = 'Mapping Station Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						return;
				END

							Insert into CategoryStationMap 
							(categoryid,stationid)
							Select categoryid,stationid
							from #tmpCatStationSave
				
					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
			
        BEGIN TRAN


				--if exists(select * from CategoryStationMap where categoryid = @categoryid and  stationid = @stationid)
				--BEGIN
						
				--		COMMIT TRAN
				--		SET  @ErrorMessage = 'Mapping Station Already Exists!'
				--		SET @ERROR_SEVERITY = ERROR_SEVERITY()
				--		SET @ERROR_STATE = ERROR_STATE()
				--		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				--		return;
				--END

				--UPDATE a
				--SET a.stationid = b.stationid
				--from CategoryStationMap a
				--INNER JOIN #tmpCatStationSave b
				--ON b.categoryid = a.categoryid
			
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		delete from CategoryStationMap where categoryid = @categoryid and stationid = @stationid
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCatStationSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlListCategoryStationSaveModel xml, 
set @xmlListCategoryStationSaveModel = '<DocumentElement>\r\n  <ListCategoryStationSaveModel>\r\n    <Action>1</Action>\r\n    <categoryid>24</categoryid>\r\n    <stationid>26</stationid>\r\n  </ListCategoryStationSaveModel>\r\n</DocumentElement>'
exec ITADMIN.CategoryStation_Save_SCS @ErrorMessage,@xmlListCategoryStationSaveModel
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)

GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountServices_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CashDiscountServices_Save]
	
    @ErrorMessage						as NVARCHAR(max) OUT,
	@xmlCashDiscountHeaderSave			as xml,
    @xmlCashDiscountDetailsSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCashDiscountHeaderSave
SELECT 
Action
,DiscountType
,CategoryId
,CompanyId
,DiscountId
,GradeId
,OperatorId
into #tmpCashDiscountHeaderSave


from openxml(@handle, '/DocumentElement/CashDiscountHeaderSave',2) with
(
Action int
,DiscountType int
,CategoryId int
,CompanyId int
,DiscountId int 
,GradeId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCashDiscountDetailsSave
SELECT 
serviceId
,Percentage
,Amount
into #tmpCashDiscountDetailsSave


from openxml(@handle, '/DocumentElement/CashDiscountDetailsSave',2) with
(
serviceId int
,Percentage decimal
,Amount decimal
)
exec sp_xml_removedocument @handle

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @OperatorId as int
declare @DiscountType as int
declare @CategoryId as int
declare @DiscountId as int
declare @GradeId as int
declare @CompanyId as int


SELECT @Action = Action
,@OperatorId = OperatorId,@CategoryId = CategoryId,@DiscountId = DiscountId,@DiscountType = DiscountType
,@GradeId = GradeId,@CompanyId = CompanyId
from #tmpCashDiscountHeaderSave

IF (@DiscountType=1 and @Action = 1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
INSERT INTO OldIPCashServiceDiscount
                      (CategoryID, CompanyID, ServiceID, GradeID, Percentage, DateTime, OperatorID, CancelDateTime)
		SELECT     CategoryID, CompanyID, ServiceID, GradeID, Percentage, DateTime, OperatorID, '12:00:00 AM' AS CancelDateTime
		FROM         IPCashServiceDiscount
		WHERE     (CategoryID = @CategoryId) AND (CompanyID = @CompanyId) AND (GradeID = @GradeId)--grade is from Class


		 Delete from IPCashServiceDiscount where CategoryID=@CategoryId and CompanyID=@CompanyId and DiscountId=@DiscountId

		 INSERT INTO IPCashServiceDiscount
                      (CategoryID, CompanyID, ServiceID, GradeID, DiscountID, Percentage, Amount, DateTime, OperatorID)
		Select @CategoryId,@CompanyId,serviceId,@GradeId,@DiscountId,Percentage,Amount,'12:01:00 AM' as DateTime,@OperatorId
					  From #tmpCashDiscountDetailsSave
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-IP Discount Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@DiscountType=2 and @Action = 1) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		Delete from OPCashServiceDiscount where categoryid =@CategoryId and companyid=@CompanyId and Discounttype=@DiscountId and Gradeid = @GradeId

					INSERT INTO OPCashServiceDiscount
                      (CategoryID,CompanyID,DiscountType,ServiceID, GradeID, Percentage, StartDateTime, OperatorID, Deleted, amount)
			   Select @CategoryId,@CompanyId,@GradeId,serviceId,@DiscountId,Percentage,GETDATE(),@OperatorId,0,Amount
			from #tmpCashDiscountDetailsSave

			--delete OPCashServiceDiscount where GradeID =4 and ServiceID in (14,18)
			--select * from OPCashServiceDiscount where GradeID =4 and ServiceID in (14,18)
---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-OP Discount Save Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCashDiscountHeaderSave
drop table #tmpCashDiscountDetailsSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
----convetion time SELECT--->> CONVERT(VARCHAR(8),GETDATE(),108)
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDisplayTable_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--select percentage,AMOUNT from OpCashServiceDiscount where companyid=1 and categoryid= 1 and gradeid=25 and serviceid= 3
--[ITADMIN].[CashDiscountDisplayTable_SCS] 1,5,1,1 - IP
--[ITADMIN].[CashDiscountDisplayTable_SCS] 2,25,1,1 - OP
CREATE PROCEDURE [ITADMIN].[CashDiscountDisplayTable_SCS]
@DiscountType as int,
@DiscountId as int,
@CompanyId as int,
@Categoryid as int

AS
BEGIN

	CREATE TABLE #TempCashDiscount(
				ServiceName varchar(250) NULL,
			    ServiceId int NULL,
				Percentage numeric NULL,
				Amount numeric NULL,

			)

if (@DiscountType=1) --NO ACCOUNT NUMBERS
begin

	
			--select ID,ServiceName as name from iPBservice where deleted=0 and ID not in (36)

			INSERT INTO #TempCashDiscount 
			(ServiceName,ServiceId)
			SELECT ServiceName,ID
			FROM iPBservice where Deleted = 0 and ID not in (36)

			Update xx set xx.Percentage = a.Percentage,xx.Amount = a.Amount
			from #TempCashDiscount xx
			INNER JOIN ipCashservicediscount a on a.ServiceID = xx.ServiceId
			 where a.DiscountID = @DiscountId and a.CompanyID = @CompanyId and a.CategoryID = @Categoryid
			and a.ServiceID in (SELECT ServiceId FROM #TempCashDiscount)
		
	
			Select case when isnull(convert(varchar(10),Percentage), '') <> ' ' then 1 ELSE 0 END as Selected,ServiceName,isnull(convert(varchar(10),Percentage), '') as Percentage,isnull(convert(varchar(10),Amount), '') as Amount,ServiceId as ServiceId from #TempCashDiscount order by ServiceId

		    Drop table #TempCashDiscount
	END

 ELSE IF (@DiscountType=2)
		BEGIN

			INSERT INTO #TempCashDiscount 
			(ServiceName,ServiceId)
			SELECT Name,ID
			FROM OPBservice where deleted=0 
		
		 Update xx set xx.Percentage = a.Percentage,xx.Amount = a.Amount
			from #TempCashDiscount xx
			INNER JOIN OpCashServiceDiscount a on a.ServiceID = xx.ServiceId
			where a.companyid = @CompanyId and a.categoryid = @Categoryid and gradeid = @DiscountId
		    and a.serviceid in (SELECT ServiceId FROM #TempCashDiscount)	

			Select case when isnull(convert(varchar(10),Percentage), '') <> ' ' then 1 ELSE 0 END as Selected,ServiceName,isnull(convert(varchar(10),Percentage), '') as Percentage,isnull(convert(varchar(10),Amount), '') as Amount,ServiceId as ServiceId from #TempCashDiscount order by ServiceId

			Drop table #TempCashDiscount
		
	END
			 
END
GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDeptWiseItem_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
--OP[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 2,1,1,25,2,81
---[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 1,1,1,8,20,0
---[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 2,1,1,25,2,0
CREATE PROCEDURE [ITADMIN].[CashDiscountDeptWiseItem_DashBoard_SCS] ---2,1,1,25,2,0
@DiscountType as int,
@CompanyId as int,
@CategoryId as int,
@DiscountId as int,
@ServiceId as int,
@DepartmentId as int
AS

BEGIN
SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT
	Declare @MasterTable as Varchar(250) 



	 IF (@DiscountType = 1)
			 BEGIN
					
					Select @MasterTable = MasterTable from ipbservice where id=@ServiceId
					--select id,mastertable from ipbservice where id=20

					IF (@ServiceId = 18)
						Begin
						 select NULL Code, NULL Name,NUll Percentage,Null Amount, NUll DepartmentId
						END
				ELSE
				    SET @SQL  = 'SELECT DISTINCT a.code AS Code, a.name as Name, b.Percentage, b.Amount,a.id as DepartmentId
					FROM dbo.' +   @MasterTable + ' a ' + N' 
					LEFT JOIN  IPCashItemDiscount AS b ON a.id = b.ItemID and + b.CompanyID = ' +  LTRIM(RTRIM(STR(@CompanyId))) + ' AND b.CategoryID = ' +  LTRIM(RTRIM(STR(@CategoryId))) + N'
				    AND b.DiscountID =' + LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + ' AND b.DepartmentId = '  + LTRIM(RTRIM(STR(@DepartmentId))) + N'
					WHERE   a.deleted = 0
					ORDER BY a.name '

					--SET @SQL  = 'SELECT DISTINCT a.code AS Code, a.name, a.id, b.Percentage, b.Amount, b.DepartmentId, 0 AS deductable
					--FROM dbo.' +   @MasterTable + ' a ' + N' 
					--LEFT OUTER JOIN  IPCashItemDiscount AS b ON a.id = b.ItemID and + b.CompanyID = ' +  LTRIM(RTRIM(STR(@CompanyId))) + ' AND b.CategoryID = ' +  LTRIM(RTRIM(STR(@CategoryId))) + N'
				 --   AND b.DiscountID =' + LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + ' AND b.DepartmentId = '  + LTRIM(RTRIM(STR(@DepartmentId))) + N'
					--WHERE   a.deleted = 0
					--ORDER BY a.name '

		     			--print     @SQL         
				EXEC sp_executesql @SQL
					--INSERT INTO #TempItemDeptWiseDiscount exec(@SQL)

			 END


	ELSE IF (@DiscountType = 2)
			BEGIN
									
			    Select @MasterTable = MasterTable from opbservice where id=@ServiceId

				
					

					SET @SQL  = 'SELECT     a.ID, a.Name, a.EmpCode AS code, b.Percentage, b.Amount, b.DepartmentID
								FROM dbo.' +   @MasterTable + ' a ' + N' 
											LEFT JOIN OPCashItemDiscount AS b ON a.ID = b.ItemID  AND (a.CategoryID IN (1, 2)) AND b.CompanyID = ' + LTRIM(RTRIM(STR(@CompanyId))) + N'
											AND b.CategoryID =' + LTRIM(RTRIM(STR(@CategoryId))) + 'AND b.GradeID = ' +  LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + N'
								WHERE      (a.Deleted = 0)  AND a.DepartmentID = ' + LTRIM(RTRIM(STR(@DepartmentId))) + N'
								ORDER BY a.ID '



			
			print  @SQL      
			--EXEC sp_executesql @SQL

			END


					--SELECT     a.ID, a.Name, a.EmpCode AS code,Isnull(convert(varchar,b.Percentage),' ' ) as Percentage,isnull(b.Amount,'0.00'), b.DepartmentID
					--			FROM        Doctor AS a 
					--						LEFT JOIN OPCashItemDiscount AS b ON a.ID = b.ItemID  AND (a.CategoryID IN (1, 2)) AND b.CompanyID = 1
					--						AND b.CategoryID =1AND b.GradeID = 25 AND b.ServiceID = 2
					--			WHERE      (a.Deleted = 0)  AND (a.DepartmentID = 81)
					--			ORDER BY a.ID 

END   

GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDeptWise_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
--OP[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 2,1,1,25,2,81
---[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 1,1,1,8,20,0
---[ITADMIN].[CashDiscountDeptWise_DashBoard_SCS] 2,1,1,25,2,0
CREATE PROCEDURE [ITADMIN].[CashDiscountDeptWise_DashBoard_SCS]--- 2,1,1,25,2,81
@DiscountType as int,
@CompanyId as int,
@CategoryId as int,
@DiscountId as int,
@ServiceId as int,
@DepartmentId as int
AS

BEGIN
SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT
	Declare @MasterTable as Varchar(250) 



	 IF (@DiscountType = 1)
			 BEGIN
					
					Select @MasterTable = MasterTable from ipbservice where id=@ServiceId
					--select id,mastertable from ipbservice where id=20

					IF (@ServiceId = 18)
						Begin
						 select NULL Code, NULL Name,NUll Percentage,Null Amount, NUll DepartmentId
						END
				ELSE
				    SET @SQL  = 'SELECT DISTINCT a.code AS Code, a.name as Name, b.Percentage, b.Amount,a.id as DepartmentId
					FROM dbo.' +   @MasterTable + ' a ' + N' 
					LEFT JOIN  IPCashItemDiscount AS b ON a.id = b.ItemID and + b.CompanyID = ' +  LTRIM(RTRIM(STR(@CompanyId))) + ' AND b.CategoryID = ' +  LTRIM(RTRIM(STR(@CategoryId))) + N'
				    AND b.DiscountID =' + LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + ' AND b.DepartmentId = '  + LTRIM(RTRIM(STR(@DepartmentId))) + N'
					WHERE   a.deleted = 0
					ORDER BY a.name '

					--SET @SQL  = 'SELECT DISTINCT a.code AS Code, a.name, a.id, b.Percentage, b.Amount, b.DepartmentId, 0 AS deductable
					--FROM dbo.' +   @MasterTable + ' a ' + N' 
					--LEFT OUTER JOIN  IPCashItemDiscount AS b ON a.id = b.ItemID and + b.CompanyID = ' +  LTRIM(RTRIM(STR(@CompanyId))) + ' AND b.CategoryID = ' +  LTRIM(RTRIM(STR(@CategoryId))) + N'
				 --   AND b.DiscountID =' + LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + ' AND b.DepartmentId = '  + LTRIM(RTRIM(STR(@DepartmentId))) + N'
					--WHERE   a.deleted = 0
					--ORDER BY a.name '

		     			--print     @SQL         
				EXEC sp_executesql @SQL
					--INSERT INTO #TempItemDeptWiseDiscount exec(@SQL)

			 END


	ELSE IF (@DiscountType = 2)
			BEGIN
									
			    Select @MasterTable = MasterTable from opbservice where id=@ServiceId

				
					

					SET @SQL  = 'SELECT     a.ID, a.Name, a.EmpCode AS code, b.Percentage, b.Amount, b.DepartmentID
								FROM        Doctor AS a 
											LEFT JOIN OPCashItemDiscount AS b ON a.ID = b.ItemID  AND (a.CategoryID IN (1, 2)) AND b.CompanyID = ' + LTRIM(RTRIM(STR(@CompanyId))) + N'
											AND b.CategoryID =' + LTRIM(RTRIM(STR(@CategoryId))) + 'AND b.GradeID = ' +  LTRIM(RTRIM(STR(@DiscountId))) + ' AND b.ServiceID = ' + LTRIM(RTRIM(STR(@ServiceId))) + N'
								WHERE      (a.Deleted = 0)  AND (a.DepartmentID = 81)
								ORDER BY a.ID '



			
			print  @SQL      
			--EXEC sp_executesql @SQL

			END


					--SELECT     a.ID, a.Name, a.EmpCode AS code,Isnull(convert(varchar,b.Percentage),' ' ) as Percentage,isnull(b.Amount,'0.00'), b.DepartmentID
					--			FROM        Doctor AS a 
					--						LEFT JOIN OPCashItemDiscount AS b ON a.ID = b.ItemID  AND (a.CategoryID IN (1, 2)) AND b.CompanyID = 1
					--						AND b.CategoryID =1AND b.GradeID = 25 AND b.ServiceID = 2
					--			WHERE      (a.Deleted = 0)  AND (a.DepartmentID = 81)
					--			ORDER BY a.ID 

END   



GO

/****** Object:  StoredProcedure [ITADMIN].[CashDiscountDepartment_DashBoardDept_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
---[ITADMIN].[CashDiscountDepartment_DashBoardDept_SCS] 2,3 
CREATE PROCEDURE [ITADMIN].[CashDiscountDepartment_DashBoardDept_SCS]-- 2,3 
@DiscountType as int,
@ServiceId as int
AS

BEGIN
SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(4000), @BedTypeID INT
	Declare @MasterTable as Varchar(250) 

			if (@DiscountType=1)
				 BEGIN
					SELECT DISTINCT Case when isnull(convert(varchar(10),c.Percentage),' ') = '' then 0  ELSE 1 END Selected
					,a.DeptCode as Code
					,a.Name as Name,isnull(convert(varchar(10),c.Percentage),' ') as Percentage
					,isnull(convert(varchar(10),c.Amount),' ') as Amount
					,b.DepartmentID AS Id
					FROM         Department AS a  
					INNER JOIN Employee AS b ON a.ID = b.DepartmentID
					LEFT JOIN IPCashDeptDiscount c on c.DepartmentID = a.ID
					WHERE     (b.CategoryID IN (1, 2))
				 END

ELSE IF (@DiscountType=2)
	BEGIN

				   Select @MasterTable = MasterTable from opbservice where id=@ServiceId

				   --select  percentage,amount from opcashServiceDiscount  where companyid=1 and categoryid= 1 and gradeid=3 and serviceid= 3
				 --  select  percentage,amount from opcashServiceDiscount  where companyid=1 and categoryid= 1 and gradeid=25 and serviceid= 2
				   SET @SQL  = 'SELECT DISTINCT 0 Selected,a.DeptCode as Code, a.Name,b.DepartmentID AS DepartmentId
					FROM         Department AS a' + N' 
								INNER JOIN ' + @MasterTable + 'AS b ON a.ID = b.DepartmentID
					WHERE     (b.Deleted = 0) '

				
				
		        ---print     @SQL         
				EXEC sp_executesql @SQL

				--SELECT DISTINCT Case when isnull(convert(varchar(10),c.Percentage),' ') = '' then 0  ELSE 1 END Selected
				--,a.DeptCode
				--,a.Name as Name,isnull(convert(varchar(5),replace(c.Percentage,0,' ')),' ') as Percentage
				--,isnull(convert(varchar(10),c.Amount),' ') as Amount
				--,b.DepartmentID AS Id
			 --   FROM   Department AS a  
				--INNER JOIN Employee AS b ON a.ID = b.DepartmentID
				--LEFT JOIN OPCashDeptDiscount c on c.DepartmentID = a.ID
				--WHERE     (b.CategoryID IN (1, 2))

	END

END


--OP

---select id,mastertable from opbservice where id=3
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelDepositSave_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [ITADMIN].[CancelDepositSave_SCS]
	
    @ErrorMessage										as NVARCHAR(max) OUT,
    @xmlCancelDepositHeaderSave							as xml,
	@xmlCancelDepositDetailsSave						as xml

    
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelDepositHeaderSave
SELECT 
Action
,IPID
,OperatorId
,CancelReasonId
into #tmpCancelDepositHeaderSave


from openxml(@handle, '/DocumentElement/CancelDepositHeaderSave',2) with
(
Action int
,IPID int
,OperatorId int
,CancelReasonId int
)
exec sp_xml_removedocument @handle
-----------------Copy-IP Tariff---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelDepositDetailsSave

select ReceiptNo,Type,ROW_NUMBER() over(order by ReceiptNo) i
into #tmpCancelDepositDetailsSave	

from openxml(@handle, '/DocumentElement/CancelDepositDetailsSave',2) with
(
ReceiptNo int,Type int
)
exec sp_xml_removedocument @handle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @IPID as int
declare @ReceiptNo as int
declare @Type as int 
declare @OperatorId as int 
declare @ReasonCancelId as int 
declare @myMaxId as int

SELECT @Action = Action,@OperatorId = OperatorId,@ReasonCancelId = CancelReasonId,@IPID = IPID
from   #tmpCancelDepositHeaderSave	

SELECT @ReceiptNo = ReceiptNo,@Type = Type
from   #tmpCancelDepositDetailsSave	

--Select Replace(Convert(varchar(11),Getdate(),106),' ','-')

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
			WHILE exists(select top 1 * from #tmpCancelDepositDetailsSave)
			BEGIN 
					SELECT top 1 @myMaxId= i,@Type = Type,@ReceiptNo = ReceiptNo from #tmpCancelDepositDetailsSave
--262158
							INSERT INTO CancelIPTransactions
										(SerialNo,IPID,ReceiptNo,Amount,Type,PaidBy,Remarks,BillNo,ModeOfPayment,bankName,BranchName
										,PayableName,ChequeDate,DateTime,ChequeNo,OperatorID,CancelledOn,CanclledBy,ReasonForCancellationId,Cancelled_Transfered)
							SELECT     a.SerialNo,a.IPID,a.ReceiptNo,a.Amount,a.Type,a.PaidBy,a.Remarks,a.BillNo,a.ModeOfPayment,a.bankName,a.BranchName
										,a.PayableName,a.ChequeDate,a.DateTime,a.ChequeNo,a.OperatorID,Getdate(),@OperatorId,@ReasonCancelId,0
							FROM        IPTransactions a
							INNER JOIN  #tmpCancelDepositDetailsSave b on b.ReceiptNo  = a.ReceiptNo
							WHERE     (a.Type = @Type) AND (a.ReceiptNo = @ReceiptNo) AND (a.IPID = @IPID) AND b.i = @myMaxId


							--Select @Rcpt = ReceiptNo,@Typ = Type from #tmpCancelDepositDetailsSave where i = @myMaxId

							delete from IPTransactions where ReceiptNo=@ReceiptNo and Type=@Type and  IPID=@IPID

							delete from #tmpCancelDepositDetailsSave where i= @myMaxId
		  END

		--  select * from IPTransactions
		--select * from CancelIPTransactions
						
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
				

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = 'Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCancelDepositHeaderSave
drop table #tmpCancelDepositDetailsSave	


set xact_abort OFF

END

/*
declare @xmlChangeTransferDepositTypeHeaderSave xml, @xmlChangeTypeDetailsSave xml
declare @ErrorMessage nvarchar(max)
set @xmlChangeTransferDepositTypeHeaderSave = '<DocumentElement>\r\n  <ChangeTransferDepositTypeHeaderSave>\r\n    <Action>1</Action>\r\n    <IPID>62336</IPID>\r\n    <OperatorId>139</OperatorId>\r\n    <CancelReasonId>1</CancelReasonId>\r\n  </ChangeTransferDepositTypeHeaderSave>\r\n</DocumentElement>'
set @xmlChangeTypeDetailsSave = '<DocumentElement>\r\n  <ChangeTypeDetailsSave>\r\n    <ReceiptNo>221980</ReceiptNo>\r\n    <Type>2</Type>\r\n    <OldTypeId>1</OldTypeId>\r\n  </ChangeTypeDetailsSave>\r\n</DocumentElement>'
exec ITADMIN.ChangeTransferDepositTypeSave_SCS @ErrorMessage,@xmlChangeTransferDepositTypeHeaderSave, @xmlChangeTypeDetailsSave
print (@ErrorMessage)

*/  





GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[CancelBillReason_View_SCS] --95-- 2--22--22-- 2-- 0
@CancelbillId as int
AS

BEGIN

	SELECT a.Name
	,case when a.Reissue = 1 then 'Yes' else ' ' END  as ReIssue 
	,isnull(a.REISSUE,0) as ReissueId,a.ID as CancelbillId
	from cancelbillreason a where a.ID = @CancelbillId

END
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





Create PROCEDURE [ITADMIN].[CancelBillReason_Save_SCS]
	
    @ErrorMessage					   as NVARCHAR(max) OUT,
    @xmlCancelBillReasonSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelBillReasonSave
SELECT 
Action
,CancelBillId
,Name
,ReissueId
,OperatorId
into #tmpCancelBillReasonSave

from openxml(@handle, '/DocumentElement/CancelBillReasonSave',2) with
(
Action int
,CancelBillId int
,Name varchar(250)
,ReissueId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @CancelBillId as int 
declare @Name as varchar(250)
declare @OperatorId as int
declare @ReissueId as int


select @Action = Action,@CancelBillId = CancelBillId,@Name = Name, @CancelBillId = CancelBillId,@OperatorId = OperatorId,@ReissueId = ReissueId
from   #tmpCancelBillReasonSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(select * from cancelbillreason where Name = @Name)
			begin
		COMMIT TRAN
		SET @ErrorMessage = 'Cancel Bill Reason Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

			  Insert into cancelbillreason(Name,Type,STARTDATETIME,ENDDATETIME,DELETED,OPERATORID,REISSUE)
			  Select Name,1,GETDATE(),NULL,0,@OperatorId,ReissueId
			  from #tmpCancelBillReasonSave

			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
				
				Update cancelbillreason set Name = @Name,REISSUE = @ReissueId,OPERATORID =  @OperatorId where ID = @CancelBillId

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		Update cancelbillreason set deleted =1,ENDDATETIME=getdate(),OperatorID = @OperatorId where ID = @CancelBillId
		

        COMMIT TRAN

        SET	@ErrorMessage = '100-Cancel Bill Reason Successfully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCancelBillReasonSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
---select EmployeeType from employee
GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillReason_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[CancelBillReason_DashBoard_SCS] --95-- 2--22--22-- 2-- 0
AS

BEGIN

	SELECT a.Name
	,case when a.Reissue = 1 then 'Yes' else ' ' END  as ReIssue 
		,isnull(a.REISSUE,0) as ReissueId,a.ID as CancelbillId
	from cancelbillreason a


END



GO

/****** Object:  StoredProcedure [ITADMIN].[CancelBillMapping_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[CancelBillMapping_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlCancelTypeMappingSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlCancelTypeMappingSave
SELECT 
Action
,Id
,MainReasonId
,Code
,Name
,Deleted
,OperatorId
into #tmpCancelTypeMappingSave

from openxml(@handle, '/DocumentElement/CancelTypeMappingSave',2) with
(
Action int
,Id int
,MainReasonId int
,Code varchar(250)
,Name varchar(250)
,Deleted int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
--declare @MaxTariffId as int
declare @Name as varchar(250)
declare @OperatorId as int
declare @Code as varchar(250)
declare @Del as int


select @Action = Action,@Id = Id,@Name  = Name,@OperatorId = OperatorId,@Code = Code,@Del = Deleted
from   #tmpCancelTypeMappingSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	 --  	if exists(select * from Occupation where Name = @Name)
		--	begin
		--COMMIT TRAN
		--SET       @ErrorMessage = 'Occupation Name Already Exists!'
		--SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--SET @ERROR_STATE = ERROR_STATE()
		--RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--return;
		--end

	 ---- Select @MaxTariffId = max(Id) + 1 from Tariff
	-- select * from Location
	  Insert into dbo.CANCELBILLREASONDetails(MainReasonId ,Code,Name,Type, StartDateTime,Deleted,Operatorid) 
				Select  MainReasonId,Code,Name,1,GETDATE(),Deleted,OperatorId
				from #tmpCancelTypeMappingSave

			select * from CANCELBILLREASONDetails
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus
		select * from CANCELBILLREASONDetails
				Update  CANCELBILLREASONDetails set Code =@Code,Name = @Name,StartDateTime = Getdate(),Deleted =@Del,Operatorid =@OperatorId		
				where Id =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpCancelTypeMappingSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[BillPrefix_View_SCS]-- 2--22--22-- 2-- 0
@StationId as int,
@Name as varchar(250),
@BillType as varchar(250)
AS

BEGIN
			SELECT  isnull(a.Name,'') as Name,a.Description,isnull(b.Name,'') as StationName,a.Stationid as StationId,Case when a.Description = 'Cash Bill' then 1 else 2 END as BillTypeId
			from OPBillType a
			LEFT JOIN dbo.STATION b on b.ID = a.Stationid where StationId = @StationId and a.Name = @Name
			and a.deleted = 0 
			 and a.Description = @BillType
END
GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[BillPrefix_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlBillPrefixSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlBillPrefixSave
SELECT 
Action
,StationId
,Prefix
,BillTypeName
,BillTypeId 
,OperatorId
into #tmpBillPrefixSave

from openxml(@handle, '/DocumentElement/BillPrefixSave',2) with
(
Action int
,StationId int
,Prefix varchar(250)
,BillTypeName varchar(250)
,BillTypeId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	    as int
declare @OperatorId as int
declare @StationId  as int
declare @BillTypeName as varchar(250) 
declare @BillTypeId int 
declare @Prefix as varchar(250)

select @Action = Action,@OperatorId = OperatorId,@StationId = StationId, @BillTypeName = BillTypeName,@BillTypeId = BillTypeId,@Prefix = Prefix
from   #tmpBillPrefixSave	


	--CREATE TABLE #TempOrderMaxId(
	--			maxid int NULL,
	--		    tableid int NULL,
	--			stationid int NULL,

	--		)


IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   	if exists(SELECT a.Name AS Station
					FROM         dbo.OPBillType AS a 
					INNER JOIN    dbo.Station AS b ON a.Stationid = b.ID
					WHERE     a.Stationid <> @StationId AND  LTRIM(RTRIM(LOWER(a.Name)))  = LTRIM(RTRIM(LOWER(@Prefix))) )
		begin
		COMMIT TRAN
		SET @ErrorMessage = 'Bill Prefix Already Exists!'
		SET @ERROR_SEVERITY = ERROR_SEVERITY()
		SET @ERROR_STATE = ERROR_STATE()
		RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		return;
		end

		ELSE
			Begin
						Select * into #TempOrderMaxId	
						From dbo.OrderMaxId where tableid in (1,6,2,9,4,43,40,3) and stationid = @StationId 

						delete OrderMaxId where tableid in (1,6,2,9,4,43,40,3) and stationid = @StationId 
		
						Insert into OrderMaxId(MaxId,TableId,StationId)
						Select maxid,tableid,stationid 
						from #TempOrderMaxId
		
						drop table #TempOrderMaxId	

						Insert into dbo.OPBillType(ID,Name,Description,isLocked,StartDatetime,EndDatetime,Deleted,BillType,CurrentNo,StationId,OperatorId) 
										Select  BillTypeId,Prefix,BillTypeName,0,Getdate(),null,0,@BillTypeId,0,StationId,@OperatorId
										FROM #tmpBillPrefixSave

		
		END
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
		---For Checking the Updates
				
		--INSERT INTO CanOPBillType
  --                  (Id, Name, Description, IsLocked, StartDateTime, EndDateTime, deleted, billtype, currentno, stationId, OperatorId, ModifiedOperator, ModifiedDatetime)
		--SELECT       id, Name, Description, islocked, startdatetime, enddatetime, deleted, billtype, currentno, Stationid, OperatorId,@OperatorId, GETDATE()
		--FROM         OPBillType
		--WHERE       (Stationid = @StationId) AND (billtype = @BillTypeId)
	
		--Update OPBillType set Name = @Prefix where StationId= @StationId and billType= @BillTypeId and Description = @BillTypeName
				
---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpBillPrefixSave

set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7

--Select CODE + '-' + NAME as NameFld ,ID as IdFld from COMPANY where  DELETED=0 AND CATEGORYID=12


GO

/****** Object:  StoredProcedure [ITADMIN].[BillPrefix_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[BillPrefix_DashBoard_SCS]-- 2--22--22-- 2-- 0
AS

BEGIN
			SELECT     row_number() over(order by b.Name,a.Name) as SNo,b.Name AS Station, a.Description AS Type, a.Name AS BillPrefix,b.ID AS StationId
			FROM       OPBillType AS a 
					   INNER JOIN dbo.Station AS b ON a.Stationid = b.ID
					    where a.deleted = 0 
			ORDER BY Station, BillPrefix
END

GO

/****** Object:  StoredProcedure [ITADMIN].[BedType_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[BedType_View_SCS]-- 1--1-- 0
@Id as int
AS

BEGIN

		SELECT Name,Code,Label,Type as TypeId,(Case when Type = 1 then 'Normal' ELSE 'ICU' END) as TypeName,ID as BedTypeId
		FROM      dbo.BedType
				where Id = @Id 
		

END





GO

/****** Object:  StoredProcedure [ITADMIN].[BedType_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[BedType_Save_SCS]
	
    @ErrorMessage			   as NVARCHAR(max) OUT,
    @xmlBedTypeSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlBedTypeSave
SELECT 
Action
,Id
,Name
,Type
,Label
,Code
,OperatorId
into #tmpBedTypeSave

from openxml(@handle, '/DocumentElement/BedTypeSave',2) with
(
Action int
,Id int
,Name varchar(250)
,Type int
,Label varchar(250)
,Code varchar(250)
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @Id as int
declare @Name as varchar(250)
declare @Code as varchar(250)
declare @Label as varchar(250)
declare @OperatorId as int
declare @Type as int


select @Action = Action,@Id = Id,@Name = Name,@Code = Code,@Label = Label,@OperatorId = OperatorId,@Type = Type
from   #tmpBedTypeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   		if exists(select * from dbo.BedType where Name = @Name)
				begin
			COMMIT TRAN
			SET       @ErrorMessage = 'BedType Name Already Exists!'
			SET @ERROR_SEVERITY = ERROR_SEVERITY()
			SET @ERROR_STATE = ERROR_STATE()
			RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
			return;
			end

				Insert into dbo.BedType(Name,startdatetime,enddatetime,type,deleted,Label,Code,ArabicCode) 
				SELECT @Name,Getdate(),null,Type,0,Label,Code,'"'
				from #tmpBedTypeSave

				select * from BedType
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		----sp_Help  MaritalStatus

				insert into dbo.OldBedType(Id,Name,StartDateTime,deleted,endDateTime,Label,Type,ArabicName,Code,ArabicCode,OperatorId,ModifiedOperatorId,ModifiedDateTime)
				select Id,Name,StartDateTime,deleted,endDateTime,Label,Type,ArabicName,Code,ArabicCode,OperatorId,@OperatorId,getdate() 
				from dbo.bedtype where id=@Id

				Update dbo.BedType set name = @Name,Type=@Type,Label=@Label,Code=@Code,ArabicCode='"' where id=@Id


				--Update  StationType set Name =upper(@Name),ModifiedBy = @OperatorId,ModifiedDateTime = Getdate()			
				--where Id =@Id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN

	     update dbo.BedType  set deleted=1,enddatetime=getdate(),OperatorId = @OperatorId where id=@Id
		
		--Update StationType set deleted =1,ModifiedDateTime=getdate(),OperatorID = @OperatorId where id = @Id
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpBedTypeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[BEdType_DashBoard]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[BEdType_DashBoard]-- 0

AS

BEGIN
		 
		
			Select row_number() over (order by Name asc) as slno,Name,Id
			from dbo.BedType where Deleted=0 order by Name asc

END


GO

/****** Object:  StoredProcedure [ITADMIN].[BedType]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[BedType]-- 0

AS

BEGIN
		 
		
			Select row_number() over (order by Name desc) as slno,Name,Id
			from BedType where Deleted=0 order by Name desc

END


GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeonCharge_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[AsstSurgeonCharge_View_SCS] --411 --6--6 --6-- 0
@Id as int
As
BEGIN 


			SELECT   
							a.Employeeid as Employeeid
							,b.empcode + ' - ' + convert(nvarchar(20),b.Name) as EmployeeName
							,Case when convert(varchar(20),a.Typeid) = 1 then 'Surgeon'
							when convert(varchar(20),a.Typeid) = 2 then 'Anaesthesist'
							when convert(varchar(20),a.Typeid) = 3 then 'Asst.Surgeon'
							when convert(varchar(20),a.Typeid) = 4 then 'Scrub Nurse' END as TypeName
							,a.Typeid
			FROM         OTEmployeeDoctor a
			LEFT JOIN EMPLOYEE  b on b.Id =  a.Employeeid
			--LEFT JOIN EMPLOYEE  b on convert(varchar(20),b.EmployeeID) =  Convert(varchar(20),a.Employeeid)
			WHERE     (IDD = @Id)



END
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[AsstSurgeon_View_SCS]-- 0
@CategoryId as int,
@ORNoId as int,
@SlNo as int
AS

BEGIN

 	  
		SELECT      a.Name AS category, b.Name AS OtNo, c.Percentage
		,Case when c.SlNo = 1 then 'Primary' when c.SlNo = 0 then 'Secondary' END as SLNoValue
		,  a.Id AS categoryId,b.ID AS OtId,c.SlNo
		FROM         Tariff AS a 
					INNER JOIN P_AsstSurgeon AS c ON a.Id = c.CategoryID 
					INNER JOIN OTNo AS b ON c.OTIDNo = b.ID
					Where a.Id = @CategoryId  and b.ID = @ORNoId and c.SlNo = @SlNo
END
GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[AsstSurgeon_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlAsstSurgeonSaveModel			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlAsstSurgeonSaveModel
SELECT 
Action
,CategoryId
,Percentage
,OTIDNo
,SlnoId
,OperatorId

into #tmpAsstSurgeonSave


from openxml(@handle, '/DocumentElement/AsstSurgeonSaveModel',2) with
(
Action int
,CategoryId int
,Percentage decimal
,OTIDNo int
,SlnoId int
,OperatorId int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @MaxId as int
declare @CategoryId as int
declare @OTIDNo as int
declare @SlnoId as int
declare @OperatorId as int
declare @Percentage as numeric

select @Action = Action,@CategoryId = CategoryId,@OTIDNo = OTIDNo,@SlnoId = SlnoId,@OperatorId = OperatorId,@Percentage = Percentage
from   #tmpAsstSurgeonSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
			IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Already Exists!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
						end

				Select @MaxId =  max(id) from p_AsstSurgeon
				
			INSERT INTO P_AsstSurgeon
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)

				SELECT 	@MaxId,CategoryId,Percentage,Getdate(),NULL,0,OTIDNo,OperatorId,SlnoId	
						FROM #tmpAsstSurgeonSave


					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
	--	end
			
					INSERT INTO OLDP_AsstSurgeon
                      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
					SELECT  ID, CategoryID, Percentage, StartDateTime,Getdate(), Deleted, OTIDNo,@OperatorId,SlNo
					FROM    P_AsstSurgeon
					WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

					UPDATE    P_AsstSurgeon
					SET       Percentage = @Percentage, StartDateTime = Getdate(), Operatorid = @OperatorId
					WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		INSERT INTO OLDP_AsstSurgeon
        (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
		SELECT     ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo,@OperatorId, SlNo
		FROM         P_AsstSurgeon
		WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

		delete from p_AsstSurgeon where CategoryId=@CategoryId and OTIDNo=@OTIDNo and Slno=@SlnoId

		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpAsstSurgeonSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--Tariff
--Select Name as NameFld ,Id as IdFld from TARIFF where  Deleted=0
--ORNO

GO

/****** Object:  StoredProcedure [ITADMIN].[AsstSurgeon_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[AsstSurgeon_DashBoard_SCS]-- 0

AS

BEGIN

 	  
		SELECT      a.Name AS category, b.Name AS OtNo, c.Percentage
		,Case when c.SlNo = 1 then 'Primary' when c.SlNo = 0 then 'Secondary' END as SLNoValue
		,  a.Id AS categoryId,b.ID AS OtId,c.SlNo
		FROM         Tariff AS a 
					INNER JOIN P_AsstSurgeon AS c ON a.Id = c.CategoryID 
					INNER JOIN OTNo AS b ON c.OTIDNo = b.ID
		

END
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaView_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[AnesthesiaView_DashBoard_SCS]-- 0
@Id as int
AS

BEGIN
		 
		SELECT     
					Id
					,code + ' - ' + name AS NAME
					,costprice
					,billingtype
		FROM         Anaesthesia
		WHERE     (deleted = 0) and id = @Id
		ORDER BY name

END


--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85

GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[AnesthesiaCharges_View_SCS]-- 0
@CategoryId as int, --4
@OTID as int, -- 1
@ServiceId as int -- 85
AS

BEGIN
		 
		SELECT	    a.Name AS category, b.name AS ANNAme, d.Name AS OT, c.Percentage, a.Id AS categoryId,b.id AS AnId,d.ID AS OTID
		FROM        Tariff AS a 
			INNER JOIN P_Anaesthesia AS c ON a.Id = c.CategoryID 
			INNER JOIN Anaesthesia AS b ON c.ServiceID = b.id 
			INNER JOIN OTNo AS d ON c.OTID = d.ID
			where (c.CategoryID = @CategoryId) AND (c.OTID = @OTID) AND (c.ServiceID = @ServiceId)

END
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_SCS_Save]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [ITADMIN].[AnesthesiaCharges_SCS_Save]
	
    @ErrorMessage				       as NVARCHAR(max) OUT,
    @xmlAnesthesiaChargeSave	       as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlAnesthesiaChargeSave
SELECT 
Action
,OperatorId
,CategoryId
,OTID
,ServiceID
,Percentage

into #tmpAnesthesiaChargeSave


from openxml(@handle, '/DocumentElement/AnesthesiaChargeSave',2) with
(
Action int
,OperatorId  int
,CategoryId int
,OTID int
,ServiceID int
,Percentage decimal
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @CategoryId as int
declare @OTID as int
declare @ServiceID as int
declare @MaxId as int
declare @Percentage as int
declare @OperatorId as int

select @Action = Action,@CategoryId = CategoryId,@OTID = OTID,@ServiceID = ServiceID,@OperatorId = OperatorId,@Percentage = Percentage
from   #tmpAnesthesiaChargeSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	    if exists(select * from p_anaesthesia where  CategoryID =@CategoryId and  ServiceID = @ServiceID and  OTID =@OTID )
					begin
				COMMIT TRAN
				SET       @ErrorMessage = 'Already Exists!'
				SET @ERROR_SEVERITY = ERROR_SEVERITY()
				SET @ERROR_STATE = ERROR_STATE()
				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
		end


		Select @MaxId = max(id) from p_anaesthesia

		INSERT INTO P_Anaesthesia
                      (ID, CategoryID, ServiceID, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid, OTID)
					  SELECT @MaxId, @CategoryId,@ServiceID,@Percentage,Getdate(),NULL,0,@OperatorId,@OTID
					  FROM #tmpAnesthesiaChargeSave
		
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		
					 --   IF exists(select * from p_anaesthesia where  CategoryID =@CategoryId and  ServiceID = @ServiceID and  OTID =@OTID )
						--		begin
						--	COMMIT TRAN
						--	SET       @ErrorMessage = 'Already Exists!'
						--	SET @ERROR_SEVERITY = ERROR_SEVERITY()
						--	SET @ERROR_STATE = ERROR_STATE()
						--	RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
						--	return;
						--END

		   			INSERT INTO OLDP_Anaesthesia(ID, CategoryID, ServiceID, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid, OTID)
						SELECT     ID, CategoryID, ServiceID, Percentage, StartDateTime, Getdate(), Deleted,Operatorid, OTID
						FROM         P_Anaesthesia
						WHERE     (CategoryID = @CategoryId) AND (OTID = @OTID) AND (ServiceID = @ServiceID)



						UPDATE    P_Anaesthesia
						SET      Percentage = @Percentage, StartDateTime = Getdate()
						WHERE     (CategoryID = @CategoryId) AND (OTID = @OTID) AND (ServiceID = @ServiceID)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
			INSERT INTO OLDP_Anaesthesia(ID, CategoryID, ServiceID, Percentage, StartDateTime, EndDateTime, Deleted, Operatorid, OTID)
						SELECT     ID, CategoryID, ServiceID, Percentage, StartDateTime, Getdate(), Deleted,Operatorid, OTID
						FROM         P_Anaesthesia
						WHERE     (CategoryID = @CategoryId) AND (OTID = @OTID) AND (ServiceID = @ServiceID)

						delete from p_anaesthesia where  CategoryId = @CategoryId and  OTID = @OTID and  serviceId = @ServiceID
		
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Succefully Deleted.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpAnesthesiaChargeSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlPackageVisitSave xml, 
set @xmlPackageVisitSave = '<DocumentElement>\r\n  <PackageVisitSave>\r\n    <Action>1</Action>\r\n    <TestId>3271</TestId>\r\n    <NoOfDays>1</NoOfDays>\r\n    <NoOfVisits>2</NoOfVisits>\r\n    <ServiceId>7</ServiceId>\r\n  </PackageVisitSave>\r\n</DocumentElement>'
exec ITADMIN.PackageVisit_Save @ErrorMessage,@xmlPackageVisitSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[AnesthesiaCharges_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
Create PROCEDURE [ITADMIN].[AnesthesiaCharges_DashBoard_SCS]-- 0

AS

BEGIN
		 
		SELECT	    a.Name AS category, b.name AS ANNAme, d.Name AS OT, c.Percentage, a.Id AS categoryId,b.id AS AnId,d.ID AS OTID
		FROM        Tariff AS a 
			INNER JOIN P_Anaesthesia AS c ON a.Id = c.CategoryID 
			INNER JOIN Anaesthesia AS b ON c.ServiceID = b.id 
			INNER JOIN OTNo AS d ON c.OTID = d.ID
			WHERE     (b.billingtype = 2) AND (b.deleted = 0)

END


GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_View_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ITADMIN].[Anesthesia__View_SCS] 85
Create PROCEDURE [ITADMIN].[Anesthesia_View_SCS]-- 0
@Id as int
AS

BEGIN
		 --SP_HELP Anaesthesia
		SELECT     
					Id
					,code as Code
					,name AS Name
					,costprice
					,billingtype
		FROM         Anaesthesia
		WHERE     (deleted = 0) and id = @Id
		ORDER BY name

END


--Select Id,0 as SlNo,CODE + ' - '+ Name AS NAME from anaesthesia where Deleted=0 order by Name
--select * from anaesthesia where id=85

GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_DashBoard_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'ENDOSCOPY')
--BEGIN
--    EXEC('CREATE SCHEMA ENDOSCOPY')
--END
--select  *from o_speciality where RequestID = 10432323
-- [ITADMIN].[PackageVisit_DashBoard_SCS] 3
--exec [ENDO].[RequisitionDashboard_SCS] -1,'14-Feb-2015','14-Feb-2015'
CREATE PROCEDURE [ITADMIN].[Anesthesia_DashBoard_SCS]-- 0

AS

BEGIN
		 
		SELECT     row_number() over(order by Code) as SNo, code + ' - ' + name AS NAME,Id
		FROM         Anaesthesia
		WHERE     (deleted = 0)
		ORDER BY name

END


GO

/****** Object:  StoredProcedure [ITADMIN].[Anesthesia_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[Anesthesia_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlAnesthesiaSave	    as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlAnesthesiaSave
SELECT 
Action
,OperatorId
,Name
,Code
,BillingType
,costprice
,Id
into #tmpAnesthesiaSave


from openxml(@handle, '/DocumentElement/AnesthesiaSave',2) with
(
Action int
,OperatorId int
,Name varchar(250)
,Code varchar(250)
,BillingType int
,costprice numeric
,Id int
)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action	  as int
declare @ID as int
declare @OperatorId as int

select @Action = Action,@ID = Id,@OperatorId = OperatorId
from   #tmpAnesthesiaSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
		
			INSERT INTO anaesthesia
                      (Name, costprice, startdatetime, enddatetime,Deleted,Code,BillingType,ArabicName,ArabicCode,ModifiedBy)
				Select Name,costprice,getdate(),NULL,0,Code,BillingType,'"','"',OperatorId
			from #tmpAnesthesiaSave

					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN
			
			--Update anaesthesia set name = 'GENERAL ANESTHESIA',costprice=15,code='FMORDZ9999',ModifiedBy = 1412,BillingType=2 ,ArabicName='"',ArabicCode='"' where id=85
			--sp_HElp anaesthesia
			UPDATE a
			SET a.name = b.Name
				,a.ModifiedBy = b.OperatorId
				,a.BillingType = b.BillingType
				,a.costprice = b.costprice
				,a.ArabicName = '"'
				,a.ArabicCode = '"'		
			from Anaesthesia a
			INNER JOIN #tmpAnesthesiaSave b
			ON b.Id = a.Id
			WHERE a.Id = @ID
	

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Error Contact IT Administrator.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpAnesthesiaSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
GO

/****** Object:  StoredProcedure [ITADMIN].[AccessOPRevisitApproval_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [ITADMIN].[AccessOPRevisitApproval_Save_SCS]
	
    @ErrorMessage				as NVARCHAR(max) OUT,
    @xmlAccessIdSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlAccessIdSave
SELECT 
Action
,AccessId

into #tmpAccessIdSave


from openxml(@handle, '/DocumentElement/AccessIdSave',2) with
(
Action int
,AccessId int

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @AccessId as int
select @Action = Action,@AccessId =  AccessId
from   #tmpAccessIdSave	

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN
				
			IF exists(select * from OPRevistApproval_Allowed_Users WHERE EmployeeID = @AccessId)
				begin
						COMMIT TRAN
						SET  @ErrorMessage = 'Employee Already Access!'
						SET @ERROR_SEVERITY = ERROR_SEVERITY()
						SET @ERROR_STATE = ERROR_STATE()
						RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
				return;
						end


						--select * From OPRevistApproval_Allowed_Users

			INSERT INTO OPRevistApproval_Allowed_Users
                      (EmployeeID)
			SELECT 	AccessId	
						FROM #tmpAccessIdSave


					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
	--	end
			
					--INSERT INTO OLDP_AsstSurgeon
     --                 (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
					--SELECT  ID, CategoryID, Percentage, StartDateTime,Getdate(), Deleted, OTIDNo,@OperatorId,SlNo
					--FROM    P_AsstSurgeon
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

					--UPDATE    P_AsstSurgeon
					--SET       Percentage = @Percentage, StartDateTime = Getdate(), Operatorid = @OperatorId
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN
		
		--INSERT INTO OLDP_AsstSurgeon
  --      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
		--SELECT     ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo,@OperatorId, SlNo
		--FROM         P_AsstSurgeon
		--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

		--delete from p_AsstSurgeon where CategoryId=@CategoryId and OTIDNo=@OTIDNo and Slno=@SlnoId

		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpAccessIdSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--Tariff
--Select Name as NameFld ,Id as IdFld from TARIFF where  Deleted=0
--ORNO

GO

/****** Object:  StoredProcedure [ITADMIN].[AccessCancelApproval_Save_SCS]    Script Date: 12/5/2018 1:39:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [ITADMIN].[AccessCancelApproval_Save_SCS]
	
    @ErrorMessage								as NVARCHAR(max) OUT,
    @xmlAccessCancelApproverIdSave			as xml
	
 
AS
BEGIN

SET NOCOUNT ON;
set xact_abort on

DECLARE @ERROR_SEVERITY AS INT 
DECLARE @ERROR_STATE AS INT 
DECLARE @handle      AS INT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EXEC sp_xml_preparedocument @handle OUTPUT, @xmlAccessCancelApproverIdSave
SELECT 
Action
,AccessId

into #tmpAccessIdSave


from openxml(@handle, '/DocumentElement/AccessCancelApproverIdSave',2) with
(
Action int
,AccessId int

)
exec sp_xml_removedocument @handle

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
declare @Action as int
declare @AccessId as int
declare @EmpName as varchar(150)
declare @EmployeeId as varchar(250)



			select @Action = Action,@AccessId =  AccessId
			from   #tmpAccessIdSave	


			Select @EmpName = a.Name,@EmployeeId = a.EmployeeId from Employee  a where a.ID = @AccessId

IF (@Action=1) -- addnew
BEGIN
   BEGIN TRY 
       BEGIN TRAN

	   --select * from CANOPBILLAPPROVER
				
			IF exists(select * from CANOPBILLAPPROVER WHERE EmployeeId = @EmployeeId)
				begin
						 UPDATE CANOPBILLAPPROVER  set Deleted =1 where EmployeeID=@EmployeeId
						end

						--select * From CANOPBILLAPPROVER
					
					

			INSERT INTO CANOPBILLAPPROVER
                      (EmployeeID,EmployeeName,Deleted)
			SELECT 	@EmployeeId,@EmpName,0
						FROM #tmpAccessIdSave


					
--------------------------------------------			
COMMIT TRAN

    SET	@ErrorMessage = '100-Save Successfully.'		
    SET @ERROR_SEVERITY = ERROR_SEVERITY()
    SET @ERROR_STATE = ERROR_STATE()		
    RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 
    
END -- End Saving...

ELSE IF (@Action=2) -- EDIT
BEGIN	

    BEGIN TRY 
    
        BEGIN TRAN

		--IF exists(select * from P_AsstSurgeon WHERE (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId) )
		--		begin
		--				COMMIT TRAN
		--				SET  @ErrorMessage = 'Already Exists!'
		--				SET @ERROR_SEVERITY = ERROR_SEVERITY()
		--				SET @ERROR_STATE = ERROR_STATE()
		--				RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);        
		--		return;
	--	end
			
					--INSERT INTO OLDP_AsstSurgeon
     --                 (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
					--SELECT  ID, CategoryID, Percentage, StartDateTime,Getdate(), Deleted, OTIDNo,@OperatorId,SlNo
					--FROM    P_AsstSurgeon
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

					--UPDATE    P_AsstSurgeon
					--SET       Percentage = @Percentage, StartDateTime = Getdate(), Operatorid = @OperatorId
					--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

---------------------------------			
        COMMIT TRAN

        SET	@ErrorMessage = '100-Updated Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH;       

END -- End Editing...

ELSE IF (@Action=3) -- DELETE (cancel)
BEGIN

   BEGIN TRY 
       BEGIN TRAN

	   UPDATE CANOPBILLAPPROVER  set Deleted =1 where EmployeeID=@EmployeeId
		
		--INSERT INTO OLDP_AsstSurgeon
  --      (ID, CategoryID, Percentage, StartDateTime, EndDateTime, Deleted, OTIDNo, Operatorid, SlNo)
		--SELECT     ID, CategoryID, Percentage, StartDateTime, GETDATE(), Deleted, OTIDNo,@OperatorId, SlNo
		--FROM         P_AsstSurgeon
		--WHERE     (CategoryID = @CategoryId) AND (OTIDNo = @OTIDNo) AND (SlNo = @SlnoId)

		--delete from p_AsstSurgeon where CategoryId=@CategoryId and OTIDNo=@OTIDNo and Slno=@SlnoId

		--Update EmpContract set deleted =1,ModifiedDtTm=getdate(),OperatorID = @OperatorId where id = @Id
		
		
		--UPDATE anaesthesia  set deleted=1,modifiedby=@OperatorId,enddatetime=getdate() where id=@ID
		
        COMMIT TRAN

        SET	@ErrorMessage = '100-Deleted Successfully.'		
        SET @ERROR_SEVERITY = ERROR_SEVERITY()
        SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);       

    END TRY
    BEGIN CATCH                
	    SET	@ErrorMessage = N'There was an error: Ln: ' + cast(ERROR_LINE() as nvarchar(2048)) + N' Message: ' + ERROR_MESSAGE();		
	    SET @ERROR_SEVERITY = ERROR_SEVERITY()
	    SET @ERROR_STATE = ERROR_STATE()		
        RAISERROR (@ErrorMessage, @ERROR_SEVERITY, @ERROR_STATE);    
    END CATCH; 


END

drop table #tmpAccessIdSave


set xact_abort OFF

END

/*
declare @xmlRegularEmployeeDetails as xml
declare @xmlScientificAchievementTable as xml
declare @xmlTrainingDetailsTable as xml
declare @xmlFamilyDetailsTable as xml
declare @xmlRelationShipDetailsTable as xml
declare @xmlPreviousExperienceDetailsTable as xml
declare @xmlQualificationDetailsTable as xml

declare @xmlAnesthesiaSave xml, 
set @xmlAnesthesiaSave = '<DocumentElement>\r\n  <AnesthesiaSave>\r\n    <Action>2</Action>\r\n    <OperatorId>139</OperatorId>\r\n    <Name>NO ANAESTHESIA</Name>\r\n    <Code>&lt;NONE&gt;</Code>\r\n    <BillingType>1</BillingType>\r\n    <costprice>15</costprice>\r\n  </AnesthesiaSave>\r\n</DocumentElement>'
exec ITADMIN.Anesthesia_Save_SCS @ErrorMessage,@xmlAnesthesiaSave
print (@ErrorMessage)

*/


--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(2453, 3,1,getdate(),null,0,3)

--UPDATE    OPRevisitPackages
--SET              NoOfdays = 2, NoOfVisits = 10
--WHERE     (Testid = 1803) AND (Serviceid = 3)

--insert into OpRevisitpackages(testid,NoOfDays,NoOfVisits,startdatetime,enddatetime,deleted,serviceid)  values(3267, 3,1,getdate(),null,0,7)


--update OpRevisitPackages set NoOfDays = 5, NoOfVisits=120 where TestId=3279 and ServiceId =7
--Tariff
--Select Name as NameFld ,Id as IdFld from TARIFF where  Deleted=0
--ORNO

GO


